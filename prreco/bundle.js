/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 6406:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(76306);
var tryToString = __webpack_require__(30821);
var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};

/***/ }),

/***/ 72126:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isConstructor = __webpack_require__(60116);
var tryToString = __webpack_require__(30821);
var $TypeError = TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a constructor');
};

/***/ }),

/***/ 21892:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(76306);
var $String = String;
var $TypeError = TypeError;
module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};

/***/ }),

/***/ 9360:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(65373);
var create = __webpack_require__(1578);
var defineProperty = (__webpack_require__(45070).f);
var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ 59607:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var charAt = (__webpack_require__(36726).charAt);

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

/***/ }),

/***/ 6441:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototypeOf = __webpack_require__(77240);
var $TypeError = TypeError;
module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw $TypeError('Incorrect invocation');
};

/***/ }),

/***/ 52943:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(74194);
var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};

/***/ }),

/***/ 77942:
/***/ ((module) => {

// eslint-disable-next-line es/no-typed-arrays -- safe
module.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

/***/ }),

/***/ 15158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
var fails = __webpack_require__(45200);
module.exports = fails(function () {
  if (typeof ArrayBuffer == 'function') {
    var buffer = new ArrayBuffer(8);
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', {
      value: 8
    });
  }
});

/***/ }),

/***/ 82094:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var NATIVE_ARRAY_BUFFER = __webpack_require__(77942);
var DESCRIPTORS = __webpack_require__(9811);
var global = __webpack_require__(52586);
var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var hasOwn = __webpack_require__(81285);
var classof = __webpack_require__(84368);
var tryToString = __webpack_require__(30821);
var createNonEnumerableProperty = __webpack_require__(91705);
var defineBuiltIn = __webpack_require__(33549);
var defineProperty = (__webpack_require__(45070).f);
var isPrototypeOf = __webpack_require__(77240);
var getPrototypeOf = __webpack_require__(35651);
var setPrototypeOf = __webpack_require__(40616);
var wellKnownSymbol = __webpack_require__(65373);
var uid = __webpack_require__(97214);
var InternalStateModule = __webpack_require__(59351);
var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var TypeError = global.TypeError;
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQUIRED = false;
var NAME, Constructor, Prototype;
var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};
var BigIntArrayConstructorsList = {
  BigInt64Array: 8,
  BigUint64Array: 8
};
var isView = function isView(it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return klass === 'DataView' || hasOwn(TypedArrayConstructorsList, klass) || hasOwn(BigIntArrayConstructorsList, klass);
};
var getTypedArrayConstructor = function getTypedArrayConstructor(it) {
  var proto = getPrototypeOf(it);
  if (!isObject(proto)) return;
  var state = getInternalState(proto);
  return state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
};
var isTypedArray = function isTypedArray(it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return hasOwn(TypedArrayConstructorsList, klass) || hasOwn(BigIntArrayConstructorsList, klass);
};
var aTypedArray = function aTypedArray(it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};
var aTypedArrayConstructor = function aTypedArrayConstructor(C) {
  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;
  throw TypeError(tryToString(C) + ' is not a typed array constructor');
};
var exportTypedArrayMethod = function exportTypedArrayMethod(KEY, property, forced, options) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {
      delete TypedArrayConstructor.prototype[KEY];
    } catch (error) {
      // old WebKit bug - some methods are non-configurable
      try {
        TypedArrayConstructor.prototype[KEY] = property;
      } catch (error2) {/* empty */}
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
  }
};
var exportTypedArrayStaticMethod = function exportTypedArrayStaticMethod(KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {
        delete TypedArrayConstructor[KEY];
      } catch (error) {/* empty */}
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
      } catch (error) {/* empty */}
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      defineBuiltIn(TypedArrayConstructor, KEY, property);
    }
  }
};
for (NAME in TypedArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;else NATIVE_ARRAY_BUFFER_VIEWS = false;
}
for (NAME in BigIntArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow -- safe
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}
if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}
if (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQUIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
    get: function get() {
      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
    }
  });
  for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) {
      createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
    }
  }
}
module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  getTypedArrayConstructor: getTypedArrayConstructor,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};

/***/ }),

/***/ 2091:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var DESCRIPTORS = __webpack_require__(9811);
var NATIVE_ARRAY_BUFFER = __webpack_require__(77942);
var FunctionName = __webpack_require__(96922);
var createNonEnumerableProperty = __webpack_require__(91705);
var defineBuiltIns = __webpack_require__(78768);
var fails = __webpack_require__(45200);
var anInstance = __webpack_require__(6441);
var toIntegerOrInfinity = __webpack_require__(58553);
var toLength = __webpack_require__(49152);
var toIndex = __webpack_require__(55476);
var IEEE754 = __webpack_require__(19500);
var getPrototypeOf = __webpack_require__(35651);
var setPrototypeOf = __webpack_require__(40616);
var getOwnPropertyNames = (__webpack_require__(72205).f);
var defineProperty = (__webpack_require__(45070).f);
var arrayFill = __webpack_require__(81);
var arraySlice = __webpack_require__(15521);
var setToStringTag = __webpack_require__(46736);
var InternalStateModule = __webpack_require__(59351);
var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var ArrayBufferPrototype = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
var $DataView = global[DATA_VIEW];
var DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var Array = global.Array;
var RangeError = global.RangeError;
var fill = uncurryThis(arrayFill);
var reverse = uncurryThis([].reverse);
var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;
var packInt8 = function packInt8(number) {
  return [number & 0xFF];
};
var packInt16 = function packInt16(number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};
var packInt32 = function packInt32(number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};
var unpackInt32 = function unpackInt32(buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};
var packFloat32 = function packFloat32(number) {
  return packIEEE754(number, 23, 4);
};
var packFloat64 = function packFloat64(number) {
  return packIEEE754(number, 52, 8);
};
var addGetter = function addGetter(Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, {
    get: function get() {
      return getInternalState(this)[key];
    }
  });
};
var get = function get(view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = arraySlice(bytes, start, start + count);
  return isLittleEndian ? pack : reverse(pack);
};
var set = function set(view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) {
    bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
  }
};
if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, ArrayBufferPrototype);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: fill(Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };
  ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE];
  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, DataViewPrototype);
    anInstance(buffer, ArrayBufferPrototype);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toIntegerOrInfinity(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };
  DataViewPrototype = $DataView[PROTOTYPE];
  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }
  defineBuiltIns(DataViewPrototype, {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;
  /* eslint-disable no-new -- required for testing */
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1);
  }) || fails(function () {
    new NativeArrayBuffer();
    new NativeArrayBuffer(1.5);
    new NativeArrayBuffer(NaN);
    return NativeArrayBuffer.length != 1 || INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
  })) {
    /* eslint-enable no-new -- required for testing */
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, ArrayBufferPrototype);
      return new NativeArrayBuffer(toIndex(length));
    };
    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype;
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
    createNonEnumerableProperty(NativeArrayBuffer, 'name', ARRAY_BUFFER);
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (setPrototypeOf && getPrototypeOf(DataViewPrototype) !== ObjectPrototype) {
    setPrototypeOf(DataViewPrototype, ObjectPrototype);
  }

  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = uncurryThis(DataViewPrototype.setInt8);
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) defineBuiltIns(DataViewPrototype, {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8(this, byteOffset, value << 24 >> 24);
    }
  }, {
    unsafe: true
  });
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
module.exports = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};

/***/ }),

/***/ 30707:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toObject = __webpack_require__(25769);
var toAbsoluteIndex = __webpack_require__(11652);
var lengthOfArrayLike = __webpack_require__(52124);
var deletePropertyOrThrow = __webpack_require__(23489);
var min = Math.min;

// `Array.prototype.copyWithin` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.copywithin
// eslint-disable-next-line es/no-array-prototype-copywithin -- safe
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = lengthOfArrayLike(O);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];else deletePropertyOrThrow(O, to);
    to += inc;
    from += inc;
  }
  return O;
};

/***/ }),

/***/ 81:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toObject = __webpack_require__(25769);
var toAbsoluteIndex = __webpack_require__(11652);
var lengthOfArrayLike = __webpack_require__(52124);

// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = lengthOfArrayLike(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) {
    O[index++] = value;
  }
  return O;
};

/***/ }),

/***/ 80980:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $forEach = (__webpack_require__(11729).forEach);
var arrayMethodIsStrict = __webpack_require__(75891);
var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  // eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;

/***/ }),

/***/ 92:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var lengthOfArrayLike = __webpack_require__(52124);
module.exports = function (Constructor, list) {
  var index = 0;
  var length = lengthOfArrayLike(list);
  var result = new Constructor(length);
  while (length > index) {
    result[index] = list[index++];
  }
  return result;
};

/***/ }),

/***/ 4789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(81801);
var call = __webpack_require__(84550);
var toObject = __webpack_require__(25769);
var callWithSafeIterationClosing = __webpack_require__(37473);
var isArrayIteratorMethod = __webpack_require__(93061);
var isConstructor = __webpack_require__(60116);
var lengthOfArrayLike = __webpack_require__(52124);
var createProperty = __webpack_require__(27042);
var getIterator = __webpack_require__(25221);
var getIteratorMethod = __webpack_require__(82093);
var $Array = Array;

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (; !(step = call(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
    for (; length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};

/***/ }),

/***/ 7255:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(20829);
var toAbsoluteIndex = __webpack_require__(11652);
var lengthOfArrayLike = __webpack_require__(52124);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function createMethod(IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    }
    return !IS_INCLUDES && -1;
  };
};
module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

/***/ }),

/***/ 22031:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(81801);
var IndexedObject = __webpack_require__(68813);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);

// `Array.prototype.{ findLast, findLastIndex }` methods implementation
var createMethod = function createMethod(TYPE) {
  var IS_FIND_LAST_INDEX = TYPE == 1;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var index = lengthOfArrayLike(self);
    var value, result;
    while (index-- > 0) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (result) switch (TYPE) {
        case 0:
          return value;
        // findLast
        case 1:
          return index;
        // findLastIndex
      }
    }

    return IS_FIND_LAST_INDEX ? -1 : undefined;
  };
};
module.exports = {
  // `Array.prototype.findLast` method
  // https://github.com/tc39/proposal-array-find-from-last
  findLast: createMethod(0),
  // `Array.prototype.findLastIndex` method
  // https://github.com/tc39/proposal-array-find-from-last
  findLastIndex: createMethod(1)
};

/***/ }),

/***/ 11729:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(81801);
var uncurryThis = __webpack_require__(85317);
var IndexedObject = __webpack_require__(68813);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var arraySpeciesCreate = __webpack_require__(30388);
var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function createMethod(TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        value = self[index];
        result = boundFunction(value, index, O);
        if (TYPE) {
          if (IS_MAP) target[index] = result; // map
          else if (result) switch (TYPE) {
            case 3:
              return true;
            // some
            case 5:
              return value;
            // find
            case 6:
              return index;
            // findIndex
            case 2:
              push(target, value);
            // filter
          } else switch (TYPE) {
            case 4:
              return false;
            // every
            case 7:
              push(target, value);
            // filterReject
          }
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};
module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};

/***/ }),

/***/ 58792:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable es/no-array-prototype-lastindexof -- safe */
var apply = __webpack_require__(72942);
var toIndexedObject = __webpack_require__(20829);
var toIntegerOrInfinity = __webpack_require__(58553);
var lengthOfArrayLike = __webpack_require__(52124);
var arrayMethodIsStrict = __webpack_require__(75891);
var min = Math.min;
var $lastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
module.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return apply($lastIndexOf, this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = lengthOfArrayLike(O);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toIntegerOrInfinity(arguments[1]));
  if (index < 0) index = length + index;
  for (; index >= 0; index--) {
    if (index in O && O[index] === searchElement) return index || 0;
  }
  return -1;
} : $lastIndexOf;

/***/ }),

/***/ 24188:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var wellKnownSymbol = __webpack_require__(65373);
var V8_VERSION = __webpack_require__(54875);
var SPECIES = wellKnownSymbol('species');
module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return {
        foo: 1
      };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

/***/ }),

/***/ 75891:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var fails = __webpack_require__(45200);
module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call -- required for testing
    method.call(null, argument || function () {
      return 1;
    }, 1);
  });
};

/***/ }),

/***/ 59892:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(6406);
var toObject = __webpack_require__(25769);
var IndexedObject = __webpack_require__(68813);
var lengthOfArrayLike = __webpack_require__(52124);
var $TypeError = TypeError;

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function createMethod(IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aCallable(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = lengthOfArrayLike(O);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw $TypeError('Reduce of empty array with no initial value');
      }
    }
    for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
      if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }
    }
    return memo;
  };
};
module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};

/***/ }),

/***/ 48196:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var DESCRIPTORS = __webpack_require__(9811);
var isArray = __webpack_require__(96306);
var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Safari < 13 does not throw an error in this case
var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function () {
  // makes no sense without proper strict mode support
  if (this !== undefined) return true;
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', {
      writable: false
    }).length = 1;
  } catch (error) {
    return error instanceof TypeError;
  }
}();
module.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function (O, length) {
  if (isArray(O) && !getOwnPropertyDescriptor(O, 'length').writable) {
    throw $TypeError('Cannot set read only .length');
  }
  return O.length = length;
} : function (O, length) {
  return O.length = length;
};

/***/ }),

/***/ 15521:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toAbsoluteIndex = __webpack_require__(11652);
var lengthOfArrayLike = __webpack_require__(52124);
var createProperty = __webpack_require__(27042);
var $Array = Array;
var max = Math.max;
module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = $Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) {
    createProperty(result, n, O[k]);
  }
  result.length = n;
  return result;
};

/***/ }),

/***/ 45386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
module.exports = uncurryThis([].slice);

/***/ }),

/***/ 41766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arraySlice = __webpack_require__(15521);
var floor = Math.floor;
var mergeSort = function mergeSort(array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
};
var insertionSort = function insertionSort(array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;
  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  }
  return array;
};
var merge = function merge(array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
  }
  return array;
};
module.exports = mergeSort;

/***/ }),

/***/ 74719:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(96306);
var isConstructor = __webpack_require__(60116);
var isObject = __webpack_require__(74194);
var wellKnownSymbol = __webpack_require__(65373);
var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }
  return C === undefined ? $Array : C;
};

/***/ }),

/***/ 30388:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arraySpeciesConstructor = __webpack_require__(74719);

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

/***/ }),

/***/ 74390:
/***/ ((module) => {

var itoc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var ctoi = {};
for (var index = 0; index < 66; index++) {
  ctoi[itoc.charAt(index)] = index;
}
module.exports = {
  itoc: itoc,
  ctoi: ctoi
};

/***/ }),

/***/ 37473:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(52943);
var iteratorClose = __webpack_require__(85636);

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};

/***/ }),

/***/ 33469:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(65373);
var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;
try {
  var called = 0;
  var iteratorWithReturn = {
    next: function next() {
      return {
        done: !!called++
      };
    },
    'return': function _return() {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () {
    throw 2;
  });
} catch (error) {/* empty */}
module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function next() {
          return {
            done: ITERATION_SUPPORT = true
          };
        }
      };
    };
    exec(object);
  } catch (error) {/* empty */}
  return ITERATION_SUPPORT;
};

/***/ }),

/***/ 700:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);
module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};

/***/ }),

/***/ 84368:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(14947);
var isCallable = __webpack_require__(76306);
var classofRaw = __webpack_require__(700);
var wellKnownSymbol = __webpack_require__(65373);
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (error) {/* empty */}
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
  // builtinTag case
  : CORRECT_ARGUMENTS ? classofRaw(O)
  // ES3 arguments fallback
  : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

/***/ }),

/***/ 76702:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var defineProperty = (__webpack_require__(45070).f);
var create = __webpack_require__(1578);
var defineBuiltIns = __webpack_require__(78768);
var bind = __webpack_require__(81801);
var anInstance = __webpack_require__(6441);
var isNullOrUndefined = __webpack_require__(19268);
var iterate = __webpack_require__(63244);
var defineIterator = __webpack_require__(94375);
var createIterResultObject = __webpack_require__(65620);
var setSpecies = __webpack_require__(94847);
var DESCRIPTORS = __webpack_require__(9811);
var fastKey = (__webpack_require__(60648).fastKey);
var InternalStateModule = __webpack_require__(59351);
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
module.exports = {
  getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], {
        that: that,
        AS_ENTRIES: IS_MAP
      });
    });
    var Prototype = Constructor.prototype;
    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var define = function define(that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
        // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      }
      return that;
    };
    var getEntry = function getEntry(that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };
    defineBuiltIns(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function _delete(key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;else that.size--;
        }
        return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) {
            entry = entry.previous;
          }
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });
    defineBuiltIns(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(Prototype, 'size', {
      get: function get() {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) {
        entry = entry.previous;
      }
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return createIterResultObject(undefined, true);
      }
      // return step by kind
      if (kind == 'keys') return createIterResultObject(entry.key, false);
      if (kind == 'values') return createIterResultObject(entry.value, false);
      return createIterResultObject([entry.key, entry.value], false);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};

/***/ }),

/***/ 19026:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var uncurryThis = __webpack_require__(85317);
var defineBuiltIns = __webpack_require__(78768);
var getWeakData = (__webpack_require__(60648).getWeakData);
var anInstance = __webpack_require__(6441);
var anObject = __webpack_require__(52943);
var isNullOrUndefined = __webpack_require__(19268);
var isObject = __webpack_require__(74194);
var iterate = __webpack_require__(63244);
var ArrayIterationModule = __webpack_require__(11729);
var hasOwn = __webpack_require__(81285);
var InternalStateModule = __webpack_require__(59351);
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var splice = uncurryThis([].splice);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.entries = [];
};
var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function get(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function has(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function set(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.entries.push([key, value]);
  },
  'delete': function _delete(key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) splice(this.entries, index, 1);
    return !!~index;
  }
};
module.exports = {
  getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], {
        that: that,
        AS_ENTRIES: IS_MAP
      });
    });
    var Prototype = Constructor.prototype;
    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var define = function define(that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
      return that;
    };
    defineBuiltIns(Prototype, {
      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
      'delete': function _delete(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && hasOwn(data, state.id) && delete data[state.id];
      },
      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
      // https://tc39.es/ecma262/#sec-weakset.prototype.has
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && hasOwn(data, state.id);
      }
    });
    defineBuiltIns(Prototype, IS_MAP ? {
      // `WeakMap.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // `WeakMap.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // `WeakSet.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-weakset.prototype.add
      add: function add(value) {
        return define(this, value, true);
      }
    });
    return Constructor;
  }
};

/***/ }),

/***/ 79524:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var isForced = __webpack_require__(40695);
var defineBuiltIn = __webpack_require__(33549);
var InternalMetadataModule = __webpack_require__(60648);
var iterate = __webpack_require__(63244);
var anInstance = __webpack_require__(6441);
var isCallable = __webpack_require__(76306);
var isNullOrUndefined = __webpack_require__(19268);
var isObject = __webpack_require__(74194);
var fails = __webpack_require__(45200);
var checkCorrectnessOfIteration = __webpack_require__(33469);
var setToStringTag = __webpack_require__(46736);
var inheritIfRequired = __webpack_require__(57170);
module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};
  var fixMethod = function fixMethod(KEY) {
    var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
    defineBuiltIn(NativePrototype, KEY, KEY == 'add' ? function add(value) {
      uncurriedNativeMethod(this, value === 0 ? 0 : value);
      return this;
    } : KEY == 'delete' ? function (key) {
      return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
    } : KEY == 'get' ? function get(key) {
      return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
    } : KEY == 'has' ? function has(key) {
      return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
    } : function set(key, value) {
      uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
      return this;
    });
  };
  var REPLACE = isForced(CONSTRUCTOR_NAME, !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
    new NativeConstructor().entries().next();
  })));
  if (REPLACE) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new -- required for testing
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
      new NativeConstructor(iterable);
    });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) {
        $instance[ADDER](index, index);
      }
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, NativePrototype);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], {
          that: that,
          AS_ENTRIES: IS_MAP
        });
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }
  exported[CONSTRUCTOR_NAME] = Constructor;
  $({
    global: true,
    constructor: true,
    forced: Constructor != NativeConstructor
  }, exported);
  setToStringTag(Constructor, CONSTRUCTOR_NAME);
  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
  return Constructor;
};

/***/ }),

/***/ 58376:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(81285);
var ownKeys = __webpack_require__(15732);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);
var definePropertyModule = __webpack_require__(45070);
module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

/***/ }),

/***/ 23264:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(65373);
var MATCH = wellKnownSymbol('match');
module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) {/* empty */}
  }
  return false;
};

/***/ }),

/***/ 20457:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
module.exports = !fails(function () {
  function F() {/* empty */}
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

/***/ }),

/***/ 9015:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var requireObjectCoercible = __webpack_require__(20877);
var toString = __webpack_require__(80978);
var quot = /"/g;
var replace = uncurryThis(''.replace);

// `CreateHTML` abstract operation
// https://tc39.es/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = toString(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + replace(toString(value), quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

/***/ }),

/***/ 65620:
/***/ ((module) => {

// `CreateIterResultObject` abstract operation
// https://tc39.es/ecma262/#sec-createiterresultobject
module.exports = function (value, done) {
  return {
    value: value,
    done: done
  };
};

/***/ }),

/***/ 91705:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var definePropertyModule = __webpack_require__(45070);
var createPropertyDescriptor = __webpack_require__(22424);
module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ 22424:
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ 27042:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toPropertyKey = __webpack_require__(9370);
var definePropertyModule = __webpack_require__(45070);
var createPropertyDescriptor = __webpack_require__(22424);
module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
};

/***/ }),

/***/ 45611:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var padStart = (__webpack_require__(72594).start);
var $RangeError = RangeError;
var $isFinite = isFinite;
var abs = Math.abs;
var DatePrototype = Date.prototype;
var nativeDateToISOString = DatePrototype.toISOString;
var thisTimeValue = uncurryThis(DatePrototype.getTime);
var getUTCDate = uncurryThis(DatePrototype.getUTCDate);
var getUTCFullYear = uncurryThis(DatePrototype.getUTCFullYear);
var getUTCHours = uncurryThis(DatePrototype.getUTCHours);
var getUTCMilliseconds = uncurryThis(DatePrototype.getUTCMilliseconds);
var getUTCMinutes = uncurryThis(DatePrototype.getUTCMinutes);
var getUTCMonth = uncurryThis(DatePrototype.getUTCMonth);
var getUTCSeconds = uncurryThis(DatePrototype.getUTCSeconds);

// `Date.prototype.toISOString` method implementation
// https://tc39.es/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = fails(function () {
  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  nativeDateToISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!$isFinite(thisTimeValue(this))) throw $RangeError('Invalid time value');
  var date = this;
  var year = getUTCFullYear(date);
  var milliseconds = getUTCMilliseconds(date);
  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
  return sign + padStart(abs(year), sign ? 6 : 4, 0) + '-' + padStart(getUTCMonth(date) + 1, 2, 0) + '-' + padStart(getUTCDate(date), 2, 0) + 'T' + padStart(getUTCHours(date), 2, 0) + ':' + padStart(getUTCMinutes(date), 2, 0) + ':' + padStart(getUTCSeconds(date), 2, 0) + '.' + padStart(milliseconds, 3, 0) + 'Z';
} : nativeDateToISOString;

/***/ }),

/***/ 57368:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var anObject = __webpack_require__(52943);
var ordinaryToPrimitive = __webpack_require__(81125);
var $TypeError = TypeError;

// `Date.prototype[@@toPrimitive](hint)` method implementation
// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
module.exports = function (hint) {
  anObject(this);
  if (hint === 'string' || hint === 'default') hint = 'string';else if (hint !== 'number') throw $TypeError('Incorrect hint');
  return ordinaryToPrimitive(this, hint);
};

/***/ }),

/***/ 45766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var makeBuiltIn = __webpack_require__(13042);
var defineProperty = __webpack_require__(45070);
module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, {
    getter: true
  });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, {
    setter: true
  });
  return defineProperty.f(target, name, descriptor);
};

/***/ }),

/***/ 33549:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(76306);
var definePropertyModule = __webpack_require__(45070);
var makeBuiltIn = __webpack_require__(13042);
var defineGlobalProperty = __webpack_require__(80777);
module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];else if (O[key]) simple = true;
    } catch (error) {/* empty */}
    if (simple) O[key] = value;else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  }
  return O;
};

/***/ }),

/***/ 78768:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineBuiltIn = __webpack_require__(33549);
module.exports = function (target, src, options) {
  for (var key in src) {
    defineBuiltIn(target, key, src[key], options);
  }
  return target;
};

/***/ }),

/***/ 80777:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
module.exports = function (key, value) {
  try {
    defineProperty(global, key, {
      value: value,
      configurable: true,
      writable: true
    });
  } catch (error) {
    global[key] = value;
  }
  return value;
};

/***/ }),

/***/ 23489:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var tryToString = __webpack_require__(30821);
var $TypeError = TypeError;
module.exports = function (O, P) {
  if (!delete O[P]) throw $TypeError('Cannot delete property ' + tryToString(P) + ' of ' + tryToString(O));
};

/***/ }),

/***/ 9811:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, {
    get: function get() {
      return 7;
    }
  })[1] != 7;
});

/***/ }),

/***/ 46339:
/***/ ((module) => {

var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;
module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};

/***/ }),

/***/ 3677:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var isObject = __webpack_require__(74194);
var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

/***/ }),

/***/ 49390:
/***/ ((module) => {

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};

/***/ }),

/***/ 58295:
/***/ ((module) => {

module.exports = {
  IndexSizeError: {
    s: 'INDEX_SIZE_ERR',
    c: 1,
    m: 1
  },
  DOMStringSizeError: {
    s: 'DOMSTRING_SIZE_ERR',
    c: 2,
    m: 0
  },
  HierarchyRequestError: {
    s: 'HIERARCHY_REQUEST_ERR',
    c: 3,
    m: 1
  },
  WrongDocumentError: {
    s: 'WRONG_DOCUMENT_ERR',
    c: 4,
    m: 1
  },
  InvalidCharacterError: {
    s: 'INVALID_CHARACTER_ERR',
    c: 5,
    m: 1
  },
  NoDataAllowedError: {
    s: 'NO_DATA_ALLOWED_ERR',
    c: 6,
    m: 0
  },
  NoModificationAllowedError: {
    s: 'NO_MODIFICATION_ALLOWED_ERR',
    c: 7,
    m: 1
  },
  NotFoundError: {
    s: 'NOT_FOUND_ERR',
    c: 8,
    m: 1
  },
  NotSupportedError: {
    s: 'NOT_SUPPORTED_ERR',
    c: 9,
    m: 1
  },
  InUseAttributeError: {
    s: 'INUSE_ATTRIBUTE_ERR',
    c: 10,
    m: 1
  },
  InvalidStateError: {
    s: 'INVALID_STATE_ERR',
    c: 11,
    m: 1
  },
  SyntaxError: {
    s: 'SYNTAX_ERR',
    c: 12,
    m: 1
  },
  InvalidModificationError: {
    s: 'INVALID_MODIFICATION_ERR',
    c: 13,
    m: 1
  },
  NamespaceError: {
    s: 'NAMESPACE_ERR',
    c: 14,
    m: 1
  },
  InvalidAccessError: {
    s: 'INVALID_ACCESS_ERR',
    c: 15,
    m: 1
  },
  ValidationError: {
    s: 'VALIDATION_ERR',
    c: 16,
    m: 0
  },
  TypeMismatchError: {
    s: 'TYPE_MISMATCH_ERR',
    c: 17,
    m: 1
  },
  SecurityError: {
    s: 'SECURITY_ERR',
    c: 18,
    m: 1
  },
  NetworkError: {
    s: 'NETWORK_ERR',
    c: 19,
    m: 1
  },
  AbortError: {
    s: 'ABORT_ERR',
    c: 20,
    m: 1
  },
  URLMismatchError: {
    s: 'URL_MISMATCH_ERR',
    c: 21,
    m: 1
  },
  QuotaExceededError: {
    s: 'QUOTA_EXCEEDED_ERR',
    c: 22,
    m: 1
  },
  TimeoutError: {
    s: 'TIMEOUT_ERR',
    c: 23,
    m: 1
  },
  InvalidNodeTypeError: {
    s: 'INVALID_NODE_TYPE_ERR',
    c: 24,
    m: 1
  },
  DataCloneError: {
    s: 'DATA_CLONE_ERR',
    c: 25,
    m: 1
  }
};

/***/ }),

/***/ 15399:
/***/ ((module) => {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

/***/ }),

/***/ 19908:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = __webpack_require__(3677);
var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

/***/ }),

/***/ 85476:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(62060);
var firefox = userAgent.match(/firefox\/(\d+)/i);
module.exports = !!firefox && +firefox[1];

/***/ }),

/***/ 53858:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_DENO = __webpack_require__(72641);
var IS_NODE = __webpack_require__(31292);
module.exports = !IS_DENO && !IS_NODE && typeof window == 'object' && typeof document == 'object';

/***/ }),

/***/ 72641:
/***/ ((module) => {

/* global Deno -- Deno case */
module.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';

/***/ }),

/***/ 22968:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var UA = __webpack_require__(62060);
module.exports = /MSIE|Trident/.test(UA);

/***/ }),

/***/ 61391:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(62060);
var global = __webpack_require__(52586);
module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;

/***/ }),

/***/ 5236:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(62060);
module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);

/***/ }),

/***/ 31292:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(700);
var global = __webpack_require__(52586);
module.exports = classof(global.process) == 'process';

/***/ }),

/***/ 9378:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(62060);
module.exports = /web0s(?!.*chrome)/i.test(userAgent);

/***/ }),

/***/ 62060:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(40866);
module.exports = getBuiltIn('navigator', 'userAgent') || '';

/***/ }),

/***/ 54875:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var userAgent = __webpack_require__(62060);
var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;
if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}
module.exports = version;

/***/ }),

/***/ 99217:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(62060);
var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
module.exports = !!webkit && +webkit[1];

/***/ }),

/***/ 63148:
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

/***/ }),

/***/ 31481:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var $Error = Error;
var replace = uncurryThis(''.replace);
var TEST = function (arg) {
  return String($Error(arg).stack);
}('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
module.exports = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) {
      stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
    }
  }
  return stack;
};

/***/ }),

/***/ 30382:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var createPropertyDescriptor = __webpack_require__(22424);
module.exports = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});

/***/ }),

/***/ 495:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var DESCRIPTORS = __webpack_require__(9811);
var fails = __webpack_require__(45200);
var anObject = __webpack_require__(52943);
var create = __webpack_require__(1578);
var normalizeStringArgument = __webpack_require__(65887);
var nativeErrorToString = Error.prototype.toString;
var INCORRECT_TO_STRING = fails(function () {
  if (DESCRIPTORS) {
    // Chrome 32- incorrectly call accessor
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    var object = create(Object.defineProperty({}, 'name', {
      get: function get() {
        return this === object;
      }
    }));
    if (nativeErrorToString.call(object) !== 'true') return true;
  }
  // FF10- does not properly handle non-strings
  return nativeErrorToString.call({
    message: 1,
    name: 2
  }) !== '2: 1'
  // IE8 does not properly handle defaults
  || nativeErrorToString.call({}) !== 'Error';
});
module.exports = INCORRECT_TO_STRING ? function toString() {
  var O = anObject(this);
  var name = normalizeStringArgument(O.name, 'Error');
  var message = normalizeStringArgument(O.message);
  return !name ? message : !message ? name : name + ': ' + message;
} : nativeErrorToString;

/***/ }),

/***/ 53064:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);
var createNonEnumerableProperty = __webpack_require__(91705);
var defineBuiltIn = __webpack_require__(33549);
var defineGlobalProperty = __webpack_require__(80777);
var copyConstructorProperties = __webpack_require__(58376);
var isForced = __webpack_require__(40695);

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};

/***/ }),

/***/ 45200:
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

/***/ }),

/***/ 54059:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(30144);
var uncurryThis = __webpack_require__(62745);
var defineBuiltIn = __webpack_require__(33549);
var regexpExec = __webpack_require__(34646);
var fails = __webpack_require__(45200);
var wellKnownSymbol = __webpack_require__(65373);
var createNonEnumerableProperty = __webpack_require__(91705);
var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;
module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);
  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () {
      return 7;
    };
    return ''[KEY](O) != 7;
  });
  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () {
        return re;
      };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }
    re.exec = function () {
      execCalled = true;
      return null;
    };
    re[SYMBOL]('');
    return !execCalled;
  });
  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return {
            done: true,
            value: uncurriedNativeRegExpMethod(regexp, str, arg2)
          };
        }
        return {
          done: true,
          value: uncurriedNativeMethod(str, regexp, arg2)
        };
      }
      return {
        done: false
      };
    });
    defineBuiltIn(String.prototype, KEY, methods[0]);
    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
  }
  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};

/***/ }),

/***/ 45541:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isArray = __webpack_require__(96306);
var lengthOfArrayLike = __webpack_require__(52124);
var doesNotExceedSafeInteger = __webpack_require__(49390);
var bind = __webpack_require__(81801);

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg) : false;
  var element, elementLen;
  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      if (depth > 0 && isArray(element)) {
        elementLen = lengthOfArrayLike(element);
        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
      } else {
        doesNotExceedSafeInteger(targetIndex + 1);
        target[targetIndex] = element;
      }
      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};
module.exports = flattenIntoArray;

/***/ }),

/***/ 10940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});

/***/ }),

/***/ 72942:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(50034);
var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});

/***/ }),

/***/ 81801:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(62745);
var aCallable = __webpack_require__(6406);
var NATIVE_BIND = __webpack_require__(50034);
var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function /* ...args */
  () {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ 50034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = function () {/* empty */}.bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

/***/ }),

/***/ 89723:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var uncurryThis = __webpack_require__(85317);
var aCallable = __webpack_require__(6406);
var isObject = __webpack_require__(74194);
var hasOwn = __webpack_require__(81285);
var arraySlice = __webpack_require__(45386);
var NATIVE_BIND = __webpack_require__(50034);
var $Function = Function;
var concat = uncurryThis([].concat);
var join = uncurryThis([].join);
var factories = {};
var construct = function construct(C, argsLength, args) {
  if (!hasOwn(factories, argsLength)) {
    for (var list = [], i = 0; i < argsLength; i++) {
      list[i] = 'a[' + i + ']';
    }
    factories[argsLength] = $Function('C,a', 'return new C(' + join(list, ',') + ')');
  }
  return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.es/ecma262/#sec-function.prototype.bind
module.exports = NATIVE_BIND ? $Function.bind : function bind(that /* , ...args */) {
  var F = aCallable(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice(arguments, 1);
  var boundFunction = function bound( /* args... */
  ) {
    var args = concat(partArgs, arraySlice(arguments));
    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
  };
  if (isObject(Prototype)) boundFunction.prototype = Prototype;
  return boundFunction;
};

/***/ }),

/***/ 84550:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(50034);
var call = Function.prototype.call;
module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};

/***/ }),

/***/ 96922:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var hasOwn = __webpack_require__(81285);
var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && function something() {/* empty */}.name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable);
module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

/***/ }),

/***/ 62745:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classofRaw = __webpack_require__(700);
var uncurryThis = __webpack_require__(85317);
module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};

/***/ }),

/***/ 85317:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(50034);
var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};

/***/ }),

/***/ 40866:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var isCallable = __webpack_require__(76306);
var aFunction = function aFunction(argument) {
  return isCallable(argument) ? argument : undefined;
};
module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};

/***/ }),

/***/ 82093:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(84368);
var getMethod = __webpack_require__(11701);
var isNullOrUndefined = __webpack_require__(19268);
var Iterators = __webpack_require__(9806);
var wellKnownSymbol = __webpack_require__(65373);
var ITERATOR = wellKnownSymbol('iterator');
module.exports = function (it) {
  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, '@@iterator') || Iterators[classof(it)];
};

/***/ }),

/***/ 25221:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var aCallable = __webpack_require__(6406);
var anObject = __webpack_require__(52943);
var tryToString = __webpack_require__(30821);
var getIteratorMethod = __webpack_require__(82093);
var $TypeError = TypeError;
module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};

/***/ }),

/***/ 11701:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(6406);
var isNullOrUndefined = __webpack_require__(19268);

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};

/***/ }),

/***/ 979:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var toObject = __webpack_require__(25769);
var floor = Math.floor;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace(replacement, symbols, function (match, ch) {
    var capture;
    switch (charAt(ch, 0)) {
      case '$':
        return '$';
      case '&':
        return matched;
      case '`':
        return stringSlice(str, 0, position);
      case "'":
        return stringSlice(str, tailPos);
      case '<':
        capture = namedCaptures[stringSlice(ch, 1, -1)];
        break;
      default:
        // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};

/***/ }),

/***/ 52586:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function check(it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
// eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) ||
// eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
// eslint-disable-next-line no-new-func -- fallback
function () {
  return this;
}() || Function('return this')();

/***/ }),

/***/ 81285:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var toObject = __webpack_require__(25769);
var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

/***/ }),

/***/ 29841:
/***/ ((module) => {

module.exports = {};

/***/ }),

/***/ 19239:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  }
};

/***/ }),

/***/ 74809:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(40866);
module.exports = getBuiltIn('document', 'documentElement');

/***/ }),

/***/ 30385:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var fails = __webpack_require__(45200);
var createElement = __webpack_require__(3677);

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ 19500:
/***/ ((module) => {

// IEEE754 conversions based on https://github.com/feross/ieee754
var $Array = Array;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var pack = function pack(number, mantissaLength, bytes) {
  var buffer = $Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare -- NaN check
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare -- NaN check
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    c = pow(2, -exponent);
    if (number * c < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  while (mantissaLength >= 8) {
    buffer[index++] = mantissa & 255;
    mantissa /= 256;
    mantissaLength -= 8;
  }
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  while (exponentLength > 0) {
    buffer[index++] = exponent & 255;
    exponent /= 256;
    exponentLength -= 8;
  }
  buffer[--index] |= sign * 128;
  return buffer;
};
var unpack = function unpack(buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  while (nBits > 0) {
    exponent = exponent * 256 + buffer[index--];
    nBits -= 8;
  }
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  while (nBits > 0) {
    mantissa = mantissa * 256 + buffer[index--];
    nBits -= 8;
  }
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  }
  return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};
module.exports = {
  pack: pack,
  unpack: unpack
};

/***/ }),

/***/ 68813:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var classof = __webpack_require__(700);
var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;

/***/ }),

/***/ 57170:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var setPrototypeOf = __webpack_require__(40616);

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
  // it can work only with native `setPrototypeOf`
  setPrototypeOf &&
  // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
  isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

/***/ }),

/***/ 60735:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var isCallable = __webpack_require__(76306);
var store = __webpack_require__(2950);
var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}
module.exports = store.inspectSource;

/***/ }),

/***/ 59443:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(74194);
var createNonEnumerableProperty = __webpack_require__(91705);

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};

/***/ }),

/***/ 60648:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var hiddenKeys = __webpack_require__(29841);
var isObject = __webpack_require__(74194);
var hasOwn = __webpack_require__(81285);
var defineProperty = (__webpack_require__(45070).f);
var getOwnPropertyNamesModule = __webpack_require__(72205);
var getOwnPropertyNamesExternalModule = __webpack_require__(62020);
var isExtensible = __webpack_require__(91268);
var uid = __webpack_require__(97214);
var FREEZING = __webpack_require__(10940);
var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;
var setMetadata = function setMetadata(it) {
  defineProperty(it, METADATA, {
    value: {
      objectID: 'O' + id++,
      // object ID
      weakData: {} // weak collections IDs
    }
  });
};

var fastKey = function fastKey(it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
    // return object ID
  }
  return it[METADATA].objectID;
};
var getWeakData = function getWeakData(it, create) {
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
    // return the store of weak collections IDs
  }
  return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function onFreeze(it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
  return it;
};
var enable = function enable() {
  meta.enable = function () {/* empty */};
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = uncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      }
      return result;
    };
    $({
      target: 'Object',
      stat: true,
      forced: true
    }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};
var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};
hiddenKeys[METADATA] = true;

/***/ }),

/***/ 59351:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(75156);
var global = __webpack_require__(52586);
var isObject = __webpack_require__(74194);
var createNonEnumerableProperty = __webpack_require__(91705);
var hasOwn = __webpack_require__(81285);
var shared = __webpack_require__(2950);
var sharedKey = __webpack_require__(60759);
var hiddenKeys = __webpack_require__(29841);
var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;
var enforce = function enforce(it) {
  return has(it) ? get(it) : set(it, {});
};
var getterFor = function getterFor(TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function set(it, metadata) {
    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function get(it) {
    return store.get(it) || {};
  };
  has = function has(it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function set(it, metadata) {
    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function get(it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function has(it) {
    return hasOwn(it, STATE);
  };
}
module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

/***/ }),

/***/ 93061:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(65373);
var Iterators = __webpack_require__(9806);
var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

/***/ }),

/***/ 96306:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(700);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};

/***/ }),

/***/ 76500:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(84368);
var uncurryThis = __webpack_require__(85317);
var slice = uncurryThis(''.slice);
module.exports = function (it) {
  return slice(classof(it), 0, 3) === 'Big';
};

/***/ }),

/***/ 76306:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $documentAll = __webpack_require__(46339);
var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};

/***/ }),

/***/ 60116:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var isCallable = __webpack_require__(76306);
var classof = __webpack_require__(84368);
var getBuiltIn = __webpack_require__(40866);
var inspectSource = __webpack_require__(60735);
var noop = function noop() {/* empty */};
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction':
      return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
    called = true;
  }) || called;
}) ? isConstructorLegacy : isConstructorModern;

/***/ }),

/***/ 40370:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(81285);
module.exports = function (descriptor) {
  return descriptor !== undefined && (hasOwn(descriptor, 'value') || hasOwn(descriptor, 'writable'));
};

/***/ }),

/***/ 40695:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var isCallable = __webpack_require__(76306);
var replacement = /#|\.prototype\./;
var isForced = function isForced(feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
};
var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};
var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
module.exports = isForced;

/***/ }),

/***/ 34715:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(74194);
var floor = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es/no-number-isinteger -- safe
module.exports = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),

/***/ 19268:
/***/ ((module) => {

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};

/***/ }),

/***/ 74194:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(76306);
var $documentAll = __webpack_require__(46339);
var documentAll = $documentAll.all;
module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

/***/ }),

/***/ 58855:
/***/ ((module) => {

module.exports = false;

/***/ }),

/***/ 26582:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(74194);
var classof = __webpack_require__(700);
var wellKnownSymbol = __webpack_require__(65373);
var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

/***/ }),

/***/ 78991:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(40866);
var isCallable = __webpack_require__(76306);
var isPrototypeOf = __webpack_require__(77240);
var USE_SYMBOL_AS_UID = __webpack_require__(93880);
var $Object = Object;
module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};

/***/ }),

/***/ 63244:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(81801);
var call = __webpack_require__(84550);
var anObject = __webpack_require__(52943);
var tryToString = __webpack_require__(30821);
var isArrayIteratorMethod = __webpack_require__(93061);
var lengthOfArrayLike = __webpack_require__(52124);
var isPrototypeOf = __webpack_require__(77240);
var getIterator = __webpack_require__(25221);
var getIteratorMethod = __webpack_require__(82093);
var iteratorClose = __webpack_require__(85636);
var $TypeError = TypeError;
var Result = function Result(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype = Result.prototype;
module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;
  var stop = function stop(condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };
  var callFn = function callFn(value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }
    return INTERRUPTED ? fn(value, stop) : fn(value);
  };
  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      }
      return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }
  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  }
  return new Result(false);
};

/***/ }),

/***/ 85636:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var anObject = __webpack_require__(52943);
var getMethod = __webpack_require__(11701);
module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};

/***/ }),

/***/ 84433:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var IteratorPrototype = (__webpack_require__(84239).IteratorPrototype);
var create = __webpack_require__(1578);
var createPropertyDescriptor = __webpack_require__(22424);
var setToStringTag = __webpack_require__(46736);
var Iterators = __webpack_require__(9806);
var returnThis = function returnThis() {
  return this;
};
module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, {
    next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next)
  });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

/***/ }),

/***/ 94375:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var IS_PURE = __webpack_require__(58855);
var FunctionName = __webpack_require__(96922);
var isCallable = __webpack_require__(76306);
var createIteratorConstructor = __webpack_require__(84433);
var getPrototypeOf = __webpack_require__(35651);
var setPrototypeOf = __webpack_require__(40616);
var setToStringTag = __webpack_require__(46736);
var createNonEnumerableProperty = __webpack_require__(91705);
var defineBuiltIn = __webpack_require__(33549);
var wellKnownSymbol = __webpack_require__(65373);
var Iterators = __webpack_require__(9806);
var IteratorsCore = __webpack_require__(84239);
var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';
var returnThis = function returnThis() {
  return this;
};
module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);
  var getIterationMethod = function getIterationMethod(KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS:
        return function keys() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES:
        return function values() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES:
        return function entries() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function () {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() {
        return call(nativeIterator, this);
      };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({
      target: NAME,
      proto: true,
      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
    }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, {
      name: DEFAULT
    });
  }
  Iterators[NAME] = defaultIterator;
  return methods;
};

/***/ }),

/***/ 84239:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var fails = __webpack_require__(45200);
var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var create = __webpack_require__(1578);
var getPrototypeOf = __webpack_require__(35651);
var defineBuiltIn = __webpack_require__(33549);
var wellKnownSymbol = __webpack_require__(65373);
var IS_PURE = __webpack_require__(58855);
var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}
var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});
if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  defineBuiltIn(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}
module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

/***/ }),

/***/ 9806:
/***/ ((module) => {

module.exports = {};

/***/ }),

/***/ 52124:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(49152);

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};

/***/ }),

/***/ 13042:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var isCallable = __webpack_require__(76306);
var hasOwn = __webpack_require__(81285);
var DESCRIPTORS = __webpack_require__(9811);
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(96922).CONFIGURABLE);
var inspectSource = __webpack_require__(60735);
var InternalStateModule = __webpack_require__(59351);
var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () {/* empty */}, 'length', {
    value: 8
  }).length !== 8;
});
var TEMPLATE = String(String).split('String');
var makeBuiltIn = module.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
    if (DESCRIPTORS) defineProperty(value, 'name', {
      value: name,
      configurable: true
    });else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', {
      value: options.arity
    });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', {
        writable: false
      });
      // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) {/* empty */}
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  }
  return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');

/***/ }),

/***/ 91437:
/***/ ((module) => {

// eslint-disable-next-line es/no-math-expm1 -- safe
var $expm1 = Math.expm1;
var exp = Math.exp;

// `Math.expm1` method implementation
// https://tc39.es/ecma262/#sec-math.expm1
module.exports = !$expm1
// Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
// Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  var n = +x;
  return n == 0 ? n : n > -1e-6 && n < 1e-6 ? n + n * n / 2 : exp(n) - 1;
} : $expm1;

/***/ }),

/***/ 72896:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var sign = __webpack_require__(31874);
var abs = Math.abs;
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);
var roundTiesToEven = function roundTiesToEven(n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

// `Math.fround` method implementation
// https://tc39.es/ecma262/#sec-math.fround
// eslint-disable-next-line es/no-math-fround -- safe
module.exports = Math.fround || function fround(x) {
  var n = +x;
  var $abs = abs(n);
  var $sign = sign(n);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare -- NaN check
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

/***/ }),

/***/ 92104:
/***/ ((module) => {

var log = Math.log;
var LOG10E = Math.LOG10E;

// eslint-disable-next-line es/no-math-log10 -- safe
module.exports = Math.log10 || function log10(x) {
  return log(x) * LOG10E;
};

/***/ }),

/***/ 79854:
/***/ ((module) => {

var log = Math.log;

// `Math.log1p` method implementation
// https://tc39.es/ecma262/#sec-math.log1p
// eslint-disable-next-line es/no-math-log1p -- safe
module.exports = Math.log1p || function log1p(x) {
  var n = +x;
  return n > -1e-8 && n < 1e-8 ? n - n * n / 2 : log(1 + n);
};

/***/ }),

/***/ 31874:
/***/ ((module) => {

// `Math.sign` method implementation
// https://tc39.es/ecma262/#sec-math.sign
// eslint-disable-next-line es/no-math-sign -- safe
module.exports = Math.sign || function sign(x) {
  var n = +x;
  // eslint-disable-next-line no-self-compare -- NaN check
  return n == 0 || n != n ? n : n < 0 ? -1 : 1;
};

/***/ }),

/***/ 94891:
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};

/***/ }),

/***/ 50119:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var bind = __webpack_require__(81801);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);
var macrotask = (__webpack_require__(39250).set);
var IS_IOS = __webpack_require__(5236);
var IS_IOS_PEBBLE = __webpack_require__(61391);
var IS_WEBOS_WEBKIT = __webpack_require__(9378);
var IS_NODE = __webpack_require__(31292);
var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function flush() {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();else last = undefined;
        throw error;
      }
    }
    last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, {
      characterData: true
    });
    notify = function notify() {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function notify() {
      then(flush);
    };
    // Node.js without promises
  } else if (IS_NODE) {
    notify = function notify() {
      process.nextTick(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessage
    // - onreadystatechange
    // - setTimeout
  } else {
    // strange IE + webpack dev server bug - use .bind(global)
    macrotask = bind(macrotask, global);
    notify = function notify() {
      macrotask(flush);
    };
  }
}
module.exports = queueMicrotask || function (fn) {
  var task = {
    fn: fn,
    next: undefined
  };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  }
  last = task;
};

/***/ }),

/***/ 16593:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var aCallable = __webpack_require__(6406);
var $TypeError = TypeError;
var PromiseCapability = function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw $TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

/***/ }),

/***/ 65887:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(80978);
module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};

/***/ }),

/***/ 41029:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isRegExp = __webpack_require__(26582);
var $TypeError = TypeError;
module.exports = function (it) {
  if (isRegExp(it)) {
    throw $TypeError("The method doesn't accept regular expressions");
  }
  return it;
};

/***/ }),

/***/ 84247:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
// eslint-disable-next-line es/no-number-isfinite -- safe
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};

/***/ }),

/***/ 99722:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var fails = __webpack_require__(45200);
var uncurryThis = __webpack_require__(85317);
var toString = __webpack_require__(80978);
var trim = (__webpack_require__(86392).trim);
var whitespaces = __webpack_require__(2429);
var charAt = uncurryThis(''.charAt);
var $parseFloat = global.parseFloat;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity
// MS Edge 18- broken with boxed symbols
|| ITERATOR && !fails(function () {
  $parseFloat(Object(ITERATOR));
});

// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(toString(string));
  var result = $parseFloat(trimmedString);
  return result === 0 && charAt(trimmedString, 0) == '-' ? -0 : result;
} : $parseFloat;

/***/ }),

/***/ 87148:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var fails = __webpack_require__(45200);
var uncurryThis = __webpack_require__(85317);
var toString = __webpack_require__(80978);
var trim = (__webpack_require__(86392).trim);
var whitespaces = __webpack_require__(2429);
var $parseInt = global.parseInt;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var hex = /^[+-]?0x/i;
var exec = uncurryThis(hex.exec);
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22
// MS Edge 18- broken with boxed symbols
|| ITERATOR && !fails(function () {
  $parseInt(Object(ITERATOR));
});

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(toString(string));
  return $parseInt(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
} : $parseInt;

/***/ }),

/***/ 99103:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var DESCRIPTORS = __webpack_require__(9811);
var uncurryThis = __webpack_require__(85317);
var call = __webpack_require__(84550);
var fails = __webpack_require__(45200);
var objectKeys = __webpack_require__(12656);
var getOwnPropertySymbolsModule = __webpack_require__(32693);
var propertyIsEnumerableModule = __webpack_require__(2962);
var toObject = __webpack_require__(25769);
var IndexedObject = __webpack_require__(68813);

// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({
    b: 1
  }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function get() {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), {
    b: 2
  })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  }
  return T;
} : $assign;

/***/ }),

/***/ 1578:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(52943);
var definePropertiesModule = __webpack_require__(70984);
var enumBugKeys = __webpack_require__(63148);
var hiddenKeys = __webpack_require__(29841);
var html = __webpack_require__(74809);
var documentCreateElement = __webpack_require__(3677);
var sharedKey = __webpack_require__(60759);
var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');
var EmptyConstructor = function EmptyConstructor() {/* empty */};
var scriptTag = function scriptTag(content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var _NullProtoObject = function NullProtoObject() {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) {/* ignore */}
  _NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
  : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) {
    delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  }
  return _NullProtoObject();
};
hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = _NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

/***/ }),

/***/ 70984:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(28290);
var definePropertyModule = __webpack_require__(45070);
var anObject = __webpack_require__(52943);
var toIndexedObject = __webpack_require__(20829);
var objectKeys = __webpack_require__(12656);

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) {
    definePropertyModule.f(O, key = keys[index++], props[key]);
  }
  return O;
};

/***/ }),

/***/ 45070:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var IE8_DOM_DEFINE = __webpack_require__(30385);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(28290);
var anObject = __webpack_require__(52943);
var toPropertyKey = __webpack_require__(9370);
var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }
  return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ 22130:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var call = __webpack_require__(84550);
var propertyIsEnumerableModule = __webpack_require__(2962);
var createPropertyDescriptor = __webpack_require__(22424);
var toIndexedObject = __webpack_require__(20829);
var toPropertyKey = __webpack_require__(9370);
var hasOwn = __webpack_require__(81285);
var IE8_DOM_DEFINE = __webpack_require__(30385);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) {/* empty */}
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

/***/ }),

/***/ 62020:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-object-getownpropertynames -- safe */
var classof = __webpack_require__(700);
var toIndexedObject = __webpack_require__(20829);
var $getOwnPropertyNames = (__webpack_require__(72205).f);
var arraySlice = __webpack_require__(15521);
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function getWindowNames(it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) == 'Window' ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
};

/***/ }),

/***/ 72205:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(67178);
var enumBugKeys = __webpack_require__(63148);
var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

/***/ }),

/***/ 32693:
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ 35651:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(81285);
var isCallable = __webpack_require__(76306);
var toObject = __webpack_require__(25769);
var sharedKey = __webpack_require__(60759);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(20457);
var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  }
  return object instanceof $Object ? ObjectPrototype : null;
};

/***/ }),

/***/ 91268:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var isObject = __webpack_require__(74194);
var classof = __webpack_require__(700);
var ARRAY_BUFFER_NON_EXTENSIBLE = __webpack_require__(15158);

// eslint-disable-next-line es/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () {
  $isExtensible(1);
});

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
  if (!isObject(it)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == 'ArrayBuffer') return false;
  return $isExtensible ? $isExtensible(it) : true;
} : $isExtensible;

/***/ }),

/***/ 77240:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
module.exports = uncurryThis({}.isPrototypeOf);

/***/ }),

/***/ 67178:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var hasOwn = __webpack_require__(81285);
var toIndexedObject = __webpack_require__(20829);
var indexOf = (__webpack_require__(7255).indexOf);
var hiddenKeys = __webpack_require__(29841);
var push = uncurryThis([].push);
module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) {
    !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  }
  // Don't enum bug & hidden keys
  while (names.length > i) {
    if (hasOwn(O, key = names[i++])) {
      ~indexOf(result, key) || push(result, key);
    }
  }
  return result;
};

/***/ }),

/***/ 12656:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(67178);
var enumBugKeys = __webpack_require__(63148);

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

/***/ }),

/***/ 2962:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
  1: 2
}, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

/***/ }),

/***/ 70629:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var IS_PURE = __webpack_require__(58855);
var global = __webpack_require__(52586);
var fails = __webpack_require__(45200);
var WEBKIT = __webpack_require__(99217);

// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function () {
  // This feature detection crashes old WebKit
  // https://github.com/zloirock/core-js/issues/232
  if (WEBKIT && WEBKIT < 535) return;
  var key = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call, es/no-legacy-object-prototype-accessor-methods -- required for testing
  __defineSetter__.call(null, key, function () {/* empty */});
  delete global[key];
});

/***/ }),

/***/ 40616:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__(85317);
var anObject = __webpack_require__(52943);
var aPossiblePrototype = __webpack_require__(21892);

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) {/* empty */}
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);else O.__proto__ = proto;
    return O;
  };
}() : undefined);

/***/ }),

/***/ 27758:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var uncurryThis = __webpack_require__(85317);
var objectKeys = __webpack_require__(12656);
var toIndexedObject = __webpack_require__(20829);
var $propertyIsEnumerable = (__webpack_require__(2962).f);
var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
var push = uncurryThis([].push);

// `Object.{ entries, values }` methods implementation
var createMethod = function createMethod(TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};
module.exports = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod(false)
};

/***/ }),

/***/ 43024:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var TO_STRING_TAG_SUPPORT = __webpack_require__(14947);
var classof = __webpack_require__(84368);

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

/***/ }),

/***/ 81125:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ 15732:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(40866);
var uncurryThis = __webpack_require__(85317);
var getOwnPropertyNamesModule = __webpack_require__(72205);
var getOwnPropertySymbolsModule = __webpack_require__(32693);
var anObject = __webpack_require__(52943);
var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};

/***/ }),

/***/ 87526:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
module.exports = global;

/***/ }),

/***/ 32780:
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return {
      error: false,
      value: exec()
    };
  } catch (error) {
    return {
      error: true,
      value: error
    };
  }
};

/***/ }),

/***/ 48112:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var NativePromiseConstructor = __webpack_require__(51471);
var isCallable = __webpack_require__(76306);
var isForced = __webpack_require__(40695);
var inspectSource = __webpack_require__(60735);
var wellKnownSymbol = __webpack_require__(65373);
var IS_BROWSER = __webpack_require__(53858);
var IS_DENO = __webpack_require__(72641);
var IS_PURE = __webpack_require__(58855);
var V8_VERSION = __webpack_require__(54875);
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);
var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
    // Detect correctness of subclassing with @@species support
    var promise = new NativePromiseConstructor(function (resolve) {
      resolve(1);
    });
    var FakePromise = function FakePromise(exec) {
      exec(function () {/* empty */}, function () {/* empty */});
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES] = FakePromise;
    SUBCLASSING = promise.then(function () {/* empty */}) instanceof FakePromise;
    if (!SUBCLASSING) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  }
  return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
});
module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};

/***/ }),

/***/ 51471:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
module.exports = global.Promise;

/***/ }),

/***/ 28982:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(52943);
var isObject = __webpack_require__(74194);
var newPromiseCapability = __webpack_require__(16593);
module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

/***/ }),

/***/ 78120:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NativePromiseConstructor = __webpack_require__(51471);
var checkCorrectnessOfIteration = __webpack_require__(33469);
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(48112).CONSTRUCTOR);
module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () {/* empty */});
});

/***/ }),

/***/ 92261:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = (__webpack_require__(45070).f);
module.exports = function (Target, Source, key) {
  key in Target || defineProperty(Target, key, {
    configurable: true,
    get: function get() {
      return Source[key];
    },
    set: function set(it) {
      Source[key] = it;
    }
  });
};

/***/ }),

/***/ 88226:
/***/ ((module) => {

var Queue = function Queue() {
  this.head = null;
  this.tail = null;
};
Queue.prototype = {
  add: function add(item) {
    var entry = {
      item: item,
      next: null
    };
    if (this.head) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
  },
  get: function get() {
    var entry = this.head;
    if (entry) {
      this.head = entry.next;
      if (this.tail === entry) this.tail = null;
      return entry.item;
    }
  }
};
module.exports = Queue;

/***/ }),

/***/ 3414:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var anObject = __webpack_require__(52943);
var isCallable = __webpack_require__(76306);
var classof = __webpack_require__(700);
var regexpExec = __webpack_require__(34646);
var $TypeError = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call(regexpExec, R, S);
  throw $TypeError('RegExp#exec called on incompatible receiver');
};

/***/ }),

/***/ 34646:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var toString = __webpack_require__(80978);
var regexpFlags = __webpack_require__(61089);
var stickyHelpers = __webpack_require__(11426);
var shared = __webpack_require__(14707);
var create = __webpack_require__(1578);
var getInternalState = (__webpack_require__(59351).get);
var UNSUPPORTED_DOT_ALL = __webpack_require__(70485);
var UNSUPPORTED_NCG = __webpack_require__(6465);
var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt = uncurryThis(''.charAt);
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var UPDATES_LAST_INDEX_WRONG = function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call(nativeExec, re1, 'a');
  call(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
}();
var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;
if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;
    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }
    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = call(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;
    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }
      strCopy = stringSlice(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }
    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
    match = call(nativeExec, sticky ? reCopy : re, strCopy);
    if (sticky) {
      if (match) {
        match.input = stringSlice(match.input, charsAdded);
        match[0] = stringSlice(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/
      call(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }
    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }
    return match;
  };
}
module.exports = patchedExec;

/***/ }),

/***/ 61089:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var anObject = __webpack_require__(52943);

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};

/***/ }),

/***/ 1002:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var hasOwn = __webpack_require__(81285);
var isPrototypeOf = __webpack_require__(77240);
var regExpFlags = __webpack_require__(61089);
var RegExpPrototype = RegExp.prototype;
module.exports = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
};

/***/ }),

/***/ 11426:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var global = __webpack_require__(52586);

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;
var UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y || fails(function () {
  return !$RegExp('a', 'y').sticky;
});
var BROKEN_CARET = UNSUPPORTED_Y || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});
module.exports = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y
};

/***/ }),

/***/ 70485:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var global = __webpack_require__(52586);

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;
module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});

/***/ }),

/***/ 6465:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var global = __webpack_require__(52586);

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;
module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' || 'b'.replace(re, '$<a>c') !== 'bc';
});

/***/ }),

/***/ 20877:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isNullOrUndefined = __webpack_require__(19268);
var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw $TypeError("Can't call method on " + it);
  return it;
};

/***/ }),

/***/ 70871:
/***/ ((module) => {

// `SameValue` abstract operation
// https://tc39.es/ecma262/#sec-samevalue
// eslint-disable-next-line es/no-object-is -- safe
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare -- NaN check
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),

/***/ 80358:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var apply = __webpack_require__(72942);
var isCallable = __webpack_require__(76306);
var userAgent = __webpack_require__(62060);
var arraySlice = __webpack_require__(45386);
var validateArgumentsLength = __webpack_require__(72217);
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var Function = global.Function;
var wrap = function wrap(scheduler) {
  return MSIE ? function (handler, timeout /* , ...arguments */) {
    var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = boundArgs ? arraySlice(arguments, 2) : undefined;
    return scheduler(boundArgs ? function () {
      apply(fn, this, args);
    } : fn, timeout);
  } : scheduler;
};

// ie9- setTimeout & setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
module.exports = {
  // `setTimeout` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
  setTimeout: wrap(global.setTimeout),
  // `setInterval` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  setInterval: wrap(global.setInterval)
};

/***/ }),

/***/ 94847:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getBuiltIn = __webpack_require__(40866);
var definePropertyModule = __webpack_require__(45070);
var wellKnownSymbol = __webpack_require__(65373);
var DESCRIPTORS = __webpack_require__(9811);
var SPECIES = wellKnownSymbol('species');
module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;
  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function get() {
        return this;
      }
    });
  }
};

/***/ }),

/***/ 46736:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = (__webpack_require__(45070).f);
var hasOwn = __webpack_require__(81285);
var wellKnownSymbol = __webpack_require__(65373);
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, {
      configurable: true,
      value: TAG
    });
  }
};

/***/ }),

/***/ 60759:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(14707);
var uid = __webpack_require__(97214);
var keys = shared('keys');
module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

/***/ }),

/***/ 2950:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var defineGlobalProperty = __webpack_require__(80777);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});
module.exports = store;

/***/ }),

/***/ 14707:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(58855);
var store = __webpack_require__(2950);
(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.26.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

/***/ }),

/***/ 30646:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(52943);
var aConstructor = __webpack_require__(72126);
var isNullOrUndefined = __webpack_require__(19268);
var wellKnownSymbol = __webpack_require__(65373);
var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
};

/***/ }),

/***/ 28234:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

/***/ }),

/***/ 36726:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var toIntegerOrInfinity = __webpack_require__(58553);
var toString = __webpack_require__(80978);
var requireObjectCoercible = __webpack_require__(20877);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);
var createMethod = function createMethod(CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};
module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

/***/ }),

/***/ 82898:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/zloirock/core-js/issues/280
var userAgent = __webpack_require__(62060);
module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);

/***/ }),

/***/ 72594:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/tc39/proposal-string-pad-start-end
var uncurryThis = __webpack_require__(85317);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var $repeat = __webpack_require__(90971);
var requireObjectCoercible = __webpack_require__(20877);
var repeat = uncurryThis($repeat);
var stringSlice = uncurryThis(''.slice);
var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function createMethod(IS_END) {
  return function ($this, maxLength, fillString) {
    var S = toString(requireObjectCoercible($this));
    var intMaxLength = toLength(maxLength);
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : toString(fillString);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringSlice(stringFiller, 0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};
module.exports = {
  // `String.prototype.padStart` method
  // https://tc39.es/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.es/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};

/***/ }),

/***/ 97983:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var uncurryThis = __webpack_require__(85317);
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var $RangeError = RangeError;
var exec = uncurryThis(regexSeparators.exec);
var floor = Math.floor;
var fromCharCode = String.fromCharCode;
var charCodeAt = uncurryThis(''.charCodeAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var split = uncurryThis(''.split);
var toLowerCase = uncurryThis(''.toLowerCase);

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function ucs2decode(string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = charCodeAt(string, counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = charCodeAt(string, counter++);
      if ((extra & 0xFC00) == 0xDC00) {
        // Low surrogate.
        push(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        push(output, value);
        counter--;
      }
    } else {
      push(output, value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function digitToBasic(digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  while (delta > baseMinusTMin * tMax >> 1) {
    delta = floor(delta / baseMinusTMin);
    k += base;
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
var encode = function encode(input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      push(output, fromCharCode(currentValue));
    }
  }
  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    push(output, delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw $RangeError(OVERFLOW_ERROR);
    }
    delta += (m - n) * handledCPCountPlusOne;
    n = m;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw $RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        var k = base;
        while (true) {
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          push(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
          k += base;
        }
        push(output, fromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        handledCPCount++;
      }
    }
    delta++;
    n++;
  }
  return join(output, '');
};
module.exports = function (input) {
  var encoded = [];
  var labels = split(replace(toLowerCase(input), regexSeparators, "."), '.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    push(encoded, exec(regexNonASCII, label) ? 'xn--' + encode(label) : label);
  }
  return join(encoded, '.');
};

/***/ }),

/***/ 90971:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toIntegerOrInfinity = __webpack_require__(58553);
var toString = __webpack_require__(80978);
var requireObjectCoercible = __webpack_require__(20877);
var $RangeError = RangeError;

// `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat
module.exports = function repeat(count) {
  var str = toString(requireObjectCoercible(this));
  var result = '';
  var n = toIntegerOrInfinity(count);
  if (n < 0 || n == Infinity) throw $RangeError('Wrong number of repetitions');
  for (; n > 0; (n >>>= 1) && (str += str)) {
    if (n & 1) result += str;
  }
  return result;
};

/***/ }),

/***/ 81569:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $trimEnd = (__webpack_require__(86392).end);
var forcedStringTrimMethod = __webpack_require__(17273);

// `String.prototype.{ trimEnd, trimRight }` method
// https://tc39.es/ecma262/#sec-string.prototype.trimend
// https://tc39.es/ecma262/#String.prototype.trimright
module.exports = forcedStringTrimMethod('trimEnd') ? function trimEnd() {
  return $trimEnd(this);
  // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
} : ''.trimEnd;

/***/ }),

/***/ 17273:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var PROPER_FUNCTION_NAME = (__webpack_require__(96922).PROPER);
var fails = __webpack_require__(45200);
var whitespaces = __webpack_require__(2429);
var non = "\u200B\x85\u180E";

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};

/***/ }),

/***/ 32723:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $trimStart = (__webpack_require__(86392).start);
var forcedStringTrimMethod = __webpack_require__(17273);

// `String.prototype.{ trimStart, trimLeft }` method
// https://tc39.es/ecma262/#sec-string.prototype.trimstart
// https://tc39.es/ecma262/#String.prototype.trimleft
module.exports = forcedStringTrimMethod('trimStart') ? function trimStart() {
  return $trimStart(this);
  // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
} : ''.trimStart;

/***/ }),

/***/ 86392:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var requireObjectCoercible = __webpack_require__(20877);
var toString = __webpack_require__(80978);
var whitespaces = __webpack_require__(2429);
var replace = uncurryThis(''.replace);
var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function createMethod(TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '');
    return string;
  };
};
module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};

/***/ }),

/***/ 29464:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(54875);
var fails = __webpack_require__(45200);

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
  // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

/***/ }),

/***/ 44131:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var getBuiltIn = __webpack_require__(40866);
var wellKnownSymbol = __webpack_require__(65373);
var defineBuiltIn = __webpack_require__(33549);
module.exports = function () {
  var Symbol = getBuiltIn('Symbol');
  var SymbolPrototype = Symbol && Symbol.prototype;
  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    // eslint-disable-next-line no-unused-vars -- required for .length
    defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function (hint) {
      return call(valueOf, this);
    }, {
      arity: 1
    });
  }
};

/***/ }),

/***/ 76171:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_SYMBOL = __webpack_require__(29464);

/* eslint-disable es/no-symbol -- safe */
module.exports = NATIVE_SYMBOL && !!Symbol['for'] && !!Symbol.keyFor;

/***/ }),

/***/ 39250:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var apply = __webpack_require__(72942);
var bind = __webpack_require__(81801);
var isCallable = __webpack_require__(76306);
var hasOwn = __webpack_require__(81285);
var fails = __webpack_require__(45200);
var html = __webpack_require__(74809);
var arraySlice = __webpack_require__(45386);
var createElement = __webpack_require__(3677);
var validateArgumentsLength = __webpack_require__(72217);
var IS_IOS = __webpack_require__(5236);
var IS_NODE = __webpack_require__(31292);
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var $location, defer, channel, port;
try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  $location = global.location;
} catch (error) {/* empty */}
var run = function run(id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var runner = function runner(id) {
  return function () {
    run(id);
  };
};
var listener = function listener(event) {
  run(event.data);
};
var post = function post(id) {
  // old engines have not location.origin
  global.postMessage(String(id), $location.protocol + '//' + $location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function defer(id) {
      process.nextTick(runner(id));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function defer(id) {
      Dispatch.now(runner(id));
    };
    // Browsers with MessageChannel, includes WebWorkers
    // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && isCallable(global.postMessage) && !global.importScripts && $location && $location.protocol !== 'file:' && !fails(post)) {
    defer = post;
    global.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function defer(id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function defer(id) {
      setTimeout(runner(id), 0);
    };
  }
}
module.exports = {
  set: set,
  clear: clear
};

/***/ }),

/***/ 84353:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);

// `thisNumberValue` abstract operation
// https://tc39.es/ecma262/#sec-thisnumbervalue
module.exports = uncurryThis(1.0.valueOf);

/***/ }),

/***/ 11652:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(58553);
var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

/***/ }),

/***/ 25187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(36238);
var $TypeError = TypeError;

// `ToBigInt` abstract operation
// https://tc39.es/ecma262/#sec-tobigint
module.exports = function (argument) {
  var prim = toPrimitive(argument, 'number');
  if (typeof prim == 'number') throw $TypeError("Can't convert number to bigint");
  // eslint-disable-next-line es/no-bigint -- safe
  return BigInt(prim);
};

/***/ }),

/***/ 55476:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(58553);
var toLength = __webpack_require__(49152);
var $RangeError = RangeError;

// `ToIndex` abstract operation
// https://tc39.es/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toIntegerOrInfinity(it);
  var length = toLength(number);
  if (number !== length) throw $RangeError('Wrong length or index');
  return length;
};

/***/ }),

/***/ 20829:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(68813);
var requireObjectCoercible = __webpack_require__(20877);
module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

/***/ }),

/***/ 58553:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trunc = __webpack_require__(94891);

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};

/***/ }),

/***/ 49152:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(58553);
var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

/***/ }),

/***/ 25769:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var requireObjectCoercible = __webpack_require__(20877);
var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};

/***/ }),

/***/ 29575:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPositiveInteger = __webpack_require__(27895);
var $RangeError = RangeError;
module.exports = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw $RangeError('Wrong offset');
  return offset;
};

/***/ }),

/***/ 27895:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(58553);
var $RangeError = RangeError;
module.exports = function (it) {
  var result = toIntegerOrInfinity(it);
  if (result < 0) throw $RangeError("The argument can't be less than 0");
  return result;
};

/***/ }),

/***/ 36238:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(84550);
var isObject = __webpack_require__(74194);
var isSymbol = __webpack_require__(78991);
var getMethod = __webpack_require__(11701);
var ordinaryToPrimitive = __webpack_require__(81125);
var wellKnownSymbol = __webpack_require__(65373);
var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

/***/ }),

/***/ 9370:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(36238);
var isSymbol = __webpack_require__(78991);

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

/***/ }),

/***/ 14947:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(65373);
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};
test[TO_STRING_TAG] = 'z';
module.exports = String(test) === '[object z]';

/***/ }),

/***/ 80978:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(84368);
var $String = String;
module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};

/***/ }),

/***/ 49958:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_NODE = __webpack_require__(31292);
module.exports = function (name) {
  try {
    // eslint-disable-next-line no-new-func -- safe
    if (IS_NODE) return Function('return require("' + name + '")')();
  } catch (error) {/* empty */}
};

/***/ }),

/***/ 30821:
/***/ ((module) => {

var $String = String;
module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};

/***/ }),

/***/ 81767:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var call = __webpack_require__(84550);
var DESCRIPTORS = __webpack_require__(9811);
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(59225);
var ArrayBufferViewCore = __webpack_require__(82094);
var ArrayBufferModule = __webpack_require__(2091);
var anInstance = __webpack_require__(6441);
var createPropertyDescriptor = __webpack_require__(22424);
var createNonEnumerableProperty = __webpack_require__(91705);
var isIntegralNumber = __webpack_require__(34715);
var toLength = __webpack_require__(49152);
var toIndex = __webpack_require__(55476);
var toOffset = __webpack_require__(29575);
var toPropertyKey = __webpack_require__(9370);
var hasOwn = __webpack_require__(81285);
var classof = __webpack_require__(84368);
var isObject = __webpack_require__(74194);
var isSymbol = __webpack_require__(78991);
var create = __webpack_require__(1578);
var isPrototypeOf = __webpack_require__(77240);
var setPrototypeOf = __webpack_require__(40616);
var getOwnPropertyNames = (__webpack_require__(72205).f);
var typedArrayFrom = __webpack_require__(22524);
var forEach = (__webpack_require__(11729).forEach);
var setSpecies = __webpack_require__(94847);
var definePropertyModule = __webpack_require__(45070);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);
var InternalStateModule = __webpack_require__(59351);
var inheritIfRequired = __webpack_require__(57170);
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var enforceInternalState = InternalStateModule.enforce;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var ArrayBufferPrototype = ArrayBuffer.prototype;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';
var fromList = function fromList(C, list) {
  aTypedArrayConstructor(C);
  var index = 0;
  var length = list.length;
  var result = new C(length);
  while (length > index) {
    result[index] = list[index++];
  }
  return result;
};
var addGetter = function addGetter(it, key) {
  nativeDefineProperty(it, key, {
    get: function get() {
      return getInternalState(this)[key];
    }
  });
};
var isArrayBuffer = function isArrayBuffer(it) {
  var klass;
  return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};
var isTypedArrayIndex = function isTypedArrayIndex(target, key) {
  return isTypedArray(target) && !isSymbol(key) && key in target && isIntegralNumber(+key) && key >= 0;
};
var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  key = toPropertyKey(key);
  return isTypedArrayIndex(target, key) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
};
var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  key = toPropertyKey(key);
  if (isTypedArrayIndex(target, key) && isObject(descriptor) && hasOwn(descriptor, 'value') && !hasOwn(descriptor, 'get') && !hasOwn(descriptor, 'set')
  // TODO: add validation descriptor w/o calling accessors
  && !descriptor.configurable && (!hasOwn(descriptor, 'writable') || descriptor.writable) && (!hasOwn(descriptor, 'enumerable') || descriptor.enumerable)) {
    target[key] = descriptor.value;
    return target;
  }
  return nativeDefineProperty(target, key, descriptor);
};
if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }
  $({
    target: 'Object',
    stat: true,
    forced: !NATIVE_ARRAY_BUFFER_VIEWS
  }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });
  module.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};
    var getter = function getter(that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };
    var setter = function setter(that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };
    var addElement = function addElement(that, index) {
      nativeDefineProperty(that, index, {
        get: function get() {
          return getter(this, index);
        },
        set: function set(value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructorPrototype);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return call(typedArrayFrom, TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) {
          addElement(that, index++);
        }
      });
      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructorPrototype);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return call(typedArrayFrom, TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });
      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }
    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }
    enforceInternalState(TypedArrayConstructorPrototype).TypedArrayConstructor = TypedArrayConstructor;
    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }
    var FORCED = TypedArrayConstructor != NativeTypedArrayConstructor;
    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
    $({
      global: true,
      constructor: true,
      forced: FORCED,
      sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);
    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }
    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }
    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () {/* empty */};

/***/ }),

/***/ 59225:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable no-new -- required for testing */
var global = __webpack_require__(52586);
var fails = __webpack_require__(45200);
var checkCorrectnessOfIteration = __webpack_require__(33469);
var NATIVE_ARRAY_BUFFER_VIEWS = (__webpack_require__(82094).NATIVE_ARRAY_BUFFER_VIEWS);
var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;
module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});

/***/ }),

/***/ 28939:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFromConstructorAndList = __webpack_require__(92);
var typedArraySpeciesConstructor = __webpack_require__(37789);
module.exports = function (instance, list) {
  return arrayFromConstructorAndList(typedArraySpeciesConstructor(instance), list);
};

/***/ }),

/***/ 22524:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(81801);
var call = __webpack_require__(84550);
var aConstructor = __webpack_require__(72126);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var getIterator = __webpack_require__(25221);
var getIteratorMethod = __webpack_require__(82093);
var isArrayIteratorMethod = __webpack_require__(93061);
var isBigIntArray = __webpack_require__(76500);
var aTypedArrayConstructor = (__webpack_require__(82094).aTypedArrayConstructor);
var toBigInt = __webpack_require__(25187);
module.exports = function from(source /* , mapfn, thisArg */) {
  var C = aConstructor(this);
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, thisIsBigIntArray, value, step, iterator, next;
  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    O = [];
    while (!(step = call(next, iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2]);
  }
  length = lengthOfArrayLike(O);
  result = new (aTypedArrayConstructor(C))(length);
  thisIsBigIntArray = isBigIntArray(result);
  for (i = 0; length > i; i++) {
    value = mapping ? mapfn(O[i], i) : O[i];
    // FF30- typed arrays doesn't properly convert objects to typed array values
    result[i] = thisIsBigIntArray ? toBigInt(value) : +value;
  }
  return result;
};

/***/ }),

/***/ 37789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ArrayBufferViewCore = __webpack_require__(82094);
var speciesConstructor = __webpack_require__(30646);
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;

// a part of `TypedArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#typedarray-species-create
module.exports = function (originalArray) {
  return aTypedArrayConstructor(speciesConstructor(originalArray, getTypedArrayConstructor(originalArray)));
};

/***/ }),

/***/ 97214:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(85317);
var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);
module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};

/***/ }),

/***/ 26753:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(45200);
var wellKnownSymbol = __webpack_require__(65373);
var IS_PURE = __webpack_require__(58855);
var ITERATOR = wellKnownSymbol('iterator');
module.exports = !fails(function () {
  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR]
  // throws in Edge
  || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
  // not punycoded in Edge
  || new URL('http://тест').host !== 'xn--e1aybc'
  // not escaped in Chrome 62-
  || new URL('http://a#б').hash !== '#%D0%B1'
  // fails in Chrome 66-
  || result !== 'a1c3'
  // throws in Safari
  || new URL('http://x', undefined).host !== 'x';
});

/***/ }),

/***/ 93880:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(29464);
module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

/***/ }),

/***/ 28290:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var fails = __webpack_require__(45200);

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () {/* empty */}, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

/***/ }),

/***/ 72217:
/***/ ((module) => {

var $TypeError = TypeError;
module.exports = function (passed, required) {
  if (passed < required) throw $TypeError('Not enough arguments');
  return passed;
};

/***/ }),

/***/ 75156:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var isCallable = __webpack_require__(76306);
var WeakMap = global.WeakMap;
module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));

/***/ }),

/***/ 28569:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var path = __webpack_require__(87526);
var hasOwn = __webpack_require__(81285);
var wrappedWellKnownSymbolModule = __webpack_require__(12002);
var defineProperty = (__webpack_require__(45070).f);
module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

/***/ }),

/***/ 12002:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(65373);
exports.f = wellKnownSymbol;

/***/ }),

/***/ 65373:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var shared = __webpack_require__(14707);
var hasOwn = __webpack_require__(81285);
var uid = __webpack_require__(97214);
var NATIVE_SYMBOL = __webpack_require__(29464);
var USE_SYMBOL_AS_UID = __webpack_require__(93880);
var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;
module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  }
  return WellKnownSymbolsStore[name];
};

/***/ }),

/***/ 2429:
/***/ ((module) => {

// a string of all valid unicode whitespaces
module.exports = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002" + "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

/***/ }),

/***/ 90890:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getBuiltIn = __webpack_require__(40866);
var hasOwn = __webpack_require__(81285);
var createNonEnumerableProperty = __webpack_require__(91705);
var isPrototypeOf = __webpack_require__(77240);
var setPrototypeOf = __webpack_require__(40616);
var copyConstructorProperties = __webpack_require__(58376);
var proxyAccessor = __webpack_require__(92261);
var inheritIfRequired = __webpack_require__(57170);
var normalizeStringArgument = __webpack_require__(65887);
var installErrorCause = __webpack_require__(59443);
var clearErrorStack = __webpack_require__(31481);
var ERROR_STACK_INSTALLABLE = __webpack_require__(30382);
var DESCRIPTORS = __webpack_require__(9811);
var IS_PURE = __webpack_require__(58855);
module.exports = function (FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
  var STACK_TRACE_LIMIT = 'stackTraceLimit';
  var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
  var path = FULL_NAME.split('.');
  var ERROR_NAME = path[path.length - 1];
  var OriginalError = getBuiltIn.apply(null, path);
  if (!OriginalError) return;
  var OriginalErrorPrototype = OriginalError.prototype;

  // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006
  if (!IS_PURE && hasOwn(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;
  if (!FORCED) return OriginalError;
  var BaseError = getBuiltIn('Error');
  var WrappedError = wrapper(function (a, b) {
    var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, undefined);
    var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
    if (message !== undefined) createNonEnumerableProperty(result, 'message', message);
    if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(result, 'stack', clearErrorStack(result.stack, 2));
    if (this && isPrototypeOf(OriginalErrorPrototype, this)) inheritIfRequired(result, this, WrappedError);
    if (arguments.length > OPTIONS_POSITION) installErrorCause(result, arguments[OPTIONS_POSITION]);
    return result;
  });
  WrappedError.prototype = OriginalErrorPrototype;
  if (ERROR_NAME !== 'Error') {
    if (setPrototypeOf) setPrototypeOf(WrappedError, BaseError);else copyConstructorProperties(WrappedError, BaseError, {
      name: true
    });
  } else if (DESCRIPTORS && STACK_TRACE_LIMIT in OriginalError) {
    proxyAccessor(WrappedError, OriginalError, STACK_TRACE_LIMIT);
    proxyAccessor(WrappedError, OriginalError, 'prepareStackTrace');
  }
  copyConstructorProperties(WrappedError, OriginalError);
  if (!IS_PURE) try {
    // Safari 13- bug: WebAssembly errors does not have a proper `.name`
    if (OriginalErrorPrototype.name !== ERROR_NAME) {
      createNonEnumerableProperty(OriginalErrorPrototype, 'name', ERROR_NAME);
    }
    OriginalErrorPrototype.constructor = WrappedError;
  } catch (error) {/* empty */}
  return WrappedError;
};

/***/ }),

/***/ 25299:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var apply = __webpack_require__(72942);
var fails = __webpack_require__(45200);
var wrapErrorConstructorWithCause = __webpack_require__(90890);
var AGGREGATE_ERROR = 'AggregateError';
var $AggregateError = getBuiltIn(AGGREGATE_ERROR);
var FORCED = !fails(function () {
  return $AggregateError([1]).errors[0] !== 1;
}) && fails(function () {
  return $AggregateError([1], AGGREGATE_ERROR, {
    cause: 7
  }).cause !== 7;
});

// https://github.com/tc39/proposal-error-cause
$({
  global: true,
  constructor: true,
  arity: 2,
  forced: FORCED
}, {
  AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {
    // eslint-disable-next-line no-unused-vars -- required for functions `.length`
    return function AggregateError(errors, message) {
      return apply(init, this, arguments);
    };
  }, FORCED, true)
});

/***/ }),

/***/ 53212:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var isPrototypeOf = __webpack_require__(77240);
var getPrototypeOf = __webpack_require__(35651);
var setPrototypeOf = __webpack_require__(40616);
var copyConstructorProperties = __webpack_require__(58376);
var create = __webpack_require__(1578);
var createNonEnumerableProperty = __webpack_require__(91705);
var createPropertyDescriptor = __webpack_require__(22424);
var clearErrorStack = __webpack_require__(31481);
var installErrorCause = __webpack_require__(59443);
var iterate = __webpack_require__(63244);
var normalizeStringArgument = __webpack_require__(65887);
var wellKnownSymbol = __webpack_require__(65373);
var ERROR_STACK_INSTALLABLE = __webpack_require__(30382);
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Error = Error;
var push = [].push;
var $AggregateError = function AggregateError(errors, message /* , options */) {
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
  var that;
  if (setPrototypeOf) {
    that = setPrototypeOf($Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
  } else {
    that = isInstance ? this : create(AggregateErrorPrototype);
    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');
  }
  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
  if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
  installErrorCause(that, options);
  var errorsArray = [];
  iterate(errors, push, {
    that: errorsArray
  });
  createNonEnumerableProperty(that, 'errors', errorsArray);
  return that;
};
if (setPrototypeOf) setPrototypeOf($AggregateError, $Error);else copyConstructorProperties($AggregateError, $Error, {
  name: true
});
var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
  constructor: createPropertyDescriptor(1, $AggregateError),
  message: createPropertyDescriptor(1, ''),
  name: createPropertyDescriptor(1, 'AggregateError')
});

// `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor
$({
  global: true,
  constructor: true,
  arity: 2
}, {
  AggregateError: $AggregateError
});

/***/ }),

/***/ 53523:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(53212);

/***/ }),

/***/ 27803:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var arrayBufferModule = __webpack_require__(2091);
var setSpecies = __webpack_require__(94847);
var ARRAY_BUFFER = 'ArrayBuffer';
var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
var NativeArrayBuffer = global[ARRAY_BUFFER];

// `ArrayBuffer` constructor
// https://tc39.es/ecma262/#sec-arraybuffer-constructor
$({
  global: true,
  constructor: true,
  forced: NativeArrayBuffer !== ArrayBuffer
}, {
  ArrayBuffer: ArrayBuffer
});
setSpecies(ARRAY_BUFFER);

/***/ }),

/***/ 54995:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var ArrayBufferViewCore = __webpack_require__(82094);
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

// `ArrayBuffer.isView` method
// https://tc39.es/ecma262/#sec-arraybuffer.isview
$({
  target: 'ArrayBuffer',
  stat: true,
  forced: !NATIVE_ARRAY_BUFFER_VIEWS
}, {
  isView: ArrayBufferViewCore.isView
});

/***/ }),

/***/ 41017:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(62745);
var fails = __webpack_require__(45200);
var ArrayBufferModule = __webpack_require__(2091);
var anObject = __webpack_require__(52943);
var toAbsoluteIndex = __webpack_require__(11652);
var toLength = __webpack_require__(49152);
var speciesConstructor = __webpack_require__(30646);
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var DataViewPrototype = DataView.prototype;
var nativeArrayBufferSlice = uncurryThis(ArrayBuffer.prototype.slice);
var getUint8 = uncurryThis(DataViewPrototype.getUint8);
var setUint8 = uncurryThis(DataViewPrototype.setUint8);
var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice
$({
  target: 'ArrayBuffer',
  proto: true,
  unsafe: true,
  forced: INCORRECT_SLICE
}, {
  slice: function slice(start, end) {
    if (nativeArrayBufferSlice && end === undefined) {
      return nativeArrayBufferSlice(anObject(this), start); // FF fix
    }

    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;
    while (first < fin) {
      setUint8(viewTarget, index++, getUint8(viewSource, first++));
    }
    return result;
  }
});

/***/ }),

/***/ 46101:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var toIntegerOrInfinity = __webpack_require__(58553);
var addToUnscopables = __webpack_require__(9360);

// `Array.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method
$({
  target: 'Array',
  proto: true
}, {
  at: function at(index) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return k < 0 || k >= len ? undefined : O[k];
  }
});
addToUnscopables('at');

/***/ }),

/***/ 29074:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var isArray = __webpack_require__(96306);
var isObject = __webpack_require__(74194);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var doesNotExceedSafeInteger = __webpack_require__(49390);
var createProperty = __webpack_require__(27042);
var arraySpeciesCreate = __webpack_require__(30388);
var arrayMethodHasSpeciesSupport = __webpack_require__(24188);
var wellKnownSymbol = __webpack_require__(65373);
var V8_VERSION = __webpack_require__(54875);
var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});
var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');
var isConcatSpreadable = function isConcatSpreadable(O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};
var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({
  target: 'Array',
  proto: true,
  arity: 1,
  forced: FORCED
}, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        doesNotExceedSafeInteger(n + len);
        for (k = 0; k < len; k++, n++) {
          if (k in E) createProperty(A, n, E[k]);
        }
      } else {
        doesNotExceedSafeInteger(n + 1);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

/***/ }),

/***/ 74772:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var copyWithin = __webpack_require__(30707);
var addToUnscopables = __webpack_require__(9360);

// `Array.prototype.copyWithin` method
// https://tc39.es/ecma262/#sec-array.prototype.copywithin
$({
  target: 'Array',
  proto: true
}, {
  copyWithin: copyWithin
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('copyWithin');

/***/ }),

/***/ 60843:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $every = (__webpack_require__(11729).every);
var arrayMethodIsStrict = __webpack_require__(75891);
var STRICT_METHOD = arrayMethodIsStrict('every');

// `Array.prototype.every` method
// https://tc39.es/ecma262/#sec-array.prototype.every
$({
  target: 'Array',
  proto: true,
  forced: !STRICT_METHOD
}, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 98434:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fill = __webpack_require__(81);
var addToUnscopables = __webpack_require__(9360);

// `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill
$({
  target: 'Array',
  proto: true
}, {
  fill: fill
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');

/***/ }),

/***/ 15911:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $filter = (__webpack_require__(11729).filter);
var arrayMethodHasSpeciesSupport = __webpack_require__(24188);
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 1169:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $findIndex = (__webpack_require__(11729).findIndex);
var addToUnscopables = __webpack_require__(9360);
var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
  SKIPS_HOLES = false;
});

// `Array.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-array.prototype.findindex
$({
  target: 'Array',
  proto: true,
  forced: SKIPS_HOLES
}, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);

/***/ }),

/***/ 23253:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $findLastIndex = (__webpack_require__(22031).findLastIndex);
var addToUnscopables = __webpack_require__(9360);

// `Array.prototype.findLastIndex` method
// https://github.com/tc39/proposal-array-find-from-last
$({
  target: 'Array',
  proto: true
}, {
  findLastIndex: function findLastIndex(callbackfn /* , that = undefined */) {
    return $findLastIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
addToUnscopables('findLastIndex');

/***/ }),

/***/ 19942:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $findLast = (__webpack_require__(22031).findLast);
var addToUnscopables = __webpack_require__(9360);

// `Array.prototype.findLast` method
// https://github.com/tc39/proposal-array-find-from-last
$({
  target: 'Array',
  proto: true
}, {
  findLast: function findLast(callbackfn /* , that = undefined */) {
    return $findLast(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
addToUnscopables('findLast');

/***/ }),

/***/ 33365:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $find = (__webpack_require__(11729).find);
var addToUnscopables = __webpack_require__(9360);
var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () {
  SKIPS_HOLES = false;
});

// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
$({
  target: 'Array',
  proto: true,
  forced: SKIPS_HOLES
}, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);

/***/ }),

/***/ 432:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var flattenIntoArray = __webpack_require__(45541);
var aCallable = __webpack_require__(6406);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var arraySpeciesCreate = __webpack_require__(30388);

// `Array.prototype.flatMap` method
// https://tc39.es/ecma262/#sec-array.prototype.flatmap
$({
  target: 'Array',
  proto: true
}, {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A;
    aCallable(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});

/***/ }),

/***/ 91709:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var flattenIntoArray = __webpack_require__(45541);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var toIntegerOrInfinity = __webpack_require__(58553);
var arraySpeciesCreate = __webpack_require__(30388);

// `Array.prototype.flat` method
// https://tc39.es/ecma262/#sec-array.prototype.flat
$({
  target: 'Array',
  proto: true
}, {
  flat: function flat( /* depthArg = 1 */
  ) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));
    return A;
  }
});

/***/ }),

/***/ 37174:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var forEach = __webpack_require__(80980);

// `Array.prototype.forEach` method
// https://tc39.es/ecma262/#sec-array.prototype.foreach
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
$({
  target: 'Array',
  proto: true,
  forced: [].forEach != forEach
}, {
  forEach: forEach
});

/***/ }),

/***/ 40979:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var from = __webpack_require__(4789);
var checkCorrectnessOfIteration = __webpack_require__(33469);
var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  // eslint-disable-next-line es/no-array-from -- required for testing
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({
  target: 'Array',
  stat: true,
  forced: INCORRECT_ITERATION
}, {
  from: from
});

/***/ }),

/***/ 98820:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $includes = (__webpack_require__(7255).includes);
var fails = __webpack_require__(45200);
var addToUnscopables = __webpack_require__(9360);

// FF99+ bug
var BROKEN_ON_SPARSE = fails(function () {
  return !Array(1).includes();
});

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({
  target: 'Array',
  proto: true,
  forced: BROKEN_ON_SPARSE
}, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

/***/ }),

/***/ 48953:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable es/no-array-prototype-indexof -- required for testing */
var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(62745);
var $indexOf = (__webpack_require__(7255).indexOf);
var arrayMethodIsStrict = __webpack_require__(75891);
var nativeIndexOf = uncurryThis([].indexOf);
var NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');

// `Array.prototype.indexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.indexof
$({
  target: 'Array',
  proto: true,
  forced: NEGATIVE_ZERO || !STRICT_METHOD
}, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
    return NEGATIVE_ZERO
    // convert -0 to +0
    ? nativeIndexOf(this, searchElement, fromIndex) || 0 : $indexOf(this, searchElement, fromIndex);
  }
});

/***/ }),

/***/ 50347:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var isArray = __webpack_require__(96306);

// `Array.isArray` method
// https://tc39.es/ecma262/#sec-array.isarray
$({
  target: 'Array',
  stat: true
}, {
  isArray: isArray
});

/***/ }),

/***/ 66668:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toIndexedObject = __webpack_require__(20829);
var addToUnscopables = __webpack_require__(9360);
var Iterators = __webpack_require__(9806);
var InternalStateModule = __webpack_require__(59351);
var defineProperty = (__webpack_require__(45070).f);
var defineIterator = __webpack_require__(94375);
var createIterResultObject = __webpack_require__(65620);
var IS_PURE = __webpack_require__(58855);
var DESCRIPTORS = __webpack_require__(9811);
var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated),
    // target
    index: 0,
    // next index
    kind: kind // kind
  });
  // `%ArrayIteratorPrototype%.next` method
  // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return createIterResultObject(undefined, true);
  }
  if (kind == 'keys') return createIterResultObject(index, false);
  if (kind == 'values') return createIterResultObject(target[index], false);
  return createIterResultObject([index, target[index]], false);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', {
    value: 'values'
  });
} catch (error) {/* empty */}

/***/ }),

/***/ 39264:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var IndexedObject = __webpack_require__(68813);
var toIndexedObject = __webpack_require__(20829);
var arrayMethodIsStrict = __webpack_require__(75891);
var nativeJoin = uncurryThis([].join);
var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');

// `Array.prototype.join` method
// https://tc39.es/ecma262/#sec-array.prototype.join
$({
  target: 'Array',
  proto: true,
  forced: ES3_STRINGS || !STRICT_METHOD
}, {
  join: function join(separator) {
    return nativeJoin(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});

/***/ }),

/***/ 26433:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var lastIndexOf = __webpack_require__(58792);

// `Array.prototype.lastIndexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
// eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing
$({
  target: 'Array',
  proto: true,
  forced: lastIndexOf !== [].lastIndexOf
}, {
  lastIndexOf: lastIndexOf
});

/***/ }),

/***/ 74443:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $map = (__webpack_require__(11729).map);
var arrayMethodHasSpeciesSupport = __webpack_require__(24188);
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 88854:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var isConstructor = __webpack_require__(60116);
var createProperty = __webpack_require__(27042);
var $Array = Array;
var ISNT_GENERIC = fails(function () {
  function F() {/* empty */}
  // eslint-disable-next-line es/no-array-of -- safe
  return !($Array.of.call(F) instanceof F);
});

// `Array.of` method
// https://tc39.es/ecma262/#sec-array.of
// WebKit Array.of isn't generic
$({
  target: 'Array',
  stat: true,
  forced: ISNT_GENERIC
}, {
  of: function of( /* ...args */
  ) {
    var index = 0;
    var argumentsLength = arguments.length;
    var result = new (isConstructor(this) ? this : $Array)(argumentsLength);
    while (argumentsLength > index) {
      createProperty(result, index, arguments[index++]);
    }
    result.length = argumentsLength;
    return result;
  }
});

/***/ }),

/***/ 39181:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var setArrayLength = __webpack_require__(48196);
var doesNotExceedSafeInteger = __webpack_require__(49390);
var fails = __webpack_require__(45200);
var INCORRECT_TO_LENGTH = fails(function () {
  return [].push.call({
    length: 0x100000000
  }, 1) !== 4294967297;
});

// V8 and Safari <= 15.4, FF < 23 throws InternalError
// https://bugs.chromium.org/p/v8/issues/detail?id=12681
var SILENT_ON_NON_WRITABLE_LENGTH = !function () {
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', {
      writable: false
    }).push();
  } catch (error) {
    return error instanceof TypeError;
  }
}();

// `Array.prototype.push` method
// https://tc39.es/ecma262/#sec-array.prototype.push
$({
  target: 'Array',
  proto: true,
  arity: 1,
  forced: INCORRECT_TO_LENGTH || SILENT_ON_NON_WRITABLE_LENGTH
}, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function push(item) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var argCount = arguments.length;
    doesNotExceedSafeInteger(len + argCount);
    for (var i = 0; i < argCount; i++) {
      O[len] = arguments[i];
      len++;
    }
    setArrayLength(O, len);
    return len;
  }
});

/***/ }),

/***/ 9851:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $reduceRight = (__webpack_require__(59892).right);
var arrayMethodIsStrict = __webpack_require__(75891);
var CHROME_VERSION = __webpack_require__(54875);
var IS_NODE = __webpack_require__(31292);
var STRICT_METHOD = arrayMethodIsStrict('reduceRight');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

// `Array.prototype.reduceRight` method
// https://tc39.es/ecma262/#sec-array.prototype.reduceright
$({
  target: 'Array',
  proto: true,
  forced: !STRICT_METHOD || CHROME_BUG
}, {
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 36189:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $reduce = (__webpack_require__(59892).left);
var arrayMethodIsStrict = __webpack_require__(75891);
var CHROME_VERSION = __webpack_require__(54875);
var IS_NODE = __webpack_require__(31292);
var STRICT_METHOD = arrayMethodIsStrict('reduce');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

// `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce
$({
  target: 'Array',
  proto: true,
  forced: !STRICT_METHOD || CHROME_BUG
}, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    var length = arguments.length;
    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 82145:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var isArray = __webpack_require__(96306);
var nativeReverse = uncurryThis([].reverse);
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.es/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({
  target: 'Array',
  proto: true,
  forced: String(test) === String(test.reverse())
}, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign -- dirty hack
    if (isArray(this)) this.length = this.length;
    return nativeReverse(this);
  }
});

/***/ }),

/***/ 93034:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var isArray = __webpack_require__(96306);
var isConstructor = __webpack_require__(60116);
var isObject = __webpack_require__(74194);
var toAbsoluteIndex = __webpack_require__(11652);
var lengthOfArrayLike = __webpack_require__(52124);
var toIndexedObject = __webpack_require__(20829);
var createProperty = __webpack_require__(27042);
var wellKnownSymbol = __webpack_require__(65373);
var arrayMethodHasSpeciesSupport = __webpack_require__(24188);
var nativeSlice = __webpack_require__(45386);
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var SPECIES = wellKnownSymbol('species');
var $Array = Array;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === $Array || Constructor === undefined) {
        return nativeSlice(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? $Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) {
      if (k in O) createProperty(result, n, O[k]);
    }
    result.length = n;
    return result;
  }
});

/***/ }),

/***/ 6925:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $some = (__webpack_require__(11729).some);
var arrayMethodIsStrict = __webpack_require__(75891);
var STRICT_METHOD = arrayMethodIsStrict('some');

// `Array.prototype.some` method
// https://tc39.es/ecma262/#sec-array.prototype.some
$({
  target: 'Array',
  proto: true,
  forced: !STRICT_METHOD
}, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 97378:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var aCallable = __webpack_require__(6406);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var deletePropertyOrThrow = __webpack_require__(23489);
var toString = __webpack_require__(80978);
var fails = __webpack_require__(45200);
var internalSort = __webpack_require__(41766);
var arrayMethodIsStrict = __webpack_require__(75891);
var FF = __webpack_require__(85476);
var IE_OR_EDGE = __webpack_require__(22968);
var V8 = __webpack_require__(54875);
var WEBKIT = __webpack_require__(99217);
var test = [];
var nativeSort = uncurryThis(test.sort);
var push = uncurryThis(test.push);

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');
var STABLE_SORT = !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;
  var result = '';
  var code, chr, value, index;

  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);
    switch (code) {
      case 66:
      case 69:
      case 70:
      case 72:
        value = 3;
        break;
      case 68:
      case 71:
        value = 4;
        break;
      default:
        value = 2;
    }
    for (index = 0; index < 47; index++) {
      test.push({
        k: chr + index,
        v: value
      });
    }
  }
  test.sort(function (a, b) {
    return b.v - a.v;
  });
  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }
  return result !== 'DGBEFHACIJK';
});
var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
var getSortCompare = function getSortCompare(comparefn) {
  return function (x, y) {
    if (y === undefined) return -1;
    if (x === undefined) return 1;
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    return toString(x) > toString(y) ? 1 : -1;
  };
};

// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({
  target: 'Array',
  proto: true,
  forced: FORCED
}, {
  sort: function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);
    var array = toObject(this);
    if (STABLE_SORT) return comparefn === undefined ? nativeSort(array) : nativeSort(array, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike(array);
    var itemsLength, index;
    for (index = 0; index < arrayLength; index++) {
      if (index in array) push(items, array[index]);
    }
    internalSort(items, getSortCompare(comparefn));
    itemsLength = lengthOfArrayLike(items);
    index = 0;
    while (index < itemsLength) {
      array[index] = items[index++];
    }
    while (index < arrayLength) {
      deletePropertyOrThrow(array, index++);
    }
    return array;
  }
});

/***/ }),

/***/ 94963:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var setSpecies = __webpack_require__(94847);

// `Array[@@species]` getter
// https://tc39.es/ecma262/#sec-get-array-@@species
setSpecies('Array');

/***/ }),

/***/ 62874:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var toObject = __webpack_require__(25769);
var toAbsoluteIndex = __webpack_require__(11652);
var toIntegerOrInfinity = __webpack_require__(58553);
var lengthOfArrayLike = __webpack_require__(52124);
var setArrayLength = __webpack_require__(48196);
var doesNotExceedSafeInteger = __webpack_require__(49390);
var arraySpeciesCreate = __webpack_require__(30388);
var createProperty = __webpack_require__(27042);
var deletePropertyOrThrow = __webpack_require__(23489);
var arrayMethodHasSpeciesSupport = __webpack_require__(24188);
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
var max = Math.max;
var min = Math.min;

// `Array.prototype.splice` method
// https://tc39.es/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
    }
    doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];else deletePropertyOrThrow(O, to);
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) {
        deletePropertyOrThrow(O, k - 1);
      }
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];else deletePropertyOrThrow(O, to);
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    setArrayLength(O, len - actualDeleteCount + insertCount);
    return A;
  }
});

/***/ }),

/***/ 93484:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__(9360);

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flatMap');

/***/ }),

/***/ 15857:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__(9360);

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flat');

/***/ }),

/***/ 96564:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var toObject = __webpack_require__(25769);
var lengthOfArrayLike = __webpack_require__(52124);
var setArrayLength = __webpack_require__(48196);
var deletePropertyOrThrow = __webpack_require__(23489);
var doesNotExceedSafeInteger = __webpack_require__(49390);

// IE8-
var INCORRECT_RESULT = [].unshift(0) !== 1;

// V8 ~ Chrome < 71 and Safari <= 15.4, FF < 23 throws InternalError
var SILENT_ON_NON_WRITABLE_LENGTH = !function () {
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', {
      writable: false
    }).unshift();
  } catch (error) {
    return error instanceof TypeError;
  }
}();

// `Array.prototype.unshift` method
// https://tc39.es/ecma262/#sec-array.prototype.unshift
$({
  target: 'Array',
  proto: true,
  arity: 1,
  forced: INCORRECT_RESULT || SILENT_ON_NON_WRITABLE_LENGTH
}, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  unshift: function unshift(item) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var argCount = arguments.length;
    if (argCount) {
      doesNotExceedSafeInteger(len + argCount);
      var k = len;
      while (k--) {
        var to = k + argCount;
        if (k in O) O[to] = O[k];else deletePropertyOrThrow(O, to);
      }
      for (var j = 0; j < argCount; j++) {
        O[j] = arguments[j];
      }
    }
    return setArrayLength(O, len + argCount);
  }
});

/***/ }),

/***/ 36509:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var ArrayBufferModule = __webpack_require__(2091);
var NATIVE_ARRAY_BUFFER = __webpack_require__(77942);

// `DataView` constructor
// https://tc39.es/ecma262/#sec-dataview-constructor
$({
  global: true,
  constructor: true,
  forced: !NATIVE_ARRAY_BUFFER
}, {
  DataView: ArrayBufferModule.DataView
});

/***/ }),

/***/ 15536:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(36509);

/***/ }),

/***/ 56566:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var FORCED = fails(function () {
  return new Date(16e11).getYear() !== 120;
});
var getFullYear = uncurryThis(Date.prototype.getFullYear);

// `Date.prototype.getYear` method
// https://tc39.es/ecma262/#sec-date.prototype.getyear
$({
  target: 'Date',
  proto: true,
  forced: FORCED
}, {
  getYear: function getYear() {
    return getFullYear(this) - 1900;
  }
});

/***/ }),

/***/ 68289:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove from `core-js@4`
var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var $Date = Date;
var thisTimeValue = uncurryThis($Date.prototype.getTime);

// `Date.now` method
// https://tc39.es/ecma262/#sec-date.now
$({
  target: 'Date',
  stat: true
}, {
  now: function now() {
    return thisTimeValue(new $Date());
  }
});

/***/ }),

/***/ 44840:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toIntegerOrInfinity = __webpack_require__(58553);
var DatePrototype = Date.prototype;
var thisTimeValue = uncurryThis(DatePrototype.getTime);
var setFullYear = uncurryThis(DatePrototype.setFullYear);

// `Date.prototype.setYear` method
// https://tc39.es/ecma262/#sec-date.prototype.setyear
$({
  target: 'Date',
  proto: true
}, {
  setYear: function setYear(year) {
    // validate
    thisTimeValue(this);
    var yi = toIntegerOrInfinity(year);
    var yyyy = 0 <= yi && yi <= 99 ? yi + 1900 : yi;
    return setFullYear(this, yyyy);
  }
});

/***/ }),

/***/ 77831:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// `Date.prototype.toGMTString` method
// https://tc39.es/ecma262/#sec-date.prototype.togmtstring
$({
  target: 'Date',
  proto: true
}, {
  toGMTString: Date.prototype.toUTCString
});

/***/ }),

/***/ 15640:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var toISOString = __webpack_require__(45611);

// `Date.prototype.toISOString` method
// https://tc39.es/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
$({
  target: 'Date',
  proto: true,
  forced: Date.prototype.toISOString !== toISOString
}, {
  toISOString: toISOString
});

/***/ }),

/***/ 37329:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var toObject = __webpack_require__(25769);
var toPrimitive = __webpack_require__(36238);
var FORCED = fails(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
    toISOString: function toISOString() {
      return 1;
    }
  }) !== 1;
});

// `Date.prototype.toJSON` method
// https://tc39.es/ecma262/#sec-date.prototype.tojson
$({
  target: 'Date',
  proto: true,
  arity: 1,
  forced: FORCED
}, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O, 'number');
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/***/ }),

/***/ 1198:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(81285);
var defineBuiltIn = __webpack_require__(33549);
var dateToPrimitive = __webpack_require__(57368);
var wellKnownSymbol = __webpack_require__(65373);
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var DatePrototype = Date.prototype;

// `Date.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
if (!hasOwn(DatePrototype, TO_PRIMITIVE)) {
  defineBuiltIn(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
}

/***/ }),

/***/ 82248:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove from `core-js@4`
var uncurryThis = __webpack_require__(85317);
var defineBuiltIn = __webpack_require__(33549);
var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = uncurryThis(DatePrototype[TO_STRING]);
var thisTimeValue = uncurryThis(DatePrototype.getTime);

// `Date.prototype.toString` method
// https://tc39.es/ecma262/#sec-date.prototype.tostring
if (String(new Date(NaN)) != INVALID_DATE) {
  defineBuiltIn(DatePrototype, TO_STRING, function toString() {
    var value = thisTimeValue(this);
    // eslint-disable-next-line no-self-compare -- NaN check
    return value === value ? nativeDateToString(this) : INVALID_DATE;
  });
}

/***/ }),

/***/ 53242:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable no-unused-vars -- required for functions `.length` */
var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var apply = __webpack_require__(72942);
var wrapErrorConstructorWithCause = __webpack_require__(90890);
var WEB_ASSEMBLY = 'WebAssembly';
var WebAssembly = global[WEB_ASSEMBLY];
var FORCED = Error('e', {
  cause: 7
}).cause !== 7;
var exportGlobalErrorCauseWrapper = function exportGlobalErrorCauseWrapper(ERROR_NAME, wrapper) {
  var O = {};
  O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED);
  $({
    global: true,
    constructor: true,
    arity: 1,
    forced: FORCED
  }, O);
};
var exportWebAssemblyErrorCauseWrapper = function exportWebAssemblyErrorCauseWrapper(ERROR_NAME, wrapper) {
  if (WebAssembly && WebAssembly[ERROR_NAME]) {
    var O = {};
    O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED);
    $({
      target: WEB_ASSEMBLY,
      stat: true,
      constructor: true,
      arity: 1,
      forced: FORCED
    }, O);
  }
};

// https://github.com/tc39/proposal-error-cause
exportGlobalErrorCauseWrapper('Error', function (init) {
  return function Error(message) {
    return apply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('EvalError', function (init) {
  return function EvalError(message) {
    return apply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('RangeError', function (init) {
  return function RangeError(message) {
    return apply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
  return function ReferenceError(message) {
    return apply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
  return function SyntaxError(message) {
    return apply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('TypeError', function (init) {
  return function TypeError(message) {
    return apply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('URIError', function (init) {
  return function URIError(message) {
    return apply(init, this, arguments);
  };
});
exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
  return function CompileError(message) {
    return apply(init, this, arguments);
  };
});
exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
  return function LinkError(message) {
    return apply(init, this, arguments);
  };
});
exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
  return function RuntimeError(message) {
    return apply(init, this, arguments);
  };
});

/***/ }),

/***/ 27142:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineBuiltIn = __webpack_require__(33549);
var errorToString = __webpack_require__(495);
var ErrorPrototype = Error.prototype;

// `Error.prototype.toString` method fix
// https://tc39.es/ecma262/#sec-error.prototype.tostring
if (ErrorPrototype.toString !== errorToString) {
  defineBuiltIn(ErrorPrototype, 'toString', errorToString);
}

/***/ }),

/***/ 53102:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toString = __webpack_require__(80978);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var exec = uncurryThis(/./.exec);
var numberToString = uncurryThis(1.0.toString);
var toUpperCase = uncurryThis(''.toUpperCase);
var raw = /[\w*+\-./@]/;
var hex = function hex(code, length) {
  var result = numberToString(code, 16);
  while (result.length < length) {
    result = '0' + result;
  }
  return result;
};

// `escape` method
// https://tc39.es/ecma262/#sec-escape-string
$({
  global: true
}, {
  escape: function escape(string) {
    var str = toString(string);
    var result = '';
    var length = str.length;
    var index = 0;
    var chr, code;
    while (index < length) {
      chr = charAt(str, index++);
      if (exec(raw, chr)) {
        result += chr;
      } else {
        code = charCodeAt(chr, 0);
        if (code < 256) {
          result += '%' + hex(code, 2);
        } else {
          result += '%u' + toUpperCase(hex(code, 4));
        }
      }
    }
    return result;
  }
});

/***/ }),

/***/ 58981:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove from `core-js@4`
var $ = __webpack_require__(53064);
var bind = __webpack_require__(89723);

// `Function.prototype.bind` method
// https://tc39.es/ecma262/#sec-function.prototype.bind
$({
  target: 'Function',
  proto: true,
  forced: Function.bind !== bind
}, {
  bind: bind
});

/***/ }),

/***/ 45934:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var definePropertyModule = __webpack_require__(45070);
var getPrototypeOf = __webpack_require__(35651);
var wellKnownSymbol = __webpack_require__(65373);
var makeBuiltIn = __webpack_require__(13042);
var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype;

// `Function.prototype[@@hasInstance]` method
// https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance
if (!(HAS_INSTANCE in FunctionPrototype)) {
  definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
    value: makeBuiltIn(function (O) {
      if (!isCallable(this) || !isObject(O)) return false;
      var P = this.prototype;
      if (!isObject(P)) return O instanceof this;
      // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
      while (O = getPrototypeOf(O)) {
        if (P === O) return true;
      }
      return false;
    }, HAS_INSTANCE)
  });
}

/***/ }),

/***/ 72876:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var FUNCTION_NAME_EXISTS = (__webpack_require__(96922).EXISTS);
var uncurryThis = __webpack_require__(85317);
var defineProperty = (__webpack_require__(45070).f);
var FunctionPrototype = Function.prototype;
var functionToString = uncurryThis(FunctionPrototype.toString);
var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
var regExpExec = uncurryThis(nameRE.exec);
var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function get() {
      try {
        return regExpExec(nameRE, functionToString(this))[1];
      } catch (error) {
        return '';
      }
    }
  });
}

/***/ }),

/***/ 26850:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);

// `globalThis` object
// https://tc39.es/ecma262/#sec-globalthis
$({
  global: true,
  forced: global.globalThis !== global
}, {
  globalThis: global
});

/***/ }),

/***/ 44750:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var apply = __webpack_require__(72942);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var isArray = __webpack_require__(96306);
var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var isSymbol = __webpack_require__(78991);
var arraySlice = __webpack_require__(45386);
var NATIVE_SYMBOL = __webpack_require__(29464);
var $stringify = getBuiltIn('JSON', 'stringify');
var exec = uncurryThis(/./.exec);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var replace = uncurryThis(''.replace);
var numberToString = uncurryThis(1.0.toString);
var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;
var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {
  var symbol = getBuiltIn('Symbol')();
  // MS Edge converts symbol values to JSON as {}
  return $stringify([symbol]) != '[null]'
  // WebKit converts symbol values to JSON as null
  || $stringify({
    a: symbol
  }) != '{}'
  // V8 throws on boxed symbols
  || $stringify(Object(symbol)) != '{}';
});

// https://github.com/tc39/proposal-well-formed-stringify
var ILL_FORMED_UNICODE = fails(function () {
  return $stringify("\uDF06\uD834") !== "\"\\udf06\\ud834\"" || $stringify("\uDEAD") !== "\"\\udead\"";
});
var stringifyWithSymbolsFix = function stringifyWithSymbolsFix(it, replacer) {
  var args = arraySlice(arguments);
  var $replacer = replacer;
  if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
  if (!isArray(replacer)) replacer = function replacer(key, value) {
    if (isCallable($replacer)) value = call($replacer, this, key, value);
    if (!isSymbol(value)) return value;
  };
  args[1] = replacer;
  return apply($stringify, null, args);
};
var fixIllFormed = function fixIllFormed(match, offset, string) {
  var prev = charAt(string, offset - 1);
  var next = charAt(string, offset + 1);
  if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
    return "\\u" + numberToString(charCodeAt(match, 0), 16);
  }
  return match;
};
if ($stringify) {
  // `JSON.stringify` method
  // https://tc39.es/ecma262/#sec-json.stringify
  $({
    target: 'JSON',
    stat: true,
    arity: 3,
    forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
    }
  });
}

/***/ }),

/***/ 37703:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var setToStringTag = __webpack_require__(46736);

// JSON[@@toStringTag] property
// https://tc39.es/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

/***/ }),

/***/ 66276:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var collection = __webpack_require__(79524);
var collectionStrong = __webpack_require__(76702);

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
}, collectionStrong);

/***/ }),

/***/ 27253:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(66276);

/***/ }),

/***/ 65129:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var log1p = __webpack_require__(79854);

// eslint-disable-next-line es/no-math-acosh -- required for testing
var $acosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;
var FORCED = !$acosh
// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
|| Math.floor($acosh(Number.MAX_VALUE)) != 710
// Tor Browser bug: Math.acosh(Infinity) -> NaN
|| $acosh(Infinity) != Infinity;

// `Math.acosh` method
// https://tc39.es/ecma262/#sec-math.acosh
$({
  target: 'Math',
  stat: true,
  forced: FORCED
}, {
  acosh: function acosh(x) {
    var n = +x;
    return n < 1 ? NaN : n > 94906265.62425156 ? log(n) + LN2 : log1p(n - 1 + sqrt(n - 1) * sqrt(n + 1));
  }
});

/***/ }),

/***/ 35433:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// eslint-disable-next-line es/no-math-asinh -- required for testing
var $asinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;
function asinh(x) {
  var n = +x;
  return !isFinite(n) || n == 0 ? n : n < 0 ? -asinh(-n) : log(n + sqrt(n * n + 1));
}

// `Math.asinh` method
// https://tc39.es/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({
  target: 'Math',
  stat: true,
  forced: !($asinh && 1 / $asinh(0) > 0)
}, {
  asinh: asinh
});

/***/ }),

/***/ 79313:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// eslint-disable-next-line es/no-math-atanh -- required for testing
var $atanh = Math.atanh;
var log = Math.log;

// `Math.atanh` method
// https://tc39.es/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({
  target: 'Math',
  stat: true,
  forced: !($atanh && 1 / $atanh(-0) < 0)
}, {
  atanh: function atanh(x) {
    var n = +x;
    return n == 0 ? n : log((1 + n) / (1 - n)) / 2;
  }
});

/***/ }),

/***/ 28081:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var sign = __webpack_require__(31874);
var abs = Math.abs;
var pow = Math.pow;

// `Math.cbrt` method
// https://tc39.es/ecma262/#sec-math.cbrt
$({
  target: 'Math',
  stat: true
}, {
  cbrt: function cbrt(x) {
    var n = +x;
    return sign(n) * pow(abs(n), 1 / 3);
  }
});

/***/ }),

/***/ 4292:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var floor = Math.floor;
var log = Math.log;
var LOG2E = Math.LOG2E;

// `Math.clz32` method
// https://tc39.es/ecma262/#sec-math.clz32
$({
  target: 'Math',
  stat: true
}, {
  clz32: function clz32(x) {
    var n = x >>> 0;
    return n ? 31 - floor(log(n + 0.5) * LOG2E) : 32;
  }
});

/***/ }),

/***/ 53019:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var expm1 = __webpack_require__(91437);

// eslint-disable-next-line es/no-math-cosh -- required for testing
var $cosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;

// `Math.cosh` method
// https://tc39.es/ecma262/#sec-math.cosh
$({
  target: 'Math',
  stat: true,
  forced: !$cosh || $cosh(710) === Infinity
}, {
  cosh: function cosh(x) {
    var t = expm1(abs(x) - 1) + 1;
    return (t + 1 / (t * E * E)) * (E / 2);
  }
});

/***/ }),

/***/ 36832:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var expm1 = __webpack_require__(91437);

// `Math.expm1` method
// https://tc39.es/ecma262/#sec-math.expm1
// eslint-disable-next-line es/no-math-expm1 -- required for testing
$({
  target: 'Math',
  stat: true,
  forced: expm1 != Math.expm1
}, {
  expm1: expm1
});

/***/ }),

/***/ 30435:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fround = __webpack_require__(72896);

// `Math.fround` method
// https://tc39.es/ecma262/#sec-math.fround
$({
  target: 'Math',
  stat: true
}, {
  fround: fround
});

/***/ }),

/***/ 5123:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// eslint-disable-next-line es/no-math-hypot -- required for testing
var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;

// Chrome 77 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=9546
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

// `Math.hypot` method
// https://tc39.es/ecma262/#sec-math.hypot
$({
  target: 'Math',
  stat: true,
  arity: 2,
  forced: BUGGY
}, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  hypot: function hypot(value1, value2) {
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});

/***/ }),

/***/ 6217:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);

// eslint-disable-next-line es/no-math-imul -- required for testing
var $imul = Math.imul;
var FORCED = fails(function () {
  return $imul(0xFFFFFFFF, 5) != -5 || $imul.length != 2;
});

// `Math.imul` method
// https://tc39.es/ecma262/#sec-math.imul
// some WebKit versions fails with big numbers, some has wrong arity
$({
  target: 'Math',
  stat: true,
  forced: FORCED
}, {
  imul: function imul(x, y) {
    var UINT16 = 0xFFFF;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),

/***/ 83093:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var log10 = __webpack_require__(92104);

// `Math.log10` method
// https://tc39.es/ecma262/#sec-math.log10
$({
  target: 'Math',
  stat: true
}, {
  log10: log10
});

/***/ }),

/***/ 58674:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var log1p = __webpack_require__(79854);

// `Math.log1p` method
// https://tc39.es/ecma262/#sec-math.log1p
$({
  target: 'Math',
  stat: true
}, {
  log1p: log1p
});

/***/ }),

/***/ 23618:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var log = Math.log;
var LN2 = Math.LN2;

// `Math.log2` method
// https://tc39.es/ecma262/#sec-math.log2
$({
  target: 'Math',
  stat: true
}, {
  log2: function log2(x) {
    return log(x) / LN2;
  }
});

/***/ }),

/***/ 22720:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var sign = __webpack_require__(31874);

// `Math.sign` method
// https://tc39.es/ecma262/#sec-math.sign
$({
  target: 'Math',
  stat: true
}, {
  sign: sign
});

/***/ }),

/***/ 89040:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var expm1 = __webpack_require__(91437);
var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;
var FORCED = fails(function () {
  // eslint-disable-next-line es/no-math-sinh -- required for testing
  return Math.sinh(-2e-17) != -2e-17;
});

// `Math.sinh` method
// https://tc39.es/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({
  target: 'Math',
  stat: true,
  forced: FORCED
}, {
  sinh: function sinh(x) {
    var n = +x;
    return abs(n) < 1 ? (expm1(n) - expm1(-n)) / 2 : (exp(n - 1) - exp(-n - 1)) * (E / 2);
  }
});

/***/ }),

/***/ 19998:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var expm1 = __webpack_require__(91437);
var exp = Math.exp;

// `Math.tanh` method
// https://tc39.es/ecma262/#sec-math.tanh
$({
  target: 'Math',
  stat: true
}, {
  tanh: function tanh(x) {
    var n = +x;
    var a = expm1(n);
    var b = expm1(-n);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(n) + exp(-n));
  }
});

/***/ }),

/***/ 9583:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var setToStringTag = __webpack_require__(46736);

// Math[@@toStringTag] property
// https://tc39.es/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

/***/ }),

/***/ 2010:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var trunc = __webpack_require__(94891);

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
$({
  target: 'Math',
  stat: true
}, {
  trunc: trunc
});

/***/ }),

/***/ 88458:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var DESCRIPTORS = __webpack_require__(9811);
var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var isForced = __webpack_require__(40695);
var defineBuiltIn = __webpack_require__(33549);
var hasOwn = __webpack_require__(81285);
var inheritIfRequired = __webpack_require__(57170);
var isPrototypeOf = __webpack_require__(77240);
var isSymbol = __webpack_require__(78991);
var toPrimitive = __webpack_require__(36238);
var fails = __webpack_require__(45200);
var getOwnPropertyNames = (__webpack_require__(72205).f);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);
var defineProperty = (__webpack_require__(45070).f);
var thisNumberValue = __webpack_require__(84353);
var trim = (__webpack_require__(86392).trim);
var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;
var TypeError = global.TypeError;
var arraySlice = uncurryThis(''.slice);
var charCodeAt = uncurryThis(''.charCodeAt);

// `ToNumeric` abstract operation
// https://tc39.es/ecma262/#sec-tonumeric
var toNumeric = function toNumeric(value) {
  var primValue = toPrimitive(value, 'number');
  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
};

// `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber
var toNumber = function toNumber(argument) {
  var it = toPrimitive(argument, 'number');
  var first, third, radix, maxCode, digits, length, index, code;
  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = charCodeAt(it, 0);
    if (first === 43 || first === 45) {
      third = charCodeAt(it, 2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (charCodeAt(it, 1)) {
        case 66:
        case 98:
          radix = 2;
          maxCode = 49;
          break;
        // fast equal of /^0b[01]+$/i
        case 79:
        case 111:
          radix = 8;
          maxCode = 55;
          break;
        // fast equal of /^0o[0-7]+$/i
        default:
          return +it;
      }
      digits = arraySlice(it, 2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = charCodeAt(digits, index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      }
      return parseInt(digits, radix);
    }
  }
  return +it;
};

// `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
    var dummy = this;
    // check on 1..constructor(foo) case
    return isPrototypeOf(NumberPrototype, dummy) && fails(function () {
      thisNumberValue(dummy);
    }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
    // ESNext
    'fromString,range').split(','), j = 0, key; keys.length > j; j++) {
    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  defineBuiltIn(global, NUMBER, NumberWrapper, {
    constructor: true
  });
}

/***/ }),

/***/ 98072:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// `Number.EPSILON` constant
// https://tc39.es/ecma262/#sec-number.epsilon
$({
  target: 'Number',
  stat: true,
  nonConfigurable: true,
  nonWritable: true
}, {
  EPSILON: Math.pow(2, -52)
});

/***/ }),

/***/ 30593:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var numberIsFinite = __webpack_require__(84247);

// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
$({
  target: 'Number',
  stat: true
}, {
  isFinite: numberIsFinite
});

/***/ }),

/***/ 25408:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var isIntegralNumber = __webpack_require__(34715);

// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({
  target: 'Number',
  stat: true
}, {
  isInteger: isIntegralNumber
});

/***/ }),

/***/ 15496:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// `Number.isNaN` method
// https://tc39.es/ecma262/#sec-number.isnan
$({
  target: 'Number',
  stat: true
}, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return number != number;
  }
});

/***/ }),

/***/ 59987:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var isIntegralNumber = __webpack_require__(34715);
var abs = Math.abs;

// `Number.isSafeInteger` method
// https://tc39.es/ecma262/#sec-number.issafeinteger
$({
  target: 'Number',
  stat: true
}, {
  isSafeInteger: function isSafeInteger(number) {
    return isIntegralNumber(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
  }
});

/***/ }),

/***/ 29117:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.es/ecma262/#sec-number.max_safe_integer
$({
  target: 'Number',
  stat: true,
  nonConfigurable: true,
  nonWritable: true
}, {
  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
});

/***/ }),

/***/ 4962:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.es/ecma262/#sec-number.min_safe_integer
$({
  target: 'Number',
  stat: true,
  nonConfigurable: true,
  nonWritable: true
}, {
  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
});

/***/ }),

/***/ 56785:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var parseFloat = __webpack_require__(99722);

// `Number.parseFloat` method
// https://tc39.es/ecma262/#sec-number.parseFloat
// eslint-disable-next-line es/no-number-parsefloat -- required for testing
$({
  target: 'Number',
  stat: true,
  forced: Number.parseFloat != parseFloat
}, {
  parseFloat: parseFloat
});

/***/ }),

/***/ 72282:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var parseInt = __webpack_require__(87148);

// `Number.parseInt` method
// https://tc39.es/ecma262/#sec-number.parseint
// eslint-disable-next-line es/no-number-parseint -- required for testing
$({
  target: 'Number',
  stat: true,
  forced: Number.parseInt != parseInt
}, {
  parseInt: parseInt
});

/***/ }),

/***/ 44552:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toIntegerOrInfinity = __webpack_require__(58553);
var thisNumberValue = __webpack_require__(84353);
var $repeat = __webpack_require__(90971);
var log10 = __webpack_require__(92104);
var fails = __webpack_require__(45200);
var $RangeError = RangeError;
var $String = String;
var $isFinite = isFinite;
var abs = Math.abs;
var floor = Math.floor;
var pow = Math.pow;
var round = Math.round;
var nativeToExponential = uncurryThis(1.0.toExponential);
var repeat = uncurryThis($repeat);
var stringSlice = uncurryThis(''.slice);

// Edge 17-
var ROUNDS_PROPERLY = nativeToExponential(-6.9e-11, 4) === '-6.9000e-11'
// IE11- && Edge 14-
&& nativeToExponential(1.255, 2) === '1.25e+0'
// FF86-, V8 ~ Chrome 49-50
&& nativeToExponential(12345, 3) === '1.235e+4'
// FF86-, V8 ~ Chrome 49-50
&& nativeToExponential(25, 0) === '3e+1';

// IE8-
var THROWS_ON_INFINITY_FRACTION = fails(function () {
  nativeToExponential(1, Infinity);
}) && fails(function () {
  nativeToExponential(1, -Infinity);
});

// Safari <11 && FF <50
var PROPER_NON_FINITE_THIS_CHECK = !fails(function () {
  nativeToExponential(Infinity, Infinity);
}) && !fails(function () {
  nativeToExponential(NaN, Infinity);
});
var FORCED = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK;

// `Number.prototype.toExponential` method
// https://tc39.es/ecma262/#sec-number.prototype.toexponential
$({
  target: 'Number',
  proto: true,
  forced: FORCED
}, {
  toExponential: function toExponential(fractionDigits) {
    var x = thisNumberValue(this);
    if (fractionDigits === undefined) return nativeToExponential(x);
    var f = toIntegerOrInfinity(fractionDigits);
    if (!$isFinite(x)) return String(x);
    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation
    if (f < 0 || f > 20) throw $RangeError('Incorrect fraction digits');
    if (ROUNDS_PROPERLY) return nativeToExponential(x, f);
    var s = '';
    var m = '';
    var e = 0;
    var c = '';
    var d = '';
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x === 0) {
      e = 0;
      m = repeat('0', f + 1);
    } else {
      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08
      // TODO: improve accuracy with big fraction digits
      var l = log10(x);
      e = floor(l);
      var n = 0;
      var w = pow(10, e - f);
      n = round(x / w);
      if (2 * x >= (2 * n + 1) * w) {
        n += 1;
      }
      if (n >= pow(10, f + 1)) {
        n /= 10;
        e += 1;
      }
      m = $String(n);
    }
    if (f !== 0) {
      m = stringSlice(m, 0, 1) + '.' + stringSlice(m, 1);
    }
    if (e === 0) {
      c = '+';
      d = '0';
    } else {
      c = e > 0 ? '+' : '-';
      d = $String(abs(e));
    }
    m += 'e' + c + d;
    return s + m;
  }
});

/***/ }),

/***/ 26486:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toIntegerOrInfinity = __webpack_require__(58553);
var thisNumberValue = __webpack_require__(84353);
var $repeat = __webpack_require__(90971);
var fails = __webpack_require__(45200);
var $RangeError = RangeError;
var $String = String;
var floor = Math.floor;
var repeat = uncurryThis($repeat);
var stringSlice = uncurryThis(''.slice);
var nativeToFixed = uncurryThis(1.0.toFixed);
var pow = function pow(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function log(x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }
  return n;
};
var multiply = function multiply(data, n, c) {
  var index = -1;
  var c2 = c;
  while (++index < 6) {
    c2 += n * data[index];
    data[index] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function divide(data, n) {
  var index = 6;
  var c = 0;
  while (--index >= 0) {
    c += data[index];
    data[index] = floor(c / n);
    c = c % n * 1e7;
  }
};
var dataToString = function dataToString(data) {
  var index = 6;
  var s = '';
  while (--index >= 0) {
    if (s !== '' || index === 0 || data[index] !== 0) {
      var t = $String(data[index]);
      s = s === '' ? t : s + repeat('0', 7 - t.length) + t;
    }
  }
  return s;
};
var FORCED = fails(function () {
  return nativeToFixed(0.00008, 3) !== '0.000' || nativeToFixed(0.9, 0) !== '1' || nativeToFixed(1.255, 2) !== '1.25' || nativeToFixed(1000000000000000128.0, 0) !== '1000000000000000128';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed({});
});

// `Number.prototype.toFixed` method
// https://tc39.es/ecma262/#sec-number.prototype.tofixed
$({
  target: 'Number',
  proto: true,
  forced: FORCED
}, {
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toIntegerOrInfinity(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation
    if (fractDigits < 0 || fractDigits > 20) throw $RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare -- NaN check
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return $String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(data, 0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(data, 1e7, 0);
          j -= 7;
        }
        multiply(data, pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(data, 1 << 23);
          j -= 23;
        }
        divide(data, 1 << j);
        multiply(data, 1, 1);
        divide(data, 2);
        result = dataToString(data);
      } else {
        multiply(data, 0, z);
        multiply(data, 1 << -e, 0);
        result = dataToString(data) + repeat('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits ? '0.' + repeat('0', fractDigits - k) + result : stringSlice(result, 0, k - fractDigits) + '.' + stringSlice(result, k - fractDigits));
    } else {
      result = sign + result;
    }
    return result;
  }
});

/***/ }),

/***/ 4346:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var thisNumberValue = __webpack_require__(84353);
var nativeToPrecision = uncurryThis(1.0.toPrecision);
var FORCED = fails(function () {
  // IE7-
  return nativeToPrecision(1, undefined) !== '1';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToPrecision({});
});

// `Number.prototype.toPrecision` method
// https://tc39.es/ecma262/#sec-number.prototype.toprecision
$({
  target: 'Number',
  proto: true,
  forced: FORCED
}, {
  toPrecision: function toPrecision(precision) {
    return precision === undefined ? nativeToPrecision(thisNumberValue(this)) : nativeToPrecision(thisNumberValue(this), precision);
  }
});

/***/ }),

/***/ 56252:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var assign = __webpack_require__(99103);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es/no-object-assign -- required for testing
$({
  target: 'Object',
  stat: true,
  arity: 2,
  forced: Object.assign !== assign
}, {
  assign: assign
});

/***/ }),

/***/ 66760:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove from `core-js@4`
var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var create = __webpack_require__(1578);

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
$({
  target: 'Object',
  stat: true,
  sham: !DESCRIPTORS
}, {
  create: create
});

/***/ }),

/***/ 72380:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var FORCED = __webpack_require__(70629);
var aCallable = __webpack_require__(6406);
var toObject = __webpack_require__(25769);
var definePropertyModule = __webpack_require__(45070);

// `Object.prototype.__defineGetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) {
  $({
    target: 'Object',
    proto: true,
    forced: FORCED
  }, {
    __defineGetter__: function __defineGetter__(P, getter) {
      definePropertyModule.f(toObject(this), P, {
        get: aCallable(getter),
        enumerable: true,
        configurable: true
      });
    }
  });
}

/***/ }),

/***/ 6499:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var defineProperties = (__webpack_require__(70984).f);

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
$({
  target: 'Object',
  stat: true,
  forced: Object.defineProperties !== defineProperties,
  sham: !DESCRIPTORS
}, {
  defineProperties: defineProperties
});

/***/ }),

/***/ 1127:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var defineProperty = (__webpack_require__(45070).f);

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
// eslint-disable-next-line es/no-object-defineproperty -- safe
$({
  target: 'Object',
  stat: true,
  forced: Object.defineProperty !== defineProperty,
  sham: !DESCRIPTORS
}, {
  defineProperty: defineProperty
});

/***/ }),

/***/ 17625:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var FORCED = __webpack_require__(70629);
var aCallable = __webpack_require__(6406);
var toObject = __webpack_require__(25769);
var definePropertyModule = __webpack_require__(45070);

// `Object.prototype.__defineSetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__
if (DESCRIPTORS) {
  $({
    target: 'Object',
    proto: true,
    forced: FORCED
  }, {
    __defineSetter__: function __defineSetter__(P, setter) {
      definePropertyModule.f(toObject(this), P, {
        set: aCallable(setter),
        enumerable: true,
        configurable: true
      });
    }
  });
}

/***/ }),

/***/ 97448:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var $entries = (__webpack_require__(27758).entries);

// `Object.entries` method
// https://tc39.es/ecma262/#sec-object.entries
$({
  target: 'Object',
  stat: true
}, {
  entries: function entries(O) {
    return $entries(O);
  }
});

/***/ }),

/***/ 21386:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var FREEZING = __webpack_require__(10940);
var fails = __webpack_require__(45200);
var isObject = __webpack_require__(74194);
var onFreeze = (__webpack_require__(60648).onFreeze);

// eslint-disable-next-line es/no-object-freeze -- safe
var $freeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function () {
  $freeze(1);
});

// `Object.freeze` method
// https://tc39.es/ecma262/#sec-object.freeze
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES,
  sham: !FREEZING
}, {
  freeze: function freeze(it) {
    return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
  }
});

/***/ }),

/***/ 21292:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var iterate = __webpack_require__(63244);
var createProperty = __webpack_require__(27042);

// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({
  target: 'Object',
  stat: true
}, {
  fromEntries: function fromEntries(iterable) {
    var obj = {};
    iterate(iterable, function (k, v) {
      createProperty(obj, k, v);
    }, {
      AS_ENTRIES: true
    });
    return obj;
  }
});

/***/ }),

/***/ 22929:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var toIndexedObject = __webpack_require__(20829);
var nativeGetOwnPropertyDescriptor = (__webpack_require__(22130).f);
var DESCRIPTORS = __webpack_require__(9811);
var FAILS_ON_PRIMITIVES = fails(function () {
  nativeGetOwnPropertyDescriptor(1);
});
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
$({
  target: 'Object',
  stat: true,
  forced: FORCED,
  sham: !DESCRIPTORS
}, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});

/***/ }),

/***/ 90803:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var ownKeys = __webpack_require__(15732);
var toIndexedObject = __webpack_require__(20829);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);
var createProperty = __webpack_require__(27042);

// `Object.getOwnPropertyDescriptors` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
$({
  target: 'Object',
  stat: true,
  sham: !DESCRIPTORS
}, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});

/***/ }),

/***/ 71994:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var getOwnPropertyNames = (__webpack_require__(62020).f);

// eslint-disable-next-line es/no-object-getownpropertynames -- required for testing
var FAILS_ON_PRIMITIVES = fails(function () {
  return !Object.getOwnPropertyNames(1);
});

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES
}, {
  getOwnPropertyNames: getOwnPropertyNames
});

/***/ }),

/***/ 76212:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var NATIVE_SYMBOL = __webpack_require__(29464);
var fails = __webpack_require__(45200);
var getOwnPropertySymbolsModule = __webpack_require__(32693);
var toObject = __webpack_require__(25769);

// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FORCED = !NATIVE_SYMBOL || fails(function () {
  getOwnPropertySymbolsModule.f(1);
});

// `Object.getOwnPropertySymbols` method
// https://tc39.es/ecma262/#sec-object.getownpropertysymbols
$({
  target: 'Object',
  stat: true,
  forced: FORCED
}, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
  }
});

/***/ }),

/***/ 8889:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var toObject = __webpack_require__(25769);
var nativeGetPrototypeOf = __webpack_require__(35651);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(20457);
var FAILS_ON_PRIMITIVES = fails(function () {
  nativeGetPrototypeOf(1);
});

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES,
  sham: !CORRECT_PROTOTYPE_GETTER
}, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});

/***/ }),

/***/ 69165:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var hasOwn = __webpack_require__(81285);

// `Object.hasOwn` method
// https://github.com/tc39/proposal-accessible-object-hasownproperty
$({
  target: 'Object',
  stat: true
}, {
  hasOwn: hasOwn
});

/***/ }),

/***/ 28400:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var $isExtensible = __webpack_require__(91268);

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
// eslint-disable-next-line es/no-object-isextensible -- safe
$({
  target: 'Object',
  stat: true,
  forced: Object.isExtensible !== $isExtensible
}, {
  isExtensible: $isExtensible
});

/***/ }),

/***/ 36217:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var isObject = __webpack_require__(74194);
var classof = __webpack_require__(700);
var ARRAY_BUFFER_NON_EXTENSIBLE = __webpack_require__(15158);

// eslint-disable-next-line es/no-object-isfrozen -- safe
var $isFrozen = Object.isFrozen;
var FAILS_ON_PRIMITIVES = fails(function () {
  $isFrozen(1);
});

// `Object.isFrozen` method
// https://tc39.es/ecma262/#sec-object.isfrozen
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE
}, {
  isFrozen: function isFrozen(it) {
    if (!isObject(it)) return true;
    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == 'ArrayBuffer') return true;
    return $isFrozen ? $isFrozen(it) : false;
  }
});

/***/ }),

/***/ 76262:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var fails = __webpack_require__(45200);
var isObject = __webpack_require__(74194);
var classof = __webpack_require__(700);
var ARRAY_BUFFER_NON_EXTENSIBLE = __webpack_require__(15158);

// eslint-disable-next-line es/no-object-issealed -- safe
var $isSealed = Object.isSealed;
var FAILS_ON_PRIMITIVES = fails(function () {
  $isSealed(1);
});

// `Object.isSealed` method
// https://tc39.es/ecma262/#sec-object.issealed
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE
}, {
  isSealed: function isSealed(it) {
    if (!isObject(it)) return true;
    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == 'ArrayBuffer') return true;
    return $isSealed ? $isSealed(it) : false;
  }
});

/***/ }),

/***/ 610:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var is = __webpack_require__(70871);

// `Object.is` method
// https://tc39.es/ecma262/#sec-object.is
$({
  target: 'Object',
  stat: true
}, {
  is: is
});

/***/ }),

/***/ 6939:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var toObject = __webpack_require__(25769);
var nativeKeys = __webpack_require__(12656);
var fails = __webpack_require__(45200);
var FAILS_ON_PRIMITIVES = fails(function () {
  nativeKeys(1);
});

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES
}, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});

/***/ }),

/***/ 69151:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var FORCED = __webpack_require__(70629);
var toObject = __webpack_require__(25769);
var toPropertyKey = __webpack_require__(9370);
var getPrototypeOf = __webpack_require__(35651);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);

// `Object.prototype.__lookupGetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__
if (DESCRIPTORS) {
  $({
    target: 'Object',
    proto: true,
    forced: FORCED
  }, {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this);
      var key = toPropertyKey(P);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
      } while (O = getPrototypeOf(O));
    }
  });
}

/***/ }),

/***/ 69547:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var FORCED = __webpack_require__(70629);
var toObject = __webpack_require__(25769);
var toPropertyKey = __webpack_require__(9370);
var getPrototypeOf = __webpack_require__(35651);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);

// `Object.prototype.__lookupSetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__
if (DESCRIPTORS) {
  $({
    target: 'Object',
    proto: true,
    forced: FORCED
  }, {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this);
      var key = toPropertyKey(P);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
      } while (O = getPrototypeOf(O));
    }
  });
}

/***/ }),

/***/ 6143:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var isObject = __webpack_require__(74194);
var onFreeze = (__webpack_require__(60648).onFreeze);
var FREEZING = __webpack_require__(10940);
var fails = __webpack_require__(45200);

// eslint-disable-next-line es/no-object-preventextensions -- safe
var $preventExtensions = Object.preventExtensions;
var FAILS_ON_PRIMITIVES = fails(function () {
  $preventExtensions(1);
});

// `Object.preventExtensions` method
// https://tc39.es/ecma262/#sec-object.preventextensions
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES,
  sham: !FREEZING
}, {
  preventExtensions: function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(onFreeze(it)) : it;
  }
});

/***/ }),

/***/ 17340:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var DESCRIPTORS = __webpack_require__(9811);
var defineBuiltInAccessor = __webpack_require__(45766);
var isObject = __webpack_require__(74194);
var toObject = __webpack_require__(25769);
var requireObjectCoercible = __webpack_require__(20877);

// eslint-disable-next-line es/no-object-getprototypeof -- safe
var getPrototypeOf = Object.getPrototypeOf;
// eslint-disable-next-line es/no-object-setprototypeof -- safe
var setPrototypeOf = Object.setPrototypeOf;
var ObjectPrototype = Object.prototype;
var PROTO = '__proto__';

// `Object.prototype.__proto__` accessor
// https://tc39.es/ecma262/#sec-object.prototype.__proto__
if (DESCRIPTORS && getPrototypeOf && setPrototypeOf && !(PROTO in ObjectPrototype)) try {
  defineBuiltInAccessor(ObjectPrototype, PROTO, {
    configurable: true,
    get: function __proto__() {
      return getPrototypeOf(toObject(this));
    },
    set: function __proto__(proto) {
      var O = requireObjectCoercible(this);
      if (!isObject(proto) && proto !== null || !isObject(O)) return;
      setPrototypeOf(O, proto);
    }
  });
} catch (error) {/* empty */}

/***/ }),

/***/ 66932:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var isObject = __webpack_require__(74194);
var onFreeze = (__webpack_require__(60648).onFreeze);
var FREEZING = __webpack_require__(10940);
var fails = __webpack_require__(45200);

// eslint-disable-next-line es/no-object-seal -- safe
var $seal = Object.seal;
var FAILS_ON_PRIMITIVES = fails(function () {
  $seal(1);
});

// `Object.seal` method
// https://tc39.es/ecma262/#sec-object.seal
$({
  target: 'Object',
  stat: true,
  forced: FAILS_ON_PRIMITIVES,
  sham: !FREEZING
}, {
  seal: function seal(it) {
    return $seal && isObject(it) ? $seal(onFreeze(it)) : it;
  }
});

/***/ }),

/***/ 76265:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var setPrototypeOf = __webpack_require__(40616);

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
$({
  target: 'Object',
  stat: true
}, {
  setPrototypeOf: setPrototypeOf
});

/***/ }),

/***/ 47163:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(14947);
var defineBuiltIn = __webpack_require__(33549);
var toString = __webpack_require__(43024);

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  defineBuiltIn(Object.prototype, 'toString', toString, {
    unsafe: true
  });
}

/***/ }),

/***/ 58482:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var $values = (__webpack_require__(27758).values);

// `Object.values` method
// https://tc39.es/ecma262/#sec-object.values
$({
  target: 'Object',
  stat: true
}, {
  values: function values(O) {
    return $values(O);
  }
});

/***/ }),

/***/ 76642:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var $parseFloat = __webpack_require__(99722);

// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
$({
  global: true,
  forced: parseFloat != $parseFloat
}, {
  parseFloat: $parseFloat
});

/***/ }),

/***/ 17325:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var $parseInt = __webpack_require__(87148);

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
$({
  global: true,
  forced: parseInt != $parseInt
}, {
  parseInt: $parseInt
});

/***/ }),

/***/ 8872:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var aCallable = __webpack_require__(6406);
var newPromiseCapabilityModule = __webpack_require__(16593);
var perform = __webpack_require__(32780);
var iterate = __webpack_require__(63244);

// `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled
$({
  target: 'Promise',
  stat: true
}, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = {
            status: 'fulfilled',
            value: value
          };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = {
            status: 'rejected',
            reason: error
          };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

/***/ }),

/***/ 72076:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var aCallable = __webpack_require__(6406);
var newPromiseCapabilityModule = __webpack_require__(16593);
var perform = __webpack_require__(32780);
var iterate = __webpack_require__(63244);
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(78120);

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({
  target: 'Promise',
  stat: true,
  forced: PROMISE_STATICS_INCORRECT_ITERATION
}, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

/***/ }),

/***/ 85603:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var aCallable = __webpack_require__(6406);
var getBuiltIn = __webpack_require__(40866);
var newPromiseCapabilityModule = __webpack_require__(16593);
var perform = __webpack_require__(32780);
var iterate = __webpack_require__(63244);
var PROMISE_ANY_ERROR = 'No one promise resolved';

// `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any
$({
  target: 'Promise',
  stat: true
}, {
  any: function any(iterable) {
    var C = this;
    var AggregateError = getBuiltIn('AggregateError');
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var errors = [];
      var counter = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyRejected = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve(value);
        }, function (error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index] = error;
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

/***/ }),

/***/ 39970:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var IS_PURE = __webpack_require__(58855);
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(48112).CONSTRUCTOR);
var NativePromiseConstructor = __webpack_require__(51471);
var getBuiltIn = __webpack_require__(40866);
var isCallable = __webpack_require__(76306);
var defineBuiltIn = __webpack_require__(33549);
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({
  target: 'Promise',
  proto: true,
  forced: FORCED_PROMISE_CONSTRUCTOR,
  real: true
}, {
  'catch': function _catch(onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, {
      unsafe: true
    });
  }
}

/***/ }),

/***/ 58120:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var IS_PURE = __webpack_require__(58855);
var IS_NODE = __webpack_require__(31292);
var global = __webpack_require__(52586);
var call = __webpack_require__(84550);
var defineBuiltIn = __webpack_require__(33549);
var setPrototypeOf = __webpack_require__(40616);
var setToStringTag = __webpack_require__(46736);
var setSpecies = __webpack_require__(94847);
var aCallable = __webpack_require__(6406);
var isCallable = __webpack_require__(76306);
var isObject = __webpack_require__(74194);
var anInstance = __webpack_require__(6441);
var speciesConstructor = __webpack_require__(30646);
var task = (__webpack_require__(39250).set);
var microtask = __webpack_require__(50119);
var hostReportErrors = __webpack_require__(19239);
var perform = __webpack_require__(32780);
var Queue = __webpack_require__(88226);
var InternalStateModule = __webpack_require__(59351);
var NativePromiseConstructor = __webpack_require__(51471);
var PromiseConstructorDetection = __webpack_require__(48112);
var newPromiseCapabilityModule = __webpack_require__(16593);
var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function isThenable(it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};
var callReaction = function callReaction(reaction, state) {
  var value = state.value;
  var ok = state.state == FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};
var notify = function notify(state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};
var dispatchEvent = function dispatchEvent(name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = {
    promise: promise,
    reason: reason
  };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};
var onUnhandled = function onUnhandled(state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};
var isUnhandled = function isUnhandled(state) {
  return state.rejection !== HANDLED && !state.parent;
};
var onHandleUnhandled = function onHandleUnhandled(state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};
var bind = function bind(fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};
var internalReject = function internalReject(state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};
var internalResolve = function internalResolve(state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = {
          done: false
        };
        try {
          call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({
      done: false
    }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };
  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable(onRejected) && onRejected;
    reaction.domain = IS_NODE ? process.domain : undefined;
    if (state.state == PENDING) state.reactions.add(reaction);else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });
  OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
    return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;
    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
        // https://github.com/zloirock/core-js/issues/640
      }, {
        unsafe: true
      });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) {/* empty */}

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}
$({
  global: true,
  constructor: true,
  wrap: true,
  forced: FORCED_PROMISE_CONSTRUCTOR
}, {
  Promise: PromiseConstructor
});
setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

/***/ }),

/***/ 29282:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var IS_PURE = __webpack_require__(58855);
var NativePromiseConstructor = __webpack_require__(51471);
var fails = __webpack_require__(45200);
var getBuiltIn = __webpack_require__(40866);
var isCallable = __webpack_require__(76306);
var speciesConstructor = __webpack_require__(30646);
var promiseResolve = __webpack_require__(28982);
var defineBuiltIn = __webpack_require__(33549);
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromiseConstructor && fails(function () {
  // eslint-disable-next-line unicorn/no-thenable -- required for testing
  NativePromisePrototype['finally'].call({
    then: function then() {/* empty */}
  }, function () {/* empty */});
});

// `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally
$({
  target: 'Promise',
  proto: true,
  real: true,
  forced: NON_GENERIC
}, {
  'finally': function _finally(onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  }
});

// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['finally'];
  if (NativePromisePrototype['finally'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'finally', method, {
      unsafe: true
    });
  }
}

/***/ }),

/***/ 33739:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(58120);
__webpack_require__(72076);
__webpack_require__(39970);
__webpack_require__(77695);
__webpack_require__(45413);
__webpack_require__(87281);

/***/ }),

/***/ 77695:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var aCallable = __webpack_require__(6406);
var newPromiseCapabilityModule = __webpack_require__(16593);
var perform = __webpack_require__(32780);
var iterate = __webpack_require__(63244);
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(78120);

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({
  target: 'Promise',
  stat: true,
  forced: PROMISE_STATICS_INCORRECT_ITERATION
}, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

/***/ }),

/***/ 45413:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var newPromiseCapabilityModule = __webpack_require__(16593);
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(48112).CONSTRUCTOR);

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({
  target: 'Promise',
  stat: true,
  forced: FORCED_PROMISE_CONSTRUCTOR
}, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});

/***/ }),

/***/ 87281:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var IS_PURE = __webpack_require__(58855);
var NativePromiseConstructor = __webpack_require__(51471);
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(48112).CONSTRUCTOR);
var promiseResolve = __webpack_require__(28982);
var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({
  target: 'Promise',
  stat: true,
  forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR
}, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});

/***/ }),

/***/ 89755:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var functionApply = __webpack_require__(72942);
var aCallable = __webpack_require__(6406);
var anObject = __webpack_require__(52943);
var fails = __webpack_require__(45200);

// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
  // eslint-disable-next-line es/no-reflect -- required for testing
  Reflect.apply(function () {/* empty */});
});

// `Reflect.apply` method
// https://tc39.es/ecma262/#sec-reflect.apply
$({
  target: 'Reflect',
  stat: true,
  forced: OPTIONAL_ARGUMENTS_LIST
}, {
  apply: function apply(target, thisArgument, argumentsList) {
    return functionApply(aCallable(target), thisArgument, anObject(argumentsList));
  }
});

/***/ }),

/***/ 60669:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var apply = __webpack_require__(72942);
var bind = __webpack_require__(89723);
var aConstructor = __webpack_require__(72126);
var anObject = __webpack_require__(52943);
var isObject = __webpack_require__(74194);
var create = __webpack_require__(1578);
var fails = __webpack_require__(45200);
var nativeConstruct = getBuiltIn('Reflect', 'construct');
var ObjectPrototype = Object.prototype;
var push = [].push;

// `Reflect.construct` method
// https://tc39.es/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() {/* empty */}
  return !(nativeConstruct(function () {/* empty */}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  nativeConstruct(function () {/* empty */});
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;
$({
  target: 'Reflect',
  stat: true,
  forced: FORCED,
  sham: FORCED
}, {
  construct: function construct(Target, args /* , newTarget */) {
    aConstructor(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      apply(push, $args, args);
      return new (apply(bind, Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : ObjectPrototype);
    var result = apply(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),

/***/ 91921:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var anObject = __webpack_require__(52943);
var toPropertyKey = __webpack_require__(9370);
var definePropertyModule = __webpack_require__(45070);
var fails = __webpack_require__(45200);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
var ERROR_INSTEAD_OF_FALSE = fails(function () {
  // eslint-disable-next-line es/no-reflect -- required for testing
  Reflect.defineProperty(definePropertyModule.f({}, 1, {
    value: 1
  }), 1, {
    value: 2
  });
});

// `Reflect.defineProperty` method
// https://tc39.es/ecma262/#sec-reflect.defineproperty
$({
  target: 'Reflect',
  stat: true,
  forced: ERROR_INSTEAD_OF_FALSE,
  sham: !DESCRIPTORS
}, {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    var key = toPropertyKey(propertyKey);
    anObject(attributes);
    try {
      definePropertyModule.f(target, key, attributes);
      return true;
    } catch (error) {
      return false;
    }
  }
});

/***/ }),

/***/ 433:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var anObject = __webpack_require__(52943);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);

// `Reflect.deleteProperty` method
// https://tc39.es/ecma262/#sec-reflect.deleteproperty
$({
  target: 'Reflect',
  stat: true
}, {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),

/***/ 32402:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var anObject = __webpack_require__(52943);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);

// `Reflect.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor
$({
  target: 'Reflect',
  stat: true,
  sham: !DESCRIPTORS
}, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  }
});

/***/ }),

/***/ 62066:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var anObject = __webpack_require__(52943);
var objectGetPrototypeOf = __webpack_require__(35651);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(20457);

// `Reflect.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-reflect.getprototypeof
$({
  target: 'Reflect',
  stat: true,
  sham: !CORRECT_PROTOTYPE_GETTER
}, {
  getPrototypeOf: function getPrototypeOf(target) {
    return objectGetPrototypeOf(anObject(target));
  }
});

/***/ }),

/***/ 97004:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var isObject = __webpack_require__(74194);
var anObject = __webpack_require__(52943);
var isDataDescriptor = __webpack_require__(40370);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);
var getPrototypeOf = __webpack_require__(35651);

// `Reflect.get` method
// https://tc39.es/ecma262/#sec-reflect.get
function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
  if (descriptor) return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === undefined ? undefined : call(descriptor.get, receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}
$({
  target: 'Reflect',
  stat: true
}, {
  get: get
});

/***/ }),

/***/ 56071:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);

// `Reflect.has` method
// https://tc39.es/ecma262/#sec-reflect.has
$({
  target: 'Reflect',
  stat: true
}, {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

/***/ }),

/***/ 71058:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var anObject = __webpack_require__(52943);
var $isExtensible = __webpack_require__(91268);

// `Reflect.isExtensible` method
// https://tc39.es/ecma262/#sec-reflect.isextensible
$({
  target: 'Reflect',
  stat: true
}, {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible(target);
  }
});

/***/ }),

/***/ 93292:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var ownKeys = __webpack_require__(15732);

// `Reflect.ownKeys` method
// https://tc39.es/ecma262/#sec-reflect.ownkeys
$({
  target: 'Reflect',
  stat: true
}, {
  ownKeys: ownKeys
});

/***/ }),

/***/ 18961:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var anObject = __webpack_require__(52943);
var FREEZING = __webpack_require__(10940);

// `Reflect.preventExtensions` method
// https://tc39.es/ecma262/#sec-reflect.preventextensions
$({
  target: 'Reflect',
  stat: true,
  sham: !FREEZING
}, {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
      if (objectPreventExtensions) objectPreventExtensions(target);
      return true;
    } catch (error) {
      return false;
    }
  }
});

/***/ }),

/***/ 58055:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var anObject = __webpack_require__(52943);
var aPossiblePrototype = __webpack_require__(21892);
var objectSetPrototypeOf = __webpack_require__(40616);

// `Reflect.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-reflect.setprototypeof
if (objectSetPrototypeOf) $({
  target: 'Reflect',
  stat: true
}, {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    anObject(target);
    aPossiblePrototype(proto);
    try {
      objectSetPrototypeOf(target, proto);
      return true;
    } catch (error) {
      return false;
    }
  }
});

/***/ }),

/***/ 89869:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var anObject = __webpack_require__(52943);
var isObject = __webpack_require__(74194);
var isDataDescriptor = __webpack_require__(40370);
var fails = __webpack_require__(45200);
var definePropertyModule = __webpack_require__(45070);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);
var getPrototypeOf = __webpack_require__(35651);
var createPropertyDescriptor = __webpack_require__(22424);

// `Reflect.set` method
// https://tc39.es/ecma262/#sec-reflect.set
function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  var existingDescriptor, prototype, setter;
  if (!ownDescriptor) {
    if (isObject(prototype = getPrototypeOf(target))) {
      return set(prototype, propertyKey, V, receiver);
    }
    ownDescriptor = createPropertyDescriptor(0);
  }
  if (isDataDescriptor(ownDescriptor)) {
    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      definePropertyModule.f(receiver, propertyKey, existingDescriptor);
    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
  } else {
    setter = ownDescriptor.set;
    if (setter === undefined) return false;
    call(setter, receiver, V);
  }
  return true;
}

// MS Edge 17-18 Reflect.set allows setting the property to object
// with non-writable property on the prototype
var MS_EDGE_BUG = fails(function () {
  var Constructor = function Constructor() {/* empty */};
  var object = definePropertyModule.f(new Constructor(), 'a', {
    configurable: true
  });
  // eslint-disable-next-line es/no-reflect -- required for testing
  return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
});
$({
  target: 'Reflect',
  stat: true,
  forced: MS_EDGE_BUG
}, {
  set: set
});

/***/ }),

/***/ 22071:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var setToStringTag = __webpack_require__(46736);
$({
  global: true
}, {
  Reflect: {}
});

// Reflect[@@toStringTag] property
// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
setToStringTag(global.Reflect, 'Reflect', true);

/***/ }),

/***/ 88513:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var isForced = __webpack_require__(40695);
var inheritIfRequired = __webpack_require__(57170);
var createNonEnumerableProperty = __webpack_require__(91705);
var getOwnPropertyNames = (__webpack_require__(72205).f);
var isPrototypeOf = __webpack_require__(77240);
var isRegExp = __webpack_require__(26582);
var toString = __webpack_require__(80978);
var getRegExpFlags = __webpack_require__(1002);
var stickyHelpers = __webpack_require__(11426);
var proxyAccessor = __webpack_require__(92261);
var defineBuiltIn = __webpack_require__(33549);
var fails = __webpack_require__(45200);
var hasOwn = __webpack_require__(81285);
var enforceInternalState = (__webpack_require__(59351).enforce);
var setSpecies = __webpack_require__(94847);
var wellKnownSymbol = __webpack_require__(65373);
var UNSUPPORTED_DOT_ALL = __webpack_require__(70485);
var UNSUPPORTED_NCG = __webpack_require__(6465);
var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var SyntaxError = global.SyntaxError;
var exec = uncurryThis(RegExpPrototype.exec);
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);
// TODO: Use only proper RegExpIdentifierName
var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;
var MISSED_STICKY = stickyHelpers.MISSED_STICKY;
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var BASE_FORCED = DESCRIPTORS && (!CORRECT_NEW || MISSED_STICKY || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
}));
var handleDotAll = function handleDotAll(string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var brackets = false;
  var chr;
  for (; index <= length; index++) {
    chr = charAt(string, index);
    if (chr === '\\') {
      result += chr + charAt(string, ++index);
      continue;
    }
    if (!brackets && chr === '.') {
      result += '[\\s\\S]';
    } else {
      if (chr === '[') {
        brackets = true;
      } else if (chr === ']') {
        brackets = false;
      }
      result += chr;
    }
  }
  return result;
};
var handleNCG = function handleNCG(string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var named = [];
  var names = {};
  var brackets = false;
  var ncg = false;
  var groupid = 0;
  var groupname = '';
  var chr;
  for (; index <= length; index++) {
    chr = charAt(string, index);
    if (chr === '\\') {
      chr = chr + charAt(string, ++index);
    } else if (chr === ']') {
      brackets = false;
    } else if (!brackets) switch (true) {
      case chr === '[':
        brackets = true;
        break;
      case chr === '(':
        if (exec(IS_NCG, stringSlice(string, index + 1))) {
          index += 2;
          ncg = true;
        }
        result += chr;
        groupid++;
        continue;
      case chr === '>' && ncg:
        if (groupname === '' || hasOwn(names, groupname)) {
          throw new SyntaxError('Invalid capture group name');
        }
        names[groupname] = true;
        named[named.length] = [groupname, groupid];
        ncg = false;
        groupname = '';
        continue;
    }
    if (ncg) groupname += chr;else result += chr;
  }
  return [result, named];
};

// `RegExp` constructor
// https://tc39.es/ecma262/#sec-regexp-constructor
if (isForced('RegExp', BASE_FORCED)) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = isPrototypeOf(RegExpPrototype, this);
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var groups = [];
    var rawPattern = pattern;
    var rawFlags, dotAll, sticky, handled, result, state;
    if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
      return pattern;
    }
    if (patternIsRegExp || isPrototypeOf(RegExpPrototype, pattern)) {
      pattern = pattern.source;
      if (flagsAreUndefined) flags = getRegExpFlags(rawPattern);
    }
    pattern = pattern === undefined ? '' : toString(pattern);
    flags = flags === undefined ? '' : toString(flags);
    rawPattern = pattern;
    if (UNSUPPORTED_DOT_ALL && 'dotAll' in re1) {
      dotAll = !!flags && stringIndexOf(flags, 's') > -1;
      if (dotAll) flags = replace(flags, /s/g, '');
    }
    rawFlags = flags;
    if (MISSED_STICKY && 'sticky' in re1) {
      sticky = !!flags && stringIndexOf(flags, 'y') > -1;
      if (sticky && UNSUPPORTED_Y) flags = replace(flags, /y/g, '');
    }
    if (UNSUPPORTED_NCG) {
      handled = handleNCG(pattern);
      pattern = handled[0];
      groups = handled[1];
    }
    result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
    if (dotAll || sticky || groups.length) {
      state = enforceInternalState(result);
      if (dotAll) {
        state.dotAll = true;
        state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
      }
      if (sticky) state.sticky = true;
      if (groups.length) state.groups = groups;
    }
    if (pattern !== rawPattern) try {
      // fails in old engines, but we have no alternatives for unsupported regex syntax
      createNonEnumerableProperty(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
    } catch (error) {/* empty */}
    return result;
  };
  for (var keys = getOwnPropertyNames(NativeRegExp), index = 0; keys.length > index;) {
    proxyAccessor(RegExpWrapper, NativeRegExp, keys[index++]);
  }
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  defineBuiltIn(global, 'RegExp', RegExpWrapper, {
    constructor: true
  });
}

// https://tc39.es/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

/***/ }),

/***/ 87492:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var UNSUPPORTED_DOT_ALL = __webpack_require__(70485);
var classof = __webpack_require__(700);
var defineBuiltInAccessor = __webpack_require__(45766);
var getInternalState = (__webpack_require__(59351).get);
var RegExpPrototype = RegExp.prototype;
var $TypeError = TypeError;

// `RegExp.prototype.dotAll` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall
if (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {
  defineBuiltInAccessor(RegExpPrototype, 'dotAll', {
    configurable: true,
    get: function dotAll() {
      if (this === RegExpPrototype) return undefined;
      // We can't use InternalStateModule.getterFor because
      // we don't add metadata for regexps created by a literal.
      if (classof(this) === 'RegExp') {
        return !!getInternalState(this).dotAll;
      }
      throw $TypeError('Incompatible receiver, RegExp required');
    }
  });
}

/***/ }),

/***/ 30144:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var exec = __webpack_require__(34646);

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({
  target: 'RegExp',
  proto: true,
  forced: /./.exec !== exec
}, {
  exec: exec
});

/***/ }),

/***/ 73357:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var DESCRIPTORS = __webpack_require__(9811);
var defineBuiltInAccessor = __webpack_require__(45766);
var regExpFlags = __webpack_require__(61089);
var fails = __webpack_require__(45200);

// babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError
var RegExp = global.RegExp;
var RegExpPrototype = RegExp.prototype;
var FORCED = DESCRIPTORS && fails(function () {
  var INDICES_SUPPORT = true;
  try {
    RegExp('.', 'd');
  } catch (error) {
    INDICES_SUPPORT = false;
  }
  var O = {};
  // modern V8 bug
  var calls = '';
  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';
  var addGetter = function addGetter(key, chr) {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty(O, key, {
      get: function get() {
        calls += chr;
        return true;
      }
    });
  };
  var pairs = {
    dotAll: 's',
    global: 'g',
    ignoreCase: 'i',
    multiline: 'm',
    sticky: 'y'
  };
  if (INDICES_SUPPORT) pairs.hasIndices = 'd';
  for (var key in pairs) {
    addGetter(key, pairs[key]);
  }

  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);
  return result !== expected || calls !== expected;
});

// `RegExp.prototype.flags` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
if (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {
  configurable: true,
  get: regExpFlags
});

/***/ }),

/***/ 79393:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(9811);
var MISSED_STICKY = (__webpack_require__(11426).MISSED_STICKY);
var classof = __webpack_require__(700);
var defineBuiltInAccessor = __webpack_require__(45766);
var getInternalState = (__webpack_require__(59351).get);
var RegExpPrototype = RegExp.prototype;
var $TypeError = TypeError;

// `RegExp.prototype.sticky` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky
if (DESCRIPTORS && MISSED_STICKY) {
  defineBuiltInAccessor(RegExpPrototype, 'sticky', {
    configurable: true,
    get: function sticky() {
      if (this === RegExpPrototype) return undefined;
      // We can't use InternalStateModule.getterFor because
      // we don't add metadata for regexps created by a literal.
      if (classof(this) === 'RegExp') {
        return !!getInternalState(this).sticky;
      }
      throw $TypeError('Incompatible receiver, RegExp required');
    }
  });
}

/***/ }),

/***/ 44261:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(30144);
var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var isCallable = __webpack_require__(76306);
var anObject = __webpack_require__(52943);
var toString = __webpack_require__(80978);
var DELEGATES_TO_EXEC = function () {
  var execCalled = false;
  var re = /[ac]/;
  re.exec = function () {
    execCalled = true;
    return /./.exec.apply(this, arguments);
  };
  return re.test('abc') === true && execCalled;
}();
var nativeTest = /./.test;

// `RegExp.prototype.test` method
// https://tc39.es/ecma262/#sec-regexp.prototype.test
$({
  target: 'RegExp',
  proto: true,
  forced: !DELEGATES_TO_EXEC
}, {
  test: function test(S) {
    var R = anObject(this);
    var string = toString(S);
    var exec = R.exec;
    if (!isCallable(exec)) return call(nativeTest, R, string);
    var result = call(exec, R, string);
    if (result === null) return false;
    anObject(result);
    return true;
  }
});

/***/ }),

/***/ 6408:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var PROPER_FUNCTION_NAME = (__webpack_require__(96922).PROPER);
var defineBuiltIn = __webpack_require__(33549);
var anObject = __webpack_require__(52943);
var $toString = __webpack_require__(80978);
var fails = __webpack_require__(45200);
var getRegExpFlags = __webpack_require__(1002);
var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];
var NOT_GENERIC = fails(function () {
  return nativeToString.call({
    source: 'a',
    flags: 'b'
  }) != '/a/b';
});
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return '/' + pattern + '/' + flags;
  }, {
    unsafe: true
  });
}

/***/ }),

/***/ 5446:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var collection = __webpack_require__(79524);
var collectionStrong = __webpack_require__(76702);

// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
collection('Set', function (init) {
  return function Set() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
}, collectionStrong);

/***/ }),

/***/ 90760:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(5446);

/***/ }),

/***/ 92574:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.anchor` method
// https://tc39.es/ecma262/#sec-string.prototype.anchor
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('anchor')
}, {
  anchor: function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  }
});

/***/ }),

/***/ 48902:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var requireObjectCoercible = __webpack_require__(20877);
var toIntegerOrInfinity = __webpack_require__(58553);
var toString = __webpack_require__(80978);
var fails = __webpack_require__(45200);
var charAt = uncurryThis(''.charAt);
var FORCED = fails(function () {
  // eslint-disable-next-line es/no-array-string-prototype-at -- safe
  return '𠮷'.at(-2) !== "\uD842";
});

// `String.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method
$({
  target: 'String',
  proto: true,
  forced: FORCED
}, {
  at: function at(index) {
    var S = toString(requireObjectCoercible(this));
    var len = S.length;
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return k < 0 || k >= len ? undefined : charAt(S, k);
  }
});

/***/ }),

/***/ 13195:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.big` method
// https://tc39.es/ecma262/#sec-string.prototype.big
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('big')
}, {
  big: function big() {
    return createHTML(this, 'big', '', '');
  }
});

/***/ }),

/***/ 4831:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.blink` method
// https://tc39.es/ecma262/#sec-string.prototype.blink
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('blink')
}, {
  blink: function blink() {
    return createHTML(this, 'blink', '', '');
  }
});

/***/ }),

/***/ 48168:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.bold` method
// https://tc39.es/ecma262/#sec-string.prototype.bold
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('bold')
}, {
  bold: function bold() {
    return createHTML(this, 'b', '', '');
  }
});

/***/ }),

/***/ 82394:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var codeAt = (__webpack_require__(36726).codeAt);

// `String.prototype.codePointAt` method
// https://tc39.es/ecma262/#sec-string.prototype.codepointat
$({
  target: 'String',
  proto: true
}, {
  codePointAt: function codePointAt(pos) {
    return codeAt(this, pos);
  }
});

/***/ }),

/***/ 23920:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(62745);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var notARegExp = __webpack_require__(41029);
var requireObjectCoercible = __webpack_require__(20877);
var correctIsRegExpLogic = __webpack_require__(23264);
var IS_PURE = __webpack_require__(58855);

// eslint-disable-next-line es/no-string-prototype-endswith -- safe
var nativeEndsWith = uncurryThis(''.endsWith);
var slice = uncurryThis(''.slice);
var min = Math.min;
var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.endswith
$({
  target: 'String',
  proto: true,
  forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
}, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = that.length;
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = toString(searchString);
    return nativeEndsWith ? nativeEndsWith(that, search, end) : slice(that, end - search.length, end) === search;
  }
});

/***/ }),

/***/ 74451:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.fixed` method
// https://tc39.es/ecma262/#sec-string.prototype.fixed
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('fixed')
}, {
  fixed: function fixed() {
    return createHTML(this, 'tt', '', '');
  }
});

/***/ }),

/***/ 89332:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.fontcolor` method
// https://tc39.es/ecma262/#sec-string.prototype.fontcolor
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('fontcolor')
}, {
  fontcolor: function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  }
});

/***/ }),

/***/ 24904:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.fontsize` method
// https://tc39.es/ecma262/#sec-string.prototype.fontsize
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('fontsize')
}, {
  fontsize: function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  }
});

/***/ }),

/***/ 51409:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toAbsoluteIndex = __webpack_require__(11652);
var $RangeError = RangeError;
var fromCharCode = String.fromCharCode;
// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing
var $fromCodePoint = String.fromCodePoint;
var join = uncurryThis([].join);

// length should be 1, old FF problem
var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;

// `String.fromCodePoint` method
// https://tc39.es/ecma262/#sec-string.fromcodepoint
$({
  target: 'String',
  stat: true,
  arity: 1,
  forced: INCORRECT_LENGTH
}, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  fromCodePoint: function fromCodePoint(x) {
    var elements = [];
    var length = arguments.length;
    var i = 0;
    var code;
    while (length > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw $RangeError(code + ' is not a valid code point');
      elements[i] = code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);
    }
    return join(elements, '');
  }
});

/***/ }),

/***/ 7498:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var notARegExp = __webpack_require__(41029);
var requireObjectCoercible = __webpack_require__(20877);
var toString = __webpack_require__(80978);
var correctIsRegExpLogic = __webpack_require__(23264);
var stringIndexOf = uncurryThis(''.indexOf);

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({
  target: 'String',
  proto: true,
  forced: !correctIsRegExpLogic('includes')
}, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~stringIndexOf(toString(requireObjectCoercible(this)), toString(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 79947:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.italics` method
// https://tc39.es/ecma262/#sec-string.prototype.italics
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('italics')
}, {
  italics: function italics() {
    return createHTML(this, 'i', '', '');
  }
});

/***/ }),

/***/ 46222:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var charAt = (__webpack_require__(36726).charAt);
var toString = __webpack_require__(80978);
var InternalStateModule = __webpack_require__(59351);
var defineIterator = __webpack_require__(94375);
var createIterResultObject = __webpack_require__(65620);
var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
  // `%StringIteratorPrototype%.next` method
  // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return createIterResultObject(undefined, true);
  point = charAt(string, index);
  state.index += point.length;
  return createIterResultObject(point, false);
});

/***/ }),

/***/ 14332:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.link` method
// https://tc39.es/ecma262/#sec-string.prototype.link
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('link')
}, {
  link: function link(url) {
    return createHTML(this, 'a', 'href', url);
  }
});

/***/ }),

/***/ 19945:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable es/no-string-prototype-matchall -- safe */
var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(62745);
var createIteratorConstructor = __webpack_require__(84433);
var createIterResultObject = __webpack_require__(65620);
var requireObjectCoercible = __webpack_require__(20877);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var anObject = __webpack_require__(52943);
var isNullOrUndefined = __webpack_require__(19268);
var classof = __webpack_require__(700);
var isRegExp = __webpack_require__(26582);
var getRegExpFlags = __webpack_require__(1002);
var getMethod = __webpack_require__(11701);
var defineBuiltIn = __webpack_require__(33549);
var fails = __webpack_require__(45200);
var wellKnownSymbol = __webpack_require__(65373);
var speciesConstructor = __webpack_require__(30646);
var advanceStringIndex = __webpack_require__(59607);
var regExpExec = __webpack_require__(3414);
var InternalStateModule = __webpack_require__(59351);
var IS_PURE = __webpack_require__(58855);
var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype = RegExp.prototype;
var $TypeError = TypeError;
var stringIndexOf = uncurryThis(''.indexOf);
var nativeMatchAll = uncurryThis(''.matchAll);
var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {
  nativeMatchAll('a', /./);
});
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
  setInternalState(this, {
    type: REGEXP_STRING_ITERATOR,
    regexp: regexp,
    string: string,
    global: $global,
    unicode: fullUnicode,
    done: false
  });
}, REGEXP_STRING, function next() {
  var state = getInternalState(this);
  if (state.done) return createIterResultObject(undefined, true);
  var R = state.regexp;
  var S = state.string;
  var match = regExpExec(R, S);
  if (match === null) {
    state.done = true;
    return createIterResultObject(undefined, true);
  }
  if (state.global) {
    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
    return createIterResultObject(match, false);
  }
  state.done = true;
  return createIterResultObject(match, false);
});
var $matchAll = function $matchAll(string) {
  var R = anObject(this);
  var S = toString(string);
  var C = speciesConstructor(R, RegExp);
  var flags = toString(getRegExpFlags(R));
  var matcher, $global, fullUnicode;
  matcher = new C(C === RegExp ? R.source : R, flags);
  $global = !!~stringIndexOf(flags, 'g');
  fullUnicode = !!~stringIndexOf(flags, 'u');
  matcher.lastIndex = toLength(R.lastIndex);
  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
};

// `String.prototype.matchAll` method
// https://tc39.es/ecma262/#sec-string.prototype.matchall
$({
  target: 'String',
  proto: true,
  forced: WORKS_WITH_NON_GLOBAL_REGEX
}, {
  matchAll: function matchAll(regexp) {
    var O = requireObjectCoercible(this);
    var flags, S, matcher, rx;
    if (!isNullOrUndefined(regexp)) {
      if (isRegExp(regexp)) {
        flags = toString(requireObjectCoercible(getRegExpFlags(regexp)));
        if (!~stringIndexOf(flags, 'g')) throw $TypeError('`.matchAll` does not allow non-global regexes');
      }
      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll(O, regexp);
      matcher = getMethod(regexp, MATCH_ALL);
      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
      if (matcher) return call(matcher, regexp, O);
    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll(O, regexp);
    S = toString(O);
    rx = new RegExp(regexp, 'g');
    return IS_PURE ? call($matchAll, rx, S) : rx[MATCH_ALL](S);
  }
});
IS_PURE || MATCH_ALL in RegExpPrototype || defineBuiltIn(RegExpPrototype, MATCH_ALL, $matchAll);

/***/ }),

/***/ 33419:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = __webpack_require__(84550);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(54059);
var anObject = __webpack_require__(52943);
var isNullOrUndefined = __webpack_require__(19268);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var requireObjectCoercible = __webpack_require__(20877);
var getMethod = __webpack_require__(11701);
var advanceStringIndex = __webpack_require__(59607);
var regExpExec = __webpack_require__(3414);

// @@match logic
fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
  return [
  // `String.prototype.match` method
  // https://tc39.es/ecma262/#sec-string.prototype.match
  function match(regexp) {
    var O = requireObjectCoercible(this);
    var matcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, MATCH);
    return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
  },
  // `RegExp.prototype[@@match]` method
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
  function (string) {
    var rx = anObject(this);
    var S = toString(string);
    var res = maybeCallNative(nativeMatch, rx, S);
    if (res.done) return res.value;
    if (!rx.global) return regExpExec(rx, S);
    var fullUnicode = rx.unicode;
    rx.lastIndex = 0;
    var A = [];
    var n = 0;
    var result;
    while ((result = regExpExec(rx, S)) !== null) {
      var matchStr = toString(result[0]);
      A[n] = matchStr;
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      n++;
    }
    return n === 0 ? null : A;
  }];
});

/***/ }),

/***/ 24522:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $padEnd = (__webpack_require__(72594).end);
var WEBKIT_BUG = __webpack_require__(82898);

// `String.prototype.padEnd` method
// https://tc39.es/ecma262/#sec-string.prototype.padend
$({
  target: 'String',
  proto: true,
  forced: WEBKIT_BUG
}, {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 37692:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $padStart = (__webpack_require__(72594).start);
var WEBKIT_BUG = __webpack_require__(82898);

// `String.prototype.padStart` method
// https://tc39.es/ecma262/#sec-string.prototype.padstart
$({
  target: 'String',
  proto: true,
  forced: WEBKIT_BUG
}, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ 34828:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toIndexedObject = __webpack_require__(20829);
var toObject = __webpack_require__(25769);
var toString = __webpack_require__(80978);
var lengthOfArrayLike = __webpack_require__(52124);
var push = uncurryThis([].push);
var join = uncurryThis([].join);

// `String.raw` method
// https://tc39.es/ecma262/#sec-string.raw
$({
  target: 'String',
  stat: true
}, {
  raw: function raw(template) {
    var rawTemplate = toIndexedObject(toObject(template).raw);
    var literalSegments = lengthOfArrayLike(rawTemplate);
    var argumentsLength = arguments.length;
    var elements = [];
    var i = 0;
    while (literalSegments > i) {
      push(elements, toString(rawTemplate[i++]));
      if (i === literalSegments) return join(elements, '');
      if (i < argumentsLength) push(elements, toString(arguments[i]));
    }
  }
});

/***/ }),

/***/ 15868:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var repeat = __webpack_require__(90971);

// `String.prototype.repeat` method
// https://tc39.es/ecma262/#sec-string.prototype.repeat
$({
  target: 'String',
  proto: true
}, {
  repeat: repeat
});

/***/ }),

/***/ 97740:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var requireObjectCoercible = __webpack_require__(20877);
var isCallable = __webpack_require__(76306);
var isNullOrUndefined = __webpack_require__(19268);
var isRegExp = __webpack_require__(26582);
var toString = __webpack_require__(80978);
var getMethod = __webpack_require__(11701);
var getRegExpFlags = __webpack_require__(1002);
var getSubstitution = __webpack_require__(979);
var wellKnownSymbol = __webpack_require__(65373);
var IS_PURE = __webpack_require__(58855);
var REPLACE = wellKnownSymbol('replace');
var $TypeError = TypeError;
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var max = Math.max;
var stringIndexOf = function stringIndexOf(string, searchValue, fromIndex) {
  if (fromIndex > string.length) return -1;
  if (searchValue === '') return fromIndex;
  return indexOf(string, searchValue, fromIndex);
};

// `String.prototype.replaceAll` method
// https://tc39.es/ecma262/#sec-string.prototype.replaceall
$({
  target: 'String',
  proto: true
}, {
  replaceAll: function replaceAll(searchValue, replaceValue) {
    var O = requireObjectCoercible(this);
    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
    var position = 0;
    var endOfLastMatch = 0;
    var result = '';
    if (!isNullOrUndefined(searchValue)) {
      IS_REG_EXP = isRegExp(searchValue);
      if (IS_REG_EXP) {
        flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
        if (!~indexOf(flags, 'g')) throw $TypeError('`.replaceAll` does not allow non-global regexes');
      }
      replacer = getMethod(searchValue, REPLACE);
      if (replacer) {
        return call(replacer, searchValue, O, replaceValue);
      } else if (IS_PURE && IS_REG_EXP) {
        return replace(toString(O), searchValue, replaceValue);
      }
    }
    string = toString(O);
    searchString = toString(searchValue);
    functionalReplace = isCallable(replaceValue);
    if (!functionalReplace) replaceValue = toString(replaceValue);
    searchLength = searchString.length;
    advanceBy = max(1, searchLength);
    position = stringIndexOf(string, searchString, 0);
    while (position !== -1) {
      replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);
      result += stringSlice(string, endOfLastMatch, position) + replacement;
      endOfLastMatch = position + searchLength;
      position = stringIndexOf(string, searchString, position + advanceBy);
    }
    if (endOfLastMatch < string.length) {
      result += stringSlice(string, endOfLastMatch);
    }
    return result;
  }
});

/***/ }),

/***/ 11035:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var apply = __webpack_require__(72942);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(54059);
var fails = __webpack_require__(45200);
var anObject = __webpack_require__(52943);
var isCallable = __webpack_require__(76306);
var isNullOrUndefined = __webpack_require__(19268);
var toIntegerOrInfinity = __webpack_require__(58553);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var requireObjectCoercible = __webpack_require__(20877);
var advanceStringIndex = __webpack_require__(59607);
var getMethod = __webpack_require__(11701);
var getSubstitution = __webpack_require__(979);
var regExpExec = __webpack_require__(3414);
var wellKnownSymbol = __webpack_require__(65373);
var REPLACE = wellKnownSymbol('replace');
var max = Math.max;
var min = Math.min;
var concat = uncurryThis([].concat);
var push = uncurryThis([].push);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);
var maybeToString = function maybeToString(it) {
  return it === undefined ? it : String(it);
};

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
}();

// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
}();
var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = {
      a: '7'
    };
    return result;
  };
  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
  return ''.replace(re, '$<a>') !== '7';
});

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
  return [
  // `String.prototype.replace` method
  // https://tc39.es/ecma262/#sec-string.prototype.replace
  function replace(searchValue, replaceValue) {
    var O = requireObjectCoercible(this);
    var replacer = isNullOrUndefined(searchValue) ? undefined : getMethod(searchValue, REPLACE);
    return replacer ? call(replacer, searchValue, O, replaceValue) : call(nativeReplace, toString(O), searchValue, replaceValue);
  },
  // `RegExp.prototype[@@replace]` method
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
  function (string, replaceValue) {
    var rx = anObject(this);
    var S = toString(string);
    if (typeof replaceValue == 'string' && stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf(replaceValue, '$<') === -1) {
      var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
      if (res.done) return res.value;
    }
    var functionalReplace = isCallable(replaceValue);
    if (!functionalReplace) replaceValue = toString(replaceValue);
    var global = rx.global;
    if (global) {
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
    }
    var results = [];
    while (true) {
      var result = regExpExec(rx, S);
      if (result === null) break;
      push(results, result);
      if (!global) break;
      var matchStr = toString(result[0]);
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
    }
    var accumulatedResult = '';
    var nextSourcePosition = 0;
    for (var i = 0; i < results.length; i++) {
      result = results[i];
      var matched = toString(result[0]);
      var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
      var captures = [];
      // NOTE: This is equivalent to
      //   captures = result.slice(1).map(maybeToString)
      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
      for (var j = 1; j < result.length; j++) {
        push(captures, maybeToString(result[j]));
      }
      var namedCaptures = result.groups;
      if (functionalReplace) {
        var replacerArgs = concat([matched], captures, position, S);
        if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);
        var replacement = toString(apply(replaceValue, undefined, replacerArgs));
      } else {
        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
      }
      if (position >= nextSourcePosition) {
        accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
        nextSourcePosition = position + matched.length;
      }
    }
    return accumulatedResult + stringSlice(S, nextSourcePosition);
  }];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

/***/ }),

/***/ 85021:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = __webpack_require__(84550);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(54059);
var anObject = __webpack_require__(52943);
var isNullOrUndefined = __webpack_require__(19268);
var requireObjectCoercible = __webpack_require__(20877);
var sameValue = __webpack_require__(70871);
var toString = __webpack_require__(80978);
var getMethod = __webpack_require__(11701);
var regExpExec = __webpack_require__(3414);

// @@search logic
fixRegExpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {
  return [
  // `String.prototype.search` method
  // https://tc39.es/ecma262/#sec-string.prototype.search
  function search(regexp) {
    var O = requireObjectCoercible(this);
    var searcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, SEARCH);
    return searcher ? call(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));
  },
  // `RegExp.prototype[@@search]` method
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
  function (string) {
    var rx = anObject(this);
    var S = toString(string);
    var res = maybeCallNative(nativeSearch, rx, S);
    if (res.done) return res.value;
    var previousLastIndex = rx.lastIndex;
    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
    var result = regExpExec(rx, S);
    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
    return result === null ? -1 : result.index;
  }];
});

/***/ }),

/***/ 81356:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.small` method
// https://tc39.es/ecma262/#sec-string.prototype.small
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('small')
}, {
  small: function small() {
    return createHTML(this, 'small', '', '');
  }
});

/***/ }),

/***/ 51174:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var apply = __webpack_require__(72942);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(54059);
var anObject = __webpack_require__(52943);
var isNullOrUndefined = __webpack_require__(19268);
var isRegExp = __webpack_require__(26582);
var requireObjectCoercible = __webpack_require__(20877);
var speciesConstructor = __webpack_require__(30646);
var advanceStringIndex = __webpack_require__(59607);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var getMethod = __webpack_require__(11701);
var arraySlice = __webpack_require__(15521);
var callRegExpExec = __webpack_require__(3414);
var regexpExec = __webpack_require__(34646);
var stickyHelpers = __webpack_require__(11426);
var fails = __webpack_require__(45200);
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var MAX_UINT32 = 0xFFFFFFFF;
var min = Math.min;
var $push = [].push;
var exec = uncurryThis(/./.exec);
var push = uncurryThis($push);
var stringSlice = uncurryThis(''.slice);

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () {
    return originalExec.apply(this, arguments);
  };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if ('abbc'.split(/(b)*/)[1] == 'c' ||
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 ||
  // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
  '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function internalSplit(separator, limit) {
      var string = toString(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return call(nativeSplit, string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = call(regexpExec, separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          push(output, stringSlice(string, lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }

      if (lastLastIndex === string.length) {
        if (lastLength || !exec(separatorCopy, '')) push(output, '');
      } else push(output, stringSlice(string, lastLastIndex));
      return output.length > lim ? arraySlice(output, 0, lim) : output;
    };
    // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function internalSplit(separator, limit) {
      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
    };
  } else internalSplit = nativeSplit;
  return [
  // `String.prototype.split` method
  // https://tc39.es/ecma262/#sec-string.prototype.split
  function split(separator, limit) {
    var O = requireObjectCoercible(this);
    var splitter = isNullOrUndefined(separator) ? undefined : getMethod(separator, SPLIT);
    return splitter ? call(splitter, separator, O, limit) : call(internalSplit, toString(O), separator, limit);
  },
  // `RegExp.prototype[@@split]` method
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
  //
  // NOTE: This cannot be properly polyfilled in engines that don't support
  // the 'y' flag.
  function (string, limit) {
    var rx = anObject(this);
    var S = toString(string);
    var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);
    if (res.done) return res.value;
    var C = speciesConstructor(rx, RegExp);
    var unicodeMatching = rx.unicode;
    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y');

    // ^(? + rx + ) is needed, in combination with some S slicing, to
    // simulate the 'y' flag.
    var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
    if (lim === 0) return [];
    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
    var p = 0;
    var q = 0;
    var A = [];
    while (q < S.length) {
      splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
      var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
      var e;
      if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {
        q = advanceStringIndex(S, q, unicodeMatching);
      } else {
        push(A, stringSlice(S, p, q));
        if (A.length === lim) return A;
        for (var i = 1; i <= z.length - 1; i++) {
          push(A, z[i]);
          if (A.length === lim) return A;
        }
        q = p = e;
      }
    }
    push(A, stringSlice(S, p));
    return A;
  }];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

/***/ }),

/***/ 52560:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(62745);
var getOwnPropertyDescriptor = (__webpack_require__(22130).f);
var toLength = __webpack_require__(49152);
var toString = __webpack_require__(80978);
var notARegExp = __webpack_require__(41029);
var requireObjectCoercible = __webpack_require__(20877);
var correctIsRegExpLogic = __webpack_require__(23264);
var IS_PURE = __webpack_require__(58855);

// eslint-disable-next-line es/no-string-prototype-startswith -- safe
var nativeStartsWith = uncurryThis(''.startsWith);
var stringSlice = uncurryThis(''.slice);
var min = Math.min;
var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.startswith
$({
  target: 'String',
  proto: true,
  forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
}, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = toString(searchString);
    return nativeStartsWith ? nativeStartsWith(that, search, index) : stringSlice(that, index, index + search.length) === search;
  }
});

/***/ }),

/***/ 42548:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.strike` method
// https://tc39.es/ecma262/#sec-string.prototype.strike
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('strike')
}, {
  strike: function strike() {
    return createHTML(this, 'strike', '', '');
  }
});

/***/ }),

/***/ 95896:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.sub` method
// https://tc39.es/ecma262/#sec-string.prototype.sub
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('sub')
}, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});

/***/ }),

/***/ 78772:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var requireObjectCoercible = __webpack_require__(20877);
var toIntegerOrInfinity = __webpack_require__(58553);
var toString = __webpack_require__(80978);
var stringSlice = uncurryThis(''.slice);
var max = Math.max;
var min = Math.min;

// eslint-disable-next-line unicorn/prefer-string-slice, es/no-string-prototype-substr -- required for testing
var FORCED = !''.substr || 'ab'.substr(-1) !== 'b';

// `String.prototype.substr` method
// https://tc39.es/ecma262/#sec-string.prototype.substr
$({
  target: 'String',
  proto: true,
  forced: FORCED
}, {
  substr: function substr(start, length) {
    var that = toString(requireObjectCoercible(this));
    var size = that.length;
    var intStart = toIntegerOrInfinity(start);
    var intLength, intEnd;
    if (intStart === Infinity) intStart = 0;
    if (intStart < 0) intStart = max(size + intStart, 0);
    intLength = length === undefined ? size : toIntegerOrInfinity(length);
    if (intLength <= 0 || intLength === Infinity) return '';
    intEnd = min(intStart + intLength, size);
    return intStart >= intEnd ? '' : stringSlice(that, intStart, intEnd);
  }
});

/***/ }),

/***/ 67155:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var createHTML = __webpack_require__(9015);
var forcedStringHTMLMethod = __webpack_require__(28234);

// `String.prototype.sup` method
// https://tc39.es/ecma262/#sec-string.prototype.sup
$({
  target: 'String',
  proto: true,
  forced: forcedStringHTMLMethod('sup')
}, {
  sup: function sup() {
    return createHTML(this, 'sup', '', '');
  }
});

/***/ }),

/***/ 79055:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this line from `core-js@4`
__webpack_require__(92913);
var $ = __webpack_require__(53064);
var trimEnd = __webpack_require__(81569);

// `String.prototype.trimEnd` method
// https://tc39.es/ecma262/#sec-string.prototype.trimend
// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
$({
  target: 'String',
  proto: true,
  name: 'trimEnd',
  forced: ''.trimEnd !== trimEnd
}, {
  trimEnd: trimEnd
});

/***/ }),

/***/ 15713:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var trimStart = __webpack_require__(32723);

// `String.prototype.trimLeft` method
// https://tc39.es/ecma262/#sec-string.prototype.trimleft
// eslint-disable-next-line es/no-string-prototype-trimleft-trimright -- safe
$({
  target: 'String',
  proto: true,
  name: 'trimStart',
  forced: ''.trimLeft !== trimStart
}, {
  trimLeft: trimStart
});

/***/ }),

/***/ 92913:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var trimEnd = __webpack_require__(81569);

// `String.prototype.trimRight` method
// https://tc39.es/ecma262/#sec-string.prototype.trimend
// eslint-disable-next-line es/no-string-prototype-trimleft-trimright -- safe
$({
  target: 'String',
  proto: true,
  name: 'trimEnd',
  forced: ''.trimRight !== trimEnd
}, {
  trimRight: trimEnd
});

/***/ }),

/***/ 37039:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this line from `core-js@4`
__webpack_require__(15713);
var $ = __webpack_require__(53064);
var trimStart = __webpack_require__(32723);

// `String.prototype.trimStart` method
// https://tc39.es/ecma262/#sec-string.prototype.trimstart
// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
$({
  target: 'String',
  proto: true,
  name: 'trimStart',
  forced: ''.trimStart !== trimStart
}, {
  trimStart: trimStart
});

/***/ }),

/***/ 12660:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var $trim = (__webpack_require__(86392).trim);
var forcedStringTrimMethod = __webpack_require__(17273);

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({
  target: 'String',
  proto: true,
  forced: forcedStringTrimMethod('trim')
}, {
  trim: function trim() {
    return $trim(this);
  }
});

/***/ }),

/***/ 16655:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.asyncIterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

/***/ }),

/***/ 46193:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var IS_PURE = __webpack_require__(58855);
var DESCRIPTORS = __webpack_require__(9811);
var NATIVE_SYMBOL = __webpack_require__(29464);
var fails = __webpack_require__(45200);
var hasOwn = __webpack_require__(81285);
var isPrototypeOf = __webpack_require__(77240);
var anObject = __webpack_require__(52943);
var toIndexedObject = __webpack_require__(20829);
var toPropertyKey = __webpack_require__(9370);
var $toString = __webpack_require__(80978);
var createPropertyDescriptor = __webpack_require__(22424);
var nativeObjectCreate = __webpack_require__(1578);
var objectKeys = __webpack_require__(12656);
var getOwnPropertyNamesModule = __webpack_require__(72205);
var getOwnPropertyNamesExternal = __webpack_require__(62020);
var getOwnPropertySymbolsModule = __webpack_require__(32693);
var getOwnPropertyDescriptorModule = __webpack_require__(22130);
var definePropertyModule = __webpack_require__(45070);
var definePropertiesModule = __webpack_require__(70984);
var propertyIsEnumerableModule = __webpack_require__(2962);
var defineBuiltIn = __webpack_require__(33549);
var shared = __webpack_require__(14707);
var sharedKey = __webpack_require__(60759);
var hiddenKeys = __webpack_require__(29841);
var uid = __webpack_require__(97214);
var wellKnownSymbol = __webpack_require__(65373);
var wrappedWellKnownSymbolModule = __webpack_require__(12002);
var defineWellKnownSymbol = __webpack_require__(28569);
var defineSymbolToPrimitive = __webpack_require__(44131);
var setToStringTag = __webpack_require__(46736);
var InternalStateModule = __webpack_require__(59351);
var $forEach = (__webpack_require__(11729).forEach);
var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError = global.TypeError;
var QObject = global.QObject;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function get() {
      return nativeDefineProperty(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;
var wrap = function wrap(tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};
var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (hasOwn(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, {
        enumerable: createPropertyDescriptor(0, false)
      });
    }
    return setSymbolDescriptor(O, key, Attributes);
  }
  return nativeDefineProperty(O, key, Attributes);
};
var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};
var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};
var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = call(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};
var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
  });
  return result;
};
var $getOwnPropertySymbols = function $getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
      push(result, AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (isPrototypeOf(SymbolPrototype, this)) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function setter(value) {
      if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
      if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
      configurable: true,
      set: setter
    });
    return wrap(tag, description);
  };
  SymbolPrototype = $Symbol[PROTOTYPE];
  defineBuiltIn(SymbolPrototype, 'toString', function toString() {
    return getInternalState(this).tag;
  });
  defineBuiltIn($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });
  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };
  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      defineBuiltIn(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
        unsafe: true
      });
    }
  }
}
$({
  global: true,
  constructor: true,
  wrap: true,
  forced: !NATIVE_SYMBOL,
  sham: !NATIVE_SYMBOL
}, {
  Symbol: $Symbol
});
$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});
$({
  target: SYMBOL,
  stat: true,
  forced: !NATIVE_SYMBOL
}, {
  useSetter: function useSetter() {
    USE_SETTER = true;
  },
  useSimple: function useSimple() {
    USE_SETTER = false;
  }
});
$({
  target: 'Object',
  stat: true,
  forced: !NATIVE_SYMBOL,
  sham: !DESCRIPTORS
}, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$({
  target: 'Object',
  stat: true,
  forced: !NATIVE_SYMBOL
}, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);
hiddenKeys[HIDDEN] = true;

/***/ }),

/***/ 25377:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description


var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var hasOwn = __webpack_require__(81285);
var isCallable = __webpack_require__(76306);
var isPrototypeOf = __webpack_require__(77240);
var toString = __webpack_require__(80978);
var defineProperty = (__webpack_require__(45070).f);
var copyConstructorProperties = __webpack_require__(58376);
var NativeSymbol = global.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;
if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||
// Safari 12 bug
NativeSymbol().description !== undefined)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
    var result = isPrototypeOf(SymbolPrototype, this) ? new NativeSymbol(description)
    // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
    : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  SymbolWrapper.prototype = SymbolPrototype;
  SymbolPrototype.constructor = SymbolWrapper;
  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
  var thisSymbolValue = uncurryThis(SymbolPrototype.valueOf);
  var symbolDescriptiveString = uncurryThis(SymbolPrototype.toString);
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  var replace = uncurryThis(''.replace);
  var stringSlice = uncurryThis(''.slice);
  defineProperty(SymbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = thisSymbolValue(this);
      if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';
      var string = symbolDescriptiveString(symbol);
      var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });
  $({
    global: true,
    constructor: true,
    forced: true
  }, {
    Symbol: SymbolWrapper
  });
}

/***/ }),

/***/ 26453:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var hasOwn = __webpack_require__(81285);
var toString = __webpack_require__(80978);
var shared = __webpack_require__(14707);
var NATIVE_SYMBOL_REGISTRY = __webpack_require__(76171);
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.for` method
// https://tc39.es/ecma262/#sec-symbol.for
$({
  target: 'Symbol',
  stat: true,
  forced: !NATIVE_SYMBOL_REGISTRY
}, {
  'for': function _for(key) {
    var string = toString(key);
    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = getBuiltIn('Symbol')(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  }
});

/***/ }),

/***/ 75487:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.hasInstance` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

/***/ }),

/***/ 80581:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

/***/ }),

/***/ 14133:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

/***/ }),

/***/ 73346:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(46193);
__webpack_require__(26453);
__webpack_require__(21399);
__webpack_require__(44750);
__webpack_require__(76212);

/***/ }),

/***/ 21399:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var hasOwn = __webpack_require__(81285);
var isSymbol = __webpack_require__(78991);
var tryToString = __webpack_require__(30821);
var shared = __webpack_require__(14707);
var NATIVE_SYMBOL_REGISTRY = __webpack_require__(76171);
var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.keyFor` method
// https://tc39.es/ecma262/#sec-symbol.keyfor
$({
  target: 'Symbol',
  stat: true,
  forced: !NATIVE_SYMBOL_REGISTRY
}, {
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');
    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  }
});

/***/ }),

/***/ 8751:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.matchAll` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.matchall
defineWellKnownSymbol('matchAll');

/***/ }),

/***/ 32845:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.match` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

/***/ }),

/***/ 45970:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.replace` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

/***/ }),

/***/ 50863:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.search` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

/***/ }),

/***/ 40055:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.species` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

/***/ }),

/***/ 56995:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.split` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

/***/ }),

/***/ 84032:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);
var defineSymbolToPrimitive = __webpack_require__(44131);

// `Symbol.toPrimitive` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

/***/ }),

/***/ 5498:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(40866);
var defineWellKnownSymbol = __webpack_require__(28569);
var setToStringTag = __webpack_require__(46736);

// `Symbol.toStringTag` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag(getBuiltIn('Symbol'), 'Symbol');

/***/ }),

/***/ 38144:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var defineWellKnownSymbol = __webpack_require__(28569);

// `Symbol.unscopables` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

/***/ }),

/***/ 25612:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var lengthOfArrayLike = __webpack_require__(52124);
var toIntegerOrInfinity = __webpack_require__(58553);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method
exportTypedArrayMethod('at', function at(index) {
  var O = aTypedArray(this);
  var len = lengthOfArrayLike(O);
  var relativeIndex = toIntegerOrInfinity(index);
  var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
  return k < 0 || k >= len ? undefined : O[k];
});

/***/ }),

/***/ 42398:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var uncurryThis = __webpack_require__(85317);
var ArrayBufferViewCore = __webpack_require__(82094);
var $ArrayCopyWithin = __webpack_require__(30707);
var u$ArrayCopyWithin = uncurryThis($ArrayCopyWithin);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.copyWithin` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
exportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {
  return u$ArrayCopyWithin(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});

/***/ }),

/***/ 41153:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $every = (__webpack_require__(11729).every);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.every` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 40986:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $fill = __webpack_require__(81);
var toBigInt = __webpack_require__(25187);
var classof = __webpack_require__(84368);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var slice = uncurryThis(''.slice);

// V8 ~ Chrome < 59, Safari < 14.1, FF < 55, Edge <=18
var CONVERSION_BUG = fails(function () {
  var count = 0;
  // eslint-disable-next-line es/no-typed-arrays -- safe
  new Int8Array(2).fill({
    valueOf: function valueOf() {
      return count++;
    }
  });
  return count !== 1;
});

// `%TypedArray%.prototype.fill` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
  var length = arguments.length;
  aTypedArray(this);
  var actualValue = slice(classof(this), 0, 3) === 'Big' ? toBigInt(value) : +value;
  return call($fill, this, actualValue, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);
}, CONVERSION_BUG);

/***/ }),

/***/ 89865:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $filter = (__webpack_require__(11729).filter);
var fromSpeciesAndList = __webpack_require__(28939);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.filter` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  return fromSpeciesAndList(this, list);
});

/***/ }),

/***/ 24393:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $findIndex = (__webpack_require__(11729).findIndex);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
exportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {
  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 60742:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $findLastIndex = (__webpack_require__(22031).findLastIndex);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findLastIndex` method
// https://github.com/tc39/proposal-array-find-from-last
exportTypedArrayMethod('findLastIndex', function findLastIndex(predicate /* , thisArg */) {
  return $findLastIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 9904:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $findLast = (__webpack_require__(22031).findLast);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findLast` method
// https://github.com/tc39/proposal-array-find-from-last
exportTypedArrayMethod('findLast', function findLast(predicate /* , thisArg */) {
  return $findLast(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 13927:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $find = (__webpack_require__(11729).find);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.find` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 19371:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Float32Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float32', function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 18923:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Float64Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float64', function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 48334:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $forEach = (__webpack_require__(11729).forEach);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.forEach` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 25259:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(59225);
var exportTypedArrayStaticMethod = (__webpack_require__(82094).exportTypedArrayStaticMethod);
var typedArrayFrom = __webpack_require__(22524);

// `%TypedArray%.from` method
// https://tc39.es/ecma262/#sec-%typedarray%.from
exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

/***/ }),

/***/ 36457:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $includes = (__webpack_require__(7255).includes);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.includes` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 97282:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $indexOf = (__webpack_require__(7255).indexOf);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.indexOf` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
exportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {
  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 18599:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Int16Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int16', function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 29001:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Int32Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int32', function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 4631:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Int8Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int8', function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 69608:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(52586);
var fails = __webpack_require__(45200);
var uncurryThis = __webpack_require__(85317);
var ArrayBufferViewCore = __webpack_require__(82094);
var ArrayIterators = __webpack_require__(66668);
var wellKnownSymbol = __webpack_require__(65373);
var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array = global.Uint8Array;
var arrayValues = uncurryThis(ArrayIterators.values);
var arrayKeys = uncurryThis(ArrayIterators.keys);
var arrayEntries = uncurryThis(ArrayIterators.entries);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var TypedArrayPrototype = Uint8Array && Uint8Array.prototype;
var GENERIC = !fails(function () {
  TypedArrayPrototype[ITERATOR].call([1]);
});
var ITERATOR_IS_VALUES = !!TypedArrayPrototype && TypedArrayPrototype.values && TypedArrayPrototype[ITERATOR] === TypedArrayPrototype.values && TypedArrayPrototype.values.name === 'values';
var typedArrayValues = function values() {
  return arrayValues(aTypedArray(this));
};

// `%TypedArray%.prototype.entries` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
exportTypedArrayMethod('entries', function entries() {
  return arrayEntries(aTypedArray(this));
}, GENERIC);
// `%TypedArray%.prototype.keys` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
exportTypedArrayMethod('keys', function keys() {
  return arrayKeys(aTypedArray(this));
}, GENERIC);
// `%TypedArray%.prototype.values` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
exportTypedArrayMethod('values', typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, {
  name: 'values'
});
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator
exportTypedArrayMethod(ITERATOR, typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, {
  name: 'values'
});

/***/ }),

/***/ 83411:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var uncurryThis = __webpack_require__(85317);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $join = uncurryThis([].join);

// `%TypedArray%.prototype.join` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
exportTypedArrayMethod('join', function join(separator) {
  return $join(aTypedArray(this), separator);
});

/***/ }),

/***/ 33474:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var apply = __webpack_require__(72942);
var $lastIndexOf = __webpack_require__(58792);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
  var length = arguments.length;
  return apply($lastIndexOf, aTypedArray(this), length > 1 ? [searchElement, arguments[1]] : [searchElement]);
});

/***/ }),

/***/ 55339:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $map = (__webpack_require__(11729).map);
var typedArraySpeciesConstructor = __webpack_require__(37789);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.map` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
    return new (typedArraySpeciesConstructor(O))(length);
  });
});

/***/ }),

/***/ 50481:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(59225);
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;

// `%TypedArray%.of` method
// https://tc39.es/ecma262/#sec-%typedarray%.of
exportTypedArrayStaticMethod('of', function of( /* ...items */
) {
  var index = 0;
  var length = arguments.length;
  var result = new (aTypedArrayConstructor(this))(length);
  while (length > index) {
    result[index] = arguments[index++];
  }
  return result;
}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

/***/ }),

/***/ 79336:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $reduceRight = (__webpack_require__(59892).right);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduceRight` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
  var length = arguments.length;
  return $reduceRight(aTypedArray(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 79845:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $reduce = (__webpack_require__(59892).left);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduce` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
exportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {
  var length = arguments.length;
  return $reduce(aTypedArray(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 42528:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var floor = Math.floor;

// `%TypedArray%.prototype.reverse` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
exportTypedArrayMethod('reverse', function reverse() {
  var that = this;
  var length = aTypedArray(that).length;
  var middle = floor(length / 2);
  var index = 0;
  var value;
  while (index < middle) {
    value = that[index];
    that[index++] = that[--length];
    that[length] = value;
  }
  return that;
});

/***/ }),

/***/ 94343:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(52586);
var call = __webpack_require__(84550);
var ArrayBufferViewCore = __webpack_require__(82094);
var lengthOfArrayLike = __webpack_require__(52124);
var toOffset = __webpack_require__(29575);
var toIndexedObject = __webpack_require__(25769);
var fails = __webpack_require__(45200);
var RangeError = global.RangeError;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails(function () {
  // eslint-disable-next-line es/no-typed-arrays -- required for testing
  var array = new Uint8ClampedArray(2);
  call($set, array, {
    length: 1,
    0: 3
  }, 1);
  return array[1] !== 3;
});

// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other
var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function () {
  var array = new Int8Array(2);
  array.set(1);
  array.set('2', 1);
  return array[0] !== 0 || array[1] !== 2;
});

// `%TypedArray%.prototype.set` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod('set', function set(arrayLike /* , offset */) {
  aTypedArray(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var src = toIndexedObject(arrayLike);
  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call($set, this, src, offset);
  var length = this.length;
  var len = lengthOfArrayLike(src);
  var index = 0;
  if (len + offset > length) throw RangeError('Wrong length');
  while (index < len) {
    this[offset + index] = src[index++];
  }
}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

/***/ }),

/***/ 66963:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var typedArraySpeciesConstructor = __webpack_require__(37789);
var fails = __webpack_require__(45200);
var arraySlice = __webpack_require__(45386);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var FORCED = fails(function () {
  // eslint-disable-next-line es/no-typed-arrays -- required for testing
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
  var list = arraySlice(aTypedArray(this), start, end);
  var C = typedArraySpeciesConstructor(this);
  var index = 0;
  var length = list.length;
  var result = new C(length);
  while (length > index) {
    result[index] = list[index++];
  }
  return result;
}, FORCED);

/***/ }),

/***/ 78579:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var $some = (__webpack_require__(11729).some);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.some` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

/***/ }),

/***/ 86063:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(62745);
var fails = __webpack_require__(45200);
var aCallable = __webpack_require__(6406);
var internalSort = __webpack_require__(41766);
var ArrayBufferViewCore = __webpack_require__(82094);
var FF = __webpack_require__(85476);
var IE_OR_EDGE = __webpack_require__(22968);
var V8 = __webpack_require__(54875);
var WEBKIT = __webpack_require__(99217);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var Uint16Array = global.Uint16Array;
var nativeSort = Uint16Array && uncurryThis(Uint16Array.prototype.sort);

// WebKit
var ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort && !(fails(function () {
  nativeSort(new Uint16Array(2), null);
}) && fails(function () {
  nativeSort(new Uint16Array(2), {});
}));
var STABLE_SORT = !!nativeSort && !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 74;
  if (FF) return FF < 67;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 602;
  var array = new Uint16Array(516);
  var expected = Array(516);
  var index, mod;
  for (index = 0; index < 516; index++) {
    mod = index % 4;
    array[index] = 515 - index;
    expected[index] = index - 2 * mod + 3;
  }
  nativeSort(array, function (a, b) {
    return (a / 4 | 0) - (b / 4 | 0);
  });
  for (index = 0; index < 516; index++) {
    if (array[index] !== expected[index]) return true;
  }
});
var getSortCompare = function getSortCompare(comparefn) {
  return function (x, y) {
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    // eslint-disable-next-line no-self-compare -- NaN check
    if (y !== y) return -1;
    // eslint-disable-next-line no-self-compare -- NaN check
    if (x !== x) return 1;
    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
    return x > y;
  };
};

// `%TypedArray%.prototype.sort` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
  if (comparefn !== undefined) aCallable(comparefn);
  if (STABLE_SORT) return nativeSort(this, comparefn);
  return internalSort(aTypedArray(this), getSortCompare(comparefn));
}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

/***/ }),

/***/ 63605:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ArrayBufferViewCore = __webpack_require__(82094);
var toLength = __webpack_require__(49152);
var toAbsoluteIndex = __webpack_require__(11652);
var typedArraySpeciesConstructor = __webpack_require__(37789);
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.subarray` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
exportTypedArrayMethod('subarray', function subarray(begin, end) {
  var O = aTypedArray(this);
  var length = O.length;
  var beginIndex = toAbsoluteIndex(begin, length);
  var C = typedArraySpeciesConstructor(O);
  return new C(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
});

/***/ }),

/***/ 90483:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(52586);
var apply = __webpack_require__(72942);
var ArrayBufferViewCore = __webpack_require__(82094);
var fails = __webpack_require__(45200);
var arraySlice = __webpack_require__(45386);
var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});
var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return apply($toLocaleString, TO_LOCALE_STRING_BUG ? arraySlice(aTypedArray(this)) : aTypedArray(this), arraySlice(arguments));
}, FORCED);

/***/ }),

/***/ 88780:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var exportTypedArrayMethod = (__webpack_require__(82094).exportTypedArrayMethod);
var fails = __webpack_require__(45200);
var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
var arrayToString = [].toString;
var join = uncurryThis([].join);
if (fails(function () {
  arrayToString.call({});
})) {
  arrayToString = function toString() {
    return join(this);
  };
}
var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

// `%TypedArray%.prototype.toString` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

/***/ }),

/***/ 47678:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Uint16Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint16', function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 35160:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Uint32Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint32', function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 8264:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Uint8Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ 25227:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var createTypedArrayConstructor = __webpack_require__(81767);

// `Uint8ClampedArray` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),

/***/ 8879:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var uncurryThis = __webpack_require__(85317);
var toString = __webpack_require__(80978);
var fromCharCode = String.fromCharCode;
var charAt = uncurryThis(''.charAt);
var exec = uncurryThis(/./.exec);
var stringSlice = uncurryThis(''.slice);
var hex2 = /^[\da-f]{2}$/i;
var hex4 = /^[\da-f]{4}$/i;

// `unescape` method
// https://tc39.es/ecma262/#sec-unescape-string
$({
  global: true
}, {
  unescape: function unescape(string) {
    var str = toString(string);
    var result = '';
    var length = str.length;
    var index = 0;
    var chr, part;
    while (index < length) {
      chr = charAt(str, index++);
      if (chr === '%') {
        if (charAt(str, index) === 'u') {
          part = stringSlice(str, index + 1, index + 5);
          if (exec(hex4, part)) {
            result += fromCharCode(parseInt(part, 16));
            index += 5;
            continue;
          }
        } else {
          part = stringSlice(str, index, index + 2);
          if (exec(hex2, part)) {
            result += fromCharCode(parseInt(part, 16));
            index += 2;
            continue;
          }
        }
      }
      result += chr;
    }
    return result;
  }
});

/***/ }),

/***/ 94838:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__(52586);
var uncurryThis = __webpack_require__(85317);
var defineBuiltIns = __webpack_require__(78768);
var InternalMetadataModule = __webpack_require__(60648);
var collection = __webpack_require__(79524);
var collectionWeak = __webpack_require__(19026);
var isObject = __webpack_require__(74194);
var isExtensible = __webpack_require__(91268);
var enforceInternalState = (__webpack_require__(59351).enforce);
var NATIVE_WEAK_MAP = __webpack_require__(75156);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var InternalWeakMap;
var wrapper = function wrapper(init) {
  return function WeakMap() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.es/ecma262/#sec-weakmap-constructor
var $WeakMap = collection('WeakMap', wrapper, collectionWeak);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.enable();
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = uncurryThis(WeakMapPrototype['delete']);
  var nativeHas = uncurryThis(WeakMapPrototype.has);
  var nativeGet = uncurryThis(WeakMapPrototype.get);
  var nativeSet = uncurryThis(WeakMapPrototype.set);
  defineBuiltIns(WeakMapPrototype, {
    'delete': function _delete(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete(this, key) || state.frozen['delete'](key);
      }
      return nativeDelete(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas(this, key) || state.frozen.has(key);
      }
      return nativeHas(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
      }
      return nativeGet(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
      } else nativeSet(this, key, value);
      return this;
    }
  });
}

/***/ }),

/***/ 19070:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(94838);

/***/ }),

/***/ 33402:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var collection = __webpack_require__(79524);
var collectionWeak = __webpack_require__(19026);

// `WeakSet` constructor
// https://tc39.es/ecma262/#sec-weakset-constructor
collection('WeakSet', function (init) {
  return function WeakSet() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
}, collectionWeak);

/***/ }),

/***/ 14677:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(33402);

/***/ }),

/***/ 73903:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var toString = __webpack_require__(80978);
var hasOwn = __webpack_require__(81285);
var validateArgumentsLength = __webpack_require__(72217);
var ctoi = (__webpack_require__(74390).ctoi);
var disallowed = /[^\d+/a-z]/i;
var whitespaces = /[\t\n\f\r ]+/g;
var finalEq = /[=]+$/;
var $atob = getBuiltIn('atob');
var fromCharCode = String.fromCharCode;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var exec = uncurryThis(disallowed.exec);
var NO_SPACES_IGNORE = fails(function () {
  return $atob(' ') !== '';
});
var NO_ENCODING_CHECK = !fails(function () {
  $atob('a');
});
var NO_ARG_RECEIVING_CHECK = !NO_SPACES_IGNORE && !NO_ENCODING_CHECK && !fails(function () {
  $atob();
});
var WRONG_ARITY = !NO_SPACES_IGNORE && !NO_ENCODING_CHECK && $atob.length !== 1;

// `atob` method
// https://html.spec.whatwg.org/multipage/webappapis.html#dom-atob
$({
  global: true,
  enumerable: true,
  forced: NO_SPACES_IGNORE || NO_ENCODING_CHECK || NO_ARG_RECEIVING_CHECK || WRONG_ARITY
}, {
  atob: function atob(data) {
    validateArgumentsLength(arguments.length, 1);
    if (NO_ARG_RECEIVING_CHECK || WRONG_ARITY) return $atob(data);
    var string = replace(toString(data), whitespaces, '');
    var output = '';
    var position = 0;
    var bc = 0;
    var chr, bs;
    if (string.length % 4 == 0) {
      string = replace(string, finalEq, '');
    }
    if (string.length % 4 == 1 || exec(disallowed, string)) {
      throw new (getBuiltIn('DOMException'))('The string is not correctly encoded', 'InvalidCharacterError');
    }
    while (chr = charAt(string, position++)) {
      if (hasOwn(ctoi, chr)) {
        bs = bc % 4 ? bs * 64 + ctoi[chr] : ctoi[chr];
        if (bc++ % 4) output += fromCharCode(255 & bs >> (-2 * bc & 6));
      }
    }
    return output;
  }
});

/***/ }),

/***/ 81620:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var getBuiltIn = __webpack_require__(40866);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var toString = __webpack_require__(80978);
var validateArgumentsLength = __webpack_require__(72217);
var itoc = (__webpack_require__(74390).itoc);
var $btoa = getBuiltIn('btoa');
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var NO_ARG_RECEIVING_CHECK = !!$btoa && !fails(function () {
  $btoa();
});
var WRONG_ARG_CONVERSION = !!$btoa && fails(function () {
  return $btoa(null) !== 'bnVsbA==';
});
var WRONG_ARITY = !!$btoa && $btoa.length !== 1;

// `btoa` method
// https://html.spec.whatwg.org/multipage/webappapis.html#dom-btoa
$({
  global: true,
  enumerable: true,
  forced: NO_ARG_RECEIVING_CHECK || WRONG_ARG_CONVERSION || WRONG_ARITY
}, {
  btoa: function btoa(data) {
    validateArgumentsLength(arguments.length, 1);
    if (NO_ARG_RECEIVING_CHECK || WRONG_ARG_CONVERSION || WRONG_ARITY) return $btoa(toString(data));
    var string = toString(data);
    var output = '';
    var position = 0;
    var map = itoc;
    var block, charCode;
    while (charAt(string, position) || (map = '=', position % 1)) {
      charCode = charCodeAt(string, position += 3 / 4);
      if (charCode > 0xFF) {
        throw new (getBuiltIn('DOMException'))('The string contains characters outside of the Latin1 range', 'InvalidCharacterError');
      }
      block = block << 8 | charCode;
      output += charAt(map, 63 & block >> 8 - position % 1 * 8);
    }
    return output;
  }
});

/***/ }),

/***/ 78736:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var clearImmediate = (__webpack_require__(39250).clear);

// `clearImmediate` method
// http://w3c.github.io/setImmediate/#si-clearImmediate
$({
  global: true,
  bind: true,
  enumerable: true,
  forced: global.clearImmediate !== clearImmediate
}, {
  clearImmediate: clearImmediate
});

/***/ }),

/***/ 16141:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var DOMIterables = __webpack_require__(15399);
var DOMTokenListPrototype = __webpack_require__(19908);
var forEach = __webpack_require__(80980);
var createNonEnumerableProperty = __webpack_require__(91705);
var handlePrototype = function handlePrototype(CollectionPrototype) {
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
};
for (var COLLECTION_NAME in DOMIterables) {
  if (DOMIterables[COLLECTION_NAME]) {
    handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
  }
}
handlePrototype(DOMTokenListPrototype);

/***/ }),

/***/ 75706:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(52586);
var DOMIterables = __webpack_require__(15399);
var DOMTokenListPrototype = __webpack_require__(19908);
var ArrayIteratorMethods = __webpack_require__(66668);
var createNonEnumerableProperty = __webpack_require__(91705);
var wellKnownSymbol = __webpack_require__(65373);
var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;
var handlePrototype = function handlePrototype(CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};
for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}
handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

/***/ }),

/***/ 78524:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var tryNodeRequire = __webpack_require__(49958);
var getBuiltIn = __webpack_require__(40866);
var fails = __webpack_require__(45200);
var create = __webpack_require__(1578);
var createPropertyDescriptor = __webpack_require__(22424);
var defineProperty = (__webpack_require__(45070).f);
var defineBuiltIn = __webpack_require__(33549);
var defineBuiltInAccessor = __webpack_require__(45766);
var hasOwn = __webpack_require__(81285);
var anInstance = __webpack_require__(6441);
var anObject = __webpack_require__(52943);
var errorToString = __webpack_require__(495);
var normalizeStringArgument = __webpack_require__(65887);
var DOMExceptionConstants = __webpack_require__(58295);
var clearErrorStack = __webpack_require__(31481);
var InternalStateModule = __webpack_require__(59351);
var DESCRIPTORS = __webpack_require__(9811);
var IS_PURE = __webpack_require__(58855);
var DOM_EXCEPTION = 'DOMException';
var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
var Error = getBuiltIn('Error');
// NodeJS < 17.0 does not expose `DOMException` to global
var NativeDOMException = getBuiltIn(DOM_EXCEPTION) || function () {
  try {
    // NodeJS < 15.0 does not expose `MessageChannel` to global
    var MessageChannel = getBuiltIn('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel;
    // eslint-disable-next-line es/no-weak-map, unicorn/require-post-message-target-origin -- safe
    new MessageChannel().port1.postMessage(new WeakMap());
  } catch (error) {
    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
  }
}();
var NativeDOMExceptionPrototype = NativeDOMException && NativeDOMException.prototype;
var ErrorPrototype = Error.prototype;
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(DOM_EXCEPTION);
var HAS_STACK = ('stack' in Error(DOM_EXCEPTION));
var codeFor = function codeFor(name) {
  return hasOwn(DOMExceptionConstants, name) && DOMExceptionConstants[name].m ? DOMExceptionConstants[name].c : 0;
};
var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var code = codeFor(name);
  setInternalState(this, {
    type: DOM_EXCEPTION,
    name: name,
    message: message,
    code: code
  });
  if (!DESCRIPTORS) {
    this.name = name;
    this.message = message;
    this.code = code;
  }
  if (HAS_STACK) {
    var error = Error(message);
    error.name = DOM_EXCEPTION;
    defineProperty(this, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  }
};
var DOMExceptionPrototype = $DOMException.prototype = create(ErrorPrototype);
var createGetterDescriptor = function createGetterDescriptor(get) {
  return {
    enumerable: true,
    configurable: true,
    get: get
  };
};
var getterFor = function getterFor(key) {
  return createGetterDescriptor(function () {
    return getInternalState(this)[key];
  });
};
if (DESCRIPTORS) {
  defineBuiltInAccessor(DOMExceptionPrototype, 'code', getterFor('code'));
  defineBuiltInAccessor(DOMExceptionPrototype, 'message', getterFor('message'));
  defineBuiltInAccessor(DOMExceptionPrototype, 'name', getterFor('name'));
}
defineProperty(DOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, $DOMException));

// FF36- DOMException is a function, but can't be constructed
var INCORRECT_CONSTRUCTOR = fails(function () {
  return !(new NativeDOMException() instanceof Error);
});

// Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs
var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function () {
  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException(1, 2)) !== '2: 1';
});

// Deno 1.6.3- DOMException.prototype.code just missed
var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function () {
  return new NativeDOMException(1, 'DataCloneError').code !== 25;
});

// Deno 1.6.3- DOMException constants just missed
var MISSED_CONSTANTS = INCORRECT_CONSTRUCTOR || NativeDOMException[DATA_CLONE_ERR] !== 25 || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;
var FORCED_CONSTRUCTOR = IS_PURE ? INCORRECT_TO_STRING || INCORRECT_CODE || MISSED_CONSTANTS : INCORRECT_CONSTRUCTOR;

// `DOMException` constructor
// https://webidl.spec.whatwg.org/#idl-DOMException
$({
  global: true,
  constructor: true,
  forced: FORCED_CONSTRUCTOR
}, {
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});
var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;
if (INCORRECT_TO_STRING && (IS_PURE || NativeDOMException === PolyfilledDOMException)) {
  defineBuiltIn(PolyfilledDOMExceptionPrototype, 'toString', errorToString);
}
if (INCORRECT_CODE && DESCRIPTORS && NativeDOMException === PolyfilledDOMException) {
  defineBuiltInAccessor(PolyfilledDOMExceptionPrototype, 'code', createGetterDescriptor(function () {
    return codeFor(anObject(this).name);
  }));
}
for (var key in DOMExceptionConstants) {
  if (hasOwn(DOMExceptionConstants, key)) {
    var constant = DOMExceptionConstants[key];
    var constantName = constant.s;
    var descriptor = createPropertyDescriptor(6, constant.c);
    if (!hasOwn(PolyfilledDOMException, constantName)) {
      defineProperty(PolyfilledDOMException, constantName, descriptor);
    }
    if (!hasOwn(PolyfilledDOMExceptionPrototype, constantName)) {
      defineProperty(PolyfilledDOMExceptionPrototype, constantName, descriptor);
    }
  }
}

/***/ }),

/***/ 74781:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var getBuiltIn = __webpack_require__(40866);
var createPropertyDescriptor = __webpack_require__(22424);
var defineProperty = (__webpack_require__(45070).f);
var hasOwn = __webpack_require__(81285);
var anInstance = __webpack_require__(6441);
var inheritIfRequired = __webpack_require__(57170);
var normalizeStringArgument = __webpack_require__(65887);
var DOMExceptionConstants = __webpack_require__(58295);
var clearErrorStack = __webpack_require__(31481);
var DESCRIPTORS = __webpack_require__(9811);
var IS_PURE = __webpack_require__(58855);
var DOM_EXCEPTION = 'DOMException';
var Error = getBuiltIn('Error');
var NativeDOMException = getBuiltIn(DOM_EXCEPTION);
var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var that = new NativeDOMException(message, name);
  var error = Error(message);
  error.name = DOM_EXCEPTION;
  defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  inheritIfRequired(that, this, $DOMException);
  return that;
};
var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;
var ERROR_HAS_STACK = ('stack' in Error(DOM_EXCEPTION));
var DOM_EXCEPTION_HAS_STACK = ('stack' in new NativeDOMException(1, 2));

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var descriptor = NativeDOMException && DESCRIPTORS && Object.getOwnPropertyDescriptor(global, DOM_EXCEPTION);

// Bun ~ 0.1.1 DOMException have incorrect descriptor and we can't redefine it
// https://github.com/Jarred-Sumner/bun/issues/399
var BUGGY_DESCRIPTOR = !!descriptor && !(descriptor.writable && descriptor.configurable);
var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !BUGGY_DESCRIPTOR && !DOM_EXCEPTION_HAS_STACK;

// `DOMException` constructor patch for `.stack` where it's required
// https://webidl.spec.whatwg.org/#es-DOMException-specialness
$({
  global: true,
  constructor: true,
  forced: IS_PURE || FORCED_CONSTRUCTOR
}, {
  // TODO: fix export logic
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});
var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;
if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
  if (!IS_PURE) {
    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));
  }
  for (var key in DOMExceptionConstants) {
    if (hasOwn(DOMExceptionConstants, key)) {
      var constant = DOMExceptionConstants[key];
      var constantName = constant.s;
      if (!hasOwn(PolyfilledDOMException, constantName)) {
        defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));
      }
    }
  }
}

/***/ }),

/***/ 82996:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(40866);
var setToStringTag = __webpack_require__(46736);
var DOM_EXCEPTION = 'DOMException';
setToStringTag(getBuiltIn(DOM_EXCEPTION), DOM_EXCEPTION);

/***/ }),

/***/ 56573:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(78736);
__webpack_require__(78419);

/***/ }),

/***/ 27273:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var microtask = __webpack_require__(50119);
var aCallable = __webpack_require__(6406);
var validateArgumentsLength = __webpack_require__(72217);
var IS_NODE = __webpack_require__(31292);
var process = global.process;

// `queueMicrotask` method
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
$({
  global: true,
  enumerable: true,
  dontCallGetSet: true
}, {
  queueMicrotask: function queueMicrotask(fn) {
    validateArgumentsLength(arguments.length, 1);
    aCallable(fn);
    var domain = IS_NODE && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

/***/ }),

/***/ 33380:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var defineBuiltInAccessor = __webpack_require__(45766);
var DESCRIPTORS = __webpack_require__(9811);
var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var INCORRECT_VALUE = global.self !== global;

// `self` getter
// https://html.spec.whatwg.org/multipage/window-object.html#dom-self
try {
  if (DESCRIPTORS) {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var descriptor = Object.getOwnPropertyDescriptor(global, 'self');
    // some engines have `self`, but with incorrect descriptor
    // https://github.com/denoland/deno/issues/15765
    if (INCORRECT_VALUE || !descriptor || !descriptor.get || !descriptor.enumerable) {
      defineBuiltInAccessor(global, 'self', {
        get: function self() {
          return global;
        },
        set: function self(value) {
          if (this !== global) throw $TypeError('Illegal invocation');
          defineProperty(global, 'self', {
            value: value,
            writable: true,
            configurable: true,
            enumerable: true
          });
        },
        configurable: true,
        enumerable: true
      });
    }
  } else $({
    global: true,
    simple: true,
    forced: INCORRECT_VALUE
  }, {
    self: global
  });
} catch (error) {/* empty */}

/***/ }),

/***/ 78419:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var setImmediate = (__webpack_require__(39250).set);

// `setImmediate` method
// http://w3c.github.io/setImmediate/#si-setImmediate
$({
  global: true,
  bind: true,
  enumerable: true,
  forced: global.setImmediate !== setImmediate
}, {
  setImmediate: setImmediate
});

/***/ }),

/***/ 72002:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var setInterval = (__webpack_require__(80358).setInterval);

// ie9- setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
$({
  global: true,
  bind: true,
  forced: global.setInterval !== setInterval
}, {
  setInterval: setInterval
});

/***/ }),

/***/ 26086:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var setTimeout = (__webpack_require__(80358).setTimeout);

// ie9- setTimeout additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
$({
  global: true,
  bind: true,
  forced: global.setTimeout !== setTimeout
}, {
  setTimeout: setTimeout
});

/***/ }),

/***/ 28294:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(58855);
var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var getBuiltin = __webpack_require__(40866);
var uncurryThis = __webpack_require__(85317);
var fails = __webpack_require__(45200);
var uid = __webpack_require__(97214);
var isCallable = __webpack_require__(76306);
var isConstructor = __webpack_require__(60116);
var isNullOrUndefined = __webpack_require__(19268);
var isObject = __webpack_require__(74194);
var isSymbol = __webpack_require__(78991);
var iterate = __webpack_require__(63244);
var anObject = __webpack_require__(52943);
var classof = __webpack_require__(84368);
var hasOwn = __webpack_require__(81285);
var createProperty = __webpack_require__(27042);
var createNonEnumerableProperty = __webpack_require__(91705);
var lengthOfArrayLike = __webpack_require__(52124);
var validateArgumentsLength = __webpack_require__(72217);
var getRegExpFlags = __webpack_require__(1002);
var ERROR_STACK_INSTALLABLE = __webpack_require__(30382);
var V8 = __webpack_require__(54875);
var IS_BROWSER = __webpack_require__(53858);
var IS_DENO = __webpack_require__(72641);
var IS_NODE = __webpack_require__(31292);
var Object = global.Object;
var Date = global.Date;
var Error = global.Error;
var EvalError = global.EvalError;
var RangeError = global.RangeError;
var ReferenceError = global.ReferenceError;
var SyntaxError = global.SyntaxError;
var TypeError = global.TypeError;
var URIError = global.URIError;
var PerformanceMark = global.PerformanceMark;
var WebAssembly = global.WebAssembly;
var CompileError = WebAssembly && WebAssembly.CompileError || Error;
var LinkError = WebAssembly && WebAssembly.LinkError || Error;
var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error;
var DOMException = getBuiltin('DOMException');
var Set = getBuiltin('Set');
var Map = getBuiltin('Map');
var MapPrototype = Map.prototype;
var mapHas = uncurryThis(MapPrototype.has);
var mapGet = uncurryThis(MapPrototype.get);
var mapSet = uncurryThis(MapPrototype.set);
var setAdd = uncurryThis(Set.prototype.add);
var objectKeys = getBuiltin('Object', 'keys');
var push = uncurryThis([].push);
var thisBooleanValue = uncurryThis(true.valueOf);
var thisNumberValue = uncurryThis(1.0.valueOf);
var thisStringValue = uncurryThis(''.valueOf);
var thisTimeValue = uncurryThis(Date.prototype.getTime);
var PERFORMANCE_MARK = uid('structuredClone');
var DATA_CLONE_ERROR = 'DataCloneError';
var TRANSFERRING = 'Transferring';
var checkBasicSemantic = function checkBasicSemantic(structuredCloneImplementation) {
  return !fails(function () {
    var set1 = new global.Set([7]);
    var set2 = structuredCloneImplementation(set1);
    var number = structuredCloneImplementation(Object(7));
    return set2 == set1 || !set2.has(7) || typeof number != 'object' || number != 7;
  }) && structuredCloneImplementation;
};
var checkErrorsCloning = function checkErrorsCloning(structuredCloneImplementation, $Error) {
  return !fails(function () {
    var error = new $Error();
    var test = structuredCloneImplementation({
      a: error,
      b: error
    });
    return !(test && test.a === test.b && test.a instanceof $Error && test.a.stack === error.stack);
  });
};

// https://github.com/whatwg/html/pull/5749
var checkNewErrorsCloningSemantic = function checkNewErrorsCloningSemantic(structuredCloneImplementation) {
  return !fails(function () {
    var test = structuredCloneImplementation(new global.AggregateError([1], PERFORMANCE_MARK, {
      cause: 3
    }));
    return test.name != 'AggregateError' || test.errors[0] != 1 || test.message != PERFORMANCE_MARK || test.cause != 3;
  });
};

// FF94+, Safari 15.4+, Chrome 98+, NodeJS 17.0+, Deno 1.13+
// FF<103 and Safari implementations can't clone errors
// https://bugzilla.mozilla.org/show_bug.cgi?id=1556604
// FF103 can clone errors, but `.stack` of clone is an empty string
// https://bugzilla.mozilla.org/show_bug.cgi?id=1778762
// FF104+ fixed it on usual errors, but not on DOMExceptions
// https://bugzilla.mozilla.org/show_bug.cgi?id=1777321
// Chrome <102 returns `null` if cloned object contains multiple references to one error
// https://bugs.chromium.org/p/v8/issues/detail?id=12542
// NodeJS implementation can't clone DOMExceptions
// https://github.com/nodejs/node/issues/41038
// only FF103+ supports new (html/5749) error cloning semantic
var nativeStructuredClone = global.structuredClone;
var FORCED_REPLACEMENT = IS_PURE || !checkErrorsCloning(nativeStructuredClone, Error) || !checkErrorsCloning(nativeStructuredClone, DOMException) || !checkNewErrorsCloningSemantic(nativeStructuredClone);

// Chrome 82+, Safari 14.1+, Deno 1.11+
// Chrome 78-81 implementation swaps `.name` and `.message` of cloned `DOMException`
// Chrome returns `null` if cloned object contains multiple references to one error
// Safari 14.1 implementation doesn't clone some `RegExp` flags, so requires a workaround
// Safari implementation can't clone errors
// Deno 1.2-1.10 implementations too naive
// NodeJS 16.0+ does not have `PerformanceMark` constructor
// NodeJS <17.2 structured cloning implementation from `performance.mark` is too naive
// and can't clone, for example, `RegExp` or some boxed primitives
// https://github.com/nodejs/node/issues/40840
// no one of those implementations supports new (html/5749) error cloning semantic
var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function (value) {
  return new PerformanceMark(PERFORMANCE_MARK, {
    detail: value
  }).detail;
});
var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;
var throwUncloneable = function throwUncloneable(type) {
  throw new DOMException('Uncloneable type: ' + type, DATA_CLONE_ERROR);
};
var throwUnpolyfillable = function throwUnpolyfillable(type, action) {
  throw new DOMException((action || 'Cloning') + ' of ' + type + ' cannot be properly polyfilled in this engine', DATA_CLONE_ERROR);
};
var createDataTransfer = function createDataTransfer() {
  var dataTransfer;
  try {
    dataTransfer = new global.DataTransfer();
  } catch (error) {
    try {
      dataTransfer = new global.ClipboardEvent('').clipboardData;
    } catch (error2) {/* empty */}
  }
  return dataTransfer && dataTransfer.items && dataTransfer.files ? dataTransfer : null;
};
var structuredCloneInternal = function structuredCloneInternal(value, map) {
  if (isSymbol(value)) throwUncloneable('Symbol');
  if (!isObject(value)) return value;
  // effectively preserves circular references
  if (map) {
    if (mapHas(map, value)) return mapGet(map, value);
  } else map = new Map();
  var type = classof(value);
  var deep = false;
  var C, name, cloned, dataTransfer, i, length, keys, key, source, target;
  switch (type) {
    case 'Array':
      cloned = [];
      deep = true;
      break;
    case 'Object':
      cloned = {};
      deep = true;
      break;
    case 'Map':
      cloned = new Map();
      deep = true;
      break;
    case 'Set':
      cloned = new Set();
      deep = true;
      break;
    case 'RegExp':
      // in this block because of a Safari 14.1 bug
      // old FF does not clone regexes passed to the constructor, so get the source and flags directly
      cloned = new RegExp(value.source, getRegExpFlags(value));
      break;
    case 'Error':
      name = value.name;
      switch (name) {
        case 'AggregateError':
          cloned = getBuiltin('AggregateError')([]);
          break;
        case 'EvalError':
          cloned = EvalError();
          break;
        case 'RangeError':
          cloned = RangeError();
          break;
        case 'ReferenceError':
          cloned = ReferenceError();
          break;
        case 'SyntaxError':
          cloned = SyntaxError();
          break;
        case 'TypeError':
          cloned = TypeError();
          break;
        case 'URIError':
          cloned = URIError();
          break;
        case 'CompileError':
          cloned = CompileError();
          break;
        case 'LinkError':
          cloned = LinkError();
          break;
        case 'RuntimeError':
          cloned = RuntimeError();
          break;
        default:
          cloned = Error();
      }
      deep = true;
      break;
    case 'DOMException':
      cloned = new DOMException(value.message, value.name);
      deep = true;
      break;
    case 'DataView':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'BigInt64Array':
    case 'BigUint64Array':
      C = global[type];
      // in some old engines like Safari 9, typeof C is 'object'
      // on Uint8ClampedArray or some other constructors
      if (!isObject(C)) throwUnpolyfillable(type);
      cloned = new C(
      // this is safe, since arraybuffer cannot have circular references
      structuredCloneInternal(value.buffer, map), value.byteOffset, type === 'DataView' ? value.byteLength : value.length);
      break;
    case 'DOMQuad':
      try {
        cloned = new DOMQuad(structuredCloneInternal(value.p1, map), structuredCloneInternal(value.p2, map), structuredCloneInternal(value.p3, map), structuredCloneInternal(value.p4, map));
      } catch (error) {
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);
      }
      break;
    case 'FileList':
      dataTransfer = createDataTransfer();
      if (dataTransfer) {
        for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
          dataTransfer.items.add(structuredCloneInternal(value[i], map));
        }
        cloned = dataTransfer.files;
      } else if (nativeRestrictedStructuredClone) {
        cloned = nativeRestrictedStructuredClone(value);
      } else throwUnpolyfillable(type);
      break;
    case 'ImageData':
      // Safari 9 ImageData is a constructor, but typeof ImageData is 'object'
      try {
        cloned = new ImageData(structuredCloneInternal(value.data, map), value.width, value.height, {
          colorSpace: value.colorSpace
        });
      } catch (error) {
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);
      }
      break;
    default:
      if (nativeRestrictedStructuredClone) {
        cloned = nativeRestrictedStructuredClone(value);
      } else switch (type) {
        case 'BigInt':
          // can be a 3rd party polyfill
          cloned = Object(value.valueOf());
          break;
        case 'Boolean':
          cloned = Object(thisBooleanValue(value));
          break;
        case 'Number':
          cloned = Object(thisNumberValue(value));
          break;
        case 'String':
          cloned = Object(thisStringValue(value));
          break;
        case 'Date':
          cloned = new Date(thisTimeValue(value));
          break;
        case 'ArrayBuffer':
          C = global.DataView;
          // `ArrayBuffer#slice` is not available in IE10
          // `ArrayBuffer#slice` and `DataView` are not available in old FF
          if (!C && typeof value.slice != 'function') throwUnpolyfillable(type);
          // detached buffers throws in `DataView` and `.slice`
          try {
            if (typeof value.slice == 'function') {
              cloned = value.slice(0);
            } else {
              length = value.byteLength;
              cloned = new ArrayBuffer(length);
              source = new C(value);
              target = new C(cloned);
              for (i = 0; i < length; i++) {
                target.setUint8(i, source.getUint8(i));
              }
            }
          } catch (error) {
            throw new DOMException('ArrayBuffer is detached', DATA_CLONE_ERROR);
          }
          break;
        case 'SharedArrayBuffer':
          // SharedArrayBuffer should use shared memory, we can't polyfill it, so return the original
          cloned = value;
          break;
        case 'Blob':
          try {
            cloned = value.slice(0, value.size, value.type);
          } catch (error) {
            throwUnpolyfillable(type);
          }
          break;
        case 'DOMPoint':
        case 'DOMPointReadOnly':
          C = global[type];
          try {
            cloned = C.fromPoint ? C.fromPoint(value) : new C(value.x, value.y, value.z, value.w);
          } catch (error) {
            throwUnpolyfillable(type);
          }
          break;
        case 'DOMRect':
        case 'DOMRectReadOnly':
          C = global[type];
          try {
            cloned = C.fromRect ? C.fromRect(value) : new C(value.x, value.y, value.width, value.height);
          } catch (error) {
            throwUnpolyfillable(type);
          }
          break;
        case 'DOMMatrix':
        case 'DOMMatrixReadOnly':
          C = global[type];
          try {
            cloned = C.fromMatrix ? C.fromMatrix(value) : new C(value);
          } catch (error) {
            throwUnpolyfillable(type);
          }
          break;
        case 'AudioData':
        case 'VideoFrame':
          if (!isCallable(value.clone)) throwUnpolyfillable(type);
          try {
            cloned = value.clone();
          } catch (error) {
            throwUncloneable(type);
          }
          break;
        case 'File':
          try {
            cloned = new File([value], value.name, value);
          } catch (error) {
            throwUnpolyfillable(type);
          }
          break;
        case 'CropTarget':
        case 'CryptoKey':
        case 'FileSystemDirectoryHandle':
        case 'FileSystemFileHandle':
        case 'FileSystemHandle':
        case 'GPUCompilationInfo':
        case 'GPUCompilationMessage':
        case 'ImageBitmap':
        case 'RTCCertificate':
        case 'WebAssembly.Module':
          throwUnpolyfillable(type);
        // break omitted
        default:
          throwUncloneable(type);
      }
  }
  mapSet(map, value, cloned);
  if (deep) switch (type) {
    case 'Array':
    case 'Object':
      keys = objectKeys(value);
      for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
        key = keys[i];
        createProperty(cloned, key, structuredCloneInternal(value[key], map));
      }
      break;
    case 'Map':
      value.forEach(function (v, k) {
        mapSet(cloned, structuredCloneInternal(k, map), structuredCloneInternal(v, map));
      });
      break;
    case 'Set':
      value.forEach(function (v) {
        setAdd(cloned, structuredCloneInternal(v, map));
      });
      break;
    case 'Error':
      createNonEnumerableProperty(cloned, 'message', structuredCloneInternal(value.message, map));
      if (hasOwn(value, 'cause')) {
        createNonEnumerableProperty(cloned, 'cause', structuredCloneInternal(value.cause, map));
      }
      if (name == 'AggregateError') {
        cloned.errors = structuredCloneInternal(value.errors, map);
      }
    // break omitted
    case 'DOMException':
      if (ERROR_STACK_INSTALLABLE) {
        createNonEnumerableProperty(cloned, 'stack', structuredCloneInternal(value.stack, map));
      }
  }
  return cloned;
};
var PROPER_TRANSFER = nativeStructuredClone && !fails(function () {
  // prevent V8 ArrayBufferDetaching protector cell invalidation and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (IS_DENO && V8 > 92 || IS_NODE && V8 > 94 || IS_BROWSER && V8 > 97) return false;
  var buffer = new ArrayBuffer(8);
  var clone = nativeStructuredClone(buffer, {
    transfer: [buffer]
  });
  return buffer.byteLength != 0 || clone.byteLength != 8;
});
var tryToTransfer = function tryToTransfer(rawTransfer, map) {
  if (!isObject(rawTransfer)) throw TypeError('Transfer option cannot be converted to a sequence');
  var transfer = [];
  iterate(rawTransfer, function (value) {
    push(transfer, anObject(value));
  });
  var i = 0;
  var length = lengthOfArrayLike(transfer);
  var value, type, C, transferredArray, transferred, canvas, context;
  if (PROPER_TRANSFER) {
    transferredArray = nativeStructuredClone(transfer, {
      transfer: transfer
    });
    while (i < length) {
      mapSet(map, transfer[i], transferredArray[i++]);
    }
  } else while (i < length) {
    value = transfer[i++];
    if (mapHas(map, value)) throw new DOMException('Duplicate transferable', DATA_CLONE_ERROR);
    type = classof(value);
    switch (type) {
      case 'ImageBitmap':
        C = global.OffscreenCanvas;
        if (!isConstructor(C)) throwUnpolyfillable(type, TRANSFERRING);
        try {
          canvas = new C(value.width, value.height);
          context = canvas.getContext('bitmaprenderer');
          context.transferFromImageBitmap(value);
          transferred = canvas.transferToImageBitmap();
        } catch (error) {/* empty */}
        break;
      case 'AudioData':
      case 'VideoFrame':
        if (!isCallable(value.clone) || !isCallable(value.close)) throwUnpolyfillable(type, TRANSFERRING);
        try {
          transferred = value.clone();
          value.close();
        } catch (error) {/* empty */}
        break;
      case 'ArrayBuffer':
      case 'MediaSourceHandle':
      case 'MessagePort':
      case 'OffscreenCanvas':
      case 'ReadableStream':
      case 'TransformStream':
      case 'WritableStream':
        throwUnpolyfillable(type, TRANSFERRING);
    }
    if (transferred === undefined) throw new DOMException('This object cannot be transferred: ' + type, DATA_CLONE_ERROR);
    mapSet(map, value, transferred);
  }
};

// `structuredClone` method
// https://html.spec.whatwg.org/multipage/structured-data.html#dom-structuredclone
$({
  global: true,
  enumerable: true,
  sham: !PROPER_TRANSFER,
  forced: FORCED_REPLACEMENT
}, {
  structuredClone: function structuredClone(value /* , { transfer } */) {
    var options = validateArgumentsLength(arguments.length, 1) > 1 && !isNullOrUndefined(arguments[1]) ? anObject(arguments[1]) : undefined;
    var transfer = options ? options.transfer : undefined;
    var map;
    if (transfer !== undefined) {
      map = new Map();
      tryToTransfer(transfer, map);
    }
    return structuredCloneInternal(value, map);
  }
});

/***/ }),

/***/ 43531:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(72002);
__webpack_require__(26086);

/***/ }),

/***/ 46808:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__(66668);
var $ = __webpack_require__(53064);
var global = __webpack_require__(52586);
var call = __webpack_require__(84550);
var uncurryThis = __webpack_require__(85317);
var DESCRIPTORS = __webpack_require__(9811);
var USE_NATIVE_URL = __webpack_require__(26753);
var defineBuiltIn = __webpack_require__(33549);
var defineBuiltIns = __webpack_require__(78768);
var setToStringTag = __webpack_require__(46736);
var createIteratorConstructor = __webpack_require__(84433);
var InternalStateModule = __webpack_require__(59351);
var anInstance = __webpack_require__(6441);
var isCallable = __webpack_require__(76306);
var hasOwn = __webpack_require__(81285);
var bind = __webpack_require__(81801);
var classof = __webpack_require__(84368);
var anObject = __webpack_require__(52943);
var isObject = __webpack_require__(74194);
var $toString = __webpack_require__(80978);
var create = __webpack_require__(1578);
var createPropertyDescriptor = __webpack_require__(22424);
var getIterator = __webpack_require__(25221);
var getIteratorMethod = __webpack_require__(82093);
var validateArgumentsLength = __webpack_require__(72217);
var wellKnownSymbol = __webpack_require__(65373);
var arraySort = __webpack_require__(41766);
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Avoid NodeJS experimental warning
var safeGetBuiltIn = function safeGetBuiltIn(name) {
  if (!DESCRIPTORS) return global[name];
  var descriptor = getOwnPropertyDescriptor(global, name);
  return descriptor && descriptor.value;
};
var nativeFetch = safeGetBuiltIn('fetch');
var NativeRequest = safeGetBuiltIn('Request');
var Headers = safeGetBuiltIn('Headers');
var RequestPrototype = NativeRequest && NativeRequest.prototype;
var HeadersPrototype = Headers && Headers.prototype;
var RegExp = global.RegExp;
var TypeError = global.TypeError;
var decodeURIComponent = global.decodeURIComponent;
var encodeURIComponent = global.encodeURIComponent;
var charAt = uncurryThis(''.charAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var splice = uncurryThis([].splice);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);
var plus = /\+/g;
var sequences = Array(4);
var percentSequence = function percentSequence(bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};
var percentDecode = function percentDecode(sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};
var deserialize = function deserialize(it) {
  var result = replace(it, plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = replace(result, percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};
var find = /[!'()~]|%20/g;
var replacements = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};
var replacer = function replacer(match) {
  return replacements[match];
};
var _serialize = function serialize(it) {
  return replace(encodeURIComponent(it), find, replacer);
};
var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  }
  return step;
}, true);
var URLSearchParamsState = function URLSearchParamsState(init) {
  this.entries = [];
  this.url = null;
  if (init !== undefined) {
    if (isObject(init)) this.parseObject(init);else this.parseQuery(typeof init == 'string' ? charAt(init, 0) === '?' ? stringSlice(init, 1) : init : $toString(init));
  }
};
URLSearchParamsState.prototype = {
  type: URL_SEARCH_PARAMS,
  bindURL: function bindURL(url) {
    this.url = url;
    this.update();
  },
  parseObject: function parseObject(object) {
    var iteratorMethod = getIteratorMethod(object);
    var iterator, next, step, entryIterator, entryNext, first, second;
    if (iteratorMethod) {
      iterator = getIterator(object, iteratorMethod);
      next = iterator.next;
      while (!(step = call(next, iterator)).done) {
        entryIterator = getIterator(anObject(step.value));
        entryNext = entryIterator.next;
        if ((first = call(entryNext, entryIterator)).done || (second = call(entryNext, entryIterator)).done || !call(entryNext, entryIterator).done) throw TypeError('Expected sequence with length 2');
        push(this.entries, {
          key: $toString(first.value),
          value: $toString(second.value)
        });
      }
    } else for (var key in object) {
      if (hasOwn(object, key)) {
        push(this.entries, {
          key: key,
          value: $toString(object[key])
        });
      }
    }
  },
  parseQuery: function parseQuery(query) {
    if (query) {
      var attributes = split(query, '&');
      var index = 0;
      var attribute, entry;
      while (index < attributes.length) {
        attribute = attributes[index++];
        if (attribute.length) {
          entry = split(attribute, '=');
          push(this.entries, {
            key: deserialize(shift(entry)),
            value: deserialize(join(entry, '='))
          });
        }
      }
    }
  },
  serialize: function serialize() {
    var entries = this.entries;
    var result = [];
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      push(result, _serialize(entry.key) + '=' + _serialize(entry.value));
    }
    return join(result, '&');
  },
  update: function update() {
    this.entries.length = 0;
    this.parseQuery(this.url.query);
  },
  updateURL: function updateURL() {
    if (this.url) this.url.update();
  }
};

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams( /* init */
) {
  anInstance(this, URLSearchParamsPrototype);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  setInternalState(this, new URLSearchParamsState(init));
};
var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
defineBuiltIns(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.append` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    push(state.entries, {
      key: $toString(name),
      value: $toString(value)
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function _delete(name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) splice(entries, index, 1);else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) push(result, entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = $toString(name);
    var val = $toString(value);
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) splice(entries, index--, 1);else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) push(entries, {
      key: key,
      value: val
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    arraySort(state.entries, function (a, b) {
      return a.key > b.key ? 1 : -1;
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, {
  enumerable: true
});

// `URLSearchParams.prototype[@@iterator]` method
defineBuiltIn(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, {
  name: 'entries'
});

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
defineBuiltIn(URLSearchParamsPrototype, 'toString', function toString() {
  return getInternalParamsState(this).serialize();
}, {
  enumerable: true
});
setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
$({
  global: true,
  constructor: true,
  forced: !USE_NATIVE_URL
}, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
if (!USE_NATIVE_URL && isCallable(Headers)) {
  var headersHas = uncurryThis(HeadersPrototype.has);
  var headersSet = uncurryThis(HeadersPrototype.set);
  var wrapRequestOptions = function wrapRequestOptions(init) {
    if (isObject(init)) {
      var body = init.body;
      var headers;
      if (classof(body) === URL_SEARCH_PARAMS) {
        headers = init.headers ? new Headers(init.headers) : new Headers();
        if (!headersHas(headers, 'content-type')) {
          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
        return create(init, {
          body: createPropertyDescriptor(0, $toString(body)),
          headers: createPropertyDescriptor(0, headers)
        });
      }
    }
    return init;
  };
  if (isCallable(nativeFetch)) {
    $({
      global: true,
      enumerable: true,
      dontCallGetSet: true,
      forced: true
    }, {
      fetch: function fetch(input /* , init */) {
        return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
      }
    });
  }
  if (isCallable(NativeRequest)) {
    var RequestConstructor = function Request(input /* , init */) {
      anInstance(this, RequestPrototype);
      return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
    };
    RequestPrototype.constructor = RequestConstructor;
    RequestConstructor.prototype = RequestPrototype;
    $({
      global: true,
      constructor: true,
      dontCallGetSet: true,
      forced: true
    }, {
      Request: RequestConstructor
    });
  }
}
module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};

/***/ }),

/***/ 26253:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(46808);

/***/ }),

/***/ 86905:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__(46222);
var $ = __webpack_require__(53064);
var DESCRIPTORS = __webpack_require__(9811);
var USE_NATIVE_URL = __webpack_require__(26753);
var global = __webpack_require__(52586);
var bind = __webpack_require__(81801);
var uncurryThis = __webpack_require__(85317);
var defineBuiltIn = __webpack_require__(33549);
var defineBuiltInAccessor = __webpack_require__(45766);
var anInstance = __webpack_require__(6441);
var hasOwn = __webpack_require__(81285);
var assign = __webpack_require__(99103);
var arrayFrom = __webpack_require__(4789);
var arraySlice = __webpack_require__(15521);
var codeAt = (__webpack_require__(36726).codeAt);
var toASCII = __webpack_require__(97983);
var $toString = __webpack_require__(80978);
var setToStringTag = __webpack_require__(46736);
var validateArgumentsLength = __webpack_require__(72217);
var URLSearchParamsModule = __webpack_require__(46808);
var InternalStateModule = __webpack_require__(59351);
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var NativeURL = global.URL;
var TypeError = global.TypeError;
var parseInt = global.parseInt;
var floor = Math.floor;
var pow = Math.pow;
var charAt = uncurryThis(''.charAt);
var exec = uncurryThis(/./.exec);
var join = uncurryThis([].join);
var numberToString = uncurryThis(1.0.toString);
var pop = uncurryThis([].pop);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);
var toLowerCase = uncurryThis(''.toLowerCase);
var unshift = uncurryThis([].unshift);
var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';
var ALPHA = /[a-z]/i;
// eslint-disable-next-line regexp/no-obscure-range -- safe
var ALPHANUMERIC = /[\d+-.a-z]/i;
var DIGIT = /\d/;
var HEX_START = /^0x/i;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\da-f]+$/i;
/* eslint-disable regexp/no-control-character -- safe */
var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
var TAB_AND_NEW_LINE = /[\t\n\r]/g;
/* eslint-enable regexp/no-control-character -- safe */
var EOF;

// https://url.spec.whatwg.org/#ipv4-number-parser
var parseIPv4 = function parseIPv4(input) {
  var parts = split(input, '.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.length--;
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && charAt(part, 0) == '0') {
      radix = exec(HEX_START, part) ? 16 : 8;
      part = stringSlice(part, radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
      number = parseInt(part, radix);
    }
    push(numbers, number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = pop(numbers);
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// https://url.spec.whatwg.org/#concept-ipv6-parser
// eslint-disable-next-line max-statements -- TODO
var parseIPv6 = function parseIPv6(input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
  var chr = function chr() {
    return charAt(input, pointer);
  };
  if (chr() == ':') {
    if (charAt(input, 1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (chr()) {
    if (pieceIndex == 8) return;
    if (chr() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && exec(HEX, chr())) {
      value = value * 16 + parseInt(chr(), 16);
      pointer++;
      length++;
    }
    if (chr() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (chr()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (chr() == '.' && numbersSeen < 4) pointer++;else return;
        }
        if (!exec(DIGIT, chr())) return;
        while (exec(DIGIT, chr())) {
          number = parseInt(chr(), 10);
          if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (chr() == ':') {
      pointer++;
      if (!chr()) return;
    } else if (chr()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};
var findLongestZeroSequence = function findLongestZeroSequence(ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

// https://url.spec.whatwg.org/#host-serializing
var serializeHost = function serializeHost(host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      unshift(result, host % 256);
      host = floor(host / 256);
    }
    return join(result, '.');
    // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += numberToString(host[index], 16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  }
  return host;
};
var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1,
  '"': 1,
  '<': 1,
  '>': 1,
  '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1,
  '?': 1,
  '{': 1,
  '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1,
  ':': 1,
  ';': 1,
  '=': 1,
  '@': 1,
  '[': 1,
  '\\': 1,
  ']': 1,
  '^': 1,
  '|': 1
});
var percentEncode = function percentEncode(chr, set) {
  var code = codeAt(chr, 0);
  return code > 0x20 && code < 0x7F && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
};

// https://url.spec.whatwg.org/#special-scheme
var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

// https://url.spec.whatwg.org/#windows-drive-letter
var isWindowsDriveLetter = function isWindowsDriveLetter(string, normalized) {
  var second;
  return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ':' || !normalized && second == '|');
};

// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter
var startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || (third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#');
};

// https://url.spec.whatwg.org/#single-dot-path-segment
var isSingleDot = function isSingleDot(segment) {
  return segment === '.' || toLowerCase(segment) === '%2e';
};

// https://url.spec.whatwg.org/#double-dot-path-segment
var isDoubleDot = function isDoubleDot(segment) {
  segment = toLowerCase(segment);
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};
var URLState = function URLState(url, isBase, base) {
  var urlString = $toString(url);
  var baseState, failure, searchParams;
  if (isBase) {
    failure = this.parse(urlString);
    if (failure) throw TypeError(failure);
    this.searchParams = null;
  } else {
    if (base !== undefined) baseState = new URLState(base, true);
    failure = this.parse(urlString, null, baseState);
    if (failure) throw TypeError(failure);
    searchParams = getInternalSearchParamsState(new URLSearchParams());
    searchParams.bindURL(this);
    this.searchParams = searchParams;
  }
};
URLState.prototype = {
  type: 'URL',
  // https://url.spec.whatwg.org/#url-parsing
  // eslint-disable-next-line max-statements -- TODO
  parse: function parse(input, stateOverride, base) {
    var url = this;
    var state = stateOverride || SCHEME_START;
    var pointer = 0;
    var buffer = '';
    var seenAt = false;
    var seenBracket = false;
    var seenPasswordToken = false;
    var codePoints, chr, bufferCodePoints, failure;
    input = $toString(input);
    if (!stateOverride) {
      url.scheme = '';
      url.username = '';
      url.password = '';
      url.host = null;
      url.port = null;
      url.path = [];
      url.query = null;
      url.fragment = null;
      url.cannotBeABaseURL = false;
      input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
    }
    input = replace(input, TAB_AND_NEW_LINE, '');
    codePoints = arrayFrom(input);
    while (pointer <= codePoints.length) {
      chr = codePoints[pointer];
      switch (state) {
        case SCHEME_START:
          if (chr && exec(ALPHA, chr)) {
            buffer += toLowerCase(chr);
            state = SCHEME;
          } else if (!stateOverride) {
            state = NO_SCHEME;
            continue;
          } else return INVALID_SCHEME;
          break;
        case SCHEME:
          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
            buffer += toLowerCase(chr);
          } else if (chr == ':') {
            if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == 'file' && (url.includesCredentials() || url.port !== null) || url.scheme == 'file' && !url.host)) return;
            url.scheme = buffer;
            if (stateOverride) {
              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
              return;
            }
            buffer = '';
            if (url.scheme == 'file') {
              state = FILE;
            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
              state = SPECIAL_RELATIVE_OR_AUTHORITY;
            } else if (url.isSpecial()) {
              state = SPECIAL_AUTHORITY_SLASHES;
            } else if (codePoints[pointer + 1] == '/') {
              state = PATH_OR_AUTHORITY;
              pointer++;
            } else {
              url.cannotBeABaseURL = true;
              push(url.path, '');
              state = CANNOT_BE_A_BASE_URL_PATH;
            }
          } else if (!stateOverride) {
            buffer = '';
            state = NO_SCHEME;
            pointer = 0;
            continue;
          } else return INVALID_SCHEME;
          break;
        case NO_SCHEME:
          if (!base || base.cannotBeABaseURL && chr != '#') return INVALID_SCHEME;
          if (base.cannotBeABaseURL && chr == '#') {
            url.scheme = base.scheme;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            url.cannotBeABaseURL = true;
            state = FRAGMENT;
            break;
          }
          state = base.scheme == 'file' ? FILE : RELATIVE;
          continue;
        case SPECIAL_RELATIVE_OR_AUTHORITY:
          if (chr == '/' && codePoints[pointer + 1] == '/') {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            pointer++;
          } else {
            state = RELATIVE;
            continue;
          }
          break;
        case PATH_OR_AUTHORITY:
          if (chr == '/') {
            state = AUTHORITY;
            break;
          } else {
            state = PATH;
            continue;
          }
        case RELATIVE:
          url.scheme = base.scheme;
          if (chr == EOF) {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
          } else if (chr == '/' || chr == '\\' && url.isSpecial()) {
            state = RELATIVE_SLASH;
          } else if (chr == '?') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.path.length--;
            state = PATH;
            continue;
          }
          break;
        case RELATIVE_SLASH:
          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          } else if (chr == '/') {
            state = AUTHORITY;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            state = PATH;
            continue;
          }
          break;
        case SPECIAL_AUTHORITY_SLASHES:
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
          pointer++;
          break;
        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
          if (chr != '/' && chr != '\\') {
            state = AUTHORITY;
            continue;
          }
          break;
        case AUTHORITY:
          if (chr == '@') {
            if (seenAt) buffer = '%40' + buffer;
            seenAt = true;
            bufferCodePoints = arrayFrom(buffer);
            for (var i = 0; i < bufferCodePoints.length; i++) {
              var codePoint = bufferCodePoints[i];
              if (codePoint == ':' && !seenPasswordToken) {
                seenPasswordToken = true;
                continue;
              }
              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
              if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
            }
            buffer = '';
          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
            if (seenAt && buffer == '') return INVALID_AUTHORITY;
            pointer -= arrayFrom(buffer).length + 1;
            buffer = '';
            state = HOST;
          } else buffer += chr;
          break;
        case HOST:
        case HOSTNAME:
          if (stateOverride && url.scheme == 'file') {
            state = FILE_HOST;
            continue;
          } else if (chr == ':' && !seenBracket) {
            if (buffer == '') return INVALID_HOST;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PORT;
            if (stateOverride == HOSTNAME) return;
          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
            if (url.isSpecial() && buffer == '') return INVALID_HOST;
            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PATH_START;
            if (stateOverride) return;
            continue;
          } else {
            if (chr == '[') seenBracket = true;else if (chr == ']') seenBracket = false;
            buffer += chr;
          }
          break;
        case PORT:
          if (exec(DIGIT, chr)) {
            buffer += chr;
          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial() || stateOverride) {
            if (buffer != '') {
              var port = parseInt(buffer, 10);
              if (port > 0xFFFF) return INVALID_PORT;
              url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
              buffer = '';
            }
            if (stateOverride) return;
            state = PATH_START;
            continue;
          } else return INVALID_PORT;
          break;
        case FILE:
          url.scheme = 'file';
          if (chr == '/' || chr == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
            if (chr == EOF) {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
            } else if (chr == '?') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
              url.fragment = '';
              state = FRAGMENT;
            } else {
              if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
                url.host = base.host;
                url.path = arraySlice(base.path);
                url.shortenPath();
              }
              state = PATH;
              continue;
            }
          } else {
            state = PATH;
            continue;
          }
          break;
        case FILE_SLASH:
          if (chr == '/' || chr == '\\') {
            state = FILE_HOST;
            break;
          }
          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);else url.host = base.host;
          }
          state = PATH;
          continue;
        case FILE_HOST:
          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
            if (!stateOverride && isWindowsDriveLetter(buffer)) {
              state = PATH;
            } else if (buffer == '') {
              url.host = '';
              if (stateOverride) return;
              state = PATH_START;
            } else {
              failure = url.parseHost(buffer);
              if (failure) return failure;
              if (url.host == 'localhost') url.host = '';
              if (stateOverride) return;
              buffer = '';
              state = PATH_START;
            }
            continue;
          } else buffer += chr;
          break;
        case PATH_START:
          if (url.isSpecial()) {
            state = PATH;
            if (chr != '/' && chr != '\\') continue;
          } else if (!stateOverride && chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            state = PATH;
            if (chr != '/') continue;
          }
          break;
        case PATH:
          if (chr == EOF || chr == '/' || chr == '\\' && url.isSpecial() || !stateOverride && (chr == '?' || chr == '#')) {
            if (isDoubleDot(buffer)) {
              url.shortenPath();
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else if (isSingleDot(buffer)) {
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else {
              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                if (url.host) url.host = '';
                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
              }

              push(url.path, buffer);
            }
            buffer = '';
            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
              while (url.path.length > 1 && url.path[0] === '') {
                shift(url.path);
              }
            }
            if (chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            }
          } else {
            buffer += percentEncode(chr, pathPercentEncodeSet);
          }
          break;
        case CANNOT_BE_A_BASE_URL_PATH:
          if (chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
          }
          break;
        case QUERY:
          if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            if (chr == "'" && url.isSpecial()) url.query += '%27';else if (chr == '#') url.query += '%23';else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
          }
          break;
        case FRAGMENT:
          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
          break;
      }
      pointer++;
    }
  },
  // https://url.spec.whatwg.org/#host-parsing
  parseHost: function parseHost(input) {
    var result, codePoints, index;
    if (charAt(input, 0) == '[') {
      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
      result = parseIPv6(stringSlice(input, 1, -1));
      if (!result) return INVALID_HOST;
      this.host = result;
      // opaque host
    } else if (!this.isSpecial()) {
      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
      result = '';
      codePoints = arrayFrom(input);
      for (index = 0; index < codePoints.length; index++) {
        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
      }
      this.host = result;
    } else {
      input = toASCII(input);
      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
      result = parseIPv4(input);
      if (result === null) return INVALID_HOST;
      this.host = result;
    }
  },
  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
  cannotHaveUsernamePasswordPort: function cannotHaveUsernamePasswordPort() {
    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
  },
  // https://url.spec.whatwg.org/#include-credentials
  includesCredentials: function includesCredentials() {
    return this.username != '' || this.password != '';
  },
  // https://url.spec.whatwg.org/#is-special
  isSpecial: function isSpecial() {
    return hasOwn(specialSchemes, this.scheme);
  },
  // https://url.spec.whatwg.org/#shorten-a-urls-path
  shortenPath: function shortenPath() {
    var path = this.path;
    var pathSize = path.length;
    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
      path.length--;
    }
  },
  // https://url.spec.whatwg.org/#concept-url-serializer
  serialize: function serialize() {
    var url = this;
    var scheme = url.scheme;
    var username = url.username;
    var password = url.password;
    var host = url.host;
    var port = url.port;
    var path = url.path;
    var query = url.query;
    var fragment = url.fragment;
    var output = scheme + ':';
    if (host !== null) {
      output += '//';
      if (url.includesCredentials()) {
        output += username + (password ? ':' + password : '') + '@';
      }
      output += serializeHost(host);
      if (port !== null) output += ':' + port;
    } else if (scheme == 'file') output += '//';
    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
    if (query !== null) output += '?' + query;
    if (fragment !== null) output += '#' + fragment;
    return output;
  },
  // https://url.spec.whatwg.org/#dom-url-href
  setHref: function setHref(href) {
    var failure = this.parse(href);
    if (failure) throw TypeError(failure);
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-origin
  getOrigin: function getOrigin() {
    var scheme = this.scheme;
    var port = this.port;
    if (scheme == 'blob') try {
      return new URLConstructor(scheme.path[0]).origin;
    } catch (error) {
      return 'null';
    }
    if (scheme == 'file' || !this.isSpecial()) return 'null';
    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
  },
  // https://url.spec.whatwg.org/#dom-url-protocol
  getProtocol: function getProtocol() {
    return this.scheme + ':';
  },
  setProtocol: function setProtocol(protocol) {
    this.parse($toString(protocol) + ':', SCHEME_START);
  },
  // https://url.spec.whatwg.org/#dom-url-username
  getUsername: function getUsername() {
    return this.username;
  },
  setUsername: function setUsername(username) {
    var codePoints = arrayFrom($toString(username));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.username = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-password
  getPassword: function getPassword() {
    return this.password;
  },
  setPassword: function setPassword(password) {
    var codePoints = arrayFrom($toString(password));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.password = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-host
  getHost: function getHost() {
    var host = this.host;
    var port = this.port;
    return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
  },
  setHost: function setHost(host) {
    if (this.cannotBeABaseURL) return;
    this.parse(host, HOST);
  },
  // https://url.spec.whatwg.org/#dom-url-hostname
  getHostname: function getHostname() {
    var host = this.host;
    return host === null ? '' : serializeHost(host);
  },
  setHostname: function setHostname(hostname) {
    if (this.cannotBeABaseURL) return;
    this.parse(hostname, HOSTNAME);
  },
  // https://url.spec.whatwg.org/#dom-url-port
  getPort: function getPort() {
    var port = this.port;
    return port === null ? '' : $toString(port);
  },
  setPort: function setPort(port) {
    if (this.cannotHaveUsernamePasswordPort()) return;
    port = $toString(port);
    if (port == '') this.port = null;else this.parse(port, PORT);
  },
  // https://url.spec.whatwg.org/#dom-url-pathname
  getPathname: function getPathname() {
    var path = this.path;
    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
  },
  setPathname: function setPathname(pathname) {
    if (this.cannotBeABaseURL) return;
    this.path = [];
    this.parse(pathname, PATH_START);
  },
  // https://url.spec.whatwg.org/#dom-url-search
  getSearch: function getSearch() {
    var query = this.query;
    return query ? '?' + query : '';
  },
  setSearch: function setSearch(search) {
    search = $toString(search);
    if (search == '') {
      this.query = null;
    } else {
      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
      this.query = '';
      this.parse(search, QUERY);
    }
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-searchparams
  getSearchParams: function getSearchParams() {
    return this.searchParams.facade;
  },
  // https://url.spec.whatwg.org/#dom-url-hash
  getHash: function getHash() {
    var fragment = this.fragment;
    return fragment ? '#' + fragment : '';
  },
  setHash: function setHash(hash) {
    hash = $toString(hash);
    if (hash == '') {
      this.fragment = null;
      return;
    }
    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
    this.fragment = '';
    this.parse(hash, FRAGMENT);
  },
  update: function update() {
    this.query = this.searchParams.serialize() || null;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLPrototype);
  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
  var state = setInternalState(that, new URLState(url, false, base));
  if (!DESCRIPTORS) {
    that.href = state.serialize();
    that.origin = state.getOrigin();
    that.protocol = state.getProtocol();
    that.username = state.getUsername();
    that.password = state.getPassword();
    that.host = state.getHost();
    that.hostname = state.getHostname();
    that.port = state.getPort();
    that.pathname = state.getPathname();
    that.search = state.getSearch();
    that.searchParams = state.getSearchParams();
    that.hash = state.getHash();
  }
};
var URLPrototype = URLConstructor.prototype;
var accessorDescriptor = function accessorDescriptor(getter, setter) {
  return {
    get: function get() {
      return getInternalURLState(this)[getter]();
    },
    set: setter && function (value) {
      return getInternalURLState(this)[setter](value);
    },
    configurable: true,
    enumerable: true
  };
};
if (DESCRIPTORS) {
  // `URL.prototype.href` accessors pair
  // https://url.spec.whatwg.org/#dom-url-href
  defineBuiltInAccessor(URLPrototype, 'href', accessorDescriptor('serialize', 'setHref'));
  // `URL.prototype.origin` getter
  // https://url.spec.whatwg.org/#dom-url-origin
  defineBuiltInAccessor(URLPrototype, 'origin', accessorDescriptor('getOrigin'));
  // `URL.prototype.protocol` accessors pair
  // https://url.spec.whatwg.org/#dom-url-protocol
  defineBuiltInAccessor(URLPrototype, 'protocol', accessorDescriptor('getProtocol', 'setProtocol'));
  // `URL.prototype.username` accessors pair
  // https://url.spec.whatwg.org/#dom-url-username
  defineBuiltInAccessor(URLPrototype, 'username', accessorDescriptor('getUsername', 'setUsername'));
  // `URL.prototype.password` accessors pair
  // https://url.spec.whatwg.org/#dom-url-password
  defineBuiltInAccessor(URLPrototype, 'password', accessorDescriptor('getPassword', 'setPassword'));
  // `URL.prototype.host` accessors pair
  // https://url.spec.whatwg.org/#dom-url-host
  defineBuiltInAccessor(URLPrototype, 'host', accessorDescriptor('getHost', 'setHost'));
  // `URL.prototype.hostname` accessors pair
  // https://url.spec.whatwg.org/#dom-url-hostname
  defineBuiltInAccessor(URLPrototype, 'hostname', accessorDescriptor('getHostname', 'setHostname'));
  // `URL.prototype.port` accessors pair
  // https://url.spec.whatwg.org/#dom-url-port
  defineBuiltInAccessor(URLPrototype, 'port', accessorDescriptor('getPort', 'setPort'));
  // `URL.prototype.pathname` accessors pair
  // https://url.spec.whatwg.org/#dom-url-pathname
  defineBuiltInAccessor(URLPrototype, 'pathname', accessorDescriptor('getPathname', 'setPathname'));
  // `URL.prototype.search` accessors pair
  // https://url.spec.whatwg.org/#dom-url-search
  defineBuiltInAccessor(URLPrototype, 'search', accessorDescriptor('getSearch', 'setSearch'));
  // `URL.prototype.searchParams` getter
  // https://url.spec.whatwg.org/#dom-url-searchparams
  defineBuiltInAccessor(URLPrototype, 'searchParams', accessorDescriptor('getSearchParams'));
  // `URL.prototype.hash` accessors pair
  // https://url.spec.whatwg.org/#dom-url-hash
  defineBuiltInAccessor(URLPrototype, 'hash', accessorDescriptor('getHash', 'setHash'));
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
defineBuiltIn(URLPrototype, 'toJSON', function toJSON() {
  return getInternalURLState(this).serialize();
}, {
  enumerable: true
});

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
defineBuiltIn(URLPrototype, 'toString', function toString() {
  return getInternalURLState(this).serialize();
}, {
  enumerable: true
});
if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  if (nativeCreateObjectURL) defineBuiltIn(URLConstructor, 'createObjectURL', bind(nativeCreateObjectURL, NativeURL));
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  if (nativeRevokeObjectURL) defineBuiltIn(URLConstructor, 'revokeObjectURL', bind(nativeRevokeObjectURL, NativeURL));
}
setToStringTag(URLConstructor, 'URL');
$({
  global: true,
  constructor: true,
  forced: !USE_NATIVE_URL,
  sham: !DESCRIPTORS
}, {
  URL: URLConstructor
});

/***/ }),

/***/ 74589:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(86905);

/***/ }),

/***/ 72781:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(53064);
var call = __webpack_require__(84550);

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({
  target: 'URL',
  proto: true,
  enumerable: true
}, {
  toJSON: function toJSON() {
    return call(URL.prototype.toString, this);
  }
});

/***/ }),

/***/ 74160:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(73346);
__webpack_require__(25377);
__webpack_require__(16655);
__webpack_require__(75487);
__webpack_require__(80581);
__webpack_require__(14133);
__webpack_require__(32845);
__webpack_require__(8751);
__webpack_require__(45970);
__webpack_require__(50863);
__webpack_require__(40055);
__webpack_require__(56995);
__webpack_require__(84032);
__webpack_require__(5498);
__webpack_require__(38144);
__webpack_require__(53242);
__webpack_require__(27142);
__webpack_require__(53523);
__webpack_require__(25299);
__webpack_require__(46101);
__webpack_require__(29074);
__webpack_require__(74772);
__webpack_require__(60843);
__webpack_require__(98434);
__webpack_require__(15911);
__webpack_require__(33365);
__webpack_require__(1169);
__webpack_require__(19942);
__webpack_require__(23253);
__webpack_require__(91709);
__webpack_require__(432);
__webpack_require__(37174);
__webpack_require__(40979);
__webpack_require__(98820);
__webpack_require__(48953);
__webpack_require__(50347);
__webpack_require__(66668);
__webpack_require__(39264);
__webpack_require__(26433);
__webpack_require__(74443);
__webpack_require__(88854);
__webpack_require__(39181);
__webpack_require__(36189);
__webpack_require__(9851);
__webpack_require__(82145);
__webpack_require__(93034);
__webpack_require__(6925);
__webpack_require__(97378);
__webpack_require__(94963);
__webpack_require__(62874);
__webpack_require__(15857);
__webpack_require__(93484);
__webpack_require__(96564);
__webpack_require__(27803);
__webpack_require__(54995);
__webpack_require__(41017);
__webpack_require__(15536);
__webpack_require__(56566);
__webpack_require__(68289);
__webpack_require__(44840);
__webpack_require__(77831);
__webpack_require__(15640);
__webpack_require__(37329);
__webpack_require__(1198);
__webpack_require__(82248);
__webpack_require__(53102);
__webpack_require__(58981);
__webpack_require__(45934);
__webpack_require__(72876);
__webpack_require__(26850);
__webpack_require__(44750);
__webpack_require__(37703);
__webpack_require__(27253);
__webpack_require__(65129);
__webpack_require__(35433);
__webpack_require__(79313);
__webpack_require__(28081);
__webpack_require__(4292);
__webpack_require__(53019);
__webpack_require__(36832);
__webpack_require__(30435);
__webpack_require__(5123);
__webpack_require__(6217);
__webpack_require__(83093);
__webpack_require__(58674);
__webpack_require__(23618);
__webpack_require__(22720);
__webpack_require__(89040);
__webpack_require__(19998);
__webpack_require__(9583);
__webpack_require__(2010);
__webpack_require__(88458);
__webpack_require__(98072);
__webpack_require__(30593);
__webpack_require__(25408);
__webpack_require__(15496);
__webpack_require__(59987);
__webpack_require__(29117);
__webpack_require__(4962);
__webpack_require__(56785);
__webpack_require__(72282);
__webpack_require__(44552);
__webpack_require__(26486);
__webpack_require__(4346);
__webpack_require__(56252);
__webpack_require__(66760);
__webpack_require__(72380);
__webpack_require__(6499);
__webpack_require__(1127);
__webpack_require__(17625);
__webpack_require__(97448);
__webpack_require__(21386);
__webpack_require__(21292);
__webpack_require__(22929);
__webpack_require__(90803);
__webpack_require__(71994);
__webpack_require__(8889);
__webpack_require__(69165);
__webpack_require__(610);
__webpack_require__(28400);
__webpack_require__(36217);
__webpack_require__(76262);
__webpack_require__(6939);
__webpack_require__(69151);
__webpack_require__(69547);
__webpack_require__(6143);
__webpack_require__(17340);
__webpack_require__(66932);
__webpack_require__(76265);
__webpack_require__(47163);
__webpack_require__(58482);
__webpack_require__(76642);
__webpack_require__(17325);
__webpack_require__(33739);
__webpack_require__(8872);
__webpack_require__(85603);
__webpack_require__(29282);
__webpack_require__(89755);
__webpack_require__(60669);
__webpack_require__(91921);
__webpack_require__(433);
__webpack_require__(97004);
__webpack_require__(32402);
__webpack_require__(62066);
__webpack_require__(56071);
__webpack_require__(71058);
__webpack_require__(93292);
__webpack_require__(18961);
__webpack_require__(89869);
__webpack_require__(58055);
__webpack_require__(22071);
__webpack_require__(88513);
__webpack_require__(87492);
__webpack_require__(30144);
__webpack_require__(73357);
__webpack_require__(79393);
__webpack_require__(44261);
__webpack_require__(6408);
__webpack_require__(90760);
__webpack_require__(48902);
__webpack_require__(82394);
__webpack_require__(23920);
__webpack_require__(51409);
__webpack_require__(7498);
__webpack_require__(46222);
__webpack_require__(33419);
__webpack_require__(19945);
__webpack_require__(24522);
__webpack_require__(37692);
__webpack_require__(34828);
__webpack_require__(15868);
__webpack_require__(11035);
__webpack_require__(97740);
__webpack_require__(85021);
__webpack_require__(51174);
__webpack_require__(52560);
__webpack_require__(78772);
__webpack_require__(12660);
__webpack_require__(79055);
__webpack_require__(37039);
__webpack_require__(92574);
__webpack_require__(13195);
__webpack_require__(4831);
__webpack_require__(48168);
__webpack_require__(74451);
__webpack_require__(89332);
__webpack_require__(24904);
__webpack_require__(79947);
__webpack_require__(14332);
__webpack_require__(81356);
__webpack_require__(42548);
__webpack_require__(95896);
__webpack_require__(67155);
__webpack_require__(19371);
__webpack_require__(18923);
__webpack_require__(4631);
__webpack_require__(18599);
__webpack_require__(29001);
__webpack_require__(8264);
__webpack_require__(25227);
__webpack_require__(47678);
__webpack_require__(35160);
__webpack_require__(25612);
__webpack_require__(42398);
__webpack_require__(41153);
__webpack_require__(40986);
__webpack_require__(89865);
__webpack_require__(13927);
__webpack_require__(24393);
__webpack_require__(9904);
__webpack_require__(60742);
__webpack_require__(48334);
__webpack_require__(25259);
__webpack_require__(36457);
__webpack_require__(97282);
__webpack_require__(69608);
__webpack_require__(83411);
__webpack_require__(33474);
__webpack_require__(55339);
__webpack_require__(50481);
__webpack_require__(79845);
__webpack_require__(79336);
__webpack_require__(42528);
__webpack_require__(94343);
__webpack_require__(66963);
__webpack_require__(78579);
__webpack_require__(86063);
__webpack_require__(63605);
__webpack_require__(90483);
__webpack_require__(88780);
__webpack_require__(8879);
__webpack_require__(19070);
__webpack_require__(14677);
__webpack_require__(73903);
__webpack_require__(81620);
__webpack_require__(16141);
__webpack_require__(75706);
__webpack_require__(78524);
__webpack_require__(74781);
__webpack_require__(82996);
__webpack_require__(56573);
__webpack_require__(27273);
__webpack_require__(33380);
__webpack_require__(28294);
__webpack_require__(43531);
__webpack_require__(74589);
__webpack_require__(72781);
__webpack_require__(26253);
/* unused reexport */ __webpack_require__(87526);

/***/ }),

/***/ 39945:
/***/ ((module) => {

"use strict";


var ensureCallable = function ensureCallable(fn) {
  if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
  return fn;
};
var byObserver = function byObserver(Observer) {
  var node = document.createTextNode(''),
    queue,
    currentQueue,
    i = 0;
  new Observer(function () {
    var callback;
    if (!queue) {
      if (!currentQueue) return;
      queue = currentQueue;
    } else if (currentQueue) {
      queue = currentQueue.concat(queue);
    }
    currentQueue = queue;
    queue = null;
    if (typeof currentQueue === 'function') {
      callback = currentQueue;
      currentQueue = null;
      callback();
      return;
    }
    node.data = i = ++i % 2; // Invoke other batch, to handle leftover callbacks in case of crash
    while (currentQueue) {
      callback = currentQueue.shift();
      if (!currentQueue.length) currentQueue = null;
      callback();
    }
  }).observe(node, {
    characterData: true
  });
  return function (fn) {
    ensureCallable(fn);
    if (queue) {
      if (typeof queue === 'function') queue = [queue, fn];else queue.push(fn);
      return;
    }
    queue = fn;
    node.data = i = ++i % 2;
  };
};
module.exports = function () {
  // Node.js
  if (typeof process === 'object' && process && typeof process.nextTick === 'function') {
    return process.nextTick;
  }

  // queueMicrotask
  if (typeof queueMicrotask === "function") {
    return function (cb) {
      queueMicrotask(ensureCallable(cb));
    };
  }

  // MutationObserver
  if (typeof document === 'object' && document) {
    if (typeof MutationObserver === 'function') return byObserver(MutationObserver);
    if (typeof WebKitMutationObserver === 'function') return byObserver(WebKitMutationObserver);
  }

  // W3C Draft
  // http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
  if (typeof setImmediate === 'function') {
    return function (cb) {
      setImmediate(ensureCallable(cb));
    };
  }

  // Wide available standard
  if (typeof setTimeout === 'function' || typeof setTimeout === 'object') {
    return function (cb) {
      setTimeout(ensureCallable(cb), 0);
    };
  }
  return null;
}();

/***/ }),

/***/ 31730:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var aa = __webpack_require__(43745),
  ca = __webpack_require__(79409);
function p(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  }
  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = new Set(),
  ea = {};
function fa(a, b) {
  ha(a, b);
  ha(a + "Capture", b);
}
function ha(a, b) {
  ea[a] = b;
  for (a = 0; a < b.length; a++) {
    da.add(b[a]);
  }
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
  ja = Object.prototype.hasOwnProperty,
  ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
  la = {},
  ma = {};
function oa(a) {
  if (ja.call(ma, a)) return !0;
  if (ja.call(la, a)) return !1;
  if (ka.test(a)) return ma[a] = !0;
  la[a] = !0;
  return !1;
}
function pa(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;
  switch (typeof b) {
    case "function":
    case "symbol":
      return !0;
    case "boolean":
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return !1;
  }
}
function qa(a, b, c, d) {
  if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;
    case 4:
      return !1 === b;
    case 5:
      return isNaN(b);
    case 6:
      return isNaN(b) || 1 > b;
  }
  return !1;
}
function v(a, b, c, d, e, f, g) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f;
  this.removeEmptyString = g;
}
var z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  z[a] = new v(a, 0, !1, a, null, !1, !1);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];
  z[b] = new v(b, 1, !1, a[1], null, !1, !1);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  z[a] = new v(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  z[a] = new v(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  z[a] = new v(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
["checked", "multiple", "muted", "selected"].forEach(function (a) {
  z[a] = new v(a, 3, !0, a, null, !1, !1);
});
["capture", "download"].forEach(function (a) {
  z[a] = new v(a, 4, !1, a, null, !1, !1);
});
["cols", "rows", "size", "span"].forEach(function (a) {
  z[a] = new v(a, 6, !1, a, null, !1, !1);
});
["rowSpan", "start"].forEach(function (a) {
  z[a] = new v(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(ra, sa);
  z[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
["tabIndex", "crossOrigin"].forEach(function (a) {
  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
z.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
["src", "href", "action", "formAction"].forEach(function (a) {
  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function ta(a, b, c, d) {
  var e = z.hasOwnProperty(b) ? z[b] : null;
  if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
  va = Symbol["for"]("react.element"),
  wa = Symbol["for"]("react.portal"),
  ya = Symbol["for"]("react.fragment"),
  za = Symbol["for"]("react.strict_mode"),
  Aa = Symbol["for"]("react.profiler"),
  Ba = Symbol["for"]("react.provider"),
  Ca = Symbol["for"]("react.context"),
  Da = Symbol["for"]("react.forward_ref"),
  Ea = Symbol["for"]("react.suspense"),
  Fa = Symbol["for"]("react.suspense_list"),
  Ga = Symbol["for"]("react.memo"),
  Ha = Symbol["for"]("react.lazy");
Symbol["for"]("react.scope");
Symbol["for"]("react.debug_trace_mode");
var Ia = Symbol["for"]("react.offscreen");
Symbol["for"]("react.legacy_hidden");
Symbol["for"]("react.cache");
Symbol["for"]("react.tracing_marker");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a) return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A = Object.assign,
  La;
function Ma(a) {
  if (void 0 === La) try {
    throw Error();
  } catch (c) {
    var b = c.stack.trim().match(/\n( *(at )?)/);
    La = b && b[1] || "";
  }
  return "\n" + La + a;
}
var Na = !1;
function Oa(a, b) {
  if (!a || Na) return "";
  Na = !0;
  var c = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b) {
      if (b = function b() {
        throw Error();
      }, Object.defineProperty(b.prototype, "props", {
        set: function set() {
          throw Error();
        }
      }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b, []);
        } catch (l) {
          var d = l;
        }
        Reflect.construct(a, [], b);
      } else {
        try {
          b.call();
        } catch (l) {
          d = l;
        }
        a.call(b.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (l) {
        d = l;
      }
      a();
    }
  } catch (l) {
    if (l && d && "string" === typeof l.stack) {
      for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) {
        h--;
      }
      for (; 1 <= g && 0 <= h; g--, h--) {
        if (e[g] !== f[h]) {
          if (1 !== g || 1 !== h) {
            do {
              if (g--, h--, 0 > h || e[g] !== f[h]) {
                var k = "\n" + e[g].replace(" at new ", " at ");
                a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                return k;
              }
            } while (1 <= g && 0 <= h);
          }
          break;
        }
      }
    }
  } finally {
    Na = !1, Error.prepareStackTrace = c;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, !1), a;
    case 11:
      return a = Oa(a.type.render, !1), a;
    case 1:
      return a = Oa(a.type, !0), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a) switch (a.$$typeof) {
    case Ca:
      return (a.displayName || "Context") + ".Consumer";
    case Ba:
      return (a._context.displayName || "Context") + ".Provider";
    case Da:
      var b = a.render;
      a = a.displayName;
      a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
      return a;
    case Ga:
      return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
    case Ha:
      b = a._payload;
      a = a._init;
      try {
        return Qa(a(b));
      } catch (c) {}
  }
  return null;
}
function Ra(a) {
  var b = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b.displayName || "Context") + ".Consumer";
    case 10:
      return (b._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b);
    case 8:
      return b === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b) return b.displayName || b.name || null;
      if ("string" === typeof b) return b;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ua(a) {
  var b = Ta(a) ? "checked" : "value",
    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
    d = "" + a[b];
  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
      f = c.set;
    Object.defineProperty(a, b, {
      configurable: !0,
      get: function get() {
        return e.call(this);
      },
      set: function set(a) {
        d = "" + a;
        f.call(this, a);
      }
    });
    Object.defineProperty(a, b, {
      enumerable: c.enumerable
    });
    return {
      getValue: function getValue() {
        return d;
      },
      setValue: function setValue(a) {
        d = "" + a;
      },
      stopTracking: function stopTracking() {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = "";
  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;
  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}
function Ya(a, b) {
  var c = b.checked;
  return A({}, b, {
    defaultChecked: void 0,
    defaultValue: void 0,
    value: void 0,
    checked: null != c ? c : a._wrapperState.initialChecked
  });
}
function Za(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
    d = null != b.checked ? b.checked : b.defaultChecked;
  c = Sa(null != b.value ? b.value : c);
  a._wrapperState = {
    initialChecked: d,
    initialValue: c,
    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
  };
}
function ab(a, b) {
  b = b.checked;
  null != b && ta(a, "checked", b, !1);
}
function bb(a, b) {
  ab(a, b);
  var c = Sa(b.value),
    d = b.type;
  if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function db(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }
  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}
function cb(a, b, c) {
  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
var eb = Array.isArray;
function fb(a, b, c, d) {
  a = a.options;
  if (b) {
    b = {};
    for (var e = 0; e < c.length; e++) {
      b["$" + c[e]] = !0;
    }
    for (c = 0; c < a.length; c++) {
      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    }
  } else {
    c = "" + Sa(c);
    b = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }
      null !== b || a[e].disabled || (b = a[e]);
    }
    null !== b && (b.selected = !0);
  }
}
function gb(a, b) {
  if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
  return A({}, b, {
    value: void 0,
    defaultValue: void 0,
    children: "" + a._wrapperState.initialValue
  });
}
function hb(a, b) {
  var c = b.value;
  if (null == c) {
    c = b.children;
    b = b.defaultValue;
    if (null != c) {
      if (null != b) throw Error(p(92));
      if (eb(c)) {
        if (1 < c.length) throw Error(p(93));
        c = c[0];
      }
      b = c;
    }
    null == b && (b = "");
    c = b;
  }
  a._wrapperState = {
    initialValue: Sa(c)
  };
}
function ib(a, b) {
  var c = Sa(b.value),
    d = Sa(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}
function jb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var mb,
  nb = function (a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
      MSApp.execUnsafeLocalFunction(function () {
        return a(b, c, d, e);
      });
    } : a;
  }(function (a, b) {
    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {
      mb = mb || document.createElement("div");
      mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
      for (b = mb.firstChild; a.firstChild;) {
        a.removeChild(a.firstChild);
      }
      for (; b.firstChild;) {
        a.appendChild(b.firstChild);
      }
    }
  });
function ob(a, b) {
  if (b) {
    var c = a.firstChild;
    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }
  a.textContent = b;
}
var pb = {
    animationIterationCount: !0,
    aspectRatio: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  },
  qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function (a) {
  qb.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b] = pb[a];
  });
});
function rb(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
}
function sb(a, b) {
  a = a.style;
  for (var c in b) {
    if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--"),
        e = rb(c, b[c], d);
      "float" === c && (c = "cssFloat");
      d ? a.setProperty(c, e) : a[c] = e;
    }
  }
}
var tb = A({
  menuitem: !0
}, {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  embed: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
});
function ub(a, b) {
  if (b) {
    if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children) throw Error(p(60));
      if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
    }
    if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
  }
}
function vb(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;
    default:
      return !0;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null,
  zb = null,
  Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb) throw Error(p(280));
    var b = a.stateNode;
    b && (b = Db(b), yb(a.stateNode, a.type, b));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb,
      b = Ab;
    Ab = zb = null;
    Bb(a);
    if (b) for (a = 0; a < b.length; a++) {
      Bb(b[a]);
    }
  }
}
function Gb(a, b) {
  return a(b);
}
function Hb() {}
var Ib = !1;
function Jb(a, b, c) {
  if (Ib) return a(b, c);
  Ib = !0;
  try {
    return Gb(a, b, c);
  } finally {
    if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();
  }
}
function Kb(a, b) {
  var c = a.stateNode;
  if (null === c) return null;
  var d = Db(c);
  if (null === d) return null;
  c = d[b];
  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;
    default:
      a = !1;
  }
  if (a) return null;
  if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
  return c;
}
var Lb = !1;
if (ia) try {
  var Mb = {};
  Object.defineProperty(Mb, "passive", {
    get: function get() {
      Lb = !0;
    }
  });
  window.addEventListener("test", Mb, Mb);
  window.removeEventListener("test", Mb, Mb);
} catch (a) {
  Lb = !1;
}
function Nb(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);
  try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}
var Ob = !1,
  Pb = null,
  Qb = !1,
  Rb = null,
  Sb = {
    onError: function onError(a) {
      Ob = !0;
      Pb = a;
    }
  };
function Tb(a, b, c, d, e, f, g, h, k) {
  Ob = !1;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b, c, d, e, f, g, h, k) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l = Pb;
      Ob = !1;
      Pb = null;
    } else throw Error(p(198));
    Qb || (Qb = !0, Rb = l);
  }
}
function Vb(a) {
  var b = a,
    c = a;
  if (a.alternate) for (; b["return"];) {
    b = b["return"];
  } else {
    a = b;
    do {
      b = a, 0 !== (b.flags & 4098) && (c = b["return"]), a = b["return"];
    } while (a);
  }
  return 3 === b.tag ? c : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b = a.memoizedState;
    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
    if (null !== b) return b.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a) throw Error(p(188));
}
function Yb(a) {
  var b = a.alternate;
  if (!b) {
    b = Vb(a);
    if (null === b) throw Error(p(188));
    return b !== a ? null : a;
  }
  for (var c = a, d = b;;) {
    var e = c["return"];
    if (null === e) break;
    var f = e.alternate;
    if (null === f) {
      d = e["return"];
      if (null !== d) {
        c = d;
        continue;
      }
      break;
    }
    if (e.child === f.child) {
      for (f = e.child; f;) {
        if (f === c) return Xb(e), a;
        if (f === d) return Xb(e), b;
        f = f.sibling;
      }
      throw Error(p(188));
    }
    if (c["return"] !== d["return"]) c = e, d = f;else {
      for (var g = !1, h = e.child; h;) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }
        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }
        h = h.sibling;
      }
      if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }
          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }
          h = h.sibling;
        }
        if (!g) throw Error(p(189));
      }
    }
    if (c.alternate !== d) throw Error(p(190));
  }
  if (3 !== c.tag) throw Error(p(188));
  return c.stateNode.current === c ? a : b;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag) return a;
  for (a = a.child; null !== a;) {
    var b = $b(a);
    if (null !== b) return b;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback,
  bc = ca.unstable_cancelCallback,
  cc = ca.unstable_shouldYield,
  dc = ca.unstable_requestPaint,
  B = ca.unstable_now,
  ec = ca.unstable_getCurrentPriorityLevel,
  fc = ca.unstable_ImmediatePriority,
  gc = ca.unstable_UserBlockingPriority,
  hc = ca.unstable_NormalPriority,
  ic = ca.unstable_LowPriority,
  jc = ca.unstable_IdlePriority,
  kc = null,
  lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot) try {
    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
  } catch (b) {}
}
var oc = Math.clz32 ? Math.clz32 : nc,
  pc = Math.log,
  qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64,
  sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b) {
  var c = a.pendingLanes;
  if (0 === c) return 0;
  var d = 0,
    e = a.suspendedLanes,
    f = a.pingedLanes,
    g = c & 268435455;
  if (0 !== g) {
    var h = g & ~e;
    0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
  } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
  if (0 === d) return 0;
  if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
  0 !== (d & 4) && (d |= c & 16);
  b = a.entangledLanes;
  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) {
    c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
  }
  return d;
}
function vc(a, b) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b + 5E3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b) {
  for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {
    var g = 31 - oc(f),
      h = 1 << g,
      k = e[g];
    if (-1 === k) {
      if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
    } else k <= b && (a.expiredLanes |= h);
    f &= ~h;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b = [], c = 0; 31 > c; c++) {
    b.push(a);
  }
  return b;
}
function Ac(a, b, c) {
  a.pendingLanes |= b;
  536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b = 31 - oc(b);
  a[b] = c;
}
function Bc(a, b) {
  var c = a.pendingLanes & ~b;
  a.pendingLanes = b;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b;
  a.mutableReadLanes &= b;
  a.entangledLanes &= b;
  b = a.entanglements;
  var d = a.eventTimes;
  for (a = a.expirationTimes; 0 < c;) {
    var e = 31 - oc(c),
      f = 1 << e;
    b[e] = 0;
    d[e] = -1;
    a[e] = -1;
    c &= ~f;
  }
}
function Cc(a, b) {
  var c = a.entangledLanes |= b;
  for (a = a.entanglements; c;) {
    var d = 31 - oc(c),
      e = 1 << d;
    e & b | a[d] & b && (a[d] |= b);
    c &= ~e;
  }
}
var C = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec,
  Fc,
  Gc,
  Hc,
  Ic,
  Jc = !1,
  Kc = [],
  Lc = null,
  Mc = null,
  Nc = null,
  Oc = new Map(),
  Pc = new Map(),
  Qc = [],
  Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc["delete"](b.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc["delete"](b.pointerId);
  }
}
function Tc(a, b, c, d, e, f) {
  if (null === a || a.nativeEvent !== f) return a = {
    blockedOn: b,
    domEventName: c,
    eventSystemFlags: d,
    nativeEvent: f,
    targetContainers: [e]
  }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
  a.eventSystemFlags |= d;
  b = a.targetContainers;
  null !== e && -1 === b.indexOf(e) && b.push(e);
  return a;
}
function Uc(a, b, c, d, e) {
  switch (b) {
    case "focusin":
      return Lc = Tc(Lc, a, b, c, d, e), !0;
    case "dragenter":
      return Mc = Tc(Mc, a, b, c, d, e), !0;
    case "mouseover":
      return Nc = Tc(Nc, a, b, c, d, e), !0;
    case "pointerover":
      var f = e.pointerId;
      Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
      return !0;
    case "gotpointercapture":
      return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;
  }
  return !1;
}
function Vc(a) {
  var b = Wc(a.target);
  if (null !== b) {
    var c = Vb(b);
    if (null !== c) if (b = c.tag, 13 === b) {
      if (b = Wb(c), null !== b) {
        a.blockedOn = b;
        Ic(a.priority, function () {
          Gc(c);
        });
        return;
      }
    } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
      return;
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn) return !1;
  for (var b = a.targetContainers; 0 < b.length;) {
    var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
    if (null === c) {
      c = a.nativeEvent;
      var d = new c.constructor(c.type, c);
      wb = d;
      c.target.dispatchEvent(d);
      wb = null;
    } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;
    b.shift();
  }
  return !0;
}
function Zc(a, b, c) {
  Xc(a) && c["delete"](b);
}
function $c() {
  Jc = !1;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b) {
  a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b(b) {
    return ad(b, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c = 1; c < Kc.length; c++) {
      var d = Kc[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b);
  Pc.forEach(b);
  for (c = 0; c < Qc.length; c++) {
    d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
  }
  for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) {
    Vc(c), null === c.blockedOn && Qc.shift();
  }
}
var cd = ua.ReactCurrentBatchConfig,
  dd = !0;
function ed(a, b, c, d) {
  var e = C,
    f = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a, b, c, d);
  } finally {
    C = e, cd.transition = f;
  }
}
function gd(a, b, c, d) {
  var e = C,
    f = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a, b, c, d);
  } finally {
    C = e, cd.transition = f;
  }
}
function fd(a, b, c, d) {
  if (dd) {
    var e = Yc(a, b, c, d);
    if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e;) {
        var f = Cb(e);
        null !== f && Ec(f);
        f = Yc(a, b, c, d);
        null === f && hd(a, b, d, id, c);
        if (f === e) break;
        e = f;
      }
      null !== e && d.stopPropagation();
    } else hd(a, b, d, null, c);
  }
}
var id = null;
function Yc(a, b, c, d) {
  id = null;
  a = xb(d);
  a = Wc(a);
  if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {
    a = Wb(b);
    if (null !== a) return a;
    a = null;
  } else if (3 === c) {
    if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
    a = null;
  } else b !== a && (a = null);
  id = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null,
  ld = null,
  md = null;
function nd() {
  if (md) return md;
  var a,
    b = ld,
    c = b.length,
    d,
    e = "value" in kd ? kd.value : kd.textContent,
    f = e.length;
  for (a = 0; a < c && b[a] === e[a]; a++) {
    ;
  }
  var g = c - a;
  for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {
    ;
  }
  return md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function od(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return !0;
}
function qd() {
  return !1;
}
function rd(a) {
  function b(b, d, e, f, g) {
    this._reactName = b;
    this._targetInst = e;
    this.type = d;
    this.nativeEvent = f;
    this.target = g;
    this.currentTarget = null;
    for (var c in a) {
      a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
    }
    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A(b.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var a = this.nativeEvent;
      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
    },
    stopPropagation: function stopPropagation() {
      var a = this.nativeEvent;
      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
    },
    persist: function persist() {},
    isPersistent: pd
  });
  return b;
}
var sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function timeStamp(a) {
      return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  },
  td = rd(sd),
  ud = A({}, sd, {
    view: 0,
    detail: 0
  }),
  vd = rd(ud),
  wd,
  xd,
  yd,
  Ad = A({}, ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: zd,
    button: 0,
    buttons: 0,
    relatedTarget: function relatedTarget(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function movementX(a) {
      if ("movementX" in a) return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    },
    movementY: function movementY(a) {
      return "movementY" in a ? a.movementY : xd;
    }
  }),
  Bd = rd(Ad),
  Cd = A({}, Ad, {
    dataTransfer: 0
  }),
  Dd = rd(Cd),
  Ed = A({}, ud, {
    relatedTarget: 0
  }),
  Fd = rd(Ed),
  Gd = A({}, sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
  Hd = rd(Gd),
  Id = A({}, sd, {
    clipboardData: function clipboardData(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
  }),
  Jd = rd(Id),
  Kd = A({}, sd, {
    data: 0
  }),
  Ld = rd(Kd),
  Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  },
  Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  },
  Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
function Pd(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
}
function zd() {
  return Pd;
}
var Qd = A({}, ud, {
    key: function key(a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: zd,
    charCode: function charCode(a) {
      return "keypress" === a.type ? od(a) : 0;
    },
    keyCode: function keyCode(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function which(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
  }),
  Rd = rd(Qd),
  Sd = A({}, Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }),
  Td = rd(Sd),
  Ud = A({}, ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: zd
  }),
  Vd = rd(Ud),
  Wd = A({}, sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
  Xd = rd(Wd),
  Yd = A({}, Ad, {
    deltaX: function deltaX(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function deltaY(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }),
  Zd = rd(Yd),
  $d = [9, 13, 27, 32],
  ae = ia && "CompositionEvent" in window,
  be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be,
  de = ia && (!ae || be && 8 < be && 11 >= be),
  ee = String.fromCharCode(32),
  fe = !1;
function ge(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b.keyCode);
    case "keydown":
      return 229 !== b.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return !0;
    default:
      return !1;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = !1;
function je(a, b) {
  switch (a) {
    case "compositionend":
      return he(b);
    case "keypress":
      if (32 !== b.which) return null;
      fe = !0;
      return ee;
    case "textInput":
      return a = b.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b) {
  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b["char"] && 1 < b["char"].length) return b["char"];
        if (b.which) return String.fromCharCode(b.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b.locale ? null : b.data;
    default:
      return null;
  }
}
var le = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};
function me(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
}
function ne(a, b, c, d) {
  Eb(d);
  b = oe(b, "onChange");
  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
    event: c,
    listeners: b
  }));
}
var pe = null,
  qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b = ue(a);
  if (Wa(b)) return a;
}
function ve(a, b) {
  if ("change" === a) return b;
}
var we = !1;
if (ia) {
  var xe;
  if (ia) {
    var ye = ("oninput" in document);
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else xe = !1;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b = [];
    ne(b, qe, a, xb(a));
    Jb(re, b);
  }
}
function Ce(a, b, c) {
  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
}
function Ee(a, b) {
  if ("click" === a) return te(b);
}
function Fe(a, b) {
  if ("input" === a || "change" === a) return te(b);
}
function Ge(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b) {
  if (He(a, b)) return !0;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
  var c = Object.keys(a),
    d = Object.keys(b);
  if (c.length !== d.length) return !1;
  for (d = 0; d < c.length; d++) {
    var e = c[d];
    if (!ja.call(b, e) || !He(a[e], b[e])) return !1;
  }
  return !0;
}
function Je(a) {
  for (; a && a.firstChild;) {
    a = a.firstChild;
  }
  return a;
}
function Ke(a, b) {
  var c = Je(a);
  a = 0;
  for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return {
        node: c,
        offset: b - a
      };
      a = d;
    }
    a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }
        c = c.parentNode;
      }
      c = void 0;
    }
    c = Je(c);
  }
}
function Le(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function Me() {
  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = !1;
    }
    if (c) a = b.contentWindow;else break;
    b = Xa(a.document);
  }
  return b;
}
function Ne(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
function Oe(a) {
  var b = Me(),
    c = a.focusedElem,
    d = a.selectionRange;
  if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
    if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
      a = a.getSelection();
      var e = c.textContent.length,
        f = Math.min(d.start, e);
      d = void 0 === d.end ? f : Math.min(d.end, e);
      !a.extend && f > d && (e = d, d = f, f = e);
      e = Ke(c, f);
      var g = Ke(c, d);
      e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
    }
    b = [];
    for (a = c; a = a.parentNode;) {
      1 === a.nodeType && b.push({
        element: a,
        left: a.scrollLeft,
        top: a.scrollTop
      });
    }
    "function" === typeof c.focus && c.focus();
    for (c = 0; c < b.length; c++) {
      a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
    }
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode,
  Qe = null,
  Re = null,
  Se = null,
  Te = !1;
function Ue(a, b, c) {
  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {
    start: d.selectionStart,
    end: d.selectionEnd
  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
    anchorNode: d.anchorNode,
    anchorOffset: d.anchorOffset,
    focusNode: d.focusNode,
    focusOffset: d.focusOffset
  }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
    event: b,
    listeners: d
  }), b.target = Qe)));
}
function Ve(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}
var We = {
    animationend: Ve("Animation", "AnimationEnd"),
    animationiteration: Ve("Animation", "AnimationIteration"),
    animationstart: Ve("Animation", "AnimationStart"),
    transitionend: Ve("Transition", "TransitionEnd")
  },
  Xe = {},
  Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a]) return Xe[a];
  if (!We[a]) return a;
  var b = We[a],
    c;
  for (c in b) {
    if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
  }
  return a;
}
var $e = Ze("animationend"),
  af = Ze("animationiteration"),
  bf = Ze("animationstart"),
  cf = Ze("transitionend"),
  df = new Map(),
  ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b) {
  df.set(a, b);
  fa(b, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf],
    jf = hf.toLowerCase(),
    kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
  mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = c;
  Ub(d, b, void 0, a);
  a.currentTarget = null;
}
function se(a, b) {
  b = 0 !== (b & 4);
  for (var c = 0; c < a.length; c++) {
    var d = a[c],
      e = d.event;
    d = d.listeners;
    a: {
      var f = void 0;
      if (b) for (var g = d.length - 1; 0 <= g; g--) {
        var h = d[g],
          k = h.instance,
          l = h.currentTarget;
        h = h.listener;
        if (k !== f && e.isPropagationStopped()) break a;
        nf(e, h, l);
        f = k;
      } else for (g = 0; g < d.length; g++) {
        h = d[g];
        k = h.instance;
        l = h.currentTarget;
        h = h.listener;
        if (k !== f && e.isPropagationStopped()) break a;
        nf(e, h, l);
        f = k;
      }
    }
  }
  if (Qb) throw a = Rb, Qb = !1, Rb = null, a;
}
function D(a, b) {
  var c = b[of];
  void 0 === c && (c = b[of] = new Set());
  var d = a + "__bubble";
  c.has(d) || (pf(b, a, 2, !1), c.add(d));
}
function qf(a, b, c) {
  var d = 0;
  b && (d |= 4);
  pf(c, a, d, b);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = !0;
    da.forEach(function (b) {
      "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));
    });
    var b = 9 === a.nodeType ? a : a.ownerDocument;
    null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));
  }
}
function pf(a, b, c, d) {
  switch (jd(b)) {
    case 1:
      var e = ed;
      break;
    case 4:
      e = gd;
      break;
    default:
      e = fd;
  }
  c = e.bind(null, b, c, a);
  e = void 0;
  !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
  d ? void 0 !== e ? a.addEventListener(b, c, {
    capture: !0,
    passive: e
  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
    passive: e
  }) : a.addEventListener(b, c, !1);
}
function hd(a, b, c, d, e) {
  var f = d;
  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
    if (null === d) return;
    var g = d.tag;
    if (3 === g || 4 === g) {
      var h = d.stateNode.containerInfo;
      if (h === e || 8 === h.nodeType && h.parentNode === e) break;
      if (4 === g) for (g = d["return"]; null !== g;) {
        var k = g.tag;
        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
        g = g["return"];
      }
      for (; null !== h;) {
        g = Wc(h);
        if (null === g) return;
        k = g.tag;
        if (5 === k || 6 === k) {
          d = f = g;
          continue a;
        }
        h = h.parentNode;
      }
    }
    d = d["return"];
  }
  Jb(function () {
    var d = f,
      e = xb(c),
      g = [];
    a: {
      var h = df.get(a);
      if (void 0 !== h) {
        var k = td,
          n = a;
        switch (a) {
          case "keypress":
            if (0 === od(c)) break a;
          case "keydown":
          case "keyup":
            k = Rd;
            break;
          case "focusin":
            n = "focus";
            k = Fd;
            break;
          case "focusout":
            n = "blur";
            k = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k = Fd;
            break;
          case "click":
            if (2 === c.button) break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k = Vd;
            break;
          case $e:
          case af:
          case bf:
            k = Hd;
            break;
          case cf:
            k = Xd;
            break;
          case "scroll":
            k = vd;
            break;
          case "wheel":
            k = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k = Td;
        }
        var t = 0 !== (b & 4),
          J = !t && "scroll" === a,
          x = t ? null !== h ? h + "Capture" : null : h;
        t = [];
        for (var w = d, u; null !== w;) {
          u = w;
          var F = u.stateNode;
          5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
          if (J) break;
          w = w["return"];
        }
        0 < t.length && (h = new k(h, n, null, c, e), g.push({
          event: h,
          listeners: t
        }));
      }
    }
    if (0 === (b & 7)) {
      a: {
        h = "mouseover" === a || "pointerover" === a;
        k = "mouseout" === a || "pointerout" === a;
        if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
        if (k || h) {
          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
          if (k) {
            if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
          } else k = null, n = d;
          if (k !== n) {
            t = Bd;
            F = "onMouseLeave";
            x = "onMouseEnter";
            w = "mouse";
            if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
            J = null == k ? h : ue(k);
            u = null == n ? h : ue(n);
            h = new t(F, w + "leave", k, c, e);
            h.target = J;
            h.relatedTarget = u;
            F = null;
            Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
            J = F;
            if (k && n) b: {
              t = k;
              x = n;
              w = 0;
              for (u = t; u; u = vf(u)) {
                w++;
              }
              u = 0;
              for (F = x; F; F = vf(F)) {
                u++;
              }
              for (; 0 < w - u;) {
                t = vf(t), w--;
              }
              for (; 0 < u - w;) {
                x = vf(x), u--;
              }
              for (; w--;) {
                if (t === x || null !== x && t === x.alternate) break b;
                t = vf(t);
                x = vf(x);
              }
              t = null;
            } else t = null;
            null !== k && wf(g, h, k, t, !1);
            null !== n && null !== J && wf(g, J, n, t, !0);
          }
        }
      }
      a: {
        h = d ? ue(d) : window;
        k = h.nodeName && h.nodeName.toLowerCase();
        if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {
          if (we) na = Fe;else {
            na = De;
            var xa = Ce;
          }
        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);
        if (na && (na = na(a, d))) {
          ne(g, na, c, e);
          break a;
        }
        xa && xa(a, h, d);
        "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);
      }
      xa = d ? ue(d) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = !1;
          Ue(g, c, e);
          break;
        case "selectionchange":
          if (Pe) break;
        case "keydown":
        case "keyup":
          Ue(g, c, e);
      }
      var $a;
      if (ae) b: {
        switch (a) {
          case "compositionstart":
            var ba = "onCompositionStart";
            break b;
          case "compositionend":
            ba = "onCompositionEnd";
            break b;
          case "compositionupdate":
            ba = "onCompositionUpdate";
            break b;
        }
        ba = void 0;
      } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({
        event: ba,
        listeners: xa
      }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
        event: e,
        listeners: d
      }), e.data = $a);
    }
    se(g, b);
  });
}
function tf(a, b, c) {
  return {
    instance: a,
    listener: b,
    currentTarget: c
  };
}
function oe(a, b) {
  for (var c = b + "Capture", d = []; null !== a;) {
    var e = a,
      f = e.stateNode;
    5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
    a = a["return"];
  }
  return d;
}
function vf(a) {
  if (null === a) return null;
  do {
    a = a["return"];
  } while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b, c, d, e) {
  for (var f = b._reactName, g = []; null !== c && c !== d;) {
    var h = c,
      k = h.alternate,
      l = h.stateNode;
    if (null !== k && k === d) break;
    5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
    c = c["return"];
  }
  0 !== g.length && a.push({
    event: b,
    listeners: g
  });
}
var xf = /\r\n?/g,
  yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b, c) {
  b = zf(b);
  if (zf(a) !== b && c) throw Error(p(425));
}
function Bf() {}
var Cf = null,
  Df = null;
function Ef(a, b) {
  return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0,
  Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,
  Hf = "function" === typeof Promise ? Promise : void 0,
  Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {
    return Hf.resolve(null).then(a)["catch"](If);
  } : Ff;
function If(a) {
  setTimeout(function () {
    throw a;
  });
}
function Kf(a, b) {
  var c = b,
    d = 0;
  do {
    var e = c.nextSibling;
    a.removeChild(c);
    if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
      if (0 === d) {
        a.removeChild(e);
        bd(b);
        return;
      }
      d--;
    } else "$" !== c && "$?" !== c && "$!" !== c || d++;
    c = e;
  } while (c);
  bd(b);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b = a.nodeType;
    if (1 === b || 3 === b) break;
    if (8 === b) {
      b = a.data;
      if ("$" === b || "$!" === b || "$?" === b) break;
      if ("/$" === b) return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b = 0; a;) {
    if (8 === a.nodeType) {
      var c = a.data;
      if ("$" === c || "$!" === c || "$?" === c) {
        if (0 === b) return a;
        b--;
      } else "/$" === c && b++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2),
  Of = "__reactFiber$" + Nf,
  Pf = "__reactProps$" + Nf,
  uf = "__reactContainer$" + Nf,
  of = "__reactEvents$" + Nf,
  Qf = "__reactListeners$" + Nf,
  Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b = a[Of];
  if (b) return b;
  for (var c = a.parentNode; c;) {
    if (b = c[uf] || c[Of]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {
        if (c = a[Of]) return c;
        a = Mf(a);
      }
      return b;
    }
    a = c;
    c = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(p(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [],
  Tf = -1;
function Uf(a) {
  return {
    current: a
  };
}
function E(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b;
}
var Vf = {},
  H = Uf(Vf),
  Wf = Uf(!1),
  Xf = Vf;
function Yf(a, b) {
  var c = a.type.contextTypes;
  if (!c) return Vf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {},
    f;
  for (f in c) {
    e[f] = b[f];
  }
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a, b, c) {
  if (H.current !== Vf) throw Error(p(168));
  G(H, b);
  G(Wf, c);
}
function bg(a, b, c) {
  var d = a.stateNode;
  b = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();
  for (var e in d) {
    if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
  }
  return A({}, c, d);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a);
  G(Wf, Wf.current);
  return !0;
}
function dg(a, b, c) {
  var d = a.stateNode;
  if (!d) throw Error(p(169));
  c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
  G(Wf, c);
}
var eg = null,
  fg = !1,
  gg = !1;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = !0;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = !0;
    var a = 0,
      b = C;
    try {
      var c = eg;
      for (C = 1; a < c.length; a++) {
        var d = c[a];
        do {
          d = d(!0);
        } while (null !== d);
      }
      eg = null;
      fg = !1;
    } catch (e) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
    } finally {
      C = b, gg = !1;
    }
  }
  return null;
}
var kg = [],
  lg = 0,
  mg = null,
  ng = 0,
  og = [],
  pg = 0,
  qg = null,
  rg = 1,
  sg = "";
function tg(a, b) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b;
}
function ug(a, b, c) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d = rg;
  a = sg;
  var e = 32 - oc(d) - 1;
  d &= ~(1 << e);
  c += 1;
  var f = 32 - oc(b) + e;
  if (30 < f) {
    var g = e - e % 5;
    f = (d & (1 << g) - 1).toString(32);
    d >>= g;
    e -= g;
    rg = 1 << 32 - oc(b) + e | c << e | d;
    sg = f + a;
  } else rg = 1 << f | c << e | d, sg = a;
}
function vg(a) {
  null !== a["return"] && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg;) {
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  }
  for (; a === qg;) {
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
  }
}
var xg = null,
  yg = null,
  I = !1,
  zg = null;
function Ag(a, b) {
  var c = Bg(5, null, null, 0);
  c.elementType = "DELETED";
  c.stateNode = b;
  c["return"] = a;
  b = a.deletions;
  null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
}
function Cg(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;
    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;
    case 13:
      return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {
        id: rg,
        overflow: sg
      } : null, a.memoizedState = {
        dehydrated: b,
        treeContext: c,
        retryLane: 1073741824
      }, c = Bg(18, null, null, 0), c.stateNode = b, c["return"] = a, a.child = c, xg = a, yg = null, !0) : !1;
    default:
      return !1;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I) {
    var b = yg;
    if (b) {
      var c = b;
      if (!Cg(a, b)) {
        if (Dg(a)) throw Error(p(418));
        b = Lf(c.nextSibling);
        var d = xg;
        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);
      }
    } else {
      if (Dg(a)) throw Error(p(418));
      a.flags = a.flags & -4097 | 2;
      I = !1;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a["return"]; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) {
    a = a["return"];
  }
  xg = a;
}
function Gg(a) {
  if (a !== xg) return !1;
  if (!I) return Fg(a), I = !0, !1;
  var b;
  (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
  if (b && (b = yg)) {
    if (Dg(a)) throw Hg(), Error(p(418));
    for (; b;) {
      Ag(a, b), b = Lf(b.nextSibling);
    }
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(p(317));
    a: {
      a = a.nextSibling;
      for (b = 0; a;) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("/$" === c) {
            if (0 === b) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b--;
          } else "$" !== c && "$!" !== c && "$?" !== c || b++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return !0;
}
function Hg() {
  for (var a = yg; a;) {
    a = Lf(a.nextSibling);
  }
}
function Ig() {
  yg = xg = null;
  I = !1;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a, b) {
  if (a && a.defaultProps) {
    b = A({}, b);
    a = a.defaultProps;
    for (var c in a) {
      void 0 === b[c] && (b[c] = a[c]);
    }
    return b;
  }
  return b;
}
var Mg = Uf(null),
  Ng = null,
  Og = null,
  Pg = null;
function Qg() {
  Pg = Og = Ng = null;
}
function Rg(a) {
  var b = Mg.current;
  E(Mg);
  a._currentValue = b;
}
function Sg(a, b, c) {
  for (; null !== a;) {
    var d = a.alternate;
    (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
    if (a === c) break;
    a = a["return"];
  }
}
function Tg(a, b) {
  Ng = a;
  Pg = Og = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (Ug = !0), a.firstContext = null);
}
function Vg(a) {
  var b = a._currentValue;
  if (Pg !== a) if (a = {
    context: a,
    memoizedValue: b,
    next: null
  }, null === Og) {
    if (null === Ng) throw Error(p(308));
    Og = a;
    Ng.dependencies = {
      lanes: 0,
      firstContext: a
    };
  } else Og = Og.next = a;
  return b;
}
var Wg = null;
function Xg(a) {
  null === Wg ? Wg = [a] : Wg.push(a);
}
function Yg(a, b, c, d) {
  var e = b.interleaved;
  null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c);
  b.interleaved = c;
  return Zg(a, d);
}
function Zg(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  null !== c && (c.lanes |= b);
  c = a;
  for (a = a["return"]; null !== a;) {
    a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a["return"];
  }
  return 3 === c.tag ? c.stateNode : null;
}
var $g = !1;
function ah(a) {
  a.updateQueue = {
    baseState: a.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null,
      interleaved: null,
      lanes: 0
    },
    effects: null
  };
}
function bh(a, b) {
  a = a.updateQueue;
  b.updateQueue === a && (b.updateQueue = {
    baseState: a.baseState,
    firstBaseUpdate: a.firstBaseUpdate,
    lastBaseUpdate: a.lastBaseUpdate,
    shared: a.shared,
    effects: a.effects
  });
}
function ch(a, b) {
  return {
    eventTime: a,
    lane: b,
    tag: 0,
    payload: null,
    callback: null,
    next: null
  };
}
function dh(a, b, c) {
  var d = a.updateQueue;
  if (null === d) return null;
  d = d.shared;
  if (0 !== (K & 2)) {
    var e = d.pending;
    null === e ? b.next = b : (b.next = e.next, e.next = b);
    d.pending = b;
    return Zg(a, c);
  }
  e = d.interleaved;
  null === e ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b);
  d.interleaved = b;
  return Zg(a, c);
}
function eh(a, b, c) {
  b = b.updateQueue;
  if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
    var d = b.lanes;
    d &= a.pendingLanes;
    c |= d;
    b.lanes = c;
    Cc(a, c);
  }
}
function fh(a, b) {
  var c = a.updateQueue,
    d = a.alternate;
  if (null !== d && (d = d.updateQueue, c === d)) {
    var e = null,
      f = null;
    c = c.firstBaseUpdate;
    if (null !== c) {
      do {
        var g = {
          eventTime: c.eventTime,
          lane: c.lane,
          tag: c.tag,
          payload: c.payload,
          callback: c.callback,
          next: null
        };
        null === f ? e = f = g : f = f.next = g;
        c = c.next;
      } while (null !== c);
      null === f ? e = f = b : f = f.next = b;
    } else e = f = b;
    c = {
      baseState: d.baseState,
      firstBaseUpdate: e,
      lastBaseUpdate: f,
      shared: d.shared,
      effects: d.effects
    };
    a.updateQueue = c;
    return;
  }
  a = c.lastBaseUpdate;
  null === a ? c.firstBaseUpdate = b : a.next = b;
  c.lastBaseUpdate = b;
}
function gh(a, b, c, d) {
  var e = a.updateQueue;
  $g = !1;
  var f = e.firstBaseUpdate,
    g = e.lastBaseUpdate,
    h = e.shared.pending;
  if (null !== h) {
    e.shared.pending = null;
    var k = h,
      l = k.next;
    k.next = null;
    null === g ? f = l : g.next = l;
    g = k;
    var m = a.alternate;
    null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
  }
  if (null !== f) {
    var q = e.baseState;
    g = 0;
    m = l = k = null;
    h = f;
    do {
      var r = h.lane,
        y = h.eventTime;
      if ((d & r) === r) {
        null !== m && (m = m.next = {
          eventTime: y,
          lane: 0,
          tag: h.tag,
          payload: h.payload,
          callback: h.callback,
          next: null
        });
        a: {
          var n = a,
            t = h;
          r = b;
          y = c;
          switch (t.tag) {
            case 1:
              n = t.payload;
              if ("function" === typeof n) {
                q = n.call(y, q, r);
                break a;
              }
              q = n;
              break a;
            case 3:
              n.flags = n.flags & -65537 | 128;
            case 0:
              n = t.payload;
              r = "function" === typeof n ? n.call(y, q, r) : n;
              if (null === r || void 0 === r) break a;
              q = A({}, q, r);
              break a;
            case 2:
              $g = !0;
          }
        }
        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
      } else y = {
        eventTime: y,
        lane: r,
        tag: h.tag,
        payload: h.payload,
        callback: h.callback,
        next: null
      }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
      h = h.next;
      if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
    } while (1);
    null === m && (k = q);
    e.baseState = k;
    e.firstBaseUpdate = l;
    e.lastBaseUpdate = m;
    b = e.shared.interleaved;
    if (null !== b) {
      e = b;
      do {
        g |= e.lane, e = e.next;
      } while (e !== b);
    } else null === f && (e.shared.lanes = 0);
    hh |= g;
    a.lanes = g;
    a.memoizedState = q;
  }
}
function ih(a, b, c) {
  a = b.effects;
  b.effects = null;
  if (null !== a) for (b = 0; b < a.length; b++) {
    var d = a[b],
      e = d.callback;
    if (null !== e) {
      d.callback = null;
      d = c;
      if ("function" !== typeof e) throw Error(p(191, e));
      e.call(d);
    }
  }
}
var jh = new aa.Component().refs;
function kh(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : A({}, b, c);
  a.memoizedState = c;
  0 === a.lanes && (a.updateQueue.baseState = c);
}
var nh = {
  isMounted: function isMounted(a) {
    return (a = a._reactInternals) ? Vb(a) === a : !1;
  },
  enqueueSetState: function enqueueSetState(a, b, c) {
    a = a._reactInternals;
    var d = L(),
      e = lh(a),
      f = ch(d, e);
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    b = dh(a, f, e);
    null !== b && (mh(b, a, e, d), eh(b, a, e));
  },
  enqueueReplaceState: function enqueueReplaceState(a, b, c) {
    a = a._reactInternals;
    var d = L(),
      e = lh(a),
      f = ch(d, e);
    f.tag = 1;
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    b = dh(a, f, e);
    null !== b && (mh(b, a, e, d), eh(b, a, e));
  },
  enqueueForceUpdate: function enqueueForceUpdate(a, b) {
    a = a._reactInternals;
    var c = L(),
      d = lh(a),
      e = ch(c, d);
    e.tag = 2;
    void 0 !== b && null !== b && (e.callback = b);
    b = dh(a, e, d);
    null !== b && (mh(b, a, d, c), eh(b, a, d));
  }
};
function oh(a, b, c, d, e, f, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;
}
function ph(a, b, c) {
  var d = !1,
    e = Vf;
  var f = b.contextType;
  "object" === typeof f && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
  b = new b(c, f);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = nh;
  a.stateNode = b;
  b._reactInternals = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
  return b;
}
function qh(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && nh.enqueueReplaceState(b, b.state, null);
}
function rh(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = jh;
  ah(a);
  var f = b.contextType;
  "object" === typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
  e.state = a.memoizedState;
  f = b.getDerivedStateFromProps;
  "function" === typeof f && (kh(a, b, f, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function sh(a, b, c) {
  a = c.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;
      if (c) {
        if (1 !== c.tag) throw Error(p(309));
        var d = c.stateNode;
      }
      if (!d) throw Error(p(147, a));
      var e = d,
        f = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
      b = function b(a) {
        var b = e.refs;
        b === jh && (b = e.refs = {});
        null === a ? delete b[f] : b[f] = a;
      };
      b._stringRef = f;
      return b;
    }
    if ("string" !== typeof a) throw Error(p(284));
    if (!c._owner) throw Error(p(290, a));
  }
  return a;
}
function th(a, b) {
  a = Object.prototype.toString.call(b);
  throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
}
function uh(a) {
  var b = a._init;
  return b(a._payload);
}
function vh(a) {
  function b(b, c) {
    if (a) {
      var d = b.deletions;
      null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);
    }
  }
  function c(c, d) {
    if (!a) return null;
    for (; null !== d;) {
      b(c, d), d = d.sibling;
    }
    return null;
  }
  function d(a, b) {
    for (a = new Map(); null !== b;) {
      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    }
    return a;
  }
  function e(a, b) {
    a = wh(a, b);
    a.index = 0;
    a.sibling = null;
    return a;
  }
  function f(b, c, d) {
    b.index = d;
    if (!a) return b.flags |= 1048576, c;
    d = b.alternate;
    if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
    b.flags |= 2;
    return c;
  }
  function g(b) {
    a && null === b.alternate && (b.flags |= 2);
    return b;
  }
  function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = xh(c, a.mode, d), b["return"] = a, b;
    b = e(b, c);
    b["return"] = a;
    return b;
  }
  function k(a, b, c, d) {
    var f = c.type;
    if (f === ya) return m(a, b, c.props.children, d, c.key);
    if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === Ha && uh(f) === b.type)) return d = e(b, c.props), d.ref = sh(a, b, c), d["return"] = a, d;
    d = yh(c.type, c.key, c.props, null, a.mode, d);
    d.ref = sh(a, b, c);
    d["return"] = a;
    return d;
  }
  function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = zh(c, a.mode, d), b["return"] = a, b;
    b = e(b, c.children || []);
    b["return"] = a;
    return b;
  }
  function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = Ah(c, a.mode, d, f), b["return"] = a, b;
    b = e(b, c);
    b["return"] = a;
    return b;
  }
  function q(a, b, c) {
    if ("string" === typeof b && "" !== b || "number" === typeof b) return b = xh("" + b, a.mode, c), b["return"] = a, b;
    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case va:
          return c = yh(b.type, b.key, b.props, null, a.mode, c), c.ref = sh(a, null, b), c["return"] = a, c;
        case wa:
          return b = zh(b, a.mode, c), b["return"] = a, b;
        case Ha:
          var d = b._init;
          return q(a, d(b._payload), c);
      }
      if (eb(b) || Ka(b)) return b = Ah(b, a.mode, c, null), b["return"] = a, b;
      th(a, b);
    }
    return null;
  }
  function r(a, b, c, d) {
    var e = null !== b ? b.key : null;
    if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
    if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {
        case va:
          return c.key === e ? k(a, b, c, d) : null;
        case wa:
          return c.key === e ? l(a, b, c, d) : null;
        case Ha:
          return e = c._init, r(a, b, e(c._payload), d);
      }
      if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);
      th(a, c);
    }
    return null;
  }
  function y(a, b, c, d, e) {
    if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
    if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {
        case va:
          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
        case wa:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
        case Ha:
          var f = d._init;
          return y(a, b, c, f(d._payload), e);
      }
      if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
      th(b, d);
    }
    return null;
  }
  function n(e, g, h, k) {
    for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {
      u.index > w ? (x = u, u = null) : x = u.sibling;
      var n = r(e, u, h[w], k);
      if (null === n) {
        null === u && (u = x);
        break;
      }
      a && u && null === n.alternate && b(e, u);
      g = f(n, g, w);
      null === m ? l = n : m.sibling = n;
      m = n;
      u = x;
    }
    if (w === h.length) return c(e, u), I && tg(e, w), l;
    if (null === u) {
      for (; w < h.length; w++) {
        u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
      }
      I && tg(e, w);
      return l;
    }
    for (u = d(e, u); w < h.length; w++) {
      x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u["delete"](null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
    }
    a && u.forEach(function (a) {
      return b(e, a);
    });
    I && tg(e, w);
    return l;
  }
  function t(e, g, h, k) {
    var l = Ka(h);
    if ("function" !== typeof l) throw Error(p(150));
    h = l.call(h);
    if (null == h) throw Error(p(151));
    for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {
      m.index > w ? (x = m, m = null) : x = m.sibling;
      var t = r(e, m, n.value, k);
      if (null === t) {
        null === m && (m = x);
        break;
      }
      a && m && null === t.alternate && b(e, m);
      g = f(t, g, w);
      null === u ? l = t : u.sibling = t;
      u = t;
      m = x;
    }
    if (n.done) return c(e, m), I && tg(e, w), l;
    if (null === m) {
      for (; !n.done; w++, n = h.next()) {
        n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
      }
      I && tg(e, w);
      return l;
    }
    for (m = d(e, m); !n.done; w++, n = h.next()) {
      n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m["delete"](null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
    }
    a && m.forEach(function (a) {
      return b(e, a);
    });
    I && tg(e, w);
    return l;
  }
  function J(a, d, f, h) {
    "object" === typeof f && null !== f && f.type === ya && null === f.key && (f = f.props.children);
    if ("object" === typeof f && null !== f) {
      switch (f.$$typeof) {
        case va:
          a: {
            for (var k = f.key, l = d; null !== l;) {
              if (l.key === k) {
                k = f.type;
                if (k === ya) {
                  if (7 === l.tag) {
                    c(a, l.sibling);
                    d = e(l, f.props.children);
                    d["return"] = a;
                    a = d;
                    break a;
                  }
                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === Ha && uh(k) === l.type) {
                  c(a, l.sibling);
                  d = e(l, f.props);
                  d.ref = sh(a, l, f);
                  d["return"] = a;
                  a = d;
                  break a;
                }
                c(a, l);
                break;
              } else b(a, l);
              l = l.sibling;
            }
            f.type === ya ? (d = Ah(f.props.children, a.mode, h, f.key), d["return"] = a, a = d) : (h = yh(f.type, f.key, f.props, null, a.mode, h), h.ref = sh(a, d, f), h["return"] = a, a = h);
          }
          return g(a);
        case wa:
          a: {
            for (l = f.key; null !== d;) {
              if (d.key === l) {
                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                  c(a, d.sibling);
                  d = e(d, f.children || []);
                  d["return"] = a;
                  a = d;
                  break a;
                } else {
                  c(a, d);
                  break;
                }
              } else b(a, d);
              d = d.sibling;
            }
            d = zh(f, a.mode, h);
            d["return"] = a;
            a = d;
          }
          return g(a);
        case Ha:
          return l = f._init, J(a, d, l(f._payload), h);
      }
      if (eb(f)) return n(a, d, f, h);
      if (Ka(f)) return t(a, d, f, h);
      th(a, f);
    }
    return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d["return"] = a, a = d) : (c(a, d), d = xh(f, a.mode, h), d["return"] = a, a = d), g(a)) : c(a, d);
  }
  return J;
}
var Bh = vh(!0),
  Ch = vh(!1),
  Dh = {},
  Eh = Uf(Dh),
  Fh = Uf(Dh),
  Gh = Uf(Dh);
function Hh(a) {
  if (a === Dh) throw Error(p(174));
  return a;
}
function Ih(a, b) {
  G(Gh, b);
  G(Fh, a);
  G(Eh, Dh);
  a = b.nodeType;
  switch (a) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
  }
  E(Eh);
  G(Eh, b);
}
function Jh() {
  E(Eh);
  E(Fh);
  E(Gh);
}
function Kh(a) {
  Hh(Gh.current);
  var b = Hh(Eh.current);
  var c = lb(b, a.type);
  b !== c && (G(Fh, a), G(Eh, c));
}
function Lh(a) {
  Fh.current === a && (E(Eh), E(Fh));
}
var M = Uf(0);
function Mh(a) {
  for (var b = a; null !== b;) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.flags & 128)) return b;
    } else if (null !== b.child) {
      b.child["return"] = b;
      b = b.child;
      continue;
    }
    if (b === a) break;
    for (; null === b.sibling;) {
      if (null === b["return"] || b["return"] === a) return null;
      b = b["return"];
    }
    b.sibling["return"] = b["return"];
    b = b.sibling;
  }
  return null;
}
var Nh = [];
function Oh() {
  for (var a = 0; a < Nh.length; a++) {
    Nh[a]._workInProgressVersionPrimary = null;
  }
  Nh.length = 0;
}
var Ph = ua.ReactCurrentDispatcher,
  Qh = ua.ReactCurrentBatchConfig,
  Rh = 0,
  N = null,
  O = null,
  P = null,
  Sh = !1,
  Th = !1,
  Uh = 0,
  Vh = 0;
function Q() {
  throw Error(p(321));
}
function Wh(a, b) {
  if (null === b) return !1;
  for (var c = 0; c < b.length && c < a.length; c++) {
    if (!He(a[c], b[c])) return !1;
  }
  return !0;
}
function Xh(a, b, c, d, e, f) {
  Rh = f;
  N = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.lanes = 0;
  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
  a = c(d, e);
  if (Th) {
    f = 0;
    do {
      Th = !1;
      Uh = 0;
      if (25 <= f) throw Error(p(301));
      f += 1;
      P = O = null;
      b.updateQueue = null;
      Ph.current = $h;
      a = c(d, e);
    } while (Th);
  }
  Ph.current = ai;
  b = null !== O && null !== O.next;
  Rh = 0;
  P = O = N = null;
  Sh = !1;
  if (b) throw Error(p(300));
  return a;
}
function bi() {
  var a = 0 !== Uh;
  Uh = 0;
  return a;
}
function ci() {
  var a = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  null === P ? N.memoizedState = P = a : P = P.next = a;
  return P;
}
function di() {
  if (null === O) {
    var a = N.alternate;
    a = null !== a ? a.memoizedState : null;
  } else a = O.next;
  var b = null === P ? N.memoizedState : P.next;
  if (null !== b) P = b, O = a;else {
    if (null === a) throw Error(p(310));
    O = a;
    a = {
      memoizedState: O.memoizedState,
      baseState: O.baseState,
      baseQueue: O.baseQueue,
      queue: O.queue,
      next: null
    };
    null === P ? N.memoizedState = P = a : P = P.next = a;
  }
  return P;
}
function ei(a, b) {
  return "function" === typeof b ? b(a) : b;
}
function fi(a) {
  var b = di(),
    c = b.queue;
  if (null === c) throw Error(p(311));
  c.lastRenderedReducer = a;
  var d = O,
    e = d.baseQueue,
    f = c.pending;
  if (null !== f) {
    if (null !== e) {
      var g = e.next;
      e.next = f.next;
      f.next = g;
    }
    d.baseQueue = e = f;
    c.pending = null;
  }
  if (null !== e) {
    f = e.next;
    d = d.baseState;
    var h = g = null,
      k = null,
      l = f;
    do {
      var m = l.lane;
      if ((Rh & m) === m) null !== k && (k = k.next = {
        lane: 0,
        action: l.action,
        hasEagerState: l.hasEagerState,
        eagerState: l.eagerState,
        next: null
      }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {
        var q = {
          lane: m,
          action: l.action,
          hasEagerState: l.hasEagerState,
          eagerState: l.eagerState,
          next: null
        };
        null === k ? (h = k = q, g = d) : k = k.next = q;
        N.lanes |= m;
        hh |= m;
      }
      l = l.next;
    } while (null !== l && l !== f);
    null === k ? g = d : k.next = h;
    He(d, b.memoizedState) || (Ug = !0);
    b.memoizedState = d;
    b.baseState = g;
    b.baseQueue = k;
    c.lastRenderedState = d;
  }
  a = c.interleaved;
  if (null !== a) {
    e = a;
    do {
      f = e.lane, N.lanes |= f, hh |= f, e = e.next;
    } while (e !== a);
  } else null === e && (c.lanes = 0);
  return [b.memoizedState, c.dispatch];
}
function gi(a) {
  var b = di(),
    c = b.queue;
  if (null === c) throw Error(p(311));
  c.lastRenderedReducer = a;
  var d = c.dispatch,
    e = c.pending,
    f = b.memoizedState;
  if (null !== e) {
    c.pending = null;
    var g = e = e.next;
    do {
      f = a(f, g.action), g = g.next;
    } while (g !== e);
    He(f, b.memoizedState) || (Ug = !0);
    b.memoizedState = f;
    null === b.baseQueue && (b.baseState = f);
    c.lastRenderedState = f;
  }
  return [f, d];
}
function hi() {}
function ii(a, b) {
  var c = N,
    d = di(),
    e = b(),
    f = !He(d.memoizedState, e);
  f && (d.memoizedState = e, Ug = !0);
  d = d.queue;
  ji(ki.bind(null, c, d, a), [a]);
  if (d.getSnapshot !== b || f || null !== P && P.memoizedState.tag & 1) {
    c.flags |= 2048;
    li(9, mi.bind(null, c, d, e, b), void 0, null);
    if (null === R) throw Error(p(349));
    0 !== (Rh & 30) || ni(c, b, e);
  }
  return e;
}
function ni(a, b, c) {
  a.flags |= 16384;
  a = {
    getSnapshot: b,
    value: c
  };
  b = N.updateQueue;
  null === b ? (b = {
    lastEffect: null,
    stores: null
  }, N.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
}
function mi(a, b, c, d) {
  b.value = c;
  b.getSnapshot = d;
  oi(b) && pi(a);
}
function ki(a, b, c) {
  return c(function () {
    oi(b) && pi(a);
  });
}
function oi(a) {
  var b = a.getSnapshot;
  a = a.value;
  try {
    var c = b();
    return !He(a, c);
  } catch (d) {
    return !0;
  }
}
function pi(a) {
  var b = Zg(a, 1);
  null !== b && mh(b, a, 1, -1);
}
function qi(a) {
  var b = ci();
  "function" === typeof a && (a = a());
  b.memoizedState = b.baseState = a;
  a = {
    pending: null,
    interleaved: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: ei,
    lastRenderedState: a
  };
  b.queue = a;
  a = a.dispatch = ri.bind(null, N, a);
  return [b.memoizedState, a];
}
function li(a, b, c, d) {
  a = {
    tag: a,
    create: b,
    destroy: c,
    deps: d,
    next: null
  };
  b = N.updateQueue;
  null === b ? (b = {
    lastEffect: null,
    stores: null
  }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
  return a;
}
function si() {
  return di().memoizedState;
}
function ti(a, b, c, d) {
  var e = ci();
  N.flags |= a;
  e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);
}
function ui(a, b, c, d) {
  var e = di();
  d = void 0 === d ? null : d;
  var f = void 0;
  if (null !== O) {
    var g = O.memoizedState;
    f = g.destroy;
    if (null !== d && Wh(d, g.deps)) {
      e.memoizedState = li(b, c, f, d);
      return;
    }
  }
  N.flags |= a;
  e.memoizedState = li(1 | b, c, f, d);
}
function vi(a, b) {
  return ti(8390656, 8, a, b);
}
function ji(a, b) {
  return ui(2048, 8, a, b);
}
function wi(a, b) {
  return ui(4, 2, a, b);
}
function xi(a, b) {
  return ui(4, 4, a, b);
}
function yi(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function () {
    b(null);
  };
  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
    b.current = null;
  };
}
function zi(a, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a]) : null;
  return ui(4, 4, yi.bind(null, b, a), c);
}
function Ai() {}
function Bi(a, b) {
  var c = di();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Wh(b, d[1])) return d[0];
  c.memoizedState = [a, b];
  return a;
}
function Ci(a, b) {
  var c = di();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Wh(b, d[1])) return d[0];
  a = a();
  c.memoizedState = [a, b];
  return a;
}
function Di(a, b, c) {
  if (0 === (Rh & 21)) return a.baseState && (a.baseState = !1, Ug = !0), a.memoizedState = c;
  He(c, b) || (c = yc(), N.lanes |= c, hh |= c, a.baseState = !0);
  return b;
}
function Ei(a, b) {
  var c = C;
  C = 0 !== c && 4 > c ? c : 4;
  a(!0);
  var d = Qh.transition;
  Qh.transition = {};
  try {
    a(!1), b();
  } finally {
    C = c, Qh.transition = d;
  }
}
function Fi() {
  return di().memoizedState;
}
function Gi(a, b, c) {
  var d = lh(a);
  c = {
    lane: d,
    action: c,
    hasEagerState: !1,
    eagerState: null,
    next: null
  };
  if (Hi(a)) Ii(b, c);else if (c = Yg(a, b, c, d), null !== c) {
    var e = L();
    mh(c, a, d, e);
    Ji(c, b, d);
  }
}
function ri(a, b, c) {
  var d = lh(a),
    e = {
      lane: d,
      action: c,
      hasEagerState: !1,
      eagerState: null,
      next: null
    };
  if (Hi(a)) Ii(b, e);else {
    var f = a.alternate;
    if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
      var g = b.lastRenderedState,
        h = f(g, c);
      e.hasEagerState = !0;
      e.eagerState = h;
      if (He(h, g)) {
        var k = b.interleaved;
        null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e);
        b.interleaved = e;
        return;
      }
    } catch (l) {} finally {}
    c = Yg(a, b, e, d);
    null !== c && (e = L(), mh(c, a, d, e), Ji(c, b, d));
  }
}
function Hi(a) {
  var b = a.alternate;
  return a === N || null !== b && b === N;
}
function Ii(a, b) {
  Th = Sh = !0;
  var c = a.pending;
  null === c ? b.next = b : (b.next = c.next, c.next = b);
  a.pending = b;
}
function Ji(a, b, c) {
  if (0 !== (c & 4194240)) {
    var d = b.lanes;
    d &= a.pendingLanes;
    c |= d;
    b.lanes = c;
    Cc(a, c);
  }
}
var ai = {
    readContext: Vg,
    useCallback: Q,
    useContext: Q,
    useEffect: Q,
    useImperativeHandle: Q,
    useInsertionEffect: Q,
    useLayoutEffect: Q,
    useMemo: Q,
    useReducer: Q,
    useRef: Q,
    useState: Q,
    useDebugValue: Q,
    useDeferredValue: Q,
    useTransition: Q,
    useMutableSource: Q,
    useSyncExternalStore: Q,
    useId: Q,
    unstable_isNewReconciler: !1
  },
  Yh = {
    readContext: Vg,
    useCallback: function useCallback(a, b) {
      ci().memoizedState = [a, void 0 === b ? null : b];
      return a;
    },
    useContext: Vg,
    useEffect: vi,
    useImperativeHandle: function useImperativeHandle(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return ti(4194308, 4, yi.bind(null, b, a), c);
    },
    useLayoutEffect: function useLayoutEffect(a, b) {
      return ti(4194308, 4, a, b);
    },
    useInsertionEffect: function useInsertionEffect(a, b) {
      return ti(4, 2, a, b);
    },
    useMemo: function useMemo(a, b) {
      var c = ci();
      b = void 0 === b ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    },
    useReducer: function useReducer(a, b, c) {
      var d = ci();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: a,
        lastRenderedState: b
      };
      d.queue = a;
      a = a.dispatch = Gi.bind(null, N, a);
      return [d.memoizedState, a];
    },
    useRef: function useRef(a) {
      var b = ci();
      a = {
        current: a
      };
      return b.memoizedState = a;
    },
    useState: qi,
    useDebugValue: Ai,
    useDeferredValue: function useDeferredValue(a) {
      return ci().memoizedState = a;
    },
    useTransition: function useTransition() {
      var a = qi(!1),
        b = a[0];
      a = Ei.bind(null, a[1]);
      ci().memoizedState = a;
      return [b, a];
    },
    useMutableSource: function useMutableSource() {},
    useSyncExternalStore: function useSyncExternalStore(a, b, c) {
      var d = N,
        e = ci();
      if (I) {
        if (void 0 === c) throw Error(p(407));
        c = c();
      } else {
        c = b();
        if (null === R) throw Error(p(349));
        0 !== (Rh & 30) || ni(d, b, c);
      }
      e.memoizedState = c;
      var f = {
        value: c,
        getSnapshot: b
      };
      e.queue = f;
      vi(ki.bind(null, d, f, a), [a]);
      d.flags |= 2048;
      li(9, mi.bind(null, d, f, c, b), void 0, null);
      return c;
    },
    useId: function useId() {
      var a = ci(),
        b = R.identifierPrefix;
      if (I) {
        var c = sg;
        var d = rg;
        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
        b = ":" + b + "R" + c;
        c = Uh++;
        0 < c && (b += "H" + c.toString(32));
        b += ":";
      } else c = Vh++, b = ":" + b + "r" + c.toString(32) + ":";
      return a.memoizedState = b;
    },
    unstable_isNewReconciler: !1
  },
  Zh = {
    readContext: Vg,
    useCallback: Bi,
    useContext: Vg,
    useEffect: ji,
    useImperativeHandle: zi,
    useInsertionEffect: wi,
    useLayoutEffect: xi,
    useMemo: Ci,
    useReducer: fi,
    useRef: si,
    useState: function useState() {
      return fi(ei);
    },
    useDebugValue: Ai,
    useDeferredValue: function useDeferredValue(a) {
      var b = di();
      return Di(b, O.memoizedState, a);
    },
    useTransition: function useTransition() {
      var a = fi(ei)[0],
        b = di().memoizedState;
      return [a, b];
    },
    useMutableSource: hi,
    useSyncExternalStore: ii,
    useId: Fi,
    unstable_isNewReconciler: !1
  },
  $h = {
    readContext: Vg,
    useCallback: Bi,
    useContext: Vg,
    useEffect: ji,
    useImperativeHandle: zi,
    useInsertionEffect: wi,
    useLayoutEffect: xi,
    useMemo: Ci,
    useReducer: gi,
    useRef: si,
    useState: function useState() {
      return gi(ei);
    },
    useDebugValue: Ai,
    useDeferredValue: function useDeferredValue(a) {
      var b = di();
      return null === O ? b.memoizedState = a : Di(b, O.memoizedState, a);
    },
    useTransition: function useTransition() {
      var a = gi(ei)[0],
        b = di().memoizedState;
      return [a, b];
    },
    useMutableSource: hi,
    useSyncExternalStore: ii,
    useId: Fi,
    unstable_isNewReconciler: !1
  };
function Ki(a, b) {
  try {
    var c = "",
      d = b;
    do {
      c += Pa(d), d = d["return"];
    } while (d);
    var e = c;
  } catch (f) {
    e = "\nError generating stack: " + f.message + "\n" + f.stack;
  }
  return {
    value: a,
    source: b,
    stack: e,
    digest: null
  };
}
function Li(a, b, c) {
  return {
    value: a,
    source: null,
    stack: null != c ? c : null,
    digest: null != b ? b : null
  };
}
function Mi(a, b) {
  try {
    console.error(b.value);
  } catch (c) {
    setTimeout(function () {
      throw c;
    });
  }
}
var Ni = "function" === typeof WeakMap ? WeakMap : Map;
function Oi(a, b, c) {
  c = ch(-1, c);
  c.tag = 3;
  c.payload = {
    element: null
  };
  var d = b.value;
  c.callback = function () {
    Pi || (Pi = !0, Qi = d);
    Mi(a, b);
  };
  return c;
}
function Ri(a, b, c) {
  c = ch(-1, c);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;
  if ("function" === typeof d) {
    var e = b.value;
    c.payload = function () {
      return d(e);
    };
    c.callback = function () {
      Mi(a, b);
    };
  }
  var f = a.stateNode;
  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    Mi(a, b);
    "function" !== typeof d && (null === Si ? Si = new Set([this]) : Si.add(this));
    var c = b.stack;
    this.componentDidCatch(b.value, {
      componentStack: null !== c ? c : ""
    });
  });
  return c;
}
function Ti(a, b, c) {
  var d = a.pingCache;
  if (null === d) {
    d = a.pingCache = new Ni();
    var e = new Set();
    d.set(b, e);
  } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));
  e.has(c) || (e.add(c), a = Ui.bind(null, a, b, c), b.then(a, a));
}
function Vi(a) {
  do {
    var b;
    if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
    if (b) return a;
    a = a["return"];
  } while (null !== a);
  return null;
}
function Wi(a, b, c, d, e) {
  if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = ch(-1, 1), b.tag = 2, dh(c, b, 1))), c.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e;
  return a;
}
var Xi = ua.ReactCurrentOwner,
  Ug = !1;
function Yi(a, b, c, d) {
  b.child = null === a ? Ch(b, null, c, d) : Bh(b, a.child, c, d);
}
function Zi(a, b, c, d, e) {
  c = c.render;
  var f = b.ref;
  Tg(b, e);
  d = Xh(a, b, c, d, f, e);
  c = bi();
  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
  I && c && vg(b);
  b.flags |= 1;
  Yi(a, b, d, e);
  return b.child;
}
function aj(a, b, c, d, e) {
  if (null === a) {
    var f = c.type;
    if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, cj(a, b, f, d, e);
    a = yh(c.type, null, d, b, b.mode, e);
    a.ref = b.ref;
    a["return"] = b;
    return b.child = a;
  }
  f = a.child;
  if (0 === (a.lanes & e)) {
    var g = f.memoizedProps;
    c = c.compare;
    c = null !== c ? c : Ie;
    if (c(g, d) && a.ref === b.ref) return $i(a, b, e);
  }
  b.flags |= 1;
  a = wh(f, d);
  a.ref = b.ref;
  a["return"] = b;
  return b.child = a;
}
function cj(a, b, c, d, e) {
  if (null !== a) {
    var f = a.memoizedProps;
    if (Ie(f, d) && a.ref === b.ref) if (Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (Ug = !0);else return b.lanes = a.lanes, $i(a, b, e);
  }
  return dj(a, b, c, d, e);
}
function ej(a, b, c) {
  var d = b.pendingProps,
    e = d.children,
    f = null !== a ? a.memoizedState : null;
  if ("hidden" === d.mode) {
    if (0 === (b.mode & 1)) b.memoizedState = {
      baseLanes: 0,
      cachePool: null,
      transitions: null
    }, G(fj, gj), gj |= c;else {
      if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
        baseLanes: a,
        cachePool: null,
        transitions: null
      }, b.updateQueue = null, G(fj, gj), gj |= a, null;
      b.memoizedState = {
        baseLanes: 0,
        cachePool: null,
        transitions: null
      };
      d = null !== f ? f.baseLanes : c;
      G(fj, gj);
      gj |= d;
    }
  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(fj, gj), gj |= d;
  Yi(a, b, e, c);
  return b.child;
}
function hj(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
}
function dj(a, b, c, d, e) {
  var f = Zf(c) ? Xf : H.current;
  f = Yf(b, f);
  Tg(b, e);
  c = Xh(a, b, c, d, f, e);
  d = bi();
  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
  I && d && vg(b);
  b.flags |= 1;
  Yi(a, b, c, e);
  return b.child;
}
function ij(a, b, c, d, e) {
  if (Zf(c)) {
    var f = !0;
    cg(b);
  } else f = !1;
  Tg(b, e);
  if (null === b.stateNode) jj(a, b), ph(b, c, d), rh(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
      h = b.memoizedProps;
    g.props = h;
    var k = g.context,
      l = c.contextType;
    "object" === typeof l && null !== l ? l = Vg(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
    var m = c.getDerivedStateFromProps,
      q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
    q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l);
    $g = !1;
    var r = b.memoizedState;
    g.state = r;
    gh(b, d, g, e);
    k = b.memoizedState;
    h !== d || r !== k || Wf.current || $g ? ("function" === typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
  } else {
    g = b.stateNode;
    bh(a, b);
    h = b.memoizedProps;
    l = b.type === b.elementType ? h : Lg(b.type, h);
    g.props = l;
    q = b.pendingProps;
    r = g.context;
    k = c.contextType;
    "object" === typeof k && null !== k ? k = Vg(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
    var y = c.getDerivedStateFromProps;
    (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k);
    $g = !1;
    r = b.memoizedState;
    g.state = r;
    gh(b, d, g, e);
    var n = b.memoizedState;
    h !== q || r !== n || Wf.current || $g ? ("function" === typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
  }
  return kj(a, b, c, d, f, e);
}
function kj(a, b, c, d, e, f) {
  hj(a, b);
  var g = 0 !== (b.flags & 128);
  if (!d && !g) return e && dg(b, c, !1), $i(a, b, f);
  d = b.stateNode;
  Xi.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.flags |= 1;
  null !== a && g ? (b.child = Bh(b, a.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a, b, h, f);
  b.memoizedState = d.state;
  e && dg(b, c, !0);
  return b.child;
}
function lj(a) {
  var b = a.stateNode;
  b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);
  Ih(a, b.containerInfo);
}
function mj(a, b, c, d, e) {
  Ig();
  Jg(e);
  b.flags |= 256;
  Yi(a, b, c, d);
  return b.child;
}
var nj = {
  dehydrated: null,
  treeContext: null,
  retryLane: 0
};
function oj(a) {
  return {
    baseLanes: a,
    cachePool: null,
    transitions: null
  };
}
function pj(a, b, c) {
  var d = b.pendingProps,
    e = M.current,
    f = !1,
    g = 0 !== (b.flags & 128),
    h;
  (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
  if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;
  G(M, e & 1);
  if (null === a) {
    Eg(b);
    a = b.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
    g = d.children;
    a = d.fallback;
    return f ? (d = b.mode, f = b.child, g = {
      mode: "hidden",
      children: g
    }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a = Ah(a, d, c, null), f["return"] = b, a["return"] = b, f.sibling = a, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a) : rj(b, g);
  }
  e = a.memoizedState;
  if (null !== e && (h = e.dehydrated, null !== h)) return sj(a, b, g, d, h, e, c);
  if (f) {
    f = d.fallback;
    g = b.mode;
    e = a.child;
    h = e.sibling;
    var k = {
      mode: "hidden",
      children: d.children
    };
    0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
    null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null), f.flags |= 2);
    f["return"] = b;
    d["return"] = b;
    d.sibling = f;
    b.child = d;
    d = f;
    f = b.child;
    g = a.child.memoizedState;
    g = null === g ? oj(c) : {
      baseLanes: g.baseLanes | c,
      cachePool: null,
      transitions: g.transitions
    };
    f.memoizedState = g;
    f.childLanes = a.childLanes & ~c;
    b.memoizedState = nj;
    return d;
  }
  f = a.child;
  a = f.sibling;
  d = wh(f, {
    mode: "visible",
    children: d.children
  });
  0 === (b.mode & 1) && (d.lanes = c);
  d["return"] = b;
  d.sibling = null;
  null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
  b.child = d;
  b.memoizedState = null;
  return d;
}
function rj(a, b) {
  b = qj({
    mode: "visible",
    children: b
  }, a.mode, 0, null);
  b["return"] = a;
  return a.child = b;
}
function tj(a, b, c, d) {
  null !== d && Jg(d);
  Bh(b, a.child, null, c);
  a = rj(b, b.pendingProps.children);
  a.flags |= 2;
  b.memoizedState = null;
  return a;
}
function sj(a, b, c, d, e, f, g) {
  if (c) {
    if (b.flags & 256) return b.flags &= -257, d = Li(Error(p(422))), tj(a, b, g, d);
    if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
    f = d.fallback;
    e = b.mode;
    d = qj({
      mode: "visible",
      children: d.children
    }, e, 0, null);
    f = Ah(f, e, g, null);
    f.flags |= 2;
    d["return"] = b;
    f["return"] = b;
    d.sibling = f;
    b.child = d;
    0 !== (b.mode & 1) && Bh(b, a.child, null, g);
    b.child.memoizedState = oj(g);
    b.memoizedState = nj;
    return f;
  }
  if (0 === (b.mode & 1)) return tj(a, b, g, null);
  if ("$!" === e.data) {
    d = e.nextSibling && e.nextSibling.dataset;
    if (d) var h = d.dgst;
    d = h;
    f = Error(p(419));
    d = Li(f, d, void 0);
    return tj(a, b, g, d);
  }
  h = 0 !== (g & a.childLanes);
  if (Ug || h) {
    d = R;
    if (null !== d) {
      switch (g & -g) {
        case 4:
          e = 2;
          break;
        case 16:
          e = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e = 32;
          break;
        case 536870912:
          e = 268435456;
          break;
        default:
          e = 0;
      }
      e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
      0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));
    }
    uj();
    d = Li(Error(p(421)));
    return tj(a, b, g, d);
  }
  if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = vj.bind(null, a), e._reactRetry = b, null;
  a = f.treeContext;
  yg = Lf(e.nextSibling);
  xg = b;
  I = !0;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
  b = rj(b, d.children);
  b.flags |= 4096;
  return b;
}
function wj(a, b, c) {
  a.lanes |= b;
  var d = a.alternate;
  null !== d && (d.lanes |= b);
  Sg(a["return"], b, c);
}
function xj(a, b, c, d, e) {
  var f = a.memoizedState;
  null === f ? a.memoizedState = {
    isBackwards: b,
    rendering: null,
    renderingStartTime: 0,
    last: d,
    tail: c,
    tailMode: e
  } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
}
function yj(a, b, c) {
  var d = b.pendingProps,
    e = d.revealOrder,
    f = d.tail;
  Yi(a, b, d.children, c);
  d = M.current;
  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {
    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {
      if (13 === a.tag) null !== a.memoizedState && wj(a, c, b);else if (19 === a.tag) wj(a, c, b);else if (null !== a.child) {
        a.child["return"] = a;
        a = a.child;
        continue;
      }
      if (a === b) break a;
      for (; null === a.sibling;) {
        if (null === a["return"] || a["return"] === b) break a;
        a = a["return"];
      }
      a.sibling["return"] = a["return"];
      a = a.sibling;
    }
    d &= 1;
  }
  G(M, d);
  if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {
    case "forwards":
      c = b.child;
      for (e = null; null !== c;) {
        a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;
      }
      c = e;
      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
      xj(b, !1, e, c, f);
      break;
    case "backwards":
      c = null;
      e = b.child;
      for (b.child = null; null !== e;) {
        a = e.alternate;
        if (null !== a && null === Mh(a)) {
          b.child = e;
          break;
        }
        a = e.sibling;
        e.sibling = c;
        c = e;
        e = a;
      }
      xj(b, !0, c, null, f);
      break;
    case "together":
      xj(b, !1, null, null, void 0);
      break;
    default:
      b.memoizedState = null;
  }
  return b.child;
}
function jj(a, b) {
  0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
}
function $i(a, b, c) {
  null !== a && (b.dependencies = a.dependencies);
  hh |= b.lanes;
  if (0 === (c & b.childLanes)) return null;
  if (null !== a && b.child !== a.child) throw Error(p(153));
  if (null !== b.child) {
    a = b.child;
    c = wh(a, a.pendingProps);
    b.child = c;
    for (c["return"] = b; null !== a.sibling;) {
      a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c["return"] = b;
    }
    c.sibling = null;
  }
  return b.child;
}
function zj(a, b, c) {
  switch (b.tag) {
    case 3:
      lj(b);
      Ig();
      break;
    case 5:
      Kh(b);
      break;
    case 1:
      Zf(b.type) && cg(b);
      break;
    case 4:
      Ih(b, b.stateNode.containerInfo);
      break;
    case 10:
      var d = b.type._context,
        e = b.memoizedProps.value;
      G(Mg, d._currentValue);
      d._currentValue = e;
      break;
    case 13:
      d = b.memoizedState;
      if (null !== d) {
        if (null !== d.dehydrated) return G(M, M.current & 1), b.flags |= 128, null;
        if (0 !== (c & b.child.childLanes)) return pj(a, b, c);
        G(M, M.current & 1);
        a = $i(a, b, c);
        return null !== a ? a.sibling : null;
      }
      G(M, M.current & 1);
      break;
    case 19:
      d = 0 !== (c & b.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d) return yj(a, b, c);
        b.flags |= 128;
      }
      e = b.memoizedState;
      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
      G(M, M.current);
      if (d) break;else return null;
    case 22:
    case 23:
      return b.lanes = 0, ej(a, b, c);
  }
  return $i(a, b, c);
}
var Aj, Bj, Cj, Dj;
Aj = function Aj(a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child["return"] = c;
      c = c.child;
      continue;
    }
    if (c === b) break;
    for (; null === c.sibling;) {
      if (null === c["return"] || c["return"] === b) return;
      c = c["return"];
    }
    c.sibling["return"] = c["return"];
    c = c.sibling;
  }
};
Bj = function Bj() {};
Cj = function Cj(a, b, c, d) {
  var e = a.memoizedProps;
  if (e !== d) {
    a = b.stateNode;
    Hh(Eh.current);
    var f = null;
    switch (c) {
      case "input":
        e = Ya(a, e);
        d = Ya(a, d);
        f = [];
        break;
      case "select":
        e = A({}, e, {
          value: void 0
        });
        d = A({}, d, {
          value: void 0
        });
        f = [];
        break;
      case "textarea":
        e = gb(a, e);
        d = gb(a, d);
        f = [];
        break;
      default:
        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
    }
    ub(c, d);
    var g;
    c = null;
    for (l in e) {
      if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
        var h = e[l];
        for (g in h) {
          h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
        }
      } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
    }
    for (l in d) {
      var k = d[l];
      h = null != e ? e[l] : void 0;
      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
        if (h) {
          for (g in h) {
            !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
          }
          for (g in k) {
            k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
          }
        } else c || (f || (f = []), f.push(l, c)), c = k;
      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
    }
    c && (f = f || []).push("style", c);
    var l = f;
    if (b.updateQueue = l) b.flags |= 4;
  }
};
Dj = function Dj(a, b, c, d) {
  c !== d && (b.flags |= 4);
};
function Ej(a, b) {
  if (!I) switch (a.tailMode) {
    case "hidden":
      b = a.tail;
      for (var c = null; null !== b;) {
        null !== b.alternate && (c = b), b = b.sibling;
      }
      null === c ? a.tail = null : c.sibling = null;
      break;
    case "collapsed":
      c = a.tail;
      for (var d = null; null !== c;) {
        null !== c.alternate && (d = c), c = c.sibling;
      }
      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
  }
}
function S(a) {
  var b = null !== a.alternate && a.alternate.child === a.child,
    c = 0,
    d = 0;
  if (b) for (var e = a.child; null !== e;) {
    c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e["return"] = a, e = e.sibling;
  } else for (e = a.child; null !== e;) {
    c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e["return"] = a, e = e.sibling;
  }
  a.subtreeFlags |= d;
  a.childLanes = c;
  return b;
}
function Fj(a, b, c) {
  var d = b.pendingProps;
  wg(b);
  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S(b), null;
    case 1:
      return Zf(b.type) && $f(), S(b), null;
    case 3:
      d = b.stateNode;
      Jh();
      E(Wf);
      E(H);
      Oh();
      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
      if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null));
      Bj(a, b);
      S(b);
      return null;
    case 5:
      Lh(b);
      var e = Hh(Gh.current);
      c = b.type;
      if (null !== a && null != b.stateNode) Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {
        if (!d) {
          if (null === b.stateNode) throw Error(p(166));
          S(b);
          return null;
        }
        a = Hh(Eh.current);
        if (Gg(b)) {
          d = b.stateNode;
          c = b.type;
          var f = b.memoizedProps;
          d[Of] = b;
          d[Pf] = f;
          a = 0 !== (b.mode & 1);
          switch (c) {
            case "dialog":
              D("cancel", d);
              D("close", d);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d);
              break;
            case "video":
            case "audio":
              for (e = 0; e < lf.length; e++) {
                D(lf[e], d);
              }
              break;
            case "source":
              D("error", d);
              break;
            case "img":
            case "image":
            case "link":
              D("error", d);
              D("load", d);
              break;
            case "details":
              D("toggle", d);
              break;
            case "input":
              Za(d, f);
              D("invalid", d);
              break;
            case "select":
              d._wrapperState = {
                wasMultiple: !!f.multiple
              };
              D("invalid", d);
              break;
            case "textarea":
              hb(d, f), D("invalid", d);
          }
          ub(c, f);
          e = null;
          for (var g in f) {
            if (f.hasOwnProperty(g)) {
              var h = f[g];
              "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
            }
          }
          switch (c) {
            case "input":
              Va(d);
              db(d, f, !0);
              break;
            case "textarea":
              Va(d);
              jb(d);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f.onClick && (d.onclick = Bf);
          }
          d = e;
          b.updateQueue = d;
          null !== d && (b.flags |= 4);
        } else {
          g = 9 === e.nodeType ? e : e.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
            is: d.is
          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
          a[Of] = b;
          a[Pf] = d;
          Aj(a, b, !1, !1);
          b.stateNode = a;
          a: {
            g = vb(c, d);
            switch (c) {
              case "dialog":
                D("cancel", a);
                D("close", a);
                e = d;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a);
                e = d;
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++) {
                  D(lf[e], a);
                }
                e = d;
                break;
              case "source":
                D("error", a);
                e = d;
                break;
              case "img":
              case "image":
              case "link":
                D("error", a);
                D("load", a);
                e = d;
                break;
              case "details":
                D("toggle", a);
                e = d;
                break;
              case "input":
                Za(a, d);
                e = Ya(a, d);
                D("invalid", a);
                break;
              case "option":
                e = d;
                break;
              case "select":
                a._wrapperState = {
                  wasMultiple: !!d.multiple
                };
                e = A({}, d, {
                  value: void 0
                });
                D("invalid", a);
                break;
              case "textarea":
                hb(a, d);
                e = gb(a, d);
                D("invalid", a);
                break;
              default:
                e = d;
            }
            ub(c, e);
            h = e;
            for (f in h) {
              if (h.hasOwnProperty(f)) {
                var k = h[f];
                "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
              }
            }
            switch (c) {
              case "input":
                Va(a);
                db(a, d, !1);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d.value && a.setAttribute("value", "" + Sa(d.value));
                break;
              case "select":
                a.multiple = !!d.multiple;
                f = d.value;
                null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                break;
              default:
                "function" === typeof e.onClick && (a.onclick = Bf);
            }
            switch (c) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d = !!d.autoFocus;
                break a;
              case "img":
                d = !0;
                break a;
              default:
                d = !1;
            }
          }
          d && (b.flags |= 4);
        }
        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
      }
      S(b);
      return null;
    case 6:
      if (a && null != b.stateNode) Dj(a, b, a.memoizedProps, d);else {
        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
        c = Hh(Gh.current);
        Hh(Eh.current);
        if (Gg(b)) {
          d = b.stateNode;
          c = b.memoizedProps;
          d[Of] = b;
          if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {
            case 3:
              Af(d.nodeValue, c, 0 !== (a.mode & 1));
              break;
            case 5:
              !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
          }
          f && (b.flags |= 4);
        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
      }
      S(b);
      return null;
    case 13:
      E(M);
      d = b.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {
          if (null === a) {
            if (!f) throw Error(p(318));
            f = b.memoizedState;
            f = null !== f ? f.dehydrated : null;
            if (!f) throw Error(p(317));
            f[Of] = b;
          } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
          S(b);
          f = !1;
        } else null !== zg && (Gj(zg), zg = null), f = !0;
        if (!f) return b.flags & 65536 ? b : null;
      }
      if (0 !== (b.flags & 128)) return b.lanes = c, b;
      d = null !== d;
      d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
      null !== b.updateQueue && (b.flags |= 4);
      S(b);
      return null;
    case 4:
      return Jh(), Bj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
    case 10:
      return Rg(b.type._context), S(b), null;
    case 17:
      return Zf(b.type) && $f(), S(b), null;
    case 19:
      E(M);
      f = b.memoizedState;
      if (null === f) return S(b), null;
      d = 0 !== (b.flags & 128);
      g = f.rendering;
      if (null === g) {
        if (d) Ej(f, !1);else {
          if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {
            g = Mh(a);
            if (null !== g) {
              b.flags |= 128;
              Ej(f, !1);
              d = g.updateQueue;
              null !== d && (b.updateQueue = d, b.flags |= 4);
              b.subtreeFlags = 0;
              d = c;
              for (c = b.child; null !== c;) {
                f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                  lanes: a.lanes,
                  firstContext: a.firstContext
                }), c = c.sibling;
              }
              G(M, M.current & 1 | 2);
              return b.child;
            }
            a = a.sibling;
          }
          null !== f.tail && B() > Hj && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
        }
      } else {
        if (!d) if (a = Mh(g), null !== a) {
          if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
        } else 2 * B() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
        f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
      }
      if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = M.current, G(M, d ? c & 1 | 2 : c & 1), b;
      S(b);
      return null;
    case 22:
    case 23:
      return Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (gj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p(156, b.tag));
}
function Jj(a, b) {
  wg(b);
  switch (b.tag) {
    case 1:
      return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
    case 3:
      return Jh(), E(Wf), E(H), Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
    case 5:
      return Lh(b), null;
    case 13:
      E(M);
      a = b.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b.alternate) throw Error(p(340));
        Ig();
      }
      a = b.flags;
      return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
    case 19:
      return E(M), null;
    case 4:
      return Jh(), null;
    case 10:
      return Rg(b.type._context), null;
    case 22:
    case 23:
      return Ij(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Kj = !1,
  U = !1,
  Lj = "function" === typeof WeakSet ? WeakSet : Set,
  V = null;
function Mj(a, b) {
  var c = a.ref;
  if (null !== c) if ("function" === typeof c) try {
    c(null);
  } catch (d) {
    W(a, b, d);
  } else c.current = null;
}
function Nj(a, b, c) {
  try {
    c();
  } catch (d) {
    W(a, b, d);
  }
}
var Oj = !1;
function Pj(a, b) {
  Cf = dd;
  a = Me();
  if (Ne(a)) {
    if ("selectionStart" in a) var c = {
      start: a.selectionStart,
      end: a.selectionEnd
    };else a: {
      c = (c = a.ownerDocument) && c.defaultView || window;
      var d = c.getSelection && c.getSelection();
      if (d && 0 !== d.rangeCount) {
        c = d.anchorNode;
        var e = d.anchorOffset,
          f = d.focusNode;
        d = d.focusOffset;
        try {
          c.nodeType, f.nodeType;
        } catch (F) {
          c = null;
          break a;
        }
        var g = 0,
          h = -1,
          k = -1,
          l = 0,
          m = 0,
          q = a,
          r = null;
        b: for (;;) {
          for (var y;;) {
            q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
            q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
            3 === q.nodeType && (g += q.nodeValue.length);
            if (null === (y = q.firstChild)) break;
            r = q;
            q = y;
          }
          for (;;) {
            if (q === a) break b;
            r === c && ++l === e && (h = g);
            r === f && ++m === d && (k = g);
            if (null !== (y = q.nextSibling)) break;
            q = r;
            r = q.parentNode;
          }
          q = y;
        }
        c = -1 === h || -1 === k ? null : {
          start: h,
          end: k
        };
      } else c = null;
    }
    c = c || {
      start: 0,
      end: 0
    };
  } else c = null;
  Df = {
    focusedElem: a,
    selectionRange: c
  };
  dd = !1;
  for (V = b; null !== V;) {
    if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a["return"] = b, V = a;else for (; null !== V;) {
      b = V;
      try {
        var n = b.alternate;
        if (0 !== (b.flags & 1024)) switch (b.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (null !== n) {
              var t = n.memoizedProps,
                J = n.memoizedState,
                x = b.stateNode,
                w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Lg(b.type, t), J);
              x.__reactInternalSnapshotBeforeUpdate = w;
            }
            break;
          case 3:
            var u = b.stateNode.containerInfo;
            1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error(p(163));
        }
      } catch (F) {
        W(b, b["return"], F);
      }
      a = b.sibling;
      if (null !== a) {
        a["return"] = b["return"];
        V = a;
        break;
      }
      V = b["return"];
    }
  }
  n = Oj;
  Oj = !1;
  return n;
}
function Qj(a, b, c) {
  var d = b.updateQueue;
  d = null !== d ? d.lastEffect : null;
  if (null !== d) {
    var e = d = d.next;
    do {
      if ((e.tag & a) === a) {
        var f = e.destroy;
        e.destroy = void 0;
        void 0 !== f && Nj(b, c, f);
      }
      e = e.next;
    } while (e !== d);
  }
}
function Rj(a, b) {
  b = b.updateQueue;
  b = null !== b ? b.lastEffect : null;
  if (null !== b) {
    var c = b = b.next;
    do {
      if ((c.tag & a) === a) {
        var d = c.create;
        c.destroy = d();
      }
      c = c.next;
    } while (c !== b);
  }
}
function Sj(a) {
  var b = a.ref;
  if (null !== b) {
    var c = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c;
        break;
      default:
        a = c;
    }
    "function" === typeof b ? b(a) : b.current = a;
  }
}
function Tj(a) {
  var b = a.alternate;
  null !== b && (a.alternate = null, Tj(b));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
  a.stateNode = null;
  a["return"] = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Uj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Vj(a) {
  a: for (;;) {
    for (; null === a.sibling;) {
      if (null === a["return"] || Uj(a["return"])) return null;
      a = a["return"];
    }
    a.sibling["return"] = a["return"];
    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {
      if (a.flags & 2) continue a;
      if (null === a.child || 4 === a.tag) continue a;else a.child["return"] = a, a = a.child;
    }
    if (!(a.flags & 2)) return a.stateNode;
  }
}
function Wj(a, b, c) {
  var d = a.tag;
  if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) {
    Wj(a, b, c), a = a.sibling;
  }
}
function Xj(a, b, c) {
  var d = a.tag;
  if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Xj(a, b, c), a = a.sibling; null !== a;) {
    Xj(a, b, c), a = a.sibling;
  }
}
var X = null,
  Yj = !1;
function Zj(a, b, c) {
  for (c = c.child; null !== c;) {
    ak(a, b, c), c = c.sibling;
  }
}
function ak(a, b, c) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
    lc.onCommitFiberUnmount(kc, c);
  } catch (h) {}
  switch (c.tag) {
    case 5:
      U || Mj(c, b);
    case 6:
      var d = X,
        e = Yj;
      X = null;
      Zj(a, b, c);
      X = d;
      Yj = e;
      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
      break;
    case 18:
      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
      break;
    case 4:
      d = X;
      e = Yj;
      X = c.stateNode.containerInfo;
      Yj = !0;
      Zj(a, b, c);
      X = d;
      Yj = e;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
        e = d = d.next;
        do {
          var f = e,
            g = f.destroy;
          f = f.tag;
          void 0 !== g && (0 !== (f & 2) ? Nj(c, b, g) : 0 !== (f & 4) && Nj(c, b, g));
          e = e.next;
        } while (e !== d);
      }
      Zj(a, b, c);
      break;
    case 1:
      if (!U && (Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
      } catch (h) {
        W(c, b, h);
      }
      Zj(a, b, c);
      break;
    case 21:
      Zj(a, b, c);
      break;
    case 22:
      c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Zj(a, b, c), U = d) : Zj(a, b, c);
      break;
    default:
      Zj(a, b, c);
  }
}
function bk(a) {
  var b = a.updateQueue;
  if (null !== b) {
    a.updateQueue = null;
    var c = a.stateNode;
    null === c && (c = a.stateNode = new Lj());
    b.forEach(function (b) {
      var d = ck.bind(null, a, b);
      c.has(b) || (c.add(b), b.then(d, d));
    });
  }
}
function dk(a, b) {
  var c = b.deletions;
  if (null !== c) for (var d = 0; d < c.length; d++) {
    var e = c[d];
    try {
      var f = a,
        g = b,
        h = g;
      a: for (; null !== h;) {
        switch (h.tag) {
          case 5:
            X = h.stateNode;
            Yj = !1;
            break a;
          case 3:
            X = h.stateNode.containerInfo;
            Yj = !0;
            break a;
          case 4:
            X = h.stateNode.containerInfo;
            Yj = !0;
            break a;
        }
        h = h["return"];
      }
      if (null === X) throw Error(p(160));
      ak(f, g, e);
      X = null;
      Yj = !1;
      var k = e.alternate;
      null !== k && (k["return"] = null);
      e["return"] = null;
    } catch (l) {
      W(e, b, l);
    }
  }
  if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) {
    ek(b, a), b = b.sibling;
  }
}
function ek(a, b) {
  var c = a.alternate,
    d = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      dk(b, a);
      fk(a);
      if (d & 4) {
        try {
          Qj(3, a, a["return"]), Rj(3, a);
        } catch (t) {
          W(a, a["return"], t);
        }
        try {
          Qj(5, a, a["return"]);
        } catch (t) {
          W(a, a["return"], t);
        }
      }
      break;
    case 1:
      dk(b, a);
      fk(a);
      d & 512 && null !== c && Mj(c, c["return"]);
      break;
    case 5:
      dk(b, a);
      fk(a);
      d & 512 && null !== c && Mj(c, c["return"]);
      if (a.flags & 32) {
        var e = a.stateNode;
        try {
          ob(e, "");
        } catch (t) {
          W(a, a["return"], t);
        }
      }
      if (d & 4 && (e = a.stateNode, null != e)) {
        var f = a.memoizedProps,
          g = null !== c ? c.memoizedProps : f,
          h = a.type,
          k = a.updateQueue;
        a.updateQueue = null;
        if (null !== k) try {
          "input" === h && "radio" === f.type && null != f.name && ab(e, f);
          vb(h, g);
          var l = vb(h, f);
          for (g = 0; g < k.length; g += 2) {
            var m = k[g],
              q = k[g + 1];
            "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
          }
          switch (h) {
            case "input":
              bb(e, f);
              break;
            case "textarea":
              ib(e, f);
              break;
            case "select":
              var r = e._wrapperState.wasMultiple;
              e._wrapperState.wasMultiple = !!f.multiple;
              var y = f.value;
              null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
          }
          e[Pf] = f;
        } catch (t) {
          W(a, a["return"], t);
        }
      }
      break;
    case 6:
      dk(b, a);
      fk(a);
      if (d & 4) {
        if (null === a.stateNode) throw Error(p(162));
        e = a.stateNode;
        f = a.memoizedProps;
        try {
          e.nodeValue = f;
        } catch (t) {
          W(a, a["return"], t);
        }
      }
      break;
    case 3:
      dk(b, a);
      fk(a);
      if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
        bd(b.containerInfo);
      } catch (t) {
        W(a, a["return"], t);
      }
      break;
    case 4:
      dk(b, a);
      fk(a);
      break;
    case 13:
      dk(b, a);
      fk(a);
      e = a.child;
      e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B()));
      d & 4 && bk(a);
      break;
    case 22:
      m = null !== c && null !== c.memoizedState;
      a.mode & 1 ? (U = (l = U) || m, dk(b, a), U = l) : dk(b, a);
      fk(a);
      if (d & 8192) {
        l = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {
          for (q = V = m; null !== V;) {
            r = V;
            y = r.child;
            switch (r.tag) {
              case 0:
              case 11:
              case 14:
              case 15:
                Qj(4, r, r["return"]);
                break;
              case 1:
                Mj(r, r["return"]);
                var n = r.stateNode;
                if ("function" === typeof n.componentWillUnmount) {
                  d = r;
                  c = r["return"];
                  try {
                    b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                  } catch (t) {
                    W(d, c, t);
                  }
                }
                break;
              case 5:
                Mj(r, r["return"]);
                break;
              case 22:
                if (null !== r.memoizedState) {
                  hk(q);
                  continue;
                }
            }
            null !== y ? (y["return"] = r, V = y) : hk(q);
          }
          m = m.sibling;
        }
        a: for (m = null, q = a;;) {
          if (5 === q.tag) {
            if (null === m) {
              m = q;
              try {
                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
              } catch (t) {
                W(a, a["return"], t);
              }
            }
          } else if (6 === q.tag) {
            if (null === m) try {
              q.stateNode.nodeValue = l ? "" : q.memoizedProps;
            } catch (t) {
              W(a, a["return"], t);
            }
          } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
            q.child["return"] = q;
            q = q.child;
            continue;
          }
          if (q === a) break a;
          for (; null === q.sibling;) {
            if (null === q["return"] || q["return"] === a) break a;
            m === q && (m = null);
            q = q["return"];
          }
          m === q && (m = null);
          q.sibling["return"] = q["return"];
          q = q.sibling;
        }
      }
      break;
    case 19:
      dk(b, a);
      fk(a);
      d & 4 && bk(a);
      break;
    case 21:
      break;
    default:
      dk(b, a), fk(a);
  }
}
function fk(a) {
  var b = a.flags;
  if (b & 2) {
    try {
      a: {
        for (var c = a["return"]; null !== c;) {
          if (Uj(c)) {
            var d = c;
            break a;
          }
          c = c["return"];
        }
        throw Error(p(160));
      }
      switch (d.tag) {
        case 5:
          var e = d.stateNode;
          d.flags & 32 && (ob(e, ""), d.flags &= -33);
          var f = Vj(a);
          Xj(a, f, e);
          break;
        case 3:
        case 4:
          var g = d.stateNode.containerInfo,
            h = Vj(a);
          Wj(a, h, g);
          break;
        default:
          throw Error(p(161));
      }
    } catch (k) {
      W(a, a["return"], k);
    }
    a.flags &= -3;
  }
  b & 4096 && (a.flags &= -4097);
}
function ik(a, b, c) {
  V = a;
  jk(a, b, c);
}
function jk(a, b, c) {
  for (var d = 0 !== (a.mode & 1); null !== V;) {
    var e = V,
      f = e.child;
    if (22 === e.tag && d) {
      var g = null !== e.memoizedState || Kj;
      if (!g) {
        var h = e.alternate,
          k = null !== h && null !== h.memoizedState || U;
        h = Kj;
        var l = U;
        Kj = g;
        if ((U = k) && !l) for (V = e; null !== V;) {
          g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k["return"] = g, V = k) : kk(e);
        }
        for (; null !== f;) {
          V = f, jk(f, b, c), f = f.sibling;
        }
        V = e;
        Kj = h;
        U = l;
      }
      lk(a, b, c);
    } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f["return"] = e, V = f) : lk(a, b, c);
  }
}
function lk(a) {
  for (; null !== V;) {
    var b = V;
    if (0 !== (b.flags & 8772)) {
      var c = b.alternate;
      try {
        if (0 !== (b.flags & 8772)) switch (b.tag) {
          case 0:
          case 11:
          case 15:
            U || Rj(5, b);
            break;
          case 1:
            var d = b.stateNode;
            if (b.flags & 4 && !U) if (null === c) d.componentDidMount();else {
              var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);
              d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
            }
            var f = b.updateQueue;
            null !== f && ih(b, f, d);
            break;
          case 3:
            var g = b.updateQueue;
            if (null !== g) {
              c = null;
              if (null !== b.child) switch (b.child.tag) {
                case 5:
                  c = b.child.stateNode;
                  break;
                case 1:
                  c = b.child.stateNode;
              }
              ih(b, g, c);
            }
            break;
          case 5:
            var h = b.stateNode;
            if (null === c && b.flags & 4) {
              c = h;
              var k = b.memoizedProps;
              switch (b.type) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  k.autoFocus && c.focus();
                  break;
                case "img":
                  k.src && (c.src = k.src);
              }
            }
            break;
          case 6:
            break;
          case 4:
            break;
          case 12:
            break;
          case 13:
            if (null === b.memoizedState) {
              var l = b.alternate;
              if (null !== l) {
                var m = l.memoizedState;
                if (null !== m) {
                  var q = m.dehydrated;
                  null !== q && bd(q);
                }
              }
            }
            break;
          case 19:
          case 17:
          case 21:
          case 22:
          case 23:
          case 25:
            break;
          default:
            throw Error(p(163));
        }
        U || b.flags & 512 && Sj(b);
      } catch (r) {
        W(b, b["return"], r);
      }
    }
    if (b === a) {
      V = null;
      break;
    }
    c = b.sibling;
    if (null !== c) {
      c["return"] = b["return"];
      V = c;
      break;
    }
    V = b["return"];
  }
}
function hk(a) {
  for (; null !== V;) {
    var b = V;
    if (b === a) {
      V = null;
      break;
    }
    var c = b.sibling;
    if (null !== c) {
      c["return"] = b["return"];
      V = c;
      break;
    }
    V = b["return"];
  }
}
function kk(a) {
  for (; null !== V;) {
    var b = V;
    try {
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
          var c = b["return"];
          try {
            Rj(4, b);
          } catch (k) {
            W(b, c, k);
          }
          break;
        case 1:
          var d = b.stateNode;
          if ("function" === typeof d.componentDidMount) {
            var e = b["return"];
            try {
              d.componentDidMount();
            } catch (k) {
              W(b, e, k);
            }
          }
          var f = b["return"];
          try {
            Sj(b);
          } catch (k) {
            W(b, f, k);
          }
          break;
        case 5:
          var g = b["return"];
          try {
            Sj(b);
          } catch (k) {
            W(b, g, k);
          }
      }
    } catch (k) {
      W(b, b["return"], k);
    }
    if (b === a) {
      V = null;
      break;
    }
    var h = b.sibling;
    if (null !== h) {
      h["return"] = b["return"];
      V = h;
      break;
    }
    V = b["return"];
  }
}
var mk = Math.ceil,
  nk = ua.ReactCurrentDispatcher,
  ok = ua.ReactCurrentOwner,
  pk = ua.ReactCurrentBatchConfig,
  K = 0,
  R = null,
  Y = null,
  Z = 0,
  gj = 0,
  fj = Uf(0),
  T = 0,
  qk = null,
  hh = 0,
  rk = 0,
  sk = 0,
  tk = null,
  uk = null,
  gk = 0,
  Hj = Infinity,
  vk = null,
  Pi = !1,
  Qi = null,
  Si = null,
  wk = !1,
  xk = null,
  yk = 0,
  zk = 0,
  Ak = null,
  Bk = -1,
  Ck = 0;
function L() {
  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
}
function lh(a) {
  if (0 === (a.mode & 1)) return 1;
  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
  if (null !== Kg.transition) return 0 === Ck && (Ck = yc()), Ck;
  a = C;
  if (0 !== a) return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function mh(a, b, c, d) {
  if (50 < zk) throw zk = 0, Ak = null, Error(p(185));
  Ac(a, c, d);
  if (0 === (K & 2) || a !== R) a === R && (0 === (K & 2) && (rk |= c), 4 === T && Dk(a, Z)), Ek(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Hj = B() + 500, fg && jg());
}
function Ek(a, b) {
  var c = a.callbackNode;
  wc(a, b);
  var d = uc(a, a === R ? Z : 0);
  if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {
    null != c && bc(c);
    if (1 === b) 0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function () {
      0 === (K & 6) && jg();
    }), c = null;else {
      switch (Dc(d)) {
        case 1:
          c = fc;
          break;
        case 4:
          c = gc;
          break;
        case 16:
          c = hc;
          break;
        case 536870912:
          c = jc;
          break;
        default:
          c = hc;
      }
      c = Gk(c, Hk.bind(null, a));
    }
    a.callbackPriority = b;
    a.callbackNode = c;
  }
}
function Hk(a, b) {
  Bk = -1;
  Ck = 0;
  if (0 !== (K & 6)) throw Error(p(327));
  var c = a.callbackNode;
  if (Ik() && a.callbackNode !== c) return null;
  var d = uc(a, a === R ? Z : 0);
  if (0 === d) return null;
  if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Jk(a, d);else {
    b = d;
    var e = K;
    K |= 2;
    var f = Kk();
    if (R !== a || Z !== b) vk = null, Hj = B() + 500, Lk(a, b);
    do {
      try {
        Mk();
        break;
      } catch (h) {
        Nk(a, h);
      }
    } while (1);
    Qg();
    nk.current = f;
    K = e;
    null !== Y ? b = 0 : (R = null, Z = 0, b = T);
  }
  if (0 !== b) {
    2 === b && (e = xc(a), 0 !== e && (d = e, b = Ok(a, e)));
    if (1 === b) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;
    if (6 === b) Dk(a, d);else {
      e = a.current.alternate;
      if (0 === (d & 30) && !Pk(e) && (b = Jk(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Ok(a, f))), 1 === b)) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;
      a.finishedWork = e;
      a.finishedLanes = d;
      switch (b) {
        case 0:
        case 1:
          throw Error(p(345));
        case 2:
          Qk(a, uk, vk);
          break;
        case 3:
          Dk(a, d);
          if ((d & 130023424) === d && (b = gk + 500 - B(), 10 < b)) {
            if (0 !== uc(a, 0)) break;
            e = a.suspendedLanes;
            if ((e & d) !== d) {
              L();
              a.pingedLanes |= a.suspendedLanes & e;
              break;
            }
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 4:
          Dk(a, d);
          if ((d & 4194240) === d) break;
          b = a.eventTimes;
          for (e = -1; 0 < d;) {
            var g = 31 - oc(d);
            f = 1 << g;
            g = b[g];
            g > e && (e = g);
            d &= ~f;
          }
          d = e;
          d = B() - d;
          d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;
          if (10 < d) {
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 5:
          Qk(a, uk, vk);
          break;
        default:
          throw Error(p(329));
      }
    }
  }
  Ek(a, B());
  return a.callbackNode === c ? Hk.bind(null, a) : null;
}
function Ok(a, b) {
  var c = tk;
  a.current.memoizedState.isDehydrated && (Lk(a, b).flags |= 256);
  a = Jk(a, b);
  2 !== a && (b = uk, uk = c, null !== b && Gj(b));
  return a;
}
function Gj(a) {
  null === uk ? uk = a : uk.push.apply(uk, a);
}
function Pk(a) {
  for (var b = a;;) {
    if (b.flags & 16384) {
      var c = b.updateQueue;
      if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
        var e = c[d],
          f = e.getSnapshot;
        e = e.value;
        try {
          if (!He(f(), e)) return !1;
        } catch (g) {
          return !1;
        }
      }
    }
    c = b.child;
    if (b.subtreeFlags & 16384 && null !== c) c["return"] = b, b = c;else {
      if (b === a) break;
      for (; null === b.sibling;) {
        if (null === b["return"] || b["return"] === a) return !0;
        b = b["return"];
      }
      b.sibling["return"] = b["return"];
      b = b.sibling;
    }
  }
  return !0;
}
function Dk(a, b) {
  b &= ~sk;
  b &= ~rk;
  a.suspendedLanes |= b;
  a.pingedLanes &= ~b;
  for (a = a.expirationTimes; 0 < b;) {
    var c = 31 - oc(b),
      d = 1 << c;
    a[c] = -1;
    b &= ~d;
  }
}
function Fk(a) {
  if (0 !== (K & 6)) throw Error(p(327));
  Ik();
  var b = uc(a, 0);
  if (0 === (b & 1)) return Ek(a, B()), null;
  var c = Jk(a, b);
  if (0 !== a.tag && 2 === c) {
    var d = xc(a);
    0 !== d && (b = d, c = Ok(a, d));
  }
  if (1 === c) throw c = qk, Lk(a, 0), Dk(a, b), Ek(a, B()), c;
  if (6 === c) throw Error(p(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b;
  Qk(a, uk, vk);
  Ek(a, B());
  return null;
}
function Rk(a, b) {
  var c = K;
  K |= 1;
  try {
    return a(b);
  } finally {
    K = c, 0 === K && (Hj = B() + 500, fg && jg());
  }
}
function Sk(a) {
  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
  var b = K;
  K |= 1;
  var c = pk.transition,
    d = C;
  try {
    if (pk.transition = null, C = 1, a) return a();
  } finally {
    C = d, pk.transition = c, K = b, 0 === (K & 6) && jg();
  }
}
function Ij() {
  gj = fj.current;
  E(fj);
}
function Lk(a, b) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c = a.timeoutHandle;
  -1 !== c && (a.timeoutHandle = -1, Gf(c));
  if (null !== Y) for (c = Y["return"]; null !== c;) {
    var d = c;
    wg(d);
    switch (d.tag) {
      case 1:
        d = d.type.childContextTypes;
        null !== d && void 0 !== d && $f();
        break;
      case 3:
        Jh();
        E(Wf);
        E(H);
        Oh();
        break;
      case 5:
        Lh(d);
        break;
      case 4:
        Jh();
        break;
      case 13:
        E(M);
        break;
      case 19:
        E(M);
        break;
      case 10:
        Rg(d.type._context);
        break;
      case 22:
      case 23:
        Ij();
    }
    c = c["return"];
  }
  R = a;
  Y = a = wh(a.current, null);
  Z = gj = b;
  T = 0;
  qk = null;
  sk = rk = hh = 0;
  uk = tk = null;
  if (null !== Wg) {
    for (b = 0; b < Wg.length; b++) {
      if (c = Wg[b], d = c.interleaved, null !== d) {
        c.interleaved = null;
        var e = d.next,
          f = c.pending;
        if (null !== f) {
          var g = f.next;
          f.next = e;
          d.next = g;
        }
        c.pending = d;
      }
    }
    Wg = null;
  }
  return a;
}
function Nk(a, b) {
  do {
    var c = Y;
    try {
      Qg();
      Ph.current = ai;
      if (Sh) {
        for (var d = N.memoizedState; null !== d;) {
          var e = d.queue;
          null !== e && (e.pending = null);
          d = d.next;
        }
        Sh = !1;
      }
      Rh = 0;
      P = O = N = null;
      Th = !1;
      Uh = 0;
      ok.current = null;
      if (null === c || null === c["return"]) {
        T = 1;
        qk = b;
        Y = null;
        break;
      }
      a: {
        var f = a,
          g = c["return"],
          h = c,
          k = b;
        b = Z;
        h.flags |= 32768;
        if (null !== k && "object" === typeof k && "function" === typeof k.then) {
          var l = k,
            m = h,
            q = m.tag;
          if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
            var r = m.alternate;
            r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
          }
          var y = Vi(g);
          if (null !== y) {
            y.flags &= -257;
            Wi(y, g, h, f, b);
            y.mode & 1 && Ti(f, l, b);
            b = y;
            k = l;
            var n = b.updateQueue;
            if (null === n) {
              var t = new Set();
              t.add(k);
              b.updateQueue = t;
            } else n.add(k);
            break a;
          } else {
            if (0 === (b & 1)) {
              Ti(f, l, b);
              uj();
              break a;
            }
            k = Error(p(426));
          }
        } else if (I && h.mode & 1) {
          var J = Vi(g);
          if (null !== J) {
            0 === (J.flags & 65536) && (J.flags |= 256);
            Wi(J, g, h, f, b);
            Jg(Ki(k, h));
            break a;
          }
        }
        f = k = Ki(k, h);
        4 !== T && (T = 2);
        null === tk ? tk = [f] : tk.push(f);
        f = g;
        do {
          switch (f.tag) {
            case 3:
              f.flags |= 65536;
              b &= -b;
              f.lanes |= b;
              var x = Oi(f, k, b);
              fh(f, x);
              break a;
            case 1:
              h = k;
              var w = f.type,
                u = f.stateNode;
              if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {
                f.flags |= 65536;
                b &= -b;
                f.lanes |= b;
                var F = Ri(f, h, b);
                fh(f, F);
                break a;
              }
          }
          f = f["return"];
        } while (null !== f);
      }
      Tk(c);
    } catch (na) {
      b = na;
      Y === c && null !== c && (Y = c = c["return"]);
      continue;
    }
    break;
  } while (1);
}
function Kk() {
  var a = nk.current;
  nk.current = ai;
  return null === a ? ai : a;
}
function uj() {
  if (0 === T || 3 === T || 2 === T) T = 4;
  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
}
function Jk(a, b) {
  var c = K;
  K |= 2;
  var d = Kk();
  if (R !== a || Z !== b) vk = null, Lk(a, b);
  do {
    try {
      Uk();
      break;
    } catch (e) {
      Nk(a, e);
    }
  } while (1);
  Qg();
  K = c;
  nk.current = d;
  if (null !== Y) throw Error(p(261));
  R = null;
  Z = 0;
  return T;
}
function Uk() {
  for (; null !== Y;) {
    Vk(Y);
  }
}
function Mk() {
  for (; null !== Y && !cc();) {
    Vk(Y);
  }
}
function Vk(a) {
  var b = Wk(a.alternate, a, gj);
  a.memoizedProps = a.pendingProps;
  null === b ? Tk(a) : Y = b;
  ok.current = null;
}
function Tk(a) {
  var b = a;
  do {
    var c = b.alternate;
    a = b["return"];
    if (0 === (b.flags & 32768)) {
      if (c = Fj(c, b, gj), null !== c) {
        Y = c;
        return;
      }
    } else {
      c = Jj(c, b);
      if (null !== c) {
        c.flags &= 32767;
        Y = c;
        return;
      }
      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {
        T = 6;
        Y = null;
        return;
      }
    }
    b = b.sibling;
    if (null !== b) {
      Y = b;
      return;
    }
    Y = b = a;
  } while (null !== b);
  0 === T && (T = 5);
}
function Qk(a, b, c) {
  var d = C,
    e = pk.transition;
  try {
    pk.transition = null, C = 1, Xk(a, b, c, d);
  } finally {
    pk.transition = e, C = d;
  }
  return null;
}
function Xk(a, b, c, d) {
  do {
    Ik();
  } while (null !== xk);
  if (0 !== (K & 6)) throw Error(p(327));
  c = a.finishedWork;
  var e = a.finishedLanes;
  if (null === c) return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c === a.current) throw Error(p(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f = c.lanes | c.childLanes;
  Bc(a, f);
  a === R && (Y = R = null, Z = 0);
  0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = !0, Gk(hc, function () {
    Ik();
    return null;
  }));
  f = 0 !== (c.flags & 15990);
  if (0 !== (c.subtreeFlags & 15990) || f) {
    f = pk.transition;
    pk.transition = null;
    var g = C;
    C = 1;
    var h = K;
    K |= 4;
    ok.current = null;
    Pj(a, c);
    ek(c, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c;
    ik(c, a, e);
    dc();
    K = h;
    C = g;
    pk.transition = f;
  } else a.current = c;
  wk && (wk = !1, xk = a, yk = e);
  f = a.pendingLanes;
  0 === f && (Si = null);
  mc(c.stateNode, d);
  Ek(a, B());
  if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) {
    e = b[c], d(e.value, {
      componentStack: e.stack,
      digest: e.digest
    });
  }
  if (Pi) throw Pi = !1, a = Qi, Qi = null, a;
  0 !== (yk & 1) && 0 !== a.tag && Ik();
  f = a.pendingLanes;
  0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
  jg();
  return null;
}
function Ik() {
  if (null !== xk) {
    var a = Dc(yk),
      b = pk.transition,
      c = C;
    try {
      pk.transition = null;
      C = 16 > a ? 16 : a;
      if (null === xk) var d = !1;else {
        a = xk;
        xk = null;
        yk = 0;
        if (0 !== (K & 6)) throw Error(p(331));
        var e = K;
        K |= 4;
        for (V = a.current; null !== V;) {
          var f = V,
            g = f.child;
          if (0 !== (V.flags & 16)) {
            var h = f.deletions;
            if (null !== h) {
              for (var k = 0; k < h.length; k++) {
                var l = h[k];
                for (V = l; null !== V;) {
                  var m = V;
                  switch (m.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(8, m, f);
                  }
                  var q = m.child;
                  if (null !== q) q["return"] = m, V = q;else for (; null !== V;) {
                    m = V;
                    var r = m.sibling,
                      y = m["return"];
                    Tj(m);
                    if (m === l) {
                      V = null;
                      break;
                    }
                    if (null !== r) {
                      r["return"] = y;
                      V = r;
                      break;
                    }
                    V = y;
                  }
                }
              }
              var n = f.alternate;
              if (null !== n) {
                var t = n.child;
                if (null !== t) {
                  n.child = null;
                  do {
                    var J = t.sibling;
                    t.sibling = null;
                    t = J;
                  } while (null !== t);
                }
              }
              V = f;
            }
          }
          if (0 !== (f.subtreeFlags & 2064) && null !== g) g["return"] = f, V = g;else b: for (; null !== V;) {
            f = V;
            if (0 !== (f.flags & 2048)) switch (f.tag) {
              case 0:
              case 11:
              case 15:
                Qj(9, f, f["return"]);
            }
            var x = f.sibling;
            if (null !== x) {
              x["return"] = f["return"];
              V = x;
              break b;
            }
            V = f["return"];
          }
        }
        var w = a.current;
        for (V = w; null !== V;) {
          g = V;
          var u = g.child;
          if (0 !== (g.subtreeFlags & 2064) && null !== u) u["return"] = g, V = u;else b: for (g = w; null !== V;) {
            h = V;
            if (0 !== (h.flags & 2048)) try {
              switch (h.tag) {
                case 0:
                case 11:
                case 15:
                  Rj(9, h);
              }
            } catch (na) {
              W(h, h["return"], na);
            }
            if (h === g) {
              V = null;
              break b;
            }
            var F = h.sibling;
            if (null !== F) {
              F["return"] = h["return"];
              V = F;
              break b;
            }
            V = h["return"];
          }
        }
        K = e;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
          lc.onPostCommitFiberRoot(kc, a);
        } catch (na) {}
        d = !0;
      }
      return d;
    } finally {
      C = c, pk.transition = b;
    }
  }
  return !1;
}
function Yk(a, b, c) {
  b = Ki(c, b);
  b = Oi(a, b, 1);
  a = dh(a, b, 1);
  b = L();
  null !== a && (Ac(a, 1, b), Ek(a, b));
}
function W(a, b, c) {
  if (3 === a.tag) Yk(a, a, c);else for (; null !== b;) {
    if (3 === b.tag) {
      Yk(b, a, c);
      break;
    } else if (1 === b.tag) {
      var d = b.stateNode;
      if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {
        a = Ki(c, a);
        a = Ri(b, a, 1);
        b = dh(b, a, 1);
        a = L();
        null !== b && (Ac(b, 1, a), Ek(b, a));
        break;
      }
    }
    b = b["return"];
  }
}
function Ui(a, b, c) {
  var d = a.pingCache;
  null !== d && d["delete"](b);
  b = L();
  a.pingedLanes |= a.suspendedLanes & c;
  R === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c);
  Ek(a, b);
}
function Zk(a, b) {
  0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c = L();
  a = Zg(a, b);
  null !== a && (Ac(a, b, c), Ek(a, c));
}
function vj(a) {
  var b = a.memoizedState,
    c = 0;
  null !== b && (c = b.retryLane);
  Zk(a, c);
}
function ck(a, b) {
  var c = 0;
  switch (a.tag) {
    case 13:
      var d = a.stateNode;
      var e = a.memoizedState;
      null !== e && (c = e.retryLane);
      break;
    case 19:
      d = a.stateNode;
      break;
    default:
      throw Error(p(314));
  }
  null !== d && d["delete"](b);
  Zk(a, c);
}
var Wk;
Wk = function Wk(a, b, c) {
  if (null !== a) {
    if (a.memoizedProps !== b.pendingProps || Wf.current) Ug = !0;else {
      if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return Ug = !1, zj(a, b, c);
      Ug = 0 !== (a.flags & 131072) ? !0 : !1;
    }
  } else Ug = !1, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
  b.lanes = 0;
  switch (b.tag) {
    case 2:
      var d = b.type;
      jj(a, b);
      a = b.pendingProps;
      var e = Yf(b, H.current);
      Tg(b, c);
      e = Xh(null, b, d, a, e, c);
      var f = bi();
      b.flags |= 1;
      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a, c), b = kj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Yi(null, b, e, c), b = b.child);
      return b;
    case 16:
      d = b.elementType;
      a: {
        jj(a, b);
        a = b.pendingProps;
        e = d._init;
        d = e(d._payload);
        b.type = d;
        e = b.tag = $k(d);
        a = Lg(d, a);
        switch (e) {
          case 0:
            b = dj(null, b, d, a, c);
            break a;
          case 1:
            b = ij(null, b, d, a, c);
            break a;
          case 11:
            b = Zi(null, b, d, a, c);
            break a;
          case 14:
            b = aj(null, b, d, Lg(d.type, a), c);
            break a;
        }
        throw Error(p(306, d, ""));
      }
      return b;
    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), dj(a, b, d, e, c);
    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), ij(a, b, d, e, c);
    case 3:
      a: {
        lj(b);
        if (null === a) throw Error(p(387));
        d = b.pendingProps;
        f = b.memoizedState;
        e = f.element;
        bh(a, b);
        gh(b, d, null, c);
        var g = b.memoizedState;
        d = g.element;
        if (f.isDehydrated) {
          if (f = {
            element: d,
            isDehydrated: !1,
            cache: g.cache,
            pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
            transitions: g.transitions
          }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
            e = Ki(Error(p(423)), b);
            b = mj(a, b, d, c, e);
            break a;
          } else if (d !== e) {
            e = Ki(Error(p(424)), b);
            b = mj(a, b, d, c, e);
            break a;
          } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Ch(b, null, d, c), b.child = c; c;) {
            c.flags = c.flags & -3 | 4096, c = c.sibling;
          }
        } else {
          Ig();
          if (d === e) {
            b = $i(a, b, c);
            break a;
          }
          Yi(a, b, d, c);
        }
        b = b.child;
      }
      return b;
    case 5:
      return Kh(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a, b), Yi(a, b, g, c), b.child;
    case 6:
      return null === a && Eg(b), null;
    case 13:
      return pj(a, b, c);
    case 4:
      return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Bh(b, null, d, c) : Yi(a, b, d, c), b.child;
    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), Zi(a, b, d, e, c);
    case 7:
      return Yi(a, b, b.pendingProps, c), b.child;
    case 8:
      return Yi(a, b, b.pendingProps.children, c), b.child;
    case 12:
      return Yi(a, b, b.pendingProps.children, c), b.child;
    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        f = b.memoizedProps;
        g = e.value;
        G(Mg, d._currentValue);
        d._currentValue = g;
        if (null !== f) if (He(f.value, g)) {
          if (f.children === e.children && !Wf.current) {
            b = $i(a, b, c);
            break a;
          }
        } else for (f = b.child, null !== f && (f["return"] = b); null !== f;) {
          var h = f.dependencies;
          if (null !== h) {
            g = f.child;
            for (var k = h.firstContext; null !== k;) {
              if (k.context === d) {
                if (1 === f.tag) {
                  k = ch(-1, c & -c);
                  k.tag = 2;
                  var l = f.updateQueue;
                  if (null !== l) {
                    l = l.shared;
                    var m = l.pending;
                    null === m ? k.next = k : (k.next = m.next, m.next = k);
                    l.pending = k;
                  }
                }
                f.lanes |= c;
                k = f.alternate;
                null !== k && (k.lanes |= c);
                Sg(f["return"], c, b);
                h.lanes |= c;
                break;
              }
              k = k.next;
            }
          } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {
            g = f["return"];
            if (null === g) throw Error(p(341));
            g.lanes |= c;
            h = g.alternate;
            null !== h && (h.lanes |= c);
            Sg(g, c, b);
            g = f.sibling;
          } else g = f.child;
          if (null !== g) g["return"] = f;else for (g = f; null !== g;) {
            if (g === b) {
              g = null;
              break;
            }
            f = g.sibling;
            if (null !== f) {
              f["return"] = g["return"];
              g = f;
              break;
            }
            g = g["return"];
          }
          f = g;
        }
        Yi(a, b, e.children, c);
        b = b.child;
      }
      return b;
    case 9:
      return e = b.type, d = b.pendingProps.children, Tg(b, c), e = Vg(e), d = d(e), b.flags |= 1, Yi(a, b, d, c), b.child;
    case 14:
      return d = b.type, e = Lg(d, b.pendingProps), e = Lg(d.type, e), aj(a, b, d, e, c);
    case 15:
      return cj(a, b, b.type, b.pendingProps, c);
    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, !0, a, c);
    case 19:
      return yj(a, b, c);
    case 22:
      return ej(a, b, c);
  }
  throw Error(p(156, b.tag));
};
function Gk(a, b) {
  return ac(a, b);
}
function al(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this["return"] = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b, c, d) {
  return new al(a, b, c, d);
}
function bj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function $k(a) {
  if ("function" === typeof a) return bj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da) return 11;
    if (a === Ga) return 14;
  }
  return 2;
}
function wh(a, b) {
  var c = a.alternate;
  null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
  c.flags = a.flags & 14680064;
  c.childLanes = a.childLanes;
  c.lanes = a.lanes;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = null === b ? null : {
    lanes: b.lanes,
    firstContext: b.firstContext
  };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}
function yh(a, b, c, d, e, f) {
  var g = 2;
  d = a;
  if ("function" === typeof a) bj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
    case ya:
      return Ah(c.children, e, f, b);
    case za:
      g = 8;
      e |= 8;
      break;
    case Aa:
      return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
    case Ea:
      return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
    case Fa:
      return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
    case Ia:
      return qj(c, e, f, b);
    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case Ba:
          g = 10;
          break a;
        case Ca:
          g = 9;
          break a;
        case Da:
          g = 11;
          break a;
        case Ga:
          g = 14;
          break a;
        case Ha:
          g = 16;
          d = null;
          break a;
      }
      throw Error(p(130, null == a ? a : typeof a, ""));
  }
  b = Bg(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.lanes = f;
  return b;
}
function Ah(a, b, c, d) {
  a = Bg(7, a, d, b);
  a.lanes = c;
  return a;
}
function qj(a, b, c, d) {
  a = Bg(22, a, d, b);
  a.elementType = Ia;
  a.lanes = c;
  a.stateNode = {
    isHidden: !1
  };
  return a;
}
function xh(a, b, c) {
  a = Bg(6, a, null, b);
  a.lanes = c;
  return a;
}
function zh(a, b, c) {
  b = Bg(4, null !== a.children ? a.children : [], a.key, b);
  b.lanes = c;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}
function bl(a, b, c, d, e) {
  this.tag = b;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d;
  this.onRecoverableError = e;
  this.mutableSourceEagerHydrationData = null;
}
function cl(a, b, c, d, e, f, g, h, k) {
  a = new bl(a, b, c, h, k);
  1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
  f = Bg(3, null, null, b);
  a.current = f;
  f.stateNode = a;
  f.memoizedState = {
    element: d,
    isDehydrated: c,
    cache: null,
    transitions: null,
    pendingSuspenseBoundaries: null
  };
  ah(f);
  return a;
}
function dl(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: wa,
    key: null == d ? null : "" + d,
    children: a,
    containerInfo: b,
    implementation: c
  };
}
function el(a) {
  if (!a) return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
    var b = a;
    do {
      switch (b.tag) {
        case 3:
          b = b.stateNode.context;
          break a;
        case 1:
          if (Zf(b.type)) {
            b = b.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b = b["return"];
    } while (null !== b);
    throw Error(p(171));
  }
  if (1 === a.tag) {
    var c = a.type;
    if (Zf(c)) return bg(a, c, b);
  }
  return b;
}
function fl(a, b, c, d, e, f, g, h, k) {
  a = cl(c, d, !0, a, e, f, g, h, k);
  a.context = el(null);
  c = a.current;
  d = L();
  e = lh(c);
  f = ch(d, e);
  f.callback = void 0 !== b && null !== b ? b : null;
  dh(c, f, e);
  a.current.lanes = e;
  Ac(a, e, d);
  Ek(a, d);
  return a;
}
function gl(a, b, c, d) {
  var e = b.current,
    f = L(),
    g = lh(e);
  c = el(c);
  null === b.context ? b.context = c : b.pendingContext = c;
  b = ch(f, g);
  b.payload = {
    element: a
  };
  d = void 0 === d ? null : d;
  null !== d && (b.callback = d);
  a = dh(e, b, g);
  null !== a && (mh(a, e, g, f), eh(a, e, g));
  return g;
}
function hl(a) {
  a = a.current;
  if (!a.child) return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function il(a, b) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c = a.retryLane;
    a.retryLane = 0 !== c && c < b ? c : b;
  }
}
function jl(a, b) {
  il(a, b);
  (a = a.alternate) && il(a, b);
}
function kl() {
  return null;
}
var ll = "function" === typeof reportError ? reportError : function (a) {
  console.error(a);
};
function ml(a) {
  this._internalRoot = a;
}
nl.prototype.render = ml.prototype.render = function (a) {
  var b = this._internalRoot;
  if (null === b) throw Error(p(409));
  gl(a, b, null, null);
};
nl.prototype.unmount = ml.prototype.unmount = function () {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b = a.containerInfo;
    Sk(function () {
      gl(null, a, null, null);
    });
    b[uf] = null;
  }
};
function nl(a) {
  this._internalRoot = a;
}
nl.prototype.unstable_scheduleHydration = function (a) {
  if (a) {
    var b = Hc();
    a = {
      blockedOn: null,
      target: a,
      priority: b
    };
    for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) {
      ;
    }
    Qc.splice(c, 0, a);
    0 === c && Vc(a);
  }
};
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function pl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function ql() {}
function rl(a, b, c, d, e) {
  if (e) {
    if ("function" === typeof d) {
      var f = d;
      d = function d() {
        var a = hl(g);
        f.call(a);
      };
    }
    var g = fl(b, d, a, 0, null, !1, !1, "", ql);
    a._reactRootContainer = g;
    a[uf] = g.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Sk();
    return g;
  }
  for (; e = a.lastChild;) {
    a.removeChild(e);
  }
  if ("function" === typeof d) {
    var h = d;
    d = function d() {
      var a = hl(k);
      h.call(a);
    };
  }
  var k = cl(a, 0, !1, null, null, !1, !1, "", ql);
  a._reactRootContainer = k;
  a[uf] = k.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Sk(function () {
    gl(b, k, c, d);
  });
  return k;
}
function sl(a, b, c, d, e) {
  var f = c._reactRootContainer;
  if (f) {
    var g = f;
    if ("function" === typeof e) {
      var h = e;
      e = function e() {
        var a = hl(g);
        h.call(a);
      };
    }
    gl(b, g, a, e);
  } else g = rl(c, b, a, e, d);
  return hl(g);
}
Ec = function Ec(a) {
  switch (a.tag) {
    case 3:
      var b = a.stateNode;
      if (b.current.memoizedState.isDehydrated) {
        var c = tc(b.pendingLanes);
        0 !== c && (Cc(b, c | 1), Ek(b, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
      }
      break;
    case 13:
      Sk(function () {
        var b = Zg(a, 1);
        if (null !== b) {
          var c = L();
          mh(b, a, 1, c);
        }
      }), jl(a, 1);
  }
};
Fc = function Fc(a) {
  if (13 === a.tag) {
    var b = Zg(a, 134217728);
    if (null !== b) {
      var c = L();
      mh(b, a, 134217728, c);
    }
    jl(a, 134217728);
  }
};
Gc = function Gc(a) {
  if (13 === a.tag) {
    var b = lh(a),
      c = Zg(a, b);
    if (null !== c) {
      var d = L();
      mh(c, a, b, d);
    }
    jl(a, b);
  }
};
Hc = function Hc() {
  return C;
};
Ic = function Ic(a, b) {
  var c = C;
  try {
    return C = a, b();
  } finally {
    C = c;
  }
};
yb = function yb(a, b, c) {
  switch (b) {
    case "input":
      bb(a, c);
      b = c.name;
      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) {
          c = c.parentNode;
        }
        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
        for (b = 0; b < c.length; b++) {
          var d = c[b];
          if (d !== a && d.form === a.form) {
            var e = Db(d);
            if (!e) throw Error(p(90));
            Wa(d);
            bb(d, e);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c);
      break;
    case "select":
      b = c.value, null != b && fb(a, !!c.multiple, b, !1);
  }
};
Gb = Rk;
Hb = Sk;
var tl = {
    usingClientEntryPoint: !1,
    Events: [Cb, ue, Db, Eb, Fb, Rk]
  },
  ul = {
    findFiberByHostInstance: Wc,
    bundleType: 0,
    version: "18.2.0",
    rendererPackageName: "react-dom"
  };
var vl = {
  bundleType: ul.bundleType,
  version: ul.version,
  rendererPackageName: ul.rendererPackageName,
  rendererConfig: ul.rendererConfig,
  overrideHookState: null,
  overrideHookStateDeletePath: null,
  overrideHookStateRenamePath: null,
  overrideProps: null,
  overridePropsDeletePath: null,
  overridePropsRenamePath: null,
  setErrorHandler: null,
  setSuspenseHandler: null,
  scheduleUpdate: null,
  currentDispatcherRef: ua.ReactCurrentDispatcher,
  findHostInstanceByFiber: function findHostInstanceByFiber(a) {
    a = Zb(a);
    return null === a ? null : a.stateNode;
  },
  findFiberByHostInstance: ul.findFiberByHostInstance || kl,
  findHostInstancesForRefresh: null,
  scheduleRefresh: null,
  scheduleRoot: null,
  setRefreshHandler: null,
  getCurrentFiber: null,
  reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!wl.isDisabled && wl.supportsFiber) try {
    kc = wl.inject(vl), lc = wl;
  } catch (a) {}
}
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
exports.createPortal = function (a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!ol(b)) throw Error(p(200));
  return dl(a, b, null, c);
};
exports.createRoot = function (a, b) {
  if (!ol(a)) throw Error(p(299));
  var c = !1,
    d = "",
    e = ll;
  null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
  b = cl(a, 1, !1, null, null, c, !1, d, e);
  a[uf] = b.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ml(b);
};
exports.findDOMNode = function (a) {
  if (null == a) return null;
  if (1 === a.nodeType) return a;
  var b = a._reactInternals;
  if (void 0 === b) {
    if ("function" === typeof a.render) throw Error(p(188));
    a = Object.keys(a).join(",");
    throw Error(p(268, a));
  }
  a = Zb(b);
  a = null === a ? null : a.stateNode;
  return a;
};
exports.flushSync = function (a) {
  return Sk(a);
};
exports.hydrate = function (a, b, c) {
  if (!pl(b)) throw Error(p(200));
  return sl(null, a, b, !0, c);
};
exports.hydrateRoot = function (a, b, c) {
  if (!ol(a)) throw Error(p(405));
  var d = null != c && c.hydratedSources || null,
    e = !1,
    f = "",
    g = ll;
  null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
  b = fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);
  a[uf] = b.current;
  sf(a);
  if (d) for (a = 0; a < d.length; a++) {
    c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);
  }
  return new nl(b);
};
exports.render = function (a, b, c) {
  if (!pl(b)) throw Error(p(200));
  return sl(null, a, b, !1, c);
};
exports.unmountComponentAtNode = function (a) {
  if (!pl(a)) throw Error(p(40));
  return a._reactRootContainer ? (Sk(function () {
    sl(null, null, a, !1, function () {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), !0) : !1;
};
exports.unstable_batchedUpdates = Rk;
exports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
  if (!pl(c)) throw Error(p(200));
  if (null == a || void 0 === a._reactInternals) throw Error(p(38));
  return sl(a, b, c, !1, d);
};
exports.version = "18.2.0-next-9e3b772b8-20220608";

/***/ }),

/***/ 97769:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var m = __webpack_require__(26796);
if (true) {
  exports.createRoot = m.createRoot;
  exports.hydrateRoot = m.hydrateRoot;
} else { var i; }

/***/ }),

/***/ 26796:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}
if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(31730);
} else {}

/***/ }),

/***/ 42165:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var l = Symbol["for"]("react.element"),
  n = Symbol["for"]("react.portal"),
  p = Symbol["for"]("react.fragment"),
  q = Symbol["for"]("react.strict_mode"),
  r = Symbol["for"]("react.profiler"),
  t = Symbol["for"]("react.provider"),
  u = Symbol["for"]("react.context"),
  v = Symbol["for"]("react.forward_ref"),
  w = Symbol["for"]("react.suspense"),
  x = Symbol["for"]("react.memo"),
  y = Symbol["for"]("react.lazy"),
  z = Symbol.iterator;
function A(a) {
  if (null === a || "object" !== typeof a) return null;
  a = z && a[z] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  },
  C = Object.assign,
  D = {};
function E(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = D;
  this.updater = e || B;
}
E.prototype.isReactComponent = {};
E.prototype.setState = function (a, b) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b, "setState");
};
E.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F() {}
F.prototype = E.prototype;
function G(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = D;
  this.updater = e || B;
}
var H = G.prototype = new F();
H.constructor = G;
C(H, E.prototype);
H.isPureReactComponent = !0;
var I = Array.isArray,
  J = Object.prototype.hasOwnProperty,
  K = {
    current: null
  },
  L = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };
function M(a, b, e) {
  var d,
    c = {},
    k = null,
    h = null;
  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
    J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
  }
  var g = arguments.length - 2;
  if (1 === g) c.children = e;else if (1 < g) {
    for (var f = Array(g), m = 0; m < g; m++) {
      f[m] = arguments[m + 2];
    }
    c.children = f;
  }
  if (a && a.defaultProps) for (d in g = a.defaultProps, g) {
    void 0 === c[d] && (c[d] = g[d]);
  }
  return {
    $$typeof: l,
    type: a,
    key: k,
    ref: h,
    props: c,
    _owner: K.current
  };
}
function N(a, b) {
  return {
    $$typeof: l,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  };
}
function O(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l;
}
function escape(a) {
  var b = {
    "=": "=0",
    ":": "=2"
  };
  return "$" + a.replace(/[=:]/g, function (a) {
    return b[a];
  });
}
var P = /\/+/g;
function Q(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}
function R(a, b, e, d, c) {
  var k = typeof a;
  if ("undefined" === k || "boolean" === k) a = null;
  var h = !1;
  if (null === a) h = !0;else switch (k) {
    case "string":
    case "number":
      h = !0;
      break;
    case "object":
      switch (a.$$typeof) {
        case l:
        case n:
          h = !0;
      }
  }
  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
    return a;
  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
  h = 0;
  d = "" === d ? "." : d + ":";
  if (I(a)) for (var g = 0; g < a.length; g++) {
    k = a[g];
    var f = d + Q(k, g);
    h += R(k, b, e, f, c);
  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
    k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
  } else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
  return h;
}
function S(a, b, e) {
  if (null == a) return a;
  var d = [],
    c = 0;
  R(a, d, "", "", function (a) {
    return b.call(e, a, c++);
  });
  return d;
}
function T(a) {
  if (-1 === a._status) {
    var b = a._result;
    b = b();
    b.then(function (b) {
      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
    }, function (b) {
      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
    });
    -1 === a._status && (a._status = 0, a._result = b);
  }
  if (1 === a._status) return a._result["default"];
  throw a._result;
}
var U = {
    current: null
  },
  V = {
    transition: null
  },
  W = {
    ReactCurrentDispatcher: U,
    ReactCurrentBatchConfig: V,
    ReactCurrentOwner: K
  };
exports.Children = {
  map: S,
  forEach: function forEach(a, b, e) {
    S(a, function () {
      b.apply(this, arguments);
    }, e);
  },
  count: function count(a) {
    var b = 0;
    S(a, function () {
      b++;
    });
    return b;
  },
  toArray: function toArray(a) {
    return S(a, function (a) {
      return a;
    }) || [];
  },
  only: function only(a) {
    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
    return a;
  }
};
exports.Component = E;
exports.Fragment = p;
exports.Profiler = r;
exports.PureComponent = G;
exports.StrictMode = q;
exports.Suspense = w;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
exports.cloneElement = function (a, b, e) {
  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d = C({}, a.props),
    c = a.key,
    k = a.ref,
    h = a._owner;
  if (null != b) {
    void 0 !== b.ref && (k = b.ref, h = K.current);
    void 0 !== b.key && (c = "" + b.key);
    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
    for (f in b) {
      J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
  }
  var f = arguments.length - 2;
  if (1 === f) d.children = e;else if (1 < f) {
    g = Array(f);
    for (var m = 0; m < f; m++) {
      g[m] = arguments[m + 2];
    }
    d.children = g;
  }
  return {
    $$typeof: l,
    type: a.type,
    key: c,
    ref: k,
    props: d,
    _owner: h
  };
};
exports.createContext = function (a) {
  a = {
    $$typeof: u,
    _currentValue: a,
    _currentValue2: a,
    _threadCount: 0,
    Provider: null,
    Consumer: null,
    _defaultValue: null,
    _globalName: null
  };
  a.Provider = {
    $$typeof: t,
    _context: a
  };
  return a.Consumer = a;
};
exports.createElement = M;
exports.createFactory = function (a) {
  var b = M.bind(null, a);
  b.type = a;
  return b;
};
exports.createRef = function () {
  return {
    current: null
  };
};
exports.forwardRef = function (a) {
  return {
    $$typeof: v,
    render: a
  };
};
exports.isValidElement = O;
exports.lazy = function (a) {
  return {
    $$typeof: y,
    _payload: {
      _status: -1,
      _result: a
    },
    _init: T
  };
};
exports.memo = function (a, b) {
  return {
    $$typeof: x,
    type: a,
    compare: void 0 === b ? null : b
  };
};
exports.startTransition = function (a) {
  var b = V.transition;
  V.transition = {};
  try {
    a();
  } finally {
    V.transition = b;
  }
};
exports.unstable_act = function () {
  throw Error("act(...) is not supported in production builds of React.");
};
exports.useCallback = function (a, b) {
  return U.current.useCallback(a, b);
};
exports.useContext = function (a) {
  return U.current.useContext(a);
};
exports.useDebugValue = function () {};
exports.useDeferredValue = function (a) {
  return U.current.useDeferredValue(a);
};
exports.useEffect = function (a, b) {
  return U.current.useEffect(a, b);
};
exports.useId = function () {
  return U.current.useId();
};
exports.useImperativeHandle = function (a, b, e) {
  return U.current.useImperativeHandle(a, b, e);
};
exports.useInsertionEffect = function (a, b) {
  return U.current.useInsertionEffect(a, b);
};
exports.useLayoutEffect = function (a, b) {
  return U.current.useLayoutEffect(a, b);
};
exports.useMemo = function (a, b) {
  return U.current.useMemo(a, b);
};
exports.useReducer = function (a, b, e) {
  return U.current.useReducer(a, b, e);
};
exports.useRef = function (a) {
  return U.current.useRef(a);
};
exports.useState = function (a) {
  return U.current.useState(a);
};
exports.useSyncExternalStore = function (a, b, e) {
  return U.current.useSyncExternalStore(a, b, e);
};
exports.useTransition = function () {
  return U.current.useTransition();
};
exports.version = "18.2.0";

/***/ }),

/***/ 43745:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(42165);
} else {}

/***/ }),

/***/ 33538:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var defineProperty = Object.defineProperty || function (obj, key, desc) {
    obj[key] = desc.value;
  };
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    });
    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  });
  defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  });
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction ||
    // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };
  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }
        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }
    var previousPromise;
    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }
      return previousPromise =
      // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
      // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    defineProperty(this, "_invoke", {
      value: enqueue
    });
  }
  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };
  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }
      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }
      context.method = method;
      context.arg = arg;
      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }
          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }
        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;
          if (record.arg === ContinueSentinel) {
            continue;
          }
          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;
      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);
          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }
        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }
    var info = record.arg;
    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }
    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    if (1 in locs) {
      entry.catchLoc = locs[1];
    }
    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }
    this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }
  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }
  exports.keys = function (val) {
    var object = Object(val);
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }
      if (typeof iterable.next === "function") {
        return iterable;
      }
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }
            next.value = undefined;
            next.done = true;
            return next;
          };
        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return {
      next: doneResult
    };
  }
  exports.values = values;
  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }
  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);
      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }
      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }
        return !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;
        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }
      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;
      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }
      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }
      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };
      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }
      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;
}(
// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

/***/ }),

/***/ 26104:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function f(a, b) {
  var c = a.length;
  a.push(b);
  a: for (; 0 < c;) {
    var d = c - 1 >>> 1,
      e = a[d];
    if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;
  }
}
function h(a) {
  return 0 === a.length ? null : a[0];
}
function k(a) {
  if (0 === a.length) return null;
  var b = a[0],
    c = a.pop();
  if (c !== b) {
    a[0] = c;
    a: for (var d = 0, e = a.length, w = e >>> 1; d < w;) {
      var m = 2 * (d + 1) - 1,
        C = a[m],
        n = m + 1,
        x = a[n];
      if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;else break a;
    }
  }
  return b;
}
function g(a, b) {
  var c = a.sortIndex - b.sortIndex;
  return 0 !== c ? c : a.id - b.id;
}
if ("object" === typeof performance && "function" === typeof performance.now) {
  var l = performance;
  exports.unstable_now = function () {
    return l.now();
  };
} else {
  var p = Date,
    q = p.now();
  exports.unstable_now = function () {
    return p.now() - q;
  };
}
var r = [],
  t = [],
  u = 1,
  v = null,
  y = 3,
  z = !1,
  A = !1,
  B = !1,
  D = "function" === typeof setTimeout ? setTimeout : null,
  E = "function" === typeof clearTimeout ? clearTimeout : null,
  F = "undefined" !== typeof setImmediate ? setImmediate : null;
"undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
function G(a) {
  for (var b = h(t); null !== b;) {
    if (null === b.callback) k(t);else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);else break;
    b = h(t);
  }
}
function H(a) {
  B = !1;
  G(a);
  if (!A) if (null !== h(r)) A = !0, I(J);else {
    var b = h(t);
    null !== b && K(H, b.startTime - a);
  }
}
function J(a, b) {
  A = !1;
  B && (B = !1, E(L), L = -1);
  z = !0;
  var c = y;
  try {
    G(b);
    for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());) {
      var d = v.callback;
      if ("function" === typeof d) {
        v.callback = null;
        y = v.priorityLevel;
        var e = d(v.expirationTime <= b);
        b = exports.unstable_now();
        "function" === typeof e ? v.callback = e : v === h(r) && k(r);
        G(b);
      } else k(r);
      v = h(r);
    }
    if (null !== v) var w = !0;else {
      var m = h(t);
      null !== m && K(H, m.startTime - b);
      w = !1;
    }
    return w;
  } finally {
    v = null, y = c, z = !1;
  }
}
var N = !1,
  O = null,
  L = -1,
  P = 5,
  Q = -1;
function M() {
  return exports.unstable_now() - Q < P ? !1 : !0;
}
function R() {
  if (null !== O) {
    var a = exports.unstable_now();
    Q = a;
    var b = !0;
    try {
      b = O(!0, a);
    } finally {
      b ? S() : (N = !1, O = null);
    }
  } else N = !1;
}
var S;
if ("function" === typeof F) S = function S() {
  F(R);
};else if ("undefined" !== typeof MessageChannel) {
  var T = new MessageChannel(),
    U = T.port2;
  T.port1.onmessage = R;
  S = function S() {
    U.postMessage(null);
  };
} else S = function S() {
  D(R, 0);
};
function I(a) {
  O = a;
  N || (N = !0, S());
}
function K(a, b) {
  L = D(function () {
    a(exports.unstable_now());
  }, b);
}
exports.unstable_IdlePriority = 5;
exports.unstable_ImmediatePriority = 1;
exports.unstable_LowPriority = 4;
exports.unstable_NormalPriority = 3;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_cancelCallback = function (a) {
  a.callback = null;
};
exports.unstable_continueExecution = function () {
  A || z || (A = !0, I(J));
};
exports.unstable_forceFrameRate = function (a) {
  0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1E3 / a) : 5;
};
exports.unstable_getCurrentPriorityLevel = function () {
  return y;
};
exports.unstable_getFirstCallbackNode = function () {
  return h(r);
};
exports.unstable_next = function (a) {
  switch (y) {
    case 1:
    case 2:
    case 3:
      var b = 3;
      break;
    default:
      b = y;
  }
  var c = y;
  y = b;
  try {
    return a();
  } finally {
    y = c;
  }
};
exports.unstable_pauseExecution = function () {};
exports.unstable_requestPaint = function () {};
exports.unstable_runWithPriority = function (a, b) {
  switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      a = 3;
  }
  var c = y;
  y = a;
  try {
    return b();
  } finally {
    y = c;
  }
};
exports.unstable_scheduleCallback = function (a, b, c) {
  var d = exports.unstable_now();
  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
  switch (a) {
    case 1:
      var e = -1;
      break;
    case 2:
      e = 250;
      break;
    case 5:
      e = 1073741823;
      break;
    case 4:
      e = 1E4;
      break;
    default:
      e = 5E3;
  }
  e = c + e;
  a = {
    id: u++,
    callback: b,
    priorityLevel: a,
    startTime: c,
    expirationTime: e,
    sortIndex: -1
  };
  c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J)));
  return a;
};
exports.unstable_shouldYield = M;
exports.unstable_wrapCallback = function (a) {
  var b = y;
  return function () {
    var c = y;
    y = b;
    try {
      return a.apply(this, arguments);
    } finally {
      y = c;
    }
  };
};

/***/ }),

/***/ 79409:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(26104);
} else {}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// NAMESPACE OBJECT: ./src/compat/event_listeners.ts
var event_listeners_namespaceObject = {};
__webpack_require__.r(event_listeners_namespaceObject);
__webpack_require__.d(event_listeners_namespaceObject, {
  "addEventListener": () => (addEventListener),
  "getPageActivityRef": () => (getPageActivityRef),
  "getPictureOnPictureStateRef": () => (getPictureOnPictureStateRef),
  "getVideoVisibilityRef": () => (getVideoVisibilityRef),
  "getVideoWidthRef": () => (getVideoWidthRef),
  "onEncrypted$": () => (onEncrypted$),
  "onEnded": () => (onEnded),
  "onEnded$": () => (onEnded$),
  "onFullscreenChange$": () => (onFullscreenChange$),
  "onKeyAdded$": () => (onKeyAdded$),
  "onKeyError$": () => (onKeyError$),
  "onKeyMessage$": () => (onKeyMessage$),
  "onKeyStatusesChange$": () => (onKeyStatusesChange$),
  "onLoadedMetadata$": () => (onLoadedMetadata$),
  "onRemoveSourceBuffers$": () => (onRemoveSourceBuffers$),
  "onSeeked": () => (onSeeked),
  "onSeeked$": () => (onSeeked$),
  "onSeeking": () => (onSeeking),
  "onSeeking$": () => (onSeeking$),
  "onSourceClose$": () => (onSourceClose$),
  "onSourceEnded$": () => (onSourceEnded$),
  "onSourceOpen$": () => (onSourceOpen$),
  "onTextTrackChanges$": () => (onTextTrackChanges$),
  "onTimeUpdate$": () => (onTimeUpdate$),
  "onUpdate$": () => (onUpdate$)
});

// EXTERNAL MODULE: ./node_modules/core-js/stable/index.js
var stable = __webpack_require__(74160);
// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(33538);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(43745);
// EXTERNAL MODULE: ./node_modules/react-dom/client.js
var client = __webpack_require__(97769);
;// CONCATENATED MODULE: ./node_modules/rxjs/node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    }
  };
  return _extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  _extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
}
function __spreadArray(to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }
  return to;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === 'function';
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function _super(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js

var UnsubscriptionError = createErrorClass(function (_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) {
      return i + 1 + ") " + err.toString();
    }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
  };
});
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscription.js




var Subscription = function () {
  function Subscription(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription.prototype.unsubscribe = function () {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1["return"])) _a.call(_parentage_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1["return"])) _b.call(_finalizers_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription.prototype.add = function (teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription.prototype._hasParent = function (parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription.prototype._addParent = function (parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription.prototype._removeParent = function (parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription.prototype.remove = function (teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription) {
      teardown._removeParent(this);
    }
  };
  Subscription.EMPTY = function () {
    var empty = new Subscription();
    empty.closed = true;
    return empty;
  }();
  return Subscription;
}();

var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: undefined,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js

var timeoutProvider = {
  setTimeout: function (_setTimeout) {
    function setTimeout(_x, _x2) {
      return _setTimeout.apply(this, arguments);
    }
    setTimeout.toString = function () {
      return _setTimeout.toString();
    };
    return setTimeout;
  }(function (handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
  }),
  clearTimeout: function (_clearTimeout) {
    function clearTimeout(_x3) {
      return _clearTimeout.apply(this, arguments);
    }
    clearTimeout.toString = function () {
      return _clearTimeout.toString();
    };
    return clearTimeout;
  }(function (handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  }),
  delegate: undefined
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js


function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function () {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() {}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function () {
  return createNotification('C', undefined, undefined);
}();
function errorNotification(error) {
  return createNotification('E', undefined, error);
}
function nextNotification(value) {
  return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
  return {
    kind: kind,
    value: value,
    error: error
  };
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js

var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = {
        errorThrown: false,
        error: null
      };
    }
    cb();
    if (isRoot) {
      var _a = context,
        errorThrown = _a.errorThrown,
        error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscriber.js









var Subscriber = function (_super) {
  __extends(Subscriber, _super);
  function Subscriber(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber.create = function (next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber.prototype.next = function (value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber.prototype.error = function (err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber.prototype.complete = function () {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber.prototype.unsubscribe = function () {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber.prototype._next = function (value) {
    this.destination.next(value);
  };
  Subscriber.prototype._error = function (err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber.prototype._complete = function () {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber;
}(Subscription);

var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function () {
  function ConsumerObserver(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver.prototype.next = function (value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver.prototype.error = function (err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver.prototype.complete = function () {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver;
}();
var SafeSubscriber = function (_super) {
  __extends(SafeSubscriber, _super);
  function SafeSubscriber(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
        error: error !== null && error !== void 0 ? error : undefined,
        complete: complete !== null && complete !== void 0 ? complete : undefined
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function () {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber;
}(Subscriber);

function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function () {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity(x) {
  return x;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/pipe.js

function pipe() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function (prev, fn) {
      return fn(prev);
    }, input);
  };
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Observable.js







var Observable_Observable = function () {
  function Observable(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable.prototype.lift = function (operator) {
    var observable = new Observable();
    observable.source = this;
    observable.operator = operator;
    return observable;
  };
  Observable.prototype.subscribe = function (observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function () {
      var _a = _this,
        operator = _a.operator,
        source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable.prototype._trySubscribe = function (sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable.prototype.forEach = function (_next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function next(value) {
          try {
            _next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable.prototype._subscribe = function (subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable.prototype[observable] = function () {
    return this;
  };
  Observable.prototype.pipe = function () {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable.prototype.toPromise = function (promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var value;
      _this.subscribe(function (x) {
        return value = x;
      }, function (err) {
        return reject(err);
      }, function () {
        return resolve(value);
      });
    });
  };
  Observable.create = function (subscribe) {
    return new Observable(subscribe);
  };
  return Observable;
}();

function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js

var ObjectUnsubscribedError = createErrorClass(function (_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = 'ObjectUnsubscribedError';
    this.message = 'object unsubscribed';
  };
});
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subject.js






var Subject = function (_super) {
  __extends(Subject, _super);
  function Subject() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject.prototype.lift = function (operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject.prototype._throwIfClosed = function () {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject.prototype.next = function (value) {
    var _this = this;
    errorContext(function () {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
    });
  };
  Subject.prototype.error = function (err) {
    var _this = this;
    errorContext(function () {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject.prototype.complete = function () {
    var _this = this;
    errorContext(function () {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject.prototype.unsubscribe = function () {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject.prototype, "observed", {
    get: function get() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject.prototype._trySubscribe = function (subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject.prototype._subscribe = function (subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject.prototype._innerSubscribe = function (subscriber) {
    var _this = this;
    var _a = this,
      hasError = _a.hasError,
      isStopped = _a.isStopped,
      observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function () {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject.prototype._checkFinalizedStatuses = function (subscriber) {
    var _a = this,
      hasError = _a.hasError,
      thrownError = _a.thrownError,
      isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject.prototype.asObservable = function () {
    var observable = new Observable_Observable();
    observable.source = this;
    return observable;
  };
  Subject.create = function (destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject;
}(Observable_Observable);

var AnonymousSubject = function (_super) {
  __extends(AnonymousSubject, _super);
  function AnonymousSubject(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject.prototype.next = function (value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject.prototype.error = function (err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject.prototype.complete = function () {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject.prototype._subscribe = function (subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject;
}(Subject);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/empty.js

var EMPTY = new Observable_Observable(function (subscriber) {
  return subscriber.complete();
});
function empty(scheduler) {
  return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
  return new Observable(function (subscriber) {
    return scheduler.schedule(function () {
      return subscriber.complete();
    });
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/lift.js

function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return function (source) {
    if (hasLift(source)) {
      return source.lift(function (liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError('Unable to lift unknown Observable type');
  };
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js


function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function (_super) {
  __extends(OperatorSubscriber, _super);
  function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function (value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function (err) {
      try {
        onError(err);
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function () {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber.prototype.unsubscribe = function () {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber;
}(Subscriber);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/take.js



function take(count) {
  return count <= 0 ? function () {
    return EMPTY;
  } : operate(function (source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = function isArrayLike(x) {
  return x && typeof x.length === 'number' && typeof x !== 'function';
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js

function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js


function isInteropObservable(input) {
  return isFunction(input[observable]);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js

function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== 'function' || !Symbol.iterator) {
    return '@@iterator';
  }
  return Symbol.iterator;
}
var iterator_iterator = getSymbolIterator();
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js


function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator_iterator]);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js


function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1,, 9, 10]);
          _b.label = 2;
        case 2:
          if (false) {}
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done) return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js












function innerFrom(input) {
  if (input instanceof Observable_Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable_Observable(function (subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError('Provided object does not correctly implement Symbol.observable');
  });
}
function fromArrayLike(array) {
  return new Observable_Observable(function (subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable_Observable(function (subscriber) {
    promise.then(function (value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function (err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable_Observable(function (subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"])) _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable_Observable(function (subscriber) {
    process(asyncIterable, subscriber)["catch"](function (err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function () {
    var value, e_2_1;
    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = {
            error: e_2_1
          };
          return [3, 11];
        case 6:
          _b.trys.push([6,, 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1["return"]))) return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2) throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js




function takeUntil(notifier) {
  return operate(function (source, subscriber) {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function () {
      return subscriber.complete();
    }, noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/map.js


function map(project, thisArg) {
  return operate(function (source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js



function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = identity;
  }
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate(function (source, subscriber) {
    var previousKey;
    var first = true;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      var currentKey = keySelector(value);
      if (first || !comparator(previousKey, currentKey)) {
        first = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isScheduler.js

function isScheduler(value) {
  return value && isFunction(value.schedule);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/args.js


function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : undefined;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
  return typeof last(args) === 'number' ? args.pop() : defaultValue;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
  if (delay === void 0) {
    delay = 0;
  }
  if (repeat === void 0) {
    repeat = false;
  }
  var scheduleSubscription = scheduler.schedule(function () {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/observeOn.js



function observeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function (source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      return executeSchedule(subscriber, scheduler, function () {
        return subscriber.next(value);
      }, delay);
    }, function () {
      return executeSchedule(subscriber, scheduler, function () {
        return subscriber.complete();
      }, delay);
    }, function (err) {
      return executeSchedule(subscriber, scheduler, function () {
        return subscriber.error(err);
      }, delay);
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js

function subscribeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function (source, subscriber) {
    subscriber.add(scheduler.schedule(function () {
      return source.subscribe(subscriber);
    }, delay));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js



function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js



function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js

function scheduleArray(input, scheduler) {
  return new Observable_Observable(function (subscriber) {
    var i = 0;
    return scheduler.schedule(function () {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js




function scheduleIterable(input, scheduler) {
  return new Observable_Observable(function (subscriber) {
    var iterator;
    executeSchedule(subscriber, scheduler, function () {
      iterator = input[iterator_iterator]();
      executeSchedule(subscriber, scheduler, function () {
        var _a;
        var value;
        var done;
        try {
          _a = iterator.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function () {
      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator["return"]) && iterator["return"]();
    };
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js


function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error('Iterable cannot be null');
  }
  return new Observable_Observable(function (subscriber) {
    executeSchedule(subscriber, scheduler, function () {
      var iterator = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function () {
        iterator.next().then(function (result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js


function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js













function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/from.js


function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/of.js


function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js



function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  var buffer = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function checkComplete() {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function outerNext(value) {
    return active < concurrent ? doInnerSub(value) : buffer.push(value);
  };
  var doInnerSub = function doInnerSub(value) {
    expand && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function () {
      innerComplete = true;
    }, undefined, function () {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function _loop_1() {
            var bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function () {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
    isComplete = true;
    checkComplete();
  }));
  return function () {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js





function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction(resultSelector)) {
    return mergeMap(function (a, i) {
      return map(function (b, ii) {
        return resultSelector(a, b, i, ii);
      })(innerFrom(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }
  return operate(function (source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
  now: function now() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: undefined
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js



var ReplaySubject = function (_super) {
  __extends(ReplaySubject, _super);
  function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject.prototype.next = function (value) {
    var _a = this,
      isStopped = _a.isStopped,
      _buffer = _a._buffer,
      _infiniteTimeWindow = _a._infiniteTimeWindow,
      _timestampProvider = _a._timestampProvider,
      _windowTime = _a._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject.prototype._subscribe = function (subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a = this,
      _infiniteTimeWindow = _a._infiniteTimeWindow,
      _buffer = _a._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject.prototype._trimBuffer = function () {
    var _a = this,
      _bufferSize = _a._bufferSize,
      _timestampProvider = _a._timestampProvider,
      _buffer = _a._buffer,
      _infiniteTimeWindow = _a._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last = i;
      }
      last && _buffer.splice(0, last + 1);
    }
  };
  return ReplaySubject;
}(Subject);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/share.js





function share(options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.connector,
    connector = _a === void 0 ? function () {
      return new Subject();
    } : _a,
    _b = options.resetOnError,
    resetOnError = _b === void 0 ? true : _b,
    _c = options.resetOnComplete,
    resetOnComplete = _c === void 0 ? true : _c,
    _d = options.resetOnRefCountZero,
    resetOnRefCountZero = _d === void 0 ? true : _d;
  return function (wrapperSource) {
    var connection;
    var resetConnection;
    var subject;
    var refCount = 0;
    var hasCompleted = false;
    var hasErrored = false;
    var cancelReset = function cancelReset() {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = undefined;
    };
    var reset = function reset() {
      cancelReset();
      connection = subject = undefined;
      hasCompleted = hasErrored = false;
    };
    var resetAndUnsubscribe = function resetAndUnsubscribe() {
      var conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };
    return operate(function (source, subscriber) {
      refCount++;
      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }
      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(function () {
        refCount--;
        if (refCount === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);
      if (!connection && refCount > 0) {
        connection = new SafeSubscriber({
          next: function next(value) {
            return dest.next(value);
          },
          error: function error(err) {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: function complete() {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        innerFrom(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}
function handleReset(reset, on) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  if (on === true) {
    reset();
    return;
  }
  if (on === false) {
    return;
  }
  var onSubscriber = new SafeSubscriber({
    next: function next() {
      onSubscriber.unsubscribe();
      reset();
    }
  });
  return on.apply(void 0, __spreadArray([], __read(args))).subscribe(onSubscriber);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js


function shareReplay(configOrBufferSize, windowTime, scheduler) {
  var _a, _b, _c;
  var bufferSize;
  var refCount = false;
  if (configOrBufferSize && typeof configOrBufferSize === 'object') {
    _a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler;
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }
  return share({
    connector: function connector() {
      return new ReplaySubject(bufferSize, windowTime, scheduler);
    },
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/defer.js


function defer(observableFactory) {
  return new Observable_Observable(function (subscriber) {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/connectable.js



var DEFAULT_CONFIG = {
  connector: function connector() {
    return new Subject();
  },
  resetOnDisconnect: true
};
function connectable(source, config) {
  if (config === void 0) {
    config = DEFAULT_CONFIG;
  }
  var connection = null;
  var connector = config.connector,
    _a = config.resetOnDisconnect,
    resetOnDisconnect = _a === void 0 ? true : _a;
  var subject = connector();
  var result = new Observable_Observable(function (subscriber) {
    return subject.subscribe(subscriber);
  });
  result.connect = function () {
    if (!connection || connection.closed) {
      connection = defer(function () {
        return source;
      }).subscribe(subject);
      if (resetOnDisconnect) {
        connection.add(function () {
          return subject = connector();
        });
      }
    }
    return connection;
  };
  return result;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/filter.js


function filter(predicate, thisArg) {
  return operate(function (source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf,
  objectProto = Object.prototype,
  getKeys = Object.keys;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];
    if (isArray(first_1)) {
      return {
        args: first_1,
        keys: null
      };
    }
    if (isPOJO(first_1)) {
      var keys = getKeys(first_1);
      return {
        args: keys.map(function (key) {
          return first_1[key];
        }),
        keys: keys
      };
    }
  }
  return {
    args: args,
    keys: null
  };
}
function isPOJO(obj) {
  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js


var mapOneOrManyArgs_isArray = Array.isArray;
function callOrApply(fn, args) {
  return mapOneOrManyArgs_isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map(function (args) {
    return callOrApply(fn, args);
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createObject.js
function createObject(keys, values) {
  return keys.reduce(function (result, key, i) {
    return result[key] = values[i], result;
  }, {});
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js









function combineLatest() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  var resultSelector = popResultSelector(args);
  var _a = argsArgArrayOrObject(args),
    observables = _a.args,
    keys = _a.keys;
  if (observables.length === 0) {
    return from([], scheduler);
  }
  var result = new Observable_Observable(combineLatestInit(observables, scheduler, keys ? function (values) {
    return createObject(keys, values);
  } : identity));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = identity;
  }
  return function (subscriber) {
    maybeSchedule(scheduler, function () {
      var length = observables.length;
      var values = new Array(length);
      var active = length;
      var remainingFirstValues = length;
      var _loop_1 = function _loop_1(i) {
        maybeSchedule(scheduler, function () {
          var source = from(observables[i], scheduler);
          var hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            values[i] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function () {
            if (! --active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };
      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js


function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity, concurrent);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/concatAll.js

function concatAll() {
  return mergeAll(1);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/concat.js



function concat_concat() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return concatAll()(from(args, popScheduler(args)));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/startWith.js



function startWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var scheduler = popScheduler(values);
  return operate(function (source, subscriber) {
    (scheduler ? concat_concat(values, source, scheduler) : concat_concat(values, source)).subscribe(subscriber);
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js



function switchMap(project, resultSelector) {
  return operate(function (source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;
    var checkComplete = function checkComplete() {
      return isComplete && !innerSubscriber && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function () {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function () {
      isComplete = true;
      checkComplete();
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/merge.js





function merge() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  var concurrent = popNumber(args, Infinity);
  var sources = args;
  return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from(sources, scheduler));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js


function skipWhile(predicate) {
  return operate(function (source, subscriber) {
    var taking = false;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/tap.js




function tap(observerOrNext, error, complete) {
  var tapObserver = isFunction(observerOrNext) || error || complete ? {
    next: observerOrNext,
    error: error,
    complete: complete
  } : observerOrNext;
  return tapObserver ? operate(function (source, subscriber) {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      var _a;
      (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
      subscriber.next(value);
    }, function () {
      var _a;
      isUnsub = false;
      (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      subscriber.complete();
    }, function (err) {
      var _a;
      isUnsub = false;
      (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
      subscriber.error(err);
    }, function () {
      var _a, _b;
      if (isUnsub) {
        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js







var nodeEventEmitterMethods = ['addListener', 'removeListener'];
var eventTargetMethods = ['addEventListener', 'removeEventListener'];
var jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
  if (isFunction(options)) {
    resultSelector = options;
    options = undefined;
  }
  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
  }
  var _a = __read(isEventTarget(target) ? eventTargetMethods.map(function (methodName) {
      return function (handler) {
        return target[methodName](eventName, handler, options);
      };
    }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2),
    add = _a[0],
    remove = _a[1];
  if (!add) {
    if (isArrayLike(target)) {
      return mergeMap(function (subTarget) {
        return fromEvent(subTarget, eventName, options);
      })(innerFrom(target));
    }
  }
  if (!add) {
    throw new TypeError('Invalid event target');
  }
  return new Observable_Observable(function (subscriber) {
    var handler = function handler() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return subscriber.next(1 < args.length ? args : args[0]);
    };
    add(handler);
    return function () {
      return remove(handler);
    };
  });
}
function toCommonHandlerRegistry(target, eventName) {
  return function (methodName) {
    return function (handler) {
      return target[methodName](eventName, handler);
    };
  };
}
function isNodeStyleEventEmitter(target) {
  return isFunction(target.addListener) && isFunction(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
  return isFunction(target.on) && isFunction(target.off);
}
function isEventTarget(target) {
  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/never.js


var NEVER = new Observable_Observable(noop);
function never() {
  return NEVER;
}
;// CONCATENATED MODULE: ./src/default_config.ts
/**
 * Configuration file for the whole player.
 * Feel free to tweak those values if you know what you're doing.
 *
 * Please not that you will need to re-build the whole project to take these
 * modifications into account.
 *
 * @type {Object}
 */
const default_config_DEFAULT_CONFIG = {
    /**
     * Volume set on unMute if the volume is set to 0 and either:
     *   - mute has never been called before
     *   - mute has last been called while the volume was already set to 0 (either
     *     via setVolume, or a previous mute call)
     * @type {Number}
     */
    DEFAULT_UNMUTED_VOLUME: 0.1,
    /**
     * Default time interval after which a request will timeout, in ms.
     * @type {Number}
     */
    DEFAULT_REQUEST_TIMEOUT: 30 * 1000,
    /**
     * Can be either:
     *   - "native": Subtitles are all displayed in a <track> element
     *   - "html": Subtitles are all displayed in a <div> separated from the video
     *     element. Can be useful to display richer TTML subtitles, for example.
     * @type {Object|null}
     */
    DEFAULT_TEXT_TRACK_MODE: "native",
    /**
     * Strategy to adopt when manually setting the current bitrate.
     * Can be either:
     *   - "seamless": transitions are very smooth but not immediate.
     *   - "direct": the quality switch happens immediately but to achieve that,
     *     the player will need to set a new MediaSource on the media element in
     *     some cases. This often leads to a black screen + unavailable APIs
     *     during a short moment.
     * @type {string}
     */
    DEFAULT_MANUAL_BITRATE_SWITCHING_MODE: "seamless",
    /**
     * Default behavior for the `enableFastSwitching` loadVideo options.
     *
     * Fast-switching allows to provide quicker transitions from lower quality
     * segments to higher quality segments but might be badly supported on some
     * devices.
     * When enabled, the RxPlayer might replace segments of a lower-quality
     * (with a lower bitrate) with segments of a higher quality (with a higher
     * bitrate). This allows to have a fast transition when network conditions
     * improve.
     * When disabled, segments of a lower-quality will not be replaced.
     */
    DEFAULT_ENABLE_FAST_SWITCHING: true,
    /**
     * Strategy to adopt when manually switching of audio adaptation.
     * Can be either:
     *    - "seamless": transitions are smooth but could be not immediate.
     *    - "direct": that strategy will perform a very small seek that result
     *    most of the time by a flush of the current buffered data, by doing
     *    that we allow quicker transition between audio track, but we could
     *    see appear a RELOADING or a SEEKING state.
     */
    DEFAULT_AUDIO_TRACK_SWITCHING_MODE: "seamless",
    /**
     * In some cases after switching the current track or bitrate, the RxPlayer
     * could be led to go into the `"RELOADING"` state, which corresponds to
     * visually a black screen (with nothing audible) before restarting playback.
     *
     * We could want to seek back some milliseconds when doing that.
     * For example, when switching the current audio track, it might make sense
     * to restart some time before, so the beginning of the sentence can be heard
     * again in the new language.
     *
     * This config property allows to set the relative position the RxPlayer will
     * seek to after reloading, in seconds.
     *
     * For example: a value of `-0.7` means that will seek back 700 milliseconds
     * when reloading due to a track or bitrate switch with necessitated a
     * reloading.
     */
    DELTA_POSITION_AFTER_RELOAD: {
        /** Relative position when switching the bitrate */
        bitrateSwitch: -0.1,
        /**
         * Relative position when switching the track.
         *
         * From tests, I noticed that seeking back was only really "pleasant" when
         * switching the audio track.
         *
         * E.g. switching the video track often means changing the camera angle or
         * even totally changing what is being seen and rely much less on temporal
         * context than when an audio track is switched.
         * As such, I decided to only set a sensible seek-back behavior when
         * switching the audio track, and only a minimal one (to still ensure
         * nothing was missed) for video.
         *
         * "Other" mainly concern text track, where seeking back could even be
         * annoying, so that behavior has been disabled in that case.
         */
        trackSwitch: { audio: -0.7,
            video: -0.1,
            other: 0 },
    },
    /**
     * Behavior of the RxPlayer when encountering a whole other codec on a already
     * existing audio or video SourceBuffer.
     *
     * Can be either:
     *
     *    - "continue": Segments linked to the new codec will continue to be
     *      pushed to that same SourceBuffer. The RxPlayer will still try to call
     *      the `changeType` API on the SourceBuffer before pushing those
     *      segments but continue even if this call failed.
     *
     *    - "reload": Every time a new incompatible codec is encountered on a
     *      given SourceBuffer, we will reload the MediaSource.
     */
    DEFAULT_CODEC_SWITCHING_BEHAVIOR: "continue",
    /**
     * If set to true, video through loadVideo will auto play by default
     * @type {Boolean}
     */
    DEFAULT_AUTO_PLAY: false,
    /**
     * If set to false, "native" subtitles (in a <track> element) will be hidden
     * by default.
     * @type {Boolean}
     */
    DEFAULT_SHOW_NATIVE_SUBTITLE: true,
    /**
     * If set to true, the player will by default stop immediately and unload the
     * content on reaching the end of the media.
     *
     * If set to false, it will not unload nor stop by default, leaving the user
     * free to seek in the already-loaded content.
     *
     * Set to `true` for legacy reasons.
     * @type {Boolean}
     */
    DEFAULT_STOP_AT_END: true,
    /**
     * Default buffer goal in seconds.
     * Once enough content has been downloaded to fill the buffer up to
     * ``current position + DEFAULT_WANTED_BUFFER_AHEAD", we will stop downloading
     * content.
     * @type {Number}
     */
    DEFAULT_WANTED_BUFFER_AHEAD: 30,
    /**
     * Default max buffer size ahead of the current position in seconds.
     * The buffer _after_ this limit will be garbage collected.
     * Set to Infinity for no limit.
     * @type {Number}
     */
    DEFAULT_MAX_BUFFER_AHEAD: Infinity,
    /**
     * Default max buffer size ahead of the current position in seconds.
     * The buffer _before_ this limit will be garbage collected.
     * Set to Infinity for no limit.
     * @type {Number}
     */
    DEFAULT_MAX_BUFFER_BEHIND: Infinity,
    /**
     * Default video buffer memory limit in kilobytes.
     * Once enough video content has been downloaded to fill the buffer up to
     * DEFAULT_MAX_VIDEO_BUFFER_SIZE , we will stop downloading
     * content.
     * @type {Number}
     */
    DEFAULT_MAX_VIDEO_BUFFER_SIZE: Infinity,
    /* eslint-disable @typescript-eslint/consistent-type-assertions */
    /**
     * Maximum possible buffer ahead for each type of buffer, to avoid too much
     * memory usage when playing for a long time.
     * Equal to Infinity if not defined here.
     * @type {Object}
     */
    MAXIMUM_MAX_BUFFER_AHEAD: {
        text: 5 * 60 * 60,
    },
    /* eslint-enable @typescript-eslint/consistent-type-assertions */
    /* eslint-disable @typescript-eslint/consistent-type-assertions */
    /**
     * Maximum possible buffer behind for each type of buffer, to avoid too much
     * memory usage when playing for a long time.
     * Equal to Infinity if not defined here.
     * @type {Object}
     */
    MAXIMUM_MAX_BUFFER_BEHIND: {
        text: 5 * 60 * 60,
    },
    /* eslint-enable @typescript-eslint/consistent-type-assertions */
    /**
     * Default bitrate ceils initially set as the first content begins.
     *
     * If no track is found with a bitrate inferior or equal to the
     * bitrate there, the one with the lowest bitrate will be taken instead.
     *
     * Set to 0 for the lowest bitrate, Infinity for the highest.
     *
     * These values are only useful for the first content played, as consecutive
     * play will always take the last set one.
     * @type {Object}
     */
    DEFAULT_INITIAL_BITRATES: {
        audio: 0,
        video: 0,
        other: 0, // tracks which are not audio/video (text images).
        // Though those are generally at a single bitrate, so no adaptive
        // mechanism is triggered for them.
    },
    /* eslint-disable @typescript-eslint/consistent-type-assertions */
    /**
     * Default bitrate floor initially set to dictate the minimum bitrate the
     * adaptive logic can automatically switch to.
     *
     * If no track is found with a quality superior or equal to the
     * bitrate there, the lowest bitrate will be taken instead.
     *
     * Set to Infinity to discard any limit in the ABR strategy.
     * @type {Object}
     */
    DEFAULT_MIN_BITRATES: {
        audio: 0,
        video: 0,
        other: 0, // tracks which are not audio/video
        // Though those are generally at a single bitrate, so no
        // adaptive mechanism is triggered for them.
    },
    /* eslint-enable @typescript-eslint/consistent-type-assertions */
    /* eslint-disable @typescript-eslint/consistent-type-assertions */
    /**
     * Default bitrate ceil initially set to dictate the maximum bitrate the
     * adaptive logic can automatically switch to.
     *
     * If no track is found with a quality inferior or equal to the
     * bitrate there, the lowest bitrate will be taken instead.
     *
     * Set to Infinity to discard any limit in the ABR strategy.
     * @type {Object}
     */
    DEFAULT_MAX_BITRATES: {
        audio: Infinity,
        video: Infinity,
        other: Infinity, // tracks which are not audio/video
        // Though those are generally at a single bitrate, so no
        // adaptive mechanism is triggered for them.
    },
    /* eslint-enable @typescript-eslint/consistent-type-assertions */
    /**
     * Delay after which, if the page is hidden, the user is considered inactive
     * on the current video.
     *
     * Allow to enforce specific optimizations when the page is not shown.
     * @see DEFAULT_THROTTLE_WHEN_HIDDEN
     * @type {Number}
     */
    INACTIVITY_DELAY: 60 * 1000,
    /**
     * If true, if the player is in a "hidden" state for a delay specified by the
     * INACTIVITY DELAY config property, we throttle automatically to the video
     * representation with the lowest bitrate.
     * @type {Boolean}
     */
    DEFAULT_THROTTLE_WHEN_HIDDEN: false,
    /**
     * If true, if the video is considered in a "hidden" state for a delay specified by
     * the INACTIVITY DELAY config property, we throttle automatically to the video
     * representation with the lowest bitrate.
     * @type {Boolean}
     */
    DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN: false,
    /**
     * If true, the video representations you can switch to in adaptive mode
     * are limited by the video element's width.
     *
     * Basically in that case, we won't switch to a video Representation with
     * a width higher than the current width of the video HTMLElement.
     * @type {Boolean}
     */
    DEFAULT_LIMIT_VIDEO_WIDTH: false,
    /**
     * Default initial live gap considered if no presentation delay has been
     * suggested, in seconds.
     * @type {Number}
     */
    DEFAULT_LIVE_GAP: {
        DEFAULT: 10,
        LOW_LATENCY: 3.5,
    },
    /**
     * Maximum time, in seconds, the player should automatically skip when stalled
     * because of a current hole in the buffer.
     * Bear in mind that this might seek over not-yet-downloaded/pushed segments.
     * @type {Number}
     */
    BUFFER_DISCONTINUITY_THRESHOLD: 0.2,
    /**
     * When encountering small discontinuities, the RxPlayer may want, in specific
     * conditions, ignore those and let the browser seek over them iself (this
     * allows for example to avoid conflicts when both the browser and the
     * RxPlayer want to seek at a different position, sometimes leading to a
     * seeking loop).
     * In this case, we however still want to seek it ourselves if the browser
     * doesn't take the opportunity soon enough.
     *
     * This value specifies a delay after which a discontinuity ignored by the
     * RxPlayer is finally considered.
     * We want to maintain high enough to be sure the browser will not seek yet
     * small enough so this (arguably rare) situation won't lead to too much
     * waiting time.
     */
    FORCE_DISCONTINUITY_SEEK_DELAY: 5000,
    /**
     * Ratio used to know if an already loaded segment should be re-buffered.
     * We re-load the given segment if the current one times that ratio is
     * inferior to the new one.
     * @type {Number}
     */
    BITRATE_REBUFFERING_RATIO: 1.5,
    /**
     * Those are used when a "QuotaExceededError" error is received after
     * appending a new segment in the SourceBuffer.
     *
     * This error can arise when the browser's buffer is considered full.
     * In this case, the player goes into manual garbage collection (GC) mode.
     * @type {Object}
     */
    BUFFER_GC_GAPS: {
        /**
         * _Low_ gap (from current position) from which the buffer will be _garbage
         * collected_ (read removed from the buffer) when a QuotaExceededError is
         * received.
         * In seconds.
         * @type {Number}
         */
        CALM: 240,
        /**
         * _High_ gap (from current position) from which the buffer will be _garbage
         * collected_ (read removed from the buffer) when a QuotaExceededError is
         * received, if the low one does not clean up any buffer.
         * In seconds.
         * @type {Number}
         */
        BEEFY: 30,
    },
    /**
     * The default number of times a manifest request will be re-performed
     * when loaded/refreshed if the request finishes on an error which
     * justify an retry.
     *
     * Note that some errors do not use this counter:
     *   - if the error is not due to the xhr, no retry will be peformed
     *   - if the error is an HTTP error code, but not a 500-smthg or a 404, no
     *     retry will be performed.
     *   - if it has a high chance of being due to the user being offline, a
     *     separate counter is used (see DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE).
     * @type Number
     */
    DEFAULT_MAX_MANIFEST_REQUEST_RETRY: 4,
    /**
     * Default delay, in seconds, during which a CDN will be "downgraded".
     *
     * For example in case of media content being available on multiple CDNs, the
     * RxPlayer may decide that a CDN is less reliable (for example, it returned a
     * server error) and should thus be avoided, at least for some time
     *
     * This value is the amount of time this CDN will be "less considered" than the
     * alternatives.
     */
    DEFAULT_CDN_DOWNGRADE_TIME: 60,
    /**
     * The default number of times a segment request will be re-performed when
     * on error which justify a retry.
     *
     * Note that some errors do not use this counter:
     *   - if the error is not due to the xhr, no retry will be peformed
     *   - if the error is an HTTP error code, but not a 500-smthg or a 404, no
     *     retry will be performed.
     *   - if it has a high chance of being due to the user being offline, a
     *     separate counter is used (see DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE).
     * @type Number
     */
    DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR: 4,
    /**
     * Under some circonstances, we're able to tell that the user is offline (see
     * the compat files).
     * When this happens, and xhr requests fails due to an error event (you might
     * still be able to perform xhr offline, e.g. on localhost), you might want to
     * retry indefinitely or with a higher number of retry than if the error is
     * due to a CDN problem.
     *
     * A capped exponential backoff will still be used (like for an error code).
     * @type {Number}
     */
    DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE: Infinity,
    /**
     * Initial backoff delay when a segment / manifest download fails, in
     * milliseconds.
     *
     * This delay will then grow exponentally by power of twos (200, 400, 800
     * etc.)
     *
     * Please note that this delay is not exact, as it will be fuzzed.
     * @type {Number}
     */
    INITIAL_BACKOFF_DELAY_BASE: {
        REGULAR: 200,
        LOW_LATENCY: 50,
    },
    /**
     * Maximum backoff delay when a segment / manifest download fails, in
     * milliseconds.
     *
     * Please note that this delay is not exact, as it will be fuzzed.
     * @type {Number}
     */
    MAX_BACKOFF_DELAY_BASE: {
        REGULAR: 3000,
        LOW_LATENCY: 1000,
    },
    /**
     * Minimum interval at which playback information samples will be taken. This
     * variable is for the "regular" mediasource strategy (that is, not for the
     * directfile API.
     *
     * At each of these interval, various different modules in the RxPlayer will
     * run based on the information communicated.
     *
     * Keep in mind this is the minimum interval. This logic will also be
     * triggered when various events of the media element are received.
     * @type {Number}
     */
    SAMPLING_INTERVAL_MEDIASOURCE: 1000,
    /**
     * Same than SAMPLING_INTERVAL_MEDIASOURCE but for lowLatency mode.
     * @type {Number}
     */
    SAMPLING_INTERVAL_LOW_LATENCY: 250,
    /**
     * Same than SAMPLING_INTERVAL_MEDIASOURCE but for the directfile API.
     * @type {Number}
     */
    SAMPLING_INTERVAL_NO_MEDIASOURCE: 500,
    /**
     * Minimum number of bytes sampled before we trust the estimate.
     * If we have not sampled much data, our estimate may not be accurate
     * enough to trust.
     * If the total of bytes sampled is less than this value, we use a
     * default estimate.
     * This specific value is based on experimentations.
     * @type {Number}
     */
    ABR_MINIMUM_TOTAL_BYTES: 150e3,
    /**
     * Minimum number of bytes, under which samples are discarded.
     * Our models do not include latency information, so connection startup time
     * (time to first byte) is considered part of the download time.
     * Because of this, we should ignore very small downloads which would cause
     * our estimate to be too low.
     * This specific value is based on experimentation.
     * @type {Number}
     */
    ABR_MINIMUM_CHUNK_SIZE: 16e3,
    /**
     * Factor with which is multiplied the bandwidth estimate when the ABR is in
     * starvation mode.
     * @type {Object}
     */
    ABR_STARVATION_FACTOR: {
        DEFAULT: 0.72,
        LOW_LATENCY: 0.72,
    },
    /**
     * Factor with which is multiplied the bandwidth estimate when the ABR is not
     * in starvation mode.
     * @type {Object}
     */
    ABR_REGULAR_FACTOR: {
        DEFAULT: 0.8,
        LOW_LATENCY: 0.8,
    },
    /**
     * If a media buffer has less than ABR_STARVATION_GAP in seconds ahead of the
     * current position in its buffer, the adaptive logic will go into starvation
     * mode.
     *
     * It gets out of starvation mode when the OUT_OF_STARVATION_GAP value is
     * reached.
     *
     * Under this starvation mode:
     *
     *   - the bandwidth considered will be a little lower than the one estimated
     *
     *   - the time the next important request take will be checked
     *     multiple times to detect when/if it takes too much time.
     *     If the request is considered too long, the bitrate will be hastily
     *     re-calculated from this single request.
     *
     * @type {Object}
     */
    ABR_STARVATION_GAP: {
        DEFAULT: 5,
        LOW_LATENCY: 5,
    },
    OUT_OF_STARVATION_GAP: {
        DEFAULT: 7,
        LOW_LATENCY: 7,
    },
    /**
     * This is a security to avoid going into starvation mode when the content is
     * ending (@see ABR_STARVATION_GAP).
     * Basically, we subtract that value from the global duration of the content
     * and we never enter "starvation mode" if the currently available buffer
     * (which equals to the current position + the available buffer ahead of it)
     * is equal or higher than this value.
     * @type {Number}
     */
    ABR_STARVATION_DURATION_DELTA: 0.1,
    /**
     * Half-life, in seconds for a fastly-evolving exponential weighted moving
     * average.
     * The lower it is, the faster the ABR logic will react to the bandwidth
     * falling quickly.
     * Should be kept to a lower number than ABR_SLOW_EMA for coherency reasons.
     * @type {Number}
     */
    ABR_FAST_EMA: 2,
    /**
     * Half-life, in seconds for a slowly-evolving exponential weighted moving
     * average.
     * The lower it is, the faster the ABR logic is going to react to recent
     * bandwidth variation, on the higher and on the lower side.
     * Should be kept to a higher number than ABR_FAST_EMA for coherency reasons.
     * @type {Number}
     */
    ABR_SLOW_EMA: 10,
    /**
     * Number of seconds ahead in the buffer after which playback will resume when
     * seeking on an unbuffered part of the content.
     * @type {Number}
     */
    RESUME_GAP_AFTER_SEEKING: {
        DEFAULT: 1.5,
        LOW_LATENCY: 0.5,
    },
    /**
     * Number of seconds ahead in the buffer after which playback will resume when
     * the player was rebuffering due to a low readyState.
     * @type {Number}
     */
    RESUME_GAP_AFTER_NOT_ENOUGH_DATA: {
        DEFAULT: 0.5,
        LOW_LATENCY: 0.5,
    },
    /**
     * Number of seconds ahead in the buffer after which playback will resume
     * after the player went through a buffering step.
     * @type {Number}
     */
    RESUME_GAP_AFTER_BUFFERING: {
        DEFAULT: 5,
        LOW_LATENCY: 0.5,
    },
    /**
     * Maximum number of seconds in the buffer based on which a "rebuffering"
     * strategy will be considered:
     * The player will pause playback to get enough time building a sufficient
     * buffer. This mostly happen when seeking in an unbuffered part or when not
     * enough buffer is ahead of the current position.
     * @type {Number}
     */
    REBUFFERING_GAP: {
        DEFAULT: 0.5,
        LOW_LATENCY: 0.2,
    },
    /**
     * Amount of time (in seconds) with data ahead of the current position, at
     * which we always consider the browser to be able to play.
     *
     * If the media element has this amount of data in advance or more but
     * playback cannot begin, the player will consider it "freezing".
     */
    MINIMUM_BUFFER_AMOUNT_BEFORE_FREEZING: 2,
    /**
     * A media whose position inexplicably does not increment despite playing is
     * called as "freezing" in the RxPlayer.
     *
     * If the media is still "freezing" after waiting for `UNFREEZING_SEEK_DELAY`
     * milliseconds, the RxPlayer will try to un-freeze the situation by interacting
     * with the media element.
     *
     * Those interactions can be costly in time before playback continue, so it
     * should be set at a sufficiently high value to avoid false positives.
     */
    UNFREEZING_SEEK_DELAY: 6000,
    /**
     * A media whose position inexplicably does not increment despite playing is
     * called as "freezing" in the RxPlayer.
     *
     * A small freezing interval may be normal as the browser may take time before
     * playing, e.g. after a seek.
     *
     * If the media is still "freezing" after waiting for `FREEZING_STALLED_DELAY`
     * milliseconds, the RxPlayer will emit a BUFFERING state through its API to
     * notify that the player cannot currently advance.
     */
    FREEZING_STALLED_DELAY: 600,
    /**
     * A media whose position inexplicably does not increment despite playing is
     * called as "freezing" in the RxPlayer.
     *
     * If the media is frozen for a sufficiently large time
     * (@see UNFREEZING_SEEK_DELAY), the RxPlayer will perform a seek corresponding
     * to its current position plus `UNFREEZING_DELTA_POSITION` seconds.
     *
     * This should be kept short enough as the goal is just to un-freeze lower-level
     * buffers.
     */
    UNFREEZING_DELTA_POSITION: 0.001,
    /**
     * Maximum authorized difference between what we calculated to be the
     * beginning or end of the segment in a media buffer and what we
     * actually are noticing now.
     *
     * If the segment seems to have removed more than this size in seconds, we
     * will infer that the segment has been garbage collected and we might try to
     * re-download it.
     * @type {Number}
     */
    MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT: 0.15,
    /**
     * The maximum authorized difference, in seconds, between the real buffered
     * time of a given chunk and what the segment information of the Manifest
     * tells us.
     *
     * Setting a value too high can lead to parts of the media buffer being
     * linked to the wrong segments and to segments wrongly believed to be still
     * complete (instead of garbage collected).
     *
     * Setting a value too low can lead to parts of the media buffer not being
     * linked to the concerned segment and to segments wrongly believed to be
     * partly garbage collected (instead of complete segments).
     * @type {Number}
     */
    MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE: 0.4,
    /**
     * The maximum authorized difference, in seconds, between the duration a
     * segment should have according to the Manifest and the actual duration it
     * seems to have once pushed to the media buffer.
     *
     * Setting a value too high can lead to parts of the media buffer being
     * linked to the wrong segments and to segments wrongly believed to be still
     * complete (instead of garbage collected).
     *
     * Setting a value too low can lead to parts of the media buffer not being
     * linked to the concerned segment and to segments wrongly believed to be
     * partly garbage collected (instead of complete segments). This last point
     * could lead to unnecessary segment re-downloading.
     * @type {Number}
     */
    MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE: 0.3,
    /**
     * Minimum duration in seconds a segment should be into a buffered range to be
     * considered as part of that range.
     * Segments which have less than this amount of time "linked" to a buffered
     * range will be deleted.
     *
     * Setting a value too low can lead in worst-case scenarios to segments being
     * wrongly linked to the next or previous range it is truly linked too (if
     * those ranges are too close).
     *
     * Setting a value too high can lead to part of the buffer not being assigned
     * any segment. It also limits the minimum duration a segment can be.
     *
     * TODO As of now, this limits the minimum size a complete segment can be. A
     * better logic would be to also consider the duration of a segment. Though
     * this logic could lead to bugs with the current code.
     * @type {Number}
     */
    MINIMUM_SEGMENT_SIZE: 0.005,
    /**
     * Append windows allow to filter media data from segments if they are outside
     * a given limit.
     * Coded frames with presentation timestamp within this range are allowed to
     * be appended to the media buffer while coded frames outside this range are
     * filtered out.
     *
     * Those are often set to be the start and end of the "Period" the segment is
     * in.
     * However, we noticed that some browsers were too aggressive when the exact
     * limits were set: more data than needed was removed, often leading to
     * discontinuities.
     *
     * Those securities are added to the set windows (substracted from the window
     * start and added to the window end) to avoid those problems.
     * @type {Object}
     */
    APPEND_WINDOW_SECURITIES: {
        START: 0.2,
        END: 0.1,
    },
    /**
     * Maximum interval at which text tracks are refreshed in an "html"
     * textTrackMode.
     *
     * The text tracks are also refreshed on various video events, this interval
     * will only trigger a refresh if none of those events was received during
     * that timespan.
     *
     * Note that if the TextTrack cue did not change between two intervals or
     * events, the DOM won't be refreshed.
     * The TextTrack cues structure is also optimized for fast retrieval.
     * We should thus not have much of a performance impact here if we set a low
     * interval.
     *
     * @type {Number}
     */
    MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL: 50,
    /**
     * On browsers with no ResizeObserver API, this will be the interval in
     * milliseconds at which we should check if the text track element has
     * changed its size, and updates proportional text-track data accordingly
     * (like a proportional font-size).
     *
     * This is only used:
     *   - in an "html" textTrackMode
     *   - when some styling is proportional in the text track data
     *
     * Putting a value too low will render faster but might use to much proc time.
     * Putting a value too high might provoke a re-render too late after the user
     * changed the element's size (e.g. when going to fullscreen mode).
     *
     * @type {Number}
     */
    TEXT_TRACK_SIZE_CHECKS_INTERVAL: 250,
    /**
     * The Buffer padding is a time offset from the current time that affects
     * the buffer.
     *
     * Basically, from a given time, if the current buffer gap number (time
     * between the current time and the end of the downloaded buffer) is above
     * the padding described here (of the corresponding type), we won't
     * reschedule segments for that range.
     *
     * This is to avoid excessive re-buffering.
     *
     * Keeping the padding too low would increase the risk of re-bufferings.
     *
     * Keeping the padding too high would delay visible quality increase.
     *
     * @type {Object}
     */
    BUFFER_PADDING: {
        audio: 1,
        video: 3,
        other: 1, // tracks which are not audio/video (text images).
    },
    /**
     * Segments of different types are downloaded by steps:
     *
     *   - first the audio/video/text Segments which are immediately needed
     *
     *   - then once every of those Segments have been downloaded, less-needed
     *     Segments
     *
     *   - then once every of those less-needed Segments have been downloaded,
     *     even less-needed Segments
     *
     *   - etc.
     *
     * This stepped download strategy allows to make a better use of network
     * ressources.
     *
     * For example, if more than sufficient audio buffer has been downloaded but
     * the immediately-needed video Segment is still pending its request, we might
     * be in a situation of rebuffering.
     * In that case, a better strategy would be to make sure every network
     * ressource is allocated for this video Segment before rebuffering happens.
     *
     * This is where those steps become useful.
     *
     * --
     *
     * The numbers defined in this Array describe what the steps are.
     *
     * Each number is linked to a distance from the current playing position, in
     * seconds.
     * Distances which will be used as limit points, from which a new step is
     * reached (see example).
     *
     * In the RxPlayer's code, each step is then translated in to a priority
     * number.
     * The lower is that number, the lower is the step and the lower is the step,
     * the higher is the priority.
     *
     * Note: You can set an empty array to deactivate the steps feature (every
     * Segments have the same priority).
     *
     * @example
     *
     * let's imagine the following SEGMENT_PRIORITIES_STEPS array:
     * [5, 11, 17, 25]
     *
     * To link each Segments to a corresponding priority number (and thus to a
     * specific step), we have to consider the distance between the current
     * position and the start time of the Segment.
     *
     * We have in our example 5 groups, which correspond to the following possible
     * distances:
     *   1. inferior to 5 => first step (priority number = 0)
     *   2. between 5 and 11 => second step (priority number = 1)
     *   3. between 11 and 17 => third step (priority number = 2)
     *   4. between 17 and 25 => fourth step (priority number = 3)
     *   5. superior to 25 => fifth step (priority number = 4)
     *
     * Segments corresponding to a lower-step will need to all be downloaded
     * before Segments of a newer step begin.
     *
     * @type {Array.<Number>}
     */
    SEGMENT_PRIORITIES_STEPS: [2,
        4,
        8,
        12,
        18,
        25],
    // 7th Step (priority number = 6):  >= 25
    /**
     * Some segment requests are said to be "high priority".
     *
     * Requests in that category once done will cancel any segment request that
     * has a low priority number (see `SEGMENT_PRIORITIES_STEPS`) - meaning a
     * priority number equal to `MIN_CANCELABLE_PRIORITY` or more.
     *
     * Enter here the last priority number that is considered high priority
     * (beginning by the first step, which has the priority number `0`).
     * @type {number}
     */
    MAX_HIGH_PRIORITY_LEVEL: 1,
    /**
     * Enter here the first priority step (see `SEGMENT_PRIORITIES_STEPS`) that
     * will be considered as low priority.
     *
     * Segment requests with a low priority will be cancelled if a high priority
     * segment request (see MAX_HIGH_PRIORITY_LEVEL) is scheduled while they are
     * pending.
     *
     * This number should be strictly superior to the value indicated in
     * `MAX_HIGH_PRIORITY_LEVEL`.
     * @type {number}
     */
    MIN_CANCELABLE_PRIORITY: 3,
    /**
     * Robustnesses used in the {audio,video}Capabilities of the
     * MediaKeySystemConfiguration (DRM).
     *
     * Only used for widevine keysystems.
     *
     * Defined in order of importance (first will be tested first etc.)
     * @type {Array.<string>}
     */
    EME_DEFAULT_WIDEVINE_ROBUSTNESSES: ["HW_SECURE_ALL",
        "HW_SECURE_DECODE",
        "HW_SECURE_CRYPTO",
        "SW_SECURE_DECODE",
        "SW_SECURE_CRYPTO"],
    /**
     * Robustnesses used in the {audio,video}Capabilities of the
     * MediaKeySystemConfiguration (DRM).
     *
     * Only used for "com.microsoft.playready.recommendation" key system.
     *
     * Defined in order of importance (first will be tested first etc.)
     * @type {Array.<string>}
     */
    EME_DEFAULT_PLAYREADY_ROBUSTNESSES: ["3000", "2000"],
    /**
     * Link canonical key systems names to their respective reverse domain name,
     * used in the EME APIs.
     * This allows to have a simpler API, where users just need to set "widevine"
     * or "playready" as a keySystem.
     * @type {Object}
     */
    /* eslint-disable @typescript-eslint/consistent-type-assertions */
    EME_KEY_SYSTEMS: {
        clearkey: ["webkit-org.w3.clearkey",
            "org.w3.clearkey"],
        widevine: ["com.widevine.alpha"],
        playready: ["com.microsoft.playready.recommendation",
            "com.microsoft.playready",
            "com.chromecast.playready",
            "com.youtube.playready"],
        fairplay: ["com.apple.fps.1_0"],
    },
    /* eslint-enable @typescript-eslint/consistent-type-assertions */
    /**
     * The Manifest parsing logic has a notion of "unsafeMode" which allows to
     * speed-up this process a lot with a small risk of de-synchronization with
     * what actually is on the server.
     * Because using that mode is risky, and can lead to all sort of problems, we
     * regularly should fall back to a regular "safe" parsing every once in a
     * while.
     * This value defines how many consecutive time maximum the "unsafeMode"
     * parsing can be done.
     */
    MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE: 10,
    /**
     * Minimum time spent parsing the Manifest before we can authorize parsing
     * it in an "unsafeMode", to speed-up the process with a little risk.
     * Please note that this parsing time also sometimes includes idle time such
     * as when the parser is waiting for a request to finish.
     */
    MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE: 200,
    /**
     * Minimum amount of <S> elements in a DASH MPD's <SegmentTimeline> element
     * necessary to begin parsing the current SegmentTimeline element in an
     * unsafe manner (meaning: with risks of de-synchronization).
     * This is only done when the "unsafeMode" parsing mode is enabled.
     */
    MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY: 300,
    /**
     * When we detect that the local Manifest might be out-of-sync with the
     * server's one, we schedule a Manifest refresh.
     * However, as this "unsynchronization" is only a theory and as we do not want
     * to send too many Manifest requests, we keep a delay between the last
     * Manifest refresh done and that one.
     * This value indicates which delay we want. Note that the Manifest could
     * still be refreshed before this delay for other reasons.
     * @type {Number}
     */
    OUT_OF_SYNC_MANIFEST_REFRESH_DELAY: 3000,
    /**
     * When a partial Manifest update (that is an update with a partial sub-set
     * of the Manifest) fails, we will perform an update with the whole Manifest
     * instead.
     * To not overload the client - as parsing a Manifest can be resource heavy -
     * we set a minimum delay to wait before doing the corresponding request.
     * @type {Number}
     */
    FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY: 3000,
    /**
     * DASH Manifest based on a SegmentTimeline should normally have an
     * MPD@minimumUpdatePeriod attribute which should be sufficient to
     * know when to refresh it.
     * However, there is a specific case, for when it is equal to 0.
     * As of DASH-IF IOP (valid in v4.3), when a DASH's MPD set a
     * MPD@minimumUpdatePeriod to `0`, a client should not refresh the MPD
     * unless told to do so through inband events, in the stream.
     * In reality however, we found it to not always be the case (even with
     * DASH-IF own streams) and moreover to not always be the best thing to do.
     * We prefer to refresh in average at a regular interval when we do not have
     * this information.
     * /!\ This value is expressed in seconds.
     */
    DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0: 3,
    /**
     * Default value for the maximum number of simultaneous MediaKeySessions that
     * will be kept in a cache (linked to the MediaKeys instance) to avoid doing
     * superfluous license requests.
     *
     * If this number is reached, any new session creation will close the oldest
     * one.
     * Another value can be configured through the API, in which case this default
     * will be overwritten.
     * @type {Number}
     */
    EME_DEFAULT_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS: 15,
    /**
     * When playing contents with a persistent license, we will usually store some
     * information related to that MediaKeySession, to be able to play it at a
     * later time.
     *
     * Those information are removed once a MediaKeySession is not considered
     * as "usable" anymore. But to know that, the RxPlayer has to load it.
     *
     * But the RxPlayer does not re-load every persisted MediaKeySession every
     * time to check each one of them one by one, as this would not be a
     * performant thing to do.
     *
     * So this is only done when and if the corresponding content is encountered
     * again and only if it contains the same initialization data.
     *
     * We have to consider that those "information" contain binary data which can
     * be of arbitrary length. Size taken by an array of them can relatively
     * rapidly take a lot of space in JS memory.
     *
     * So to avoid this storage to take too much space (would it be in the chosen
     * browser's storage or in JS memory), we now set a higher bound for the
     * amount of MediaKeySession information that can be stored at the same time.
     *
     * I set the value of 1000 here, as it seems big enough to not be considered a
     * problem (though it can become one, when contents have a lot of keys per
     * content), and still low enough so it should not cause much problem (my
     * method to choose that number was to work with power of 10s and choosing the
     * amount which seemed the most sensible one).
     *
     * This wasn't battle-tested however.
     */
    EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION: 1000,
    /**
     * After loading a persistent MediaKeySession, the RxPlayer needs to ensure
     * that its keys still allow to decrypt a content.
     *
     * However on some browsers, the `keyStatuses` property that we used to check
     * the keys' satuses linked to that session can be empty for some time after
     * the loading operation is done.
     *
     * This value allows to configure a delay in milliseconds that will be the
     * maximum time we will wait after a persistent session is loaded.
     * If after that time, the `keyStatuses` property is still empty, we will
     * consider that session as not usable.
     */
    EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES: 100,
    /**
     * The player relies on browser events and properties to update its status to
     * "ENDED".
     *
     * Sadly in some cases, like in Chrome 54, this event is never triggered on
     * some contents probably due to a browser bug.
     *
     * This threshold resolves this issue by forcing the status to "ENDED" when:
     *   1. the player is stalling
     *   2. the absolute difference between current playback time and duration is
     *      under this value
     *
     * If set to null, this workaround is disabled and the player only relies on
     * browser events.
     *
     * @type {Number|null}
     */
    FORCED_ENDED_THRESHOLD: 0.0008,
    /**
     * Maximum duration from the current position we will let in the buffer when
     * switching an Adaptation of a given type.
     *
     * For example, if we have ``text: { before: 1, after: 4 }``, it means that
     * when switching subtitles, we will let 1 second before and 4 second after
     * the current position in the previous language (until the new segments
     * overwrite it).
     * This is to allow smooth transitions and avoid de-synchronization that
     * can happen when removing the content being decoded.
     * @type {Object}
     */
    ADAPTATION_SWITCH_BUFFER_PADDINGS: {
        video: { before: 5, after: 5 },
        audio: { before: 2, after: 2.5 },
        text: { before: 0, after: 0 },
        image: { before: 0, after: 0 }, // not managed natively, so no problem here
    },
    /**
     * Interval, in milliseconds, at which we should manually flush
     * SourceBuffers.
     * Some browsers (happened with firefox 66) sometimes "forget" to send us
     * `update` or `updateend` events.
     * In that case, we're completely unable to continue the queue here and
     * stay locked in a waiting state.
     * This interval is here to check at regular intervals if the underlying
     * SourceBuffer is currently updating.
     * @type {Number}
     */
    SOURCE_BUFFER_FLUSHING_INTERVAL: 500,
    /**
     * Any already-pushed segment starting before or at the current position +
     * CONTENT_REPLACEMENT_PADDING won't be replaced by new segments.
     *
     * This allows to avoid overwriting segments that are currently being decoded
     * as we encountered many decoding issues when doing so.
     * @type {Number} - in seconds
     */
    CONTENT_REPLACEMENT_PADDING: 1.2,
    /**
     * For video and audio segments, determines two thresholds below which :
     * - The segment is considered as loaded from cache
     * - The segment may be loaded from cache depending on the previous request
     */
    CACHE_LOAD_DURATION_THRESHOLDS: {
        video: 50,
        audio: 10,
    },
    /** Interval we will use to poll for checking if an event shall be emitted */
    STREAM_EVENT_EMITTER_POLL_INTERVAL: 250,
    /**
     * In Javascript, numbers are encoded in a way that a floating number may be
     * represented internally with a rounding error. When multiplying times in
     * seconds by the timescale, we've encoutered cases were the rounding error
     * was amplified by a factor which is about the timescale.
     * Example :
     * (192797480.641122).toFixed(20) = 192797480.64112201333045959473
     * (error is 0.0000000133...)
     * 192797480.641122 * 10000000 = 1927974806411220.2 (error is 0.2)
     * 192797480.641122 * 10000000 * 4 = 7711899225644881 (error is 1)
     * The error is much more significant here, once the timescale has been
     * applied.
     * Thus, we consider that our max tolerable rounding error is 1ms.
     * It is much more than max rounding errors when seen into practice,
     * and not significant from the media loss perspective.
     */
    DEFAULT_MAXIMUM_TIME_ROUNDING_ERROR: 1 / 1000,
    /**
     * RxPlayer's media buffers have a linked history registering recent events
     * that happened on those.
     * The reason is to implement various heuristics in case of weird browser
     * behavior.
     *
     * The `BUFFERED_HISTORY_RETENTION_TIME` is the minimum age an entry of
     * that history can have before being removed from the history.
     */
    BUFFERED_HISTORY_RETENTION_TIME: 60000,
    /**
     * RxPlayer's media buffers have a linked history registering recent events
     * that happened on those.
     * The reason is to implement various heuristics in case of weird browser
     * behavior.
     *
     * The `BUFFERED_HISTORY_RETENTION_TIME` is the maximum number of entries
     * there can be in that history.
     */
    BUFFERED_HISTORY_MAXIMUM_ENTRIES: 200,
    /**
     * Minimum buffer in seconds ahead relative to current time
     * we should be able to download, even in cases of saturated memory.
     */
    MIN_BUFFER_AHEAD: 5,
    /**
     * Distance in seconds behind the current position
     * the player will free up to in the case we agressively free up memory
     * It is set to avoid playback issues
     */
    UPTO_CURRENT_POSITION_CLEANUP: 5,
};
/* harmony default export */ const default_config = (default_config_DEFAULT_CONFIG);

;// CONCATENATED MODULE: ./src/utils/object_assign.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function objectAssign(target, ...sources) {
    if (target === null || target === undefined) {
        throw new TypeError("Cannot convert undefined or null to object");
    }
    // eslint-disable-next-line  @typescript-eslint/no-unsafe-assignment
    const to = Object(target);
    for (let i = 0; i < sources.length; i++) {
        const source = sources[i];
        for (const key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                /* eslint-disable @typescript-eslint/no-unsafe-member-access */
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                to[key] = source[key];
                /* eslint-enable @typescript-eslint/no-unsafe-member-access */
            }
        }
    }
    return to;
}
// eslint-disable-next-line @typescript-eslint/unbound-method, no-restricted-properties
/* harmony default export */ const object_assign = (typeof Object.assign === "function" ?
    // eslint-disable-next-line no-restricted-properties
    Object.assign :
    // eslint-disable-next-line  @typescript-eslint/unbound-method
    objectAssign);

;// CONCATENATED MODULE: ./src/utils/deep_merge.ts

/**
 * Check if an item is an object
 * @param item
 * @returns {boolean}
 */
function isObject(item) {
    return (item !== null
        && item !== undefined
        && !Array.isArray(item)
        && typeof item === "object");
}
/**
 * Deeply merge nested objects
 * @param target
 * @param sources
 * @returns output : merged object
 */
function deepMerge(target, ...sources) {
    if (sources.length === 0) {
        return target;
    }
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                let newTarget = target[key];
                if (newTarget === undefined) {
                    newTarget = {};
                    target[key] = newTarget;
                }
                deepMerge(newTarget, source[key]);
            }
            else {
                object_assign(target, { [key]: source[key] });
            }
        }
    }
    return deepMerge(target, ...sources);
}

;// CONCATENATED MODULE: ./src/config.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class ConfigHandler {
    constructor() {
        this._config = default_config;
    }
    update(config) {
        const newConfig = deepMerge(this._config, config);
        this._config = newConfig;
    }
    getCurrent() {
        return this._config;
    }
}
const configHandler = new ConfigHandler();
/* harmony default export */ const src_config = (configHandler);

;// CONCATENATED MODULE: ./src/utils/is_non_empty_string.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {*} x
 * @returns {string}
 */
function isNonEmptyString(x) {
    return typeof x === "string" && x.length > 0;
}

;// CONCATENATED MODULE: ./src/utils/is_null_or_undefined.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns true if the argument given is either null or undefined.
 * This function was added to have a clearer alternative to `== null` which is
 * not always understood by newcomers to the code, and which can be overused when
 * only one of the possibility can arise.
 * @param {*} x
 * @returns {*}
 */
function isNullOrUndefined(x) {
    return x === null || x === undefined;
}

;// CONCATENATED MODULE: ./src/utils/noop.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Do nothing (but do it well).
 *
 * Having this definition here allow to use the same reference each time a noop
 * is needed.
 * Also, it allows to avoid telling eslint to ignore empty blocks everywhere.
 */
/* eslint-disable no-empty,@typescript-eslint/no-empty-function */
/* harmony default export */ function utils_noop() { }
/* eslint-enable no-empty, @typescript-eslint/no-empty-function */

;// CONCATENATED MODULE: ./src/utils/assert.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Throw an AssertionError if the given assertion is false.
 * @param {boolean} assertion
 * @param {string} [message] - Optional message property for the AssertionError.
 * @throws AssertionError - Throws if the assertion given is false
 */
function assert_assert(assertion, message) {
    if (false) {}
}
/**
 * Throws if the given Object does not respect the interface.
 * @param {Object} o
 * @param {Object} iface - Contains the checked keynames of o and link them
 * to their types (obtained through the typeof operator).
 * @param {string} [name="object"] - name of the _interface_
 * @throws AssertionError - The argument o given is not an object
 * @throws AssertionError - The _interface_ is not respected.
 */
function assertInterface(o, iface, name = "object") {
    assert_assert(!isNullOrUndefined(o), `${name} should be an object`);
    for (const k in iface) {
        if (iface.hasOwnProperty(k)) {
            /* eslint-disable max-len  */
            /* eslint-disable @typescript-eslint/restrict-template-expressions */
            assert_assert(typeof o[k] === iface[k], `${name} should have property ${k} as a ${iface[k]}`);
            /* eslint-enable max-len */
            /* eslint-enable @typescript-eslint/restrict-template-expressions */
        }
    }
}

;// CONCATENATED MODULE: ./src/utils/task_canceller.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Class facilitating asynchronous task cancellation.
 *
 * This class can be used to notify some code running an asynchronous task (for
 * example, a request) that is should abort what it is doing (for example, abort
 * a request when it isn't needed anymore).
 *
 * To do that, the code which might ask for cancellation have to create a new
 * `TaskCanceller`:
 * ```js
 * const canceller = new TaskCanceller();
 * ```
 *
 * And has to provide its associated `CancellationSignal` to the code running
 * the asynchronous task:
 * ```js
 * runAsyncTask(canceller.signal);
 * ```
 *
 * In the asynchronous task, the signal can be listened to (see documentation
 * on `CancellationSignal` for more information):
 * ```js
 * function runAsyncTask(cancellationSignal) {
 *  // Let's say this function returns a Promise (this is not mandatory however)
 *  return Promise((resolve, reject) => {
 *    // In this example, we'll even catch the case where an asynchronous task
 *    // was already cancelled before being called.
 *    // This ensure that no code will run if that's the case.
 *    if (cancellationSignal.isCancelled) {
 *      // Here we're rejecting the CancellationError to notify the caller that
 *      // this error was due to the task being aborted.
 *      reject(cancellationSignal.cancellationError);
 *      return;
 *    }
 *
 *    // Example:
 *    // performing asynchronous task and registering callbacks on success/failure.
 *    const myCancellableTask = doSomeAsyncTasks()
 *      .onFinished(onTaskFinished);
 *      .onFailed(onTaskFailed);
 *
 *    // Run a callback when/if the corresponding `TaskCanceller` was triggered.
 *    // Run immediately if the TaskCanceller was already triggered.
 *    const deregisterSignal = cancellationSignal.register(onCancellation);
 *
 *    // Callback called on cancellation (if this task was cancelled while the
 *    // cancellationSignal's listener is still registered).
 *    // The `error` in argument is linked to that cancellation. It is usually
 *    // expected that the same Error instance is used when rejecting Promises.
 *    function onCancellation(error : CancellationError) {
 *      // abort asynchronous task
 *      myCancellableTask.cancel();
 *
 *      // In this example, reject the current pending Promise
 *      reject(CancellationError);
 *    }
 *
 *    // Callback called after the asynchronous task has finished with success.
 *    function onTaskFinished() {
 *      // Stop listening to the cancellationSignal
 *      deregisterSignal();
 *
 *      // Resolve the Promise
 *      resolve();
 *    }
 *
 *    // Callback called after the asynchronous task has finished with failure.
 *    function onTaskFailed(someError : Error) {
 *      // Stop listening to the cancellationSignal
 *      deregisterSignal();
 *
 *      // Resolve the Promise
 *      reject(error);
 *    }
 *  });
 * }
 * ```
 *
 * The code asking for cancellation can then trigger a cancellation at any time
 * (even before the signal was given) and listen to possible CancellationErrors
 * to know when it was cancelled.
 * ```js
 * const canceller = new TaskCanceller();
 *
 * runAsyncTask(canceller.signal)
 *   .then(() => { console.log("Task succeeded!"); )
 *   .catch((err) => {
 *      if (TaskCanceller.isCancellationError(err)) {
 *        console.log("Task cancelled!");
 *      } else {
 *        console.log("Task failed:", err);
 *      }
 *   });
 * canceller.cancel(); // Cancel the task, calling registered callbacks
 * ```
 * @class TaskCanceller
 */
class TaskCanceller {
    /**
     * Creates a new `TaskCanceller`, with its own `CancellationSignal` created
     * as its `signal` provide.
     * You can then pass this property to async task you wish to be cancellable.
     * @param {Object|undefined} options
     */
    constructor(options) {
        const [trigger, register] = createCancellationFunctions();
        this.isUsed = false;
        this._trigger = trigger;
        this.signal = new CancellationSignal(register);
        if ((options === null || options === void 0 ? void 0 : options.cancelOn) !== undefined) {
            const unregisterParent = options.cancelOn.register(() => {
                this.cancel();
            });
            this.signal.register(unregisterParent);
        }
    }
    /**
     * "Trigger" the `TaskCanceller`, notify through its associated
     * `CancellationSignal` (its `signal` property) that a task should be aborted.
     *
     * Once called the `TaskCanceller` is permanently triggered.
     *
     * An optional CancellationError can be given in argument for when this
     * cancellation is actually triggered as a chain reaction from a previous
     * cancellation.
     * @param {Error} [srcError]
     */
    cancel(srcError) {
        if (this.isUsed) {
            return;
        }
        this.isUsed = true;
        const cancellationError = srcError !== null && srcError !== void 0 ? srcError : new CancellationError();
        this._trigger(cancellationError);
    }
    /**
     * Check that the `error` in argument is a `CancellationError`, most likely
     * meaning that the linked error is due to a task aborted via a
     * `CancellationSignal`.
     * @param {*} error
     * @returns {boolean}
     */
    static isCancellationError(error) {
        return error instanceof CancellationError;
    }
}
/**
 * Signal allowing to be notified when the linked task needs to be aborted.
 * @class
 */
class CancellationSignal {
    /**
     * Creates a new CancellationSignal.
     * /!\ Note: Only a `TaskCanceller` is supposed to be able to create one.
     * @param {Function} registerToSource - Function called when the task is
     * cancelled.
     */
    constructor(registerToSource) {
        this.isCancelled = false;
        this.cancellationError = null;
        this._listeners = [];
        registerToSource((cancellationError) => {
            this.cancellationError = cancellationError;
            this.isCancelled = true;
            while (this._listeners.length > 0) {
                const listener = this._listeners.splice(this._listeners.length - 1, 1)[0];
                listener(cancellationError);
            }
        });
    }
    /**
     * Registers a function that will be called when/if the current task is
     * cancelled.
     *
     * Multiple calls to `register` can be performed to register multiple
     * callbacks on cancellation associated to the same `CancellationSignal`.
     *
     * @param {Function} fn - This function should perform all logic allowing to
     * abort everything the task is doing.
     *
     * It takes in argument the `CancellationError` which was created when the
     * task was aborted.
     * You can use this error to notify callers that the task has been aborted,
     * for example through a rejected Promise.
     *
     * @return {Function} - Removes that cancellation listener. You can call this
     * once you don't want the callback to be triggered anymore (e.g. after the
     * task succeeded or failed).
     * You don't need to call that function when cancellation has already been
     * performed.
     */
    register(fn) {
        if (this.isCancelled) {
            assert_assert(this.cancellationError !== null);
            fn(this.cancellationError);
        }
        this._listeners.push(fn);
        return () => this.deregister(fn);
    }
    /**
     * De-register a function registered through the `register` function.
     * Do nothing if that function wasn't registered.
     *
     * You can call this method when using the return value of `register` is not
     * practical.
     * @param {Function} fn
     */
    deregister(fn) {
        if (this.isCancelled) {
            return;
        }
        for (let i = 0; i < this._listeners.length; i++) {
            if (this._listeners[i] === fn) {
                this._listeners.splice(i, 1);
                return;
            }
        }
    }
}
/**
 * Error created when a task is cancelled.
 * @class CancellationError
 * @extends Error
 */
class CancellationError extends Error {
    constructor() {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, CancellationError.prototype);
        this.name = "CancellationError";
        this.message = "This task was cancelled.";
    }
}
/**
 * Helper function allowing communication between a `TaskCanceller` and a
 * `CancellationSignal`.
 * @returns {Array.<Function>}
 */
function createCancellationFunctions() {
    let listener = utils_noop;
    return [
        function trigger(error) {
            listener(error);
        },
        function register(newListener) {
            listener = newListener;
        },
    ];
}

;// CONCATENATED MODULE: ./src/utils/reference.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create an `ISharedReference` object encapsulating the mutable `initialValue`
 * value of type T.
 *
 * @see ISharedReference
 * @param {*} initialValue
 * @returns {Observable}
 */
function createSharedReference(initialValue) {
    /** Current value referenced by this `ISharedReference`. */
    let value = initialValue;
    /**
     * Attributes each linked to a single registered callbacks which listen to the
     * referenced value's updates.
     *
     * Contains the following properties:
     *   - `trigger`: Function which will be called with the new reference's value
     *     once it changes
     *   - `complete`: Allows to clean-up the listener, will be called once the
     *     reference is finished.
     *   - `hasBeenCleared`: becomes `true` when the Observable becomes
     *     unsubscribed and thus when it is removed from the `cbs` array.
     *     Adding this property allows to detect when a previously-added
     *     listener has since been removed e.g. as a side-effect during a
     *     function call.
     *   - `complete`: Callback to call when the current Reference is "finished".
     */
    const cbs = [];
    let isFinished = false;
    return {
        /**
         * Returns the current value of this shared reference.
         * @returns {*}
         */
        getValue() {
            return value;
        },
        /**
         * Update the value of this shared reference.
         * @param {*} newVal
         */
        setValue(newVal) {
            if (isFinished) {
                if (false) {}
                return;
            }
            value = newVal;
            if (cbs.length === 0) {
                return;
            }
            const clonedCbs = cbs.slice();
            for (const cbObj of clonedCbs) {
                try {
                    if (!cbObj.hasBeenCleared) {
                        cbObj.trigger(newVal);
                    }
                }
                catch (_) {
                    /* nothing */
                }
            }
        },
        /**
         * Update the value of this shared reference only if it changed.
         * @param {*} newVal
         */
        setValueIfChanged(newVal) {
            if (newVal !== value) {
                this.setValue(newVal);
            }
        },
        /**
         * Returns an Observable which synchronously emits the current value (unless
         * the `skipCurrentValue` argument has been set to `true`) and then each
         * time a new value is set.
         * @param {boolean} [skipCurrentValue]
         * @returns {Observable}
         */
        asObservable(skipCurrentValue) {
            return new Observable_Observable((obs) => {
                if (skipCurrentValue !== true) {
                    obs.next(value);
                }
                if (isFinished) {
                    obs.complete();
                    return undefined;
                }
                const cbObj = { trigger: obs.next.bind(obs),
                    complete: obs.complete.bind(obs),
                    hasBeenCleared: false };
                cbs.push(cbObj);
                return () => {
                    /**
                     * Code in here can still be running while this is happening.
                     * Set `hasBeenCleared` to `true` to avoid still using the
                     * `subscriber` from this object.
                     */
                    cbObj.hasBeenCleared = true;
                    const indexOf = cbs.indexOf(cbObj);
                    if (indexOf >= 0) {
                        cbs.splice(indexOf, 1);
                    }
                };
            });
        },
        /**
         * Allows to register a callback to be called each time the value inside the
         * reference is updated.
         * @param {Function} cb - Callback to be called each time the reference is
         * updated. Takes the new value im argument.
         * @param {Object|undefined} [options]
         * @param {Object|undefined} [options.clearSignal] - Allows to provide a
         * CancellationSignal which will unregister the callback when it emits.
         * @param {boolean|undefined} [options.emitCurrentValue] - If `true`, the
         * callback will also be immediately called with the current value.
         */
        onUpdate(cb, options) {
            if ((options === null || options === void 0 ? void 0 : options.emitCurrentValue) === true) {
                cb(value);
            }
            if (isFinished) {
                return;
            }
            const cbObj = { trigger: cb,
                complete: unlisten,
                hasBeenCleared: false };
            cbs.push(cbObj);
            if ((options === null || options === void 0 ? void 0 : options.clearSignal) === undefined) {
                return;
            }
            options.clearSignal.register(unlisten);
            function unlisten() {
                /**
                 * Code in here can still be running while this is happening.
                 * Set `hasBeenCleared` to `true` to avoid still using the
                 * `subscriber` from this object.
                 */
                cbObj.hasBeenCleared = true;
                const indexOf = cbs.indexOf(cbObj);
                if (indexOf >= 0) {
                    cbs.splice(indexOf, 1);
                }
            }
        },
        waitUntilDefined(cb, options) {
            if (value !== undefined) {
                cb(value);
                return;
            }
            if (isFinished) {
                return;
            }
            const childCanceller = new TaskCanceller();
            if ((options === null || options === void 0 ? void 0 : options.clearSignal) !== undefined) {
                options.clearSignal.register(() => childCanceller.cancel());
            }
            this.onUpdate((val) => {
                if (val !== undefined) {
                    childCanceller.cancel();
                    cb(value);
                    return;
                }
            }, { clearSignal: childCanceller.signal });
        },
        /**
         * Indicate that no new values will be emitted.
         * Allows to automatically close all Observables generated from this shared
         * reference.
         */
        finish() {
            isFinished = true;
            const clonedCbs = cbs.slice();
            for (const cbObj of clonedCbs) {
                try {
                    if (!cbObj.hasBeenCleared) {
                        cbObj.complete();
                    }
                    cbObj.hasBeenCleared = true;
                }
                catch (_) {
                    /* nothing */
                }
            }
            cbs.length = 0;
        },
    };
}
/**
 * Create a new `ISharedReference` based on another one by mapping over its
 * referenced value each time it is updated.
 * @param {Object} originalRef - The Original `ISharedReference` you wish to map
 * over.
 * @param {Function} mappingFn - The mapping function which will receives
 * `originalRef`'s value and outputs this new reference's value.
 * @param {Object | undefined} [cancellationSignal] - Optionally, a
 * `CancellationSignal` which will finish that reference when it emits.
 * @returns {Object} - The new, mapped, reference.
 */
function createMappedReference(originalRef, mappingFn, cancellationSignal) {
    const newRef = createSharedReference(mappingFn(originalRef.getValue()));
    originalRef.onUpdate(function mapOriginalReference(x) {
        newRef.setValue(mappingFn(x));
    }, { clearSignal: cancellationSignal });
    // TODO nothing is done if `originalRef` is finished, though the returned
    // reference could also be finished in that case. To do?
    if (cancellationSignal !== undefined) {
        cancellationSignal.register(() => {
            newRef.finish();
        });
    }
    return newRef;
}


;// CONCATENATED MODULE: ./src/compat/is_node.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const isNode = typeof window === "undefined";
/* harmony default export */ const is_node = (isNode);

;// CONCATENATED MODULE: ./src/compat/browser_detection.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a, _b;

// true on IE11
// false on Edge and other IEs/browsers.
const isIE11 = !is_node &&
    typeof window.MSInputMethodContext !== "undefined" &&
    typeof document.documentMode !== "undefined";
// true for IE / Edge
const isIEOrEdge = is_node ?
    false :
    navigator.appName === "Microsoft Internet Explorer" ||
        navigator.appName === "Netscape" &&
            /(Trident|Edge)\//.test(navigator.userAgent);
const isEdgeChromium = !is_node &&
    navigator.userAgent.toLowerCase().indexOf("edg/") !== -1;
const isFirefox = !is_node &&
    navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
const isSamsungBrowser = !is_node &&
    /SamsungBrowser/.test(navigator.userAgent);
const isTizen = !is_node &&
    /Tizen/.test(navigator.userAgent);
const isWebOs = !is_node &&
    navigator.userAgent.indexOf("Web0S") >= 0;
// Inspired form: http://webostv.developer.lge.com/discover/specifications/web-engine/
// Note: even that page doesn't correspond to what we've actually seen in the
// wild
const isWebOs2021 = isWebOs &&
    (/[Ww]eb[O0]S.TV-2021/.test(navigator.userAgent) ||
        /[Cc]hr[o0]me\/79/.test(navigator.userAgent));
const isWebOs2022 = isWebOs &&
    (/[Ww]eb[O0]S.TV-2022/.test(navigator.userAgent) ||
        /[Cc]hr[o0]me\/87/.test(navigator.userAgent));
/** `true` on Safari on a PC platform (i.e. not iPhone / iPad etc.) */
const isSafariDesktop = !is_node && (Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") >= 0 ||
    ((_b = (_a = window.safari) === null || _a === void 0 ? void 0 : _a.pushNotification) === null || _b === void 0 ? void 0 : _b.toString()) ===
        "[object SafariRemoteNotification]");
/** `true` on Safari on an iPhone, iPad & iPod platform */
const isSafariMobile = !is_node &&
    typeof navigator.platform === "string" &&
    /iPad|iPhone|iPod/.test(navigator.platform);


;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/webkit_media_keys_constructor.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let WebKitMediaKeysConstructor;
if (!is_node) {
    /* eslint-disable @typescript-eslint/no-unsafe-assignment */
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    const { WebKitMediaKeys } = window;
    if (WebKitMediaKeys !== undefined &&
        typeof WebKitMediaKeys.isTypeSupported === "function" &&
        typeof WebKitMediaKeys.prototype.createSession === "function" &&
        typeof HTMLMediaElement.prototype
            .webkitSetMediaKeys === "function") {
        WebKitMediaKeysConstructor = WebKitMediaKeys;
    }
    /* eslint-enable @typescript-eslint/no-unsafe-assignment */
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
}


;// CONCATENATED MODULE: ./src/compat/should_favour_custom_safari_EME.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * On Safari 12.1, it seems that since fairplay CDM implementation
 * within the browser is not standard with EME w3c current spec, the
 * requestMediaKeySystemAccess API doesn't resolve positively, even
 * if the drm (fairplay in most cases) is supported.
 * @returns {boolean}
 */
function shouldFavourCustomSafariEME() {
    return (isSafariDesktop || isSafariMobile) && WebKitMediaKeysConstructor !== undefined;
}

;// CONCATENATED MODULE: ./src/compat/event_listeners.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file provides browser-agnostic event listeners under the form of
 * RxJS Observables
 */









const BROWSER_PREFIXES = ["", "webkit", "moz", "ms"];
const pixelRatio = is_node ||
    window.devicePixelRatio == null ||
    window.devicePixelRatio === 0 ? 1 :
    window.devicePixelRatio;
/**
 * Find the first supported event from the list given.
 * @param {HTMLElement} element
 * @param {string} eventNameSuffix
 * @returns {Boolean}
 */
function isEventSupported(element, eventNameSuffix) {
    const clone = document.createElement(element.tagName);
    const eventName = "on" + eventNameSuffix;
    if (eventName in clone) {
        return true;
    }
    else {
        clone.setAttribute(eventName, "return;");
        return typeof clone[eventName] === "function";
    }
}
/**
 * Find the first supported event from the list given.
 * @param {HTMLElement} element
 * @param {Array.<string>} eventNames
 * @returns {string|undefined}
 */
function findSupportedEvent(element, eventNames) {
    return eventNames
        .filter((name) => isEventSupported(element, name))[0];
}
/**
 * @param {Array.<string>} eventNames
 * @param {Array.<string>|undefined} prefixes
 * @returns {Array.<string>}
 */
function eventPrefixed(eventNames, prefixes) {
    return eventNames.reduce((parent, name) => parent.concat((prefixes == null ? BROWSER_PREFIXES :
        prefixes)
        .map((p) => p + name)), []);
}
/**
 * Returns a function allowing to add event listeners for particular event(s)
 * optionally automatically adding browser prefixes if needed.
 * @param {Array.<string>} eventNames - The event(s) to listen to. If multiple
 * events are set, the event listener will be triggered when any of them emits.
 * @returns {Function} - Returns function allowing to easily add a callback to
 * be triggered when that event is emitted on a given event target.
 */
function createCompatibleEventListener(eventNames) {
    let mem;
    const prefixedEvents = eventPrefixed(eventNames);
    return (element, listener, cancelSignal) => {
        if (cancelSignal.isCancelled) {
            return;
        }
        // if the element is a HTMLElement we can detect
        // the supported event, and memoize it in `mem`
        if (element instanceof HTMLElement) {
            if (typeof mem === "undefined") {
                mem = findSupportedEvent(element, prefixedEvents);
            }
            if (isNonEmptyString(mem)) {
                element.addEventListener(mem, listener);
                cancelSignal.register(() => {
                    if (mem !== undefined) {
                        element.removeEventListener(mem, listener);
                    }
                });
            }
            else {
                if (false) {}
                return;
            }
        }
        prefixedEvents.forEach(eventName => {
            element.addEventListener(eventName, listener);
            cancelSignal.register(() => {
                element.removeEventListener(eventName, listener);
            });
        });
    };
}
/**
 * @param {Array.<string>} eventNames
 * @param {Array.<string>|undefined} prefixes
 * @returns {Observable}
 */
function compatibleListener(eventNames, prefixes) {
    let mem;
    const prefixedEvents = eventPrefixed(eventNames, prefixes);
    return (element) => {
        // if the element is a HTMLElement we can detect
        // the supported event, and memoize it in `mem`
        if (element instanceof HTMLElement) {
            if (typeof mem === "undefined") {
                mem = findSupportedEvent(element, prefixedEvents);
            }
            if (isNonEmptyString(mem)) {
                return fromEvent(element, mem);
            }
            else {
                if (false) {}
                return NEVER;
            }
        }
        // otherwise, we need to listen to all the events
        // and merge them into one observable sequence
        return merge(...prefixedEvents.map(eventName => fromEvent(element, eventName)));
    };
}
/**
 * Returns a reference:
 *   - set to `true` when the document is visible
 *   - set to `false` when the document is hidden
 * @param {Object} stopListening - `CancellationSignal` allowing to free the
 * ressources allocated to update this value.
 * @returns {Object}
 */
function getDocumentVisibilityRef(stopListening) {
    let prefix;
    const doc = document;
    if (doc.hidden != null) {
        prefix = "";
    }
    else if (doc.mozHidden != null) {
        prefix = "moz";
    }
    else if (doc.msHidden != null) {
        prefix = "ms";
    }
    else if (doc.webkitHidden != null) {
        prefix = "webkit";
    }
    const hidden = isNonEmptyString(prefix) ? prefix + "Hidden" :
        "hidden";
    const visibilityChangeEvent = isNonEmptyString(prefix) ? prefix + "visibilitychange" :
        "visibilitychange";
    const isHidden = document[hidden];
    const ref = createSharedReference(!isHidden);
    addEventListener(document, visibilityChangeEvent, () => {
        const isVisible = !(document[hidden]);
        ref.setValueIfChanged(isVisible);
    }, stopListening);
    stopListening.register(() => {
        ref.finish();
    });
    return ref;
}
/**
 * Returns a reference:
 *   - Set to `true` when the current page is considered visible and active.
 *   - Set to `false` otherwise.
 * @param {Object} stopListening - `CancellationSignal` allowing to free the
 * resources allocated to update this value.
 * @returns {Object}
 */
function getPageActivityRef(stopListening) {
    const isDocVisibleRef = getDocumentVisibilityRef(stopListening);
    let currentTimeout;
    const ref = createSharedReference(true);
    stopListening.register(() => {
        clearTimeout(currentTimeout);
        currentTimeout = undefined;
        ref.finish();
    });
    isDocVisibleRef.onUpdate(function onDocVisibilityChange(isVisible) {
        clearTimeout(currentTimeout); // clear potential previous timeout
        currentTimeout = undefined;
        if (!isVisible) {
            const { INACTIVITY_DELAY } = src_config.getCurrent();
            currentTimeout = window.setTimeout(() => {
                ref.setValueIfChanged(false);
            }, INACTIVITY_DELAY);
        }
        ref.setValueIfChanged(true);
    }, { clearSignal: stopListening, emitCurrentValue: true });
    return ref;
}
/**
 * Get video width from Picture-in-Picture window
 * @param {HTMLMediaElement} mediaElement
 * @param {Object} pipWindow
 * @returns {number}
 */
function getVideoWidthFromPIPWindow(mediaElement, pipWindow) {
    const { width, height } = pipWindow;
    const videoRatio = mediaElement.clientHeight / mediaElement.clientWidth;
    const calcWidth = height / videoRatio;
    return Math.min(width, calcWidth);
}
/**
 * Emit when video enters and leaves Picture-In-Picture mode.
 * @param {HTMLMediaElement} elt
 * @param {Object} stopListening
 * @returns {Observable}
 */
function getPictureOnPictureStateRef(elt, stopListening) {
    const mediaElement = elt;
    if (mediaElement.webkitSupportsPresentationMode === true &&
        typeof mediaElement.webkitSetPresentationMode === "function") {
        const isWebKitPIPEnabled = mediaElement.webkitPresentationMode === "picture-in-picture";
        const ref = createSharedReference({
            isEnabled: isWebKitPIPEnabled,
            pipWindow: null,
        });
        addEventListener(mediaElement, "webkitpresentationmodechanged", () => {
            const isEnabled = mediaElement.webkitPresentationMode === "picture-in-picture";
            ref.setValue({ isEnabled, pipWindow: null });
        }, stopListening);
        stopListening.register(() => {
            ref.finish();
        });
        return ref;
    }
    const isPIPEnabled = (document.pictureInPictureElement === mediaElement);
    const ref = createSharedReference({ isEnabled: isPIPEnabled,
        pipWindow: null });
    addEventListener(mediaElement, "enterpictureinpicture", (evt) => {
        var _a;
        ref.setValue({
            isEnabled: true,
            pipWindow: (_a = evt.pictureInPictureWindow) !== null && _a !== void 0 ? _a : null,
        });
    }, stopListening);
    addEventListener(mediaElement, "leavepictureinpicture", () => {
        ref.setValue({ isEnabled: false, pipWindow: null });
    }, stopListening);
    stopListening.register(() => {
        ref.finish();
    });
    return ref;
}
/**
 * Returns a reference:
 *   - Set to `true` when video is considered as visible (the page is visible
 *     and/or the Picture-In-Picture is activated).
 *   - Set to `false` otherwise.
 * @param {Object} pipStatus
 * @param {Object} stopListening - `CancellationSignal` allowing to free the
 * resources reserved to listen to video visibility change.
 * @returns {Observable}
 */
function getVideoVisibilityRef(pipStatus, stopListening) {
    const isDocVisibleRef = getDocumentVisibilityRef(stopListening);
    let currentTimeout;
    const ref = createSharedReference(true);
    stopListening.register(() => {
        clearTimeout(currentTimeout);
        currentTimeout = undefined;
        ref.finish();
    });
    isDocVisibleRef.onUpdate(checkCurrentVisibility, { clearSignal: stopListening });
    pipStatus.onUpdate(checkCurrentVisibility, { clearSignal: stopListening });
    checkCurrentVisibility();
    return ref;
    function checkCurrentVisibility() {
        clearTimeout(currentTimeout);
        currentTimeout = undefined;
        if (pipStatus.getValue().isEnabled || isDocVisibleRef.getValue()) {
            ref.setValueIfChanged(true);
        }
        else {
            const { INACTIVITY_DELAY } = src_config.getCurrent();
            currentTimeout = window.setTimeout(() => {
                ref.setValueIfChanged(false);
            }, INACTIVITY_DELAY);
        }
    }
}
/**
 * Get video width from HTML video element, or video estimated dimensions
 * when Picture-in-Picture is activated.
 * @param {HTMLMediaElement} mediaElement
 * @param {Object} pipStatusRef
 * @param {Object} stopListening
 * @returns {Object}
 */
function getVideoWidthRef(mediaElement, pipStatusRef, stopListening) {
    const ref = createSharedReference(mediaElement.clientWidth * pixelRatio);
    let clearPreviousEventListener = utils_noop;
    pipStatusRef.onUpdate(checkVideoWidth, { clearSignal: stopListening });
    addEventListener(window, "resize", checkVideoWidth, stopListening);
    const interval = window.setInterval(checkVideoWidth, 20000);
    checkVideoWidth();
    stopListening.register(function stopUpdatingVideoWidthRef() {
        clearPreviousEventListener();
        clearInterval(interval);
        ref.finish();
    });
    return ref;
    function checkVideoWidth() {
        clearPreviousEventListener();
        const pipStatus = pipStatusRef.getValue();
        if (!pipStatus.isEnabled) {
            ref.setValueIfChanged(mediaElement.clientWidth * pixelRatio);
        }
        else if (!isNullOrUndefined(pipStatus.pipWindow)) {
            const { pipWindow } = pipStatus;
            const firstWidth = getVideoWidthFromPIPWindow(mediaElement, pipWindow);
            const onPipResize = () => {
                ref.setValueIfChanged(getVideoWidthFromPIPWindow(mediaElement, pipWindow) * pixelRatio);
            };
            pipWindow.addEventListener("resize", onPipResize);
            clearPreviousEventListener = () => {
                pipWindow.removeEventListener("resize", onPipResize);
                clearPreviousEventListener = utils_noop;
            };
            ref.setValueIfChanged(firstWidth * pixelRatio);
        }
        else {
            ref.setValueIfChanged(Infinity);
        }
    }
}
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onLoadedMetadata$ = compatibleListener(["loadedmetadata"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onSeeking$ = compatibleListener(["seeking"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onSeeked$ = compatibleListener(["seeked"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onEnded$ = compatibleListener(["ended"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onTimeUpdate$ = compatibleListener(["timeupdate"]);
/**
 * @param {HTMLElement} element
 * @returns {Observable}
 */
const onFullscreenChange$ = compatibleListener(["fullscreenchange", "FullscreenChange"], 
// On IE11, fullscreen change events is called MSFullscreenChange
BROWSER_PREFIXES.concat("MS"));
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onTextTrackChanges$ = (textTrackList) => merge(compatibleListener(["addtrack"])(textTrackList), compatibleListener(["removetrack"])(textTrackList));
/**
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */
const onSourceOpen$ = compatibleListener(["sourceopen", "webkitsourceopen"]);
/**
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */
const onSourceClose$ = compatibleListener(["sourceclose", "webkitsourceclose"]);
/**
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */
const onSourceEnded$ = compatibleListener(["sourceended", "webkitsourceended"]);
/**
 * @param {SourceBuffer} sourceBuffer
 * @returns {Observable}
 */
const onUpdate$ = compatibleListener(["update"]);
/**
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */
const onRemoveSourceBuffers$ = compatibleListener(["onremovesourcebuffer"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onEncrypted$ = compatibleListener(shouldFavourCustomSafariEME() ? ["needkey"] :
    ["encrypted", "needkey"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */
const onKeyMessage$ = compatibleListener(["keymessage", "message"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */
const onKeyAdded$ = compatibleListener(["keyadded", "ready"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */
const onKeyError$ = compatibleListener(["keyerror", "error"]);
/**
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */
const onKeyStatusesChange$ = compatibleListener(["keystatuseschange"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onSeeking = createCompatibleEventListener(["seeking"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onSeeked = createCompatibleEventListener(["seeked"]);
/**
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
const onEnded = createCompatibleEventListener(["ended"]);
/**
 * Utilitary function allowing to add an event listener and remove it
 * automatically once the given `CancellationSignal` emits.
 * @param {EventTarget} elt - The element on which should be attached the event
 * listener.
 * @param {string} evt - The event you wish to listen to
 * @param {Function} listener - The listener function
 * @param {Object} stopListening - Removes the event listener once this signal
 * emits
 */
function addEventListener(elt, evt, listener, stopListening) {
    elt.addEventListener(evt, listener);
    stopListening.register(() => {
        elt.removeEventListener(evt, listener);
    });
}


;// CONCATENATED MODULE: ./src/compat/get_start_date.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Calculating a live-offseted media position necessitate to obtain first an
 * offset, and then adding that offset to the wanted position.
 *
 * That offset is in most case present inside the Manifest file, yet in cases
 * without it or without a Manifest, such as the "directfile" mode, the RxPlayer
 * won't know that offset.
 *
 * Thankfully Safari declares a `getStartDate` method allowing to obtain that
 * offset when available. This logic is mainly useful when playing HLS contents
 * in directfile mode on Safari.
 * @param {HTMLMediaElement} mediaElement
 * @returns {number|undefined}
 */
function getStartDate(mediaElement) {
    const _mediaElement = mediaElement;
    if (typeof _mediaElement.getStartDate === "function") {
        const startDate = _mediaElement.getStartDate();
        if (typeof startDate === "object" && startDate !== null) {
            const startDateNum = +startDate;
            if (!isNaN(startDateNum)) {
                return startDateNum / 1000;
            }
        }
        else if (typeof startDate === "number" && !isNaN(startDate)) {
            return startDate;
        }
    }
}

;// CONCATENATED MODULE: ./src/compat/fullscreen.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Request fullScreen action on a given element.
 * @param {HTMLElement} elt
 */
function requestFullscreen(element) {
    if (!isFullscreen()) {
        const elt = element;
        /* eslint-disable @typescript-eslint/unbound-method */
        if (typeof elt.requestFullscreen === "function") {
            /* eslint-enable @typescript-eslint/unbound-method */
            /* eslint-disable @typescript-eslint/no-floating-promises */
            elt.requestFullscreen();
            /* eslint-enable @typescript-eslint/no-floating-promises */
        }
        else if (typeof elt.msRequestFullscreen === "function") {
            elt.msRequestFullscreen();
        }
        else if (typeof elt.mozRequestFullScreen === "function") {
            elt.mozRequestFullScreen();
        }
        else if (typeof elt.webkitRequestFullscreen === "function") {
            elt.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
    }
}
/**
 * Exit fullscreen if an element is currently in fullscreen.
 */
function exitFullscreen() {
    if (isFullscreen()) {
        const doc = document;
        /* eslint-disable @typescript-eslint/unbound-method */
        if (typeof doc.exitFullscreen === "function") {
            /* eslint-enable @typescript-eslint/unbound-method */
            /* eslint-disable @typescript-eslint/no-floating-promises */
            doc.exitFullscreen();
            /* eslint-enable @typescript-eslint/no-floating-promises */
        }
        else if (typeof doc.msExitFullscreen === "function") {
            doc.msExitFullscreen();
        }
        else if (typeof doc.mozCancelFullScreen === "function") {
            doc.mozCancelFullScreen();
        }
        else if (typeof doc.webkitExitFullscreen === "function") {
            doc.webkitExitFullscreen();
        }
    }
}
/**
 * Returns true if an element in the document is being displayed in fullscreen
 * mode;
 * otherwise it's false.
 * @returns {boolean}
 */
function isFullscreen() {
    const doc = document;
    return (doc.fullscreenElement != null ||
        doc.mozFullScreenElement != null ||
        doc.webkitFullscreenElement != null ||
        doc.msFullscreenElement != null);
}


;// CONCATENATED MODULE: ./src/utils/logger.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const DEFAULT_LOG_LEVEL = "NONE";
/**
 * Logger implementation.
 * @class Logger
 */
class Logger {
    constructor() {
        this.error = utils_noop;
        this.warn = utils_noop;
        this.info = utils_noop;
        this.debug = utils_noop;
        this._levels = { NONE: 0,
            ERROR: 1,
            WARNING: 2,
            INFO: 3,
            DEBUG: 4 };
        this._currentLevel = DEFAULT_LOG_LEVEL;
    }
    /**
     * @param {string} levelStr
     */
    setLevel(levelStr) {
        let level;
        const foundLevel = this._levels[levelStr];
        if (typeof foundLevel === "number") {
            level = foundLevel;
            this._currentLevel = levelStr;
        }
        else { // not found
            level = 0;
            this._currentLevel = "NONE";
        }
        /* eslint-disable no-invalid-this */
        /* eslint-disable no-console */
        this.error = (level >= this._levels.ERROR) ? console.error.bind(console) :
            utils_noop;
        this.warn = (level >= this._levels.WARNING) ? console.warn.bind(console) :
            utils_noop;
        this.info = (level >= this._levels.INFO) ? console.info.bind(console) :
            utils_noop;
        this.debug = (level >= this._levels.DEBUG) ? console.log.bind(console) :
            utils_noop;
        /* eslint-enable no-console */
        /* eslint-enable no-invalid-this */
    }
    /**
     * @returns {string}
     */
    getLevel() {
        return this._currentLevel;
    }
    /**
     * Returns `true` if the currently set level includes logs of the level given
     * in argument.
     * @param {string} logLevel
     * @returns {boolean}
     */
    hasLevel(logLevel) {
        return this._levels[logLevel] >= this._levels[this._currentLevel];
    }
}

;// CONCATENATED MODULE: ./src/log.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// create a logger specifically for the RxPlayer.
const logger = new Logger();
/* harmony default export */ const src_log = (logger);

;// CONCATENATED MODULE: ./src/compat/browser_version.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns either :
 * - 'null' when the current browser is not Firefox.
 * - '-1' when it is impossible to get the Firefox version
 * - A number above 0 that is the Firefox version number
 * @returns {number|null}
 */
function getFirefoxVersion() {
    if (!isFirefox) {
        src_log.warn("Compat: Can't access Firefox version on no firefox browser.");
        return null;
    }
    const userAgent = navigator.userAgent;
    const match = /Firefox\/([0-9]+)\./.exec(userAgent);
    if (match === null) {
        return -1;
    }
    const result = parseInt(match[1], 10);
    if (isNaN(result)) {
        return -1;
    }
    return result;
}


;// CONCATENATED MODULE: ./src/compat/can_rely_on_video_visibility_and_size.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This functions tells if the RxPlayer can trust on any browser data
 * about video element visibility and size.
 *
 * On Firefox (version >= 67) :
 * - The PIP feature exists but can be disabled by default according
 * to the OS and the channel used for updating / getting Firefox binaries.
 * - There is no API to know if the Picture-in-picture (PIP) is enabled
 * - There is no API to get the width of the PIP window
 *
 * The element clientWidth tells the width of the original video element, and
 * no PIP window API exists to determine its presence or width. Thus, there are
 * no way to determine the real width of the video window, as we can't know when
 * the PIP feature or window is enabled, and we can't have access to the windo
 * size information.
 *
 * Moreover, when the document is considered as hidden (e.g. in case of hidden
 * tab), as there is no way to know if the PIP feature or window is enabled,
 * we can't know if the video window is visible or not.
 * @returns {boolean}
 */
function canRelyOnVideoVisibilityAndSize() {
    if (!isFirefox) {
        return true;
    }
    const firefoxVersion = getFirefoxVersion();
    if (firefoxVersion === null || firefoxVersion < 67) {
        return true;
    }
    const proto = HTMLVideoElement === null || HTMLVideoElement === void 0 ? void 0 : HTMLVideoElement.prototype;
    return (proto === null || proto === void 0 ? void 0 : proto.requirePictureInPicture) !== undefined;
}

;// CONCATENATED MODULE: ./src/errors/error_codes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ErrorTypes = {
    NETWORK_ERROR: "NETWORK_ERROR",
    MEDIA_ERROR: "MEDIA_ERROR",
    ENCRYPTED_MEDIA_ERROR: "ENCRYPTED_MEDIA_ERROR",
    OTHER_ERROR: "OTHER_ERROR",
};
const NetworkErrorTypes = {
    TIMEOUT: "TIMEOUT",
    ERROR_EVENT: "ERROR_EVENT",
    ERROR_HTTP_CODE: "ERROR_HTTP_CODE",
    PARSE_ERROR: "PARSE_ERROR",
};
const ErrorCodes = {
    PIPELINE_LOAD_ERROR: "PIPELINE_LOAD_ERROR",
    PIPELINE_PARSE_ERROR: "PIPELINE_PARSE_ERROR",
    INTEGRITY_ERROR: "INTEGRITY_ERROR",
    MANIFEST_PARSE_ERROR: "MANIFEST_PARSE_ERROR",
    MANIFEST_INCOMPATIBLE_CODECS_ERROR: "MANIFEST_INCOMPATIBLE_CODECS_ERROR",
    MANIFEST_UPDATE_ERROR: "MANIFEST_UPDATE_ERROR",
    MANIFEST_UNSUPPORTED_ADAPTATION_TYPE: "MANIFEST_UNSUPPORTED_ADAPTATION_TYPE",
    MEDIA_STARTING_TIME_NOT_FOUND: "MEDIA_STARTING_TIME_NOT_FOUND",
    MEDIA_TIME_BEFORE_MANIFEST: "MEDIA_TIME_BEFORE_MANIFEST",
    MEDIA_TIME_AFTER_MANIFEST: "MEDIA_TIME_AFTER_MANIFEST",
    MEDIA_TIME_NOT_FOUND: "MEDIA_TIME_NOT_FOUND",
    NO_PLAYABLE_REPRESENTATION: "NO_PLAYABLE_REPRESENTATION",
    MEDIA_IS_ENCRYPTED_ERROR: "MEDIA_IS_ENCRYPTED_ERROR",
    CREATE_MEDIA_KEYS_ERROR: "CREATE_MEDIA_KEYS_ERROR",
    KEY_ERROR: "KEY_ERROR",
    KEY_STATUS_CHANGE_ERROR: "KEY_STATUS_CHANGE_ERROR",
    KEY_UPDATE_ERROR: "KEY_UPDATE_ERROR",
    KEY_LOAD_ERROR: "KEY_LOAD_ERROR",
    KEY_LOAD_TIMEOUT: "KEY_LOAD_TIMEOUT",
    KEY_GENERATE_REQUEST_ERROR: "KEY_GENERATE_REQUEST_ERROR",
    INCOMPATIBLE_KEYSYSTEMS: "INCOMPATIBLE_KEYSYSTEMS",
    INVALID_ENCRYPTED_EVENT: "INVALID_ENCRYPTED_EVENT",
    INVALID_KEY_SYSTEM: "INVALID_KEY_SYSTEM",
    LICENSE_SERVER_CERTIFICATE_ERROR: "LICENSE_SERVER_CERTIFICATE_ERROR",
    MULTIPLE_SESSIONS_SAME_INIT_DATA: "MULTIPLE_SESSIONS_SAME_INIT_DATA",
    BUFFER_APPEND_ERROR: "BUFFER_APPEND_ERROR",
    BUFFER_FULL_ERROR: "BUFFER_FULL_ERROR",
    BUFFER_TYPE_UNKNOWN: "BUFFER_TYPE_UNKNOWN",
    MEDIA_ERR_BLOCKED_AUTOPLAY: "MEDIA_ERR_BLOCKED_AUTOPLAY",
    MEDIA_ERR_PLAY_NOT_ALLOWED: "MEDIA_ERR_PLAY_NOT_ALLOWED",
    MEDIA_ERR_NOT_LOADED_METADATA: "MEDIA_ERR_NOT_LOADED_METADATA",
    MEDIA_ERR_ABORTED: "MEDIA_ERR_ABORTED",
    MEDIA_ERR_NETWORK: "MEDIA_ERR_NETWORK",
    MEDIA_ERR_DECODE: "MEDIA_ERR_DECODE",
    MEDIA_ERR_SRC_NOT_SUPPORTED: "MEDIA_ERR_SRC_NOT_SUPPORTED",
    MEDIA_ERR_UNKNOWN: "MEDIA_ERR_UNKNOWN",
    MEDIA_SOURCE_NOT_SUPPORTED: "MEDIA_SOURCE_NOT_SUPPORTED",
    MEDIA_KEYS_NOT_SUPPORTED: "MEDIA_KEYS_NOT_SUPPORTED",
    DISCONTINUITY_ENCOUNTERED: "DISCONTINUITY_ENCOUNTERED",
    NONE: "NONE",
};


;// CONCATENATED MODULE: ./src/errors/error_message.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Generate a normalized error message.
 * @param {string} name
 * @param {string} code
 * @param {Error|string|Event|null} [reason]
 * @returns {string}
 */
function errorMessage(name, code, reason) {
    return `${name} (${code}) ${reason}`;
}

;// CONCATENATED MODULE: ./src/errors/media_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Error linked to the media Playback.
 *
 * @class MediaError
 * @extends Error
 */
class MediaError extends Error {
    /**
     * @param {string} code
     * @param {string} reason
     */
    constructor(code, reason) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, MediaError.prototype);
        this.name = "MediaError";
        this.type = ErrorTypes.MEDIA_ERROR;
        this.code = code;
        this.message = errorMessage(this.name, this.code, reason);
        this.fatal = false;
    }
}

;// CONCATENATED MODULE: ./src/errors/encrypted_media_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Error linked to the encryption of the media.
 *
 * @class EncryptedMediaError
 * @extends Error
 */
class EncryptedMediaError extends Error {
    constructor(code, reason, supplementaryInfos) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, EncryptedMediaError.prototype);
        this.name = "EncryptedMediaError";
        this.type = ErrorTypes.ENCRYPTED_MEDIA_ERROR;
        this.code = code;
        this.message = errorMessage(this.name, this.code, reason);
        this.fatal = false;
        if (typeof (supplementaryInfos === null || supplementaryInfos === void 0 ? void 0 : supplementaryInfos.keyStatuses) === "string") {
            this.keyStatuses = supplementaryInfos.keyStatuses;
        }
    }
}

;// CONCATENATED MODULE: ./src/errors/network_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Error linked to network interactions (requests).
 *
 * @class NetworkError
 * @extends Error
 */
class NetworkError extends Error {
    /**
     * @param {string} code
     * @param {Error} baseError
     */
    constructor(code, baseError) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, NetworkError.prototype);
        this.name = "NetworkError";
        this.type = ErrorTypes.NETWORK_ERROR;
        this.xhr = baseError.xhr === undefined ? null : baseError.xhr;
        this.url = baseError.url;
        this.status = baseError.status;
        this.errorType = baseError.type;
        this.code = code;
        this.message = errorMessage(this.name, this.code, baseError.message);
        this.fatal = false;
    }
    /**
     * Returns true if the NetworkError is due to the given http error code
     * @param {number} httpErrorCode
     * @returns {Boolean}
     */
    isHttpError(httpErrorCode) {
        return this.errorType === NetworkErrorTypes.ERROR_HTTP_CODE &&
            this.status === httpErrorCode;
    }
}

;// CONCATENATED MODULE: ./src/errors/other_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @class OtherError
 * @extends Error
 */
class OtherError extends Error {
    /**
     * @param {string} code
     * @param {string} reason
     */
    constructor(code, reason) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, OtherError.prototype);
        this.name = "OtherError";
        this.type = ErrorTypes.OTHER_ERROR;
        this.code = code;
        this.message = errorMessage(this.name, this.code, reason);
        this.fatal = false;
    }
}

;// CONCATENATED MODULE: ./src/errors/is_known_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Whether the error given is a ICustomError.
 * @param {Error} error
 * @returns {Boolean}
 */
function isKnownError(error) {
    return (error instanceof EncryptedMediaError ||
        error instanceof MediaError ||
        error instanceof OtherError ||
        error instanceof NetworkError) &&
        Object.keys(ErrorTypes).indexOf(error.type) >= 0;
}

;// CONCATENATED MODULE: ./src/errors/format_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Format an unknown error into an API-defined error.
 * @param {*} error
 * @returns {Error}
 */
function formatError(error, { defaultCode, defaultReason }) {
    if (isKnownError(error)) {
        return error;
    }
    const reason = error instanceof Error ? error.toString() :
        defaultReason;
    return new OtherError(defaultCode, reason);
}

;// CONCATENATED MODULE: ./src/features/features_object.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Initial features object, with no feature activated by default.
 * @type {Object}
 */
const features = { dashParsers: { wasm: null,
        js: null },
    directfile: null,
    ContentDecryptor: null,
    htmlTextTracksBuffer: null,
    htmlTextTracksParsers: {},
    imageBuffer: null,
    imageParser: null,
    nativeTextTracksBuffer: null,
    nativeTextTracksParsers: {},
    transports: {} };
/* harmony default export */ const features_object = (features);

;// CONCATENATED MODULE: ./src/features/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * File allowing feature-switching.
 *
 * Every optional feature is included here.
 * They all should subsequently be accessed in the code through the exported
 * `features` object.
 *
 * The then exported features object will be used dynamically to know which
 * features are activated.
 *
 * This also lazy-feature loading, where this exported object can be updated
 * at runtime, to allow some new features even if the player instance has
 * already have been instanciated.
 */


/* harmony default export */ const src_features = (features_object);


;// CONCATENATED MODULE: ./src/utils/array_find.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Array.prototype.find ponyfill.
 * @param {Array} arr
 * @param {Function} predicate
 * @param {*} context
 * @returns {boolean}
 */
function arrayFind(arr, predicate, thisArg) {
    if (typeof Array.prototype.find === "function") {
        return arr.find(predicate, thisArg);
    }
    const len = arr.length >>> 0;
    for (let i = 0; i < len; i++) {
        const val = arr[i];
        if (predicate.call(thisArg, val, i, arr)) {
            return val;
        }
    }
    return undefined;
}

;// CONCATENATED MODULE: ./src/utils/event_emitter.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Simple but fully type-safe EventEmitter implementation.
 * @class EventEmitter
 */
class EventEmitter {
    constructor() {
        this._listeners = {};
    }
    /**
     * Register a new callback for an event.
     *
     * @param {string} evt - The event to register a callback to
     * @param {Function} fn - The callback to call as that event is triggered.
     * The callback will take as argument the eventual payload of the event
     * (single argument).
     * @param {Object | undefined} cancellationSignal - When that signal emits,
     * the event listener is automatically removed.
     */
    addEventListener(evt, fn, cancellationSignal) {
        const listeners = this._listeners[evt];
        if (!Array.isArray(listeners)) {
            this._listeners[evt] = [fn];
        }
        else {
            listeners.push(fn);
        }
        if (cancellationSignal !== undefined) {
            cancellationSignal.register(() => {
                this.removeEventListener(evt, fn);
            });
        }
    }
    /**
     * Unregister callbacks linked to events.
     * @param {string} [evt] - The event for which the callback[s] should be
     * unregistered. Set it to null or undefined to remove all callbacks
     * currently registered (for any event).
     * @param {Function} [fn] - The callback to unregister. If set to null
     * or undefined while the evt argument is set, all callbacks linked to that
     * event will be unregistered.
     */
    removeEventListener(evt, fn) {
        if (isNullOrUndefined(evt)) {
            this._listeners = {};
            return;
        }
        const listeners = this._listeners[evt];
        if (!Array.isArray(listeners)) {
            return;
        }
        if (isNullOrUndefined(fn)) {
            delete this._listeners[evt];
            return;
        }
        const index = listeners.indexOf(fn);
        if (index !== -1) {
            listeners.splice(index, 1);
        }
        if (listeners.length === 0) {
            delete this._listeners[evt];
        }
    }
    /**
     * Trigger every registered callbacks for a given event
     * @param {string} evt - The event to trigger
     * @param {*} arg - The eventual payload for that event. All triggered
     * callbacks will recieve this payload as argument.
     */
    trigger(evt, arg) {
        const listeners = this._listeners[evt];
        if (!Array.isArray(listeners)) {
            return;
        }
        listeners.slice().forEach((listener) => {
            try {
                listener(arg);
            }
            catch (e) {
                src_log.error("EventEmitter: listener error", e instanceof Error ? e : null);
            }
        });
    }
}
/**
 * Simple redefinition of the fromEvent from rxjs to also work on our
 * implementation of EventEmitter with type-checked strings
 * @param {Object} target
 * @param {string} eventName
 * @returns {Observable}
 */
function event_emitter_fromEvent(target, eventName) {
    return new Observable_Observable((obs) => {
        function handler(event) {
            obs.next(event);
        }
        target.addEventListener(eventName, handler);
        return () => {
            target.removeEventListener(eventName, handler);
        };
    });
}

;// CONCATENATED MODULE: ./src/utils/id_generator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/**
 * Creates an ID generator which generates a number containing an incremented
 * number each time you call it.
 * @returns {Function}
 */
function idGenerator() {
    let prefix = "";
    let currId = -1;
    return function generateNewId() {
        currId++;
        if (currId >= Number.MAX_SAFE_INTEGER) {
            prefix += "0";
            currId = 0;
        }
        return prefix + String(currId);
    };
}

;// CONCATENATED MODULE: ./src/utils/resolve_url.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Scheme part of an url (e.g. "http://").
const schemeRe = /^(?:[a-z]+:)?\/\//i;
// Captures "/../" or "/./".
const selfDirRe = /\/\.{1,2}\//;
/**
 * Resolve self directory and previous directory references to obtain a
 * "normalized" url.
 * @example "https://foo.bar/baz/booz/../biz" => "https://foo.bar/baz/biz"
 * @param {string} url
 * @returns {string}
 */
function _normalizeUrl(url) {
    // fast path if no ./ or ../ are present in the url
    if (!selfDirRe.test(url)) {
        return url;
    }
    const newUrl = [];
    const oldUrl = url.split("/");
    for (let i = 0, l = oldUrl.length; i < l; i++) {
        if (oldUrl[i] === "..") {
            newUrl.pop();
        }
        else if (oldUrl[i] === ".") {
            continue;
        }
        else {
            newUrl.push(oldUrl[i]);
        }
    }
    return newUrl.join("/");
}
/**
 * Construct an url from the arguments given.
 * Basically:
 *   - The last arguments that contains a scheme (e.g. "http://") is the base
 *     of the url.
 *   - every subsequent string arguments are concatened to it.
 * @param {...string|undefined} args
 * @returns {string}
 */
function resolveURL(...args) {
    const len = args.length;
    if (len === 0) {
        return "";
    }
    let base = "";
    for (let i = 0; i < len; i++) {
        let part = args[i];
        if (typeof part !== "string" || part === "") {
            continue;
        }
        if (schemeRe.test(part)) {
            base = part;
        }
        else {
            // trim if begins with "/"
            if (part[0] === "/") {
                part = part.substring(1);
            }
            // trim if ends with "/"
            if (base[base.length - 1] === "/") {
                base = base.substring(0, base.length - 1);
            }
            base = base + "/" + part;
        }
    }
    return _normalizeUrl(base);
}
/**
 * In a given URL, find the index at which the filename begins.
 * That is, this function finds the index of the last `/` character and returns
 * the index after it, returning the length of the whole URL if no `/` was found
 * after the scheme (i.e. in `http://`, the slashes are not considered).
 * @param {string} url
 * @returns {number}
 */
function getFilenameIndexInUrl(url) {
    const indexOfLastSlash = url.lastIndexOf("/");
    if (indexOfLastSlash < 0) {
        return url.length;
    }
    if (schemeRe.test(url)) {
        const firstSlashIndex = url.indexOf("/");
        if (firstSlashIndex >= 0 && indexOfLastSlash === firstSlashIndex + 1) {
            // The "/" detected is actually the one from the protocol part of the URL
            // ("https://")
            return url.length;
        }
    }
    const indexOfQuestionMark = url.indexOf("?");
    if (indexOfQuestionMark >= 0 && indexOfQuestionMark < indexOfLastSlash) {
        // There are query parameters. Let's ignore them and re-run the logic
        // without
        return getFilenameIndexInUrl(url.substring(0, indexOfQuestionMark));
    }
    return indexOfLastSlash + 1;
}


;// CONCATENATED MODULE: ./src/utils/array_includes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Array.prototype.includes ponyfill.
 * Returns ``true`` if the given array ``arr`` contains the element
 * ``searchElement``. false ``otherwise``.
 *
 * Inspired from MDN polyfill, but ponyfilled instead
 *
 * @example
 * ```js
 * arrayIncludes([1, 2, 3], 3);
 * // => true
 *
 * arrayIncludes([1, 2, 3], 7);
 * // => false
 *
 * const obj = { a: 4 };
 * arrayIncludes([obj, { b: 7 }, { a: 3 }], obj);
 * // => true
 *
 * // does not perform deep equality
 * arrayIncludes([{ a: 4 }, { b: 7 }, { a: 3 }], { a: 4 });
 * // => false
 *
 * // the third argument state the starting index. 0 if not set.
 *
 * arrayIncludes([1, 2, 3], 2, 1);
 * // => true
 *
 * arrayIncludes([1, 2, 3], 2, 2);
 * // => false
 * ```
 *
 * @param {Array} arr
 * @param {*} searchElement
 * @param {number} [fromIndex]
 * @returns {boolean}
 */
function arrayIncludes(arr, searchElement, fromIndex) {
    /* eslint-disable @typescript-eslint/unbound-method */
    // eslint-disable-next-line no-restricted-properties
    if (typeof Array.prototype.includes === "function") {
        /* eslint-enable @typescript-eslint/unbound-method */
        // eslint-disable-next-line no-restricted-properties
        return arr.includes(searchElement, fromIndex);
    }
    const len = arr.length >>> 0;
    if (len === 0) {
        return false;
    }
    const n = fromIndex | 0;
    let k = n >= 0 ?
        Math.min(n, len - 1) :
        Math.max(len + n, 0);
    const areTheSame = (x, y) => x === y ||
        // Viva las JavaScriptas!
        (typeof x === "number" &&
            typeof y === "number" &&
            isNaN(x) && isNaN(y));
    while (k < len) {
        if (areTheSame(arr[k], searchElement)) {
            return true;
        }
        k++;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/utils/warn_once.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const WARNED_MESSAGES = [];
/**
 * Perform a console.warn only once in the application lifetime.
 *
 * Useful for deprecated messages, for example.
 *
 * @param {string} message
 */
function warnOnce(message) {
    if (!arrayIncludes(WARNED_MESSAGES, message)) {
        // eslint-disable-next-line no-console
        console.warn(message);
        WARNED_MESSAGES.push(message);
    }
}

;// CONCATENATED MODULE: ./src/utils/languages/ISO_639-1_to_ISO_639-3.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Translate ISO 639-1 language codes into ISO 639-3 ones.
 */
const ISO_MAP_1_TO_3 = {
    aa: "aar",
    ab: "abk",
    ae: "ave",
    af: "afr",
    ak: "aka",
    am: "amh",
    an: "arg",
    ar: "ara",
    as: "asm",
    av: "ava",
    ay: "aym",
    az: "aze",
    ba: "bak",
    be: "bel",
    bg: "bul",
    bi: "bis",
    bm: "bam",
    bn: "ben",
    bo: "bod",
    br: "bre",
    bs: "bos",
    ca: "cat",
    ce: "che",
    ch: "cha",
    co: "cos",
    cr: "cre",
    cs: "ces",
    cu: "chu",
    // Old Slavonic, Old Bulgarian
    cv: "chv",
    cy: "cym",
    da: "dan",
    de: "deu",
    dv: "div",
    dz: "dzo",
    ee: "ewe",
    el: "ell",
    en: "eng",
    eo: "epo",
    es: "spa",
    et: "est",
    eu: "eus",
    fa: "fas",
    ff: "ful",
    fi: "fin",
    fj: "fij",
    fo: "fao",
    fr: "fra",
    fy: "fry",
    ga: "gle",
    gd: "gla",
    gl: "glg",
    gn: "grn",
    gu: "guj",
    gv: "glv",
    ha: "hau",
    he: "heb",
    hi: "hin",
    ho: "hmo",
    hr: "hrv",
    ht: "hat",
    hu: "hun",
    hy: "hye",
    hz: "her",
    ia: "ina",
    id: "ind",
    ie: "ile",
    ig: "ibo",
    ii: "iii",
    ik: "ipk",
    io: "ido",
    is: "isl",
    it: "ita",
    iu: "iku",
    ja: "jpn",
    jv: "jav",
    ka: "kat",
    kg: "kon",
    ki: "kik",
    kj: "kua",
    kk: "kaz",
    kl: "kal",
    km: "khm",
    kn: "kan",
    ko: "kor",
    kr: "kau",
    ks: "kas",
    ku: "kur",
    kv: "kom",
    kw: "cor",
    ky: "kir",
    la: "lat",
    lb: "ltz",
    lg: "lug",
    li: "lim",
    ln: "lin",
    lo: "lao",
    lt: "lit",
    lu: "lub",
    lv: "lav",
    mg: "mlg",
    mh: "mah",
    mi: "mri",
    mk: "mkd",
    ml: "mal",
    mn: "mon",
    mr: "mar",
    ms: "msa",
    mt: "mlt",
    my: "mya",
    na: "nau",
    nb: "nob",
    nd: "nde",
    ne: "nep",
    ng: "ndo",
    nl: "nld",
    nn: "nno",
    no: "nor",
    nr: "nbl",
    nv: "nav",
    ny: "nya",
    oc: "oci",
    oj: "oji",
    om: "orm",
    or: "ori",
    os: "oss",
    pa: "pan",
    pi: "pli",
    pl: "pol",
    ps: "pus",
    pt: "por",
    qu: "que",
    rm: "roh",
    rn: "run",
    ro: "ron",
    ru: "rus",
    rw: "kin",
    sa: "san",
    sc: "srd",
    sd: "snd",
    se: "sme",
    sg: "sag",
    si: "sin",
    sk: "slk",
    sl: "slv",
    sm: "smo",
    sn: "sna",
    so: "som",
    sq: "sqi",
    sr: "srp",
    ss: "ssw",
    st: "sot",
    su: "sun",
    sv: "swe",
    sw: "swa",
    ta: "tam",
    te: "tel",
    tg: "tgk",
    th: "tha",
    ti: "tir",
    tk: "tuk",
    tl: "tgl",
    tn: "tsn",
    to: "ton",
    tr: "tur",
    ts: "tso",
    tt: "tat",
    tw: "twi",
    ty: "tah",
    ug: "uig",
    uk: "ukr",
    ur: "urd",
    uz: "uzb",
    ve: "ven",
    vi: "vie",
    vo: "vol",
    wa: "wln",
    wo: "wol",
    xh: "xho",
    yi: "yid",
    yo: "yor",
    za: "zha",
    zh: "zho",
    zu: "zul", // Zulu
};
/* harmony default export */ const ISO_639_1_to_ISO_639_3 = (ISO_MAP_1_TO_3);

;// CONCATENATED MODULE: ./src/utils/languages/ISO_639-2_to_ISO_639-3.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Translate ISO 639-2 synonyms to their ISO 639-3 counterparts.
 */
const ISO_MAP_2_TO_3 = {
    alb: "sqi",
    arm: "hye",
    baq: "eus",
    bur: "mya",
    chi: "zho",
    cze: "ces",
    dut: "nld",
    fre: "fra",
    geo: "kat",
    ger: "deu",
    gre: "ell",
    ice: "isl",
    mac: "mkd",
    mao: "mri",
    may: "msa",
    per: "fas",
    slo: "slk",
    rum: "ron",
    tib: "bod",
    wel: "cym", // Welsh
};
/* harmony default export */ const ISO_639_2_to_ISO_639_3 = (ISO_MAP_2_TO_3);

;// CONCATENATED MODULE: ./src/utils/languages/normalize.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Normalize language given.
 * Basically:
 *   - converts it to lowercase.
 *   - normalize "base" (what is before the possible first "-") to an ISO639-3
 *     compatible string.
 * @param {string} _language
 * @returns {string}
 */
function normalizeLanguage(_language) {
    if (isNullOrUndefined(_language) || _language === "") {
        return "";
    }
    const fields = ("" + _language).toLowerCase().split("-");
    const base = fields[0];
    const normalizedBase = normalizeBase(base);
    if (isNonEmptyString(normalizedBase)) {
        return normalizedBase;
    }
    return _language;
}
/**
 * Normalize language into an ISO639-3 format.
 * Returns undefined if it failed to do so
 * @param {string} base
 * @returns {string}
 */
function normalizeBase(base) {
    let result;
    switch (base.length) {
        case 2:
            result = ISO_639_1_to_ISO_639_3[base];
            break;
        case 3:
            result = ISO_639_2_to_ISO_639_3[base];
            break;
    }
    return result;
}
/**
 * Normalize text track from a user given input into an object
 * with three properties:
 *   - language {string}: The language the user gave us
 *   - normalized {string}: An attempt to normalize the language into an
 *     ISO 639-3 code
 *   - closedCaption {Boolean}: Whether the track is a closed caption track
 * @param {Object|string|null|undefined} _language
 * @returns {Object|null|undefined}
 */
function normalizeTextTrack(_language) {
    if (!isNullOrUndefined(_language)) {
        let language;
        let closedCaption = false;
        if (typeof _language === "string") {
            language = _language;
        }
        else {
            language = _language.language;
            if (_language.closedCaption === true) {
                closedCaption = true;
            }
        }
        return { language,
            closedCaption,
            normalized: normalizeLanguage(language) };
    }
    return _language;
}
/**
 * Normalize audio track from a user given input into an object
 * with the following properties:
 *   - language {string}: The language the user gave us
 *   - normalized {string}: An attempt to normalize the language into an
 *     ISO 639-3 code
 *   - audioDescription {Boolean}: Whether the track is a closed caption track
 *   - isDub {Boolean|undefined}: if true, this is a dub.
 * @param {Object|string|null|undefined} _language
 * @returns {Object|null|undefined}
 */
function normalizeAudioTrack(_language) {
    if (isNullOrUndefined(_language)) {
        return _language;
    }
    if (typeof _language === "string") {
        return { language: _language,
            audioDescription: false,
            normalized: normalizeLanguage(_language) };
    }
    const normalized = {
        language: _language.language,
        audioDescription: _language.audioDescription === true,
        normalized: normalizeLanguage(normalizeLanguage(_language.language)),
    };
    if (_language.isDub === true) {
        normalized.isDub = true;
    }
    return normalized;
}
/* harmony default export */ const normalize = (normalizeLanguage);


;// CONCATENATED MODULE: ./src/utils/languages/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const languages = (normalize);


;// CONCATENATED MODULE: ./src/utils/uniq.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Uniq implementation by combining a filter and an indexOf.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */
function uniqFromFilter(arr) {
    return arr.filter((val, i, self) => self.indexOf(val) === i);
}
/**
 * Uniq implementation by using the Set browser API.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */
function uniqFromSet(arr) {
    return Array.from(new Set(arr));
}
/**
 * Returns the input array without duplicates values.
 * All values are unique.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */
/* harmony default export */ const uniq = (typeof window !== "undefined" &&
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    typeof window.Set === "function" &&
    typeof Array.from === "function" ? uniqFromSet :
    uniqFromFilter);


;// CONCATENATED MODULE: ./src/compat/browser_compatibility_types.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const win = is_node ? undefined :
    window;
/** MediaSource implementation, including vendored implementations. */
const MediaSource_ = win === undefined ? undefined :
    !isNullOrUndefined(win.MediaSource) ? win.MediaSource :
        !isNullOrUndefined(win.MozMediaSource) ? win.MozMediaSource :
            !isNullOrUndefined(win.WebKitMediaSource) ? win.WebKitMediaSource :
                win.MSMediaSource;
/** List an HTMLMediaElement's possible values for its readyState property. */
const READY_STATES = { HAVE_NOTHING: 0,
    HAVE_METADATA: 1,
    HAVE_CURRENT_DATA: 2,
    HAVE_FUTURE_DATA: 3,
    HAVE_ENOUGH_DATA: 4 };


;// CONCATENATED MODULE: ./src/compat/is_codec_supported.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the given codec is supported by the browser's MediaSource
 * implementation.
 * @param {string} mimeType - The MIME media type that you want to test support
 * for in the current browser.
 * This may include the codecs parameter to provide added details about the
 * codecs used within the file.
 * @returns {Boolean}
 */
function isCodecSupported(mimeType) {
    if (MediaSource_ == null) {
        return false;
    }
    /* eslint-disable @typescript-eslint/unbound-method */
    if (typeof MediaSource_.isTypeSupported === "function") {
        /* eslint-enable @typescript-eslint/unbound-method */
        return MediaSource_.isTypeSupported(mimeType);
    }
    return true;
}

;// CONCATENATED MODULE: ./src/utils/are_arrays_of_numbers_equal.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Check if two two arrays containing only numbers are equal.
 * @param {Array.<number>|TypedArray} arr1
 * @param {Array.<number>|TypedArray} arr2
 * @returns {Boolean}
 */
function areArraysOfNumbersEqual(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        return false;
    }
    for (let i = arr1.length - 1; i >= 0; i--) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}

;// CONCATENATED MODULE: ./src/manifest/representation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Normalized Representation structure.
 * @class Representation
 */
class Representation {
    /**
     * @param {Object} args
     */
    constructor(args, opts) {
        this.id = args.id;
        this.bitrate = args.bitrate;
        this.codec = args.codecs;
        if (args.height !== undefined) {
            this.height = args.height;
        }
        if (args.width !== undefined) {
            this.width = args.width;
        }
        if (args.mimeType !== undefined) {
            this.mimeType = args.mimeType;
        }
        if (args.contentProtections !== undefined) {
            this.contentProtections = args.contentProtections;
        }
        if (args.frameRate !== undefined) {
            this.frameRate = args.frameRate;
        }
        if (args.hdrInfo !== undefined) {
            this.hdrInfo = args.hdrInfo;
        }
        this.cdnMetadata = args.cdnMetadata;
        this.index = args.index;
        this.isSupported = opts.type === "audio" ||
            opts.type === "video" ?
            isCodecSupported(this.getMimeTypeString()) :
            true; // TODO for other types
    }
    /**
     * Returns "mime-type string" which includes both the mime-type and the codec,
     * which is often needed when interacting with the browser's APIs.
     * @returns {string}
     */
    getMimeTypeString() {
        var _a, _b;
        return `${(_a = this.mimeType) !== null && _a !== void 0 ? _a : ""};codecs="${(_b = this.codec) !== null && _b !== void 0 ? _b : ""}"`;
    }
    /**
     * Returns encryption initialization data linked to the given DRM's system ID.
     * This data may be useful to decrypt encrypted media segments.
     *
     * Returns an empty array if there is no data found for that system ID at the
     * moment.
     *
     * When you know that all encryption data has been added to this
     * Representation, you can also call the `getAllEncryptionData` method.
     * This second function will return all encryption initialization data
     * regardless of the DRM system, and might thus be used in all cases.
     *
     * /!\ Note that encryption initialization data may be progressively added to
     * this Representation after `_addProtectionData` calls or Manifest updates.
     * Because of this, the return value of this function might change after those
     * events.
     *
     * @param {string} drmSystemId - The hexa-encoded DRM system ID
     * @returns {Array.<Object>}
     */
    getEncryptionData(drmSystemId) {
        var _a, _b;
        const allInitData = this.getAllEncryptionData();
        const filtered = [];
        for (let i = 0; i < allInitData.length; i++) {
            let createdObjForType = false;
            const initData = allInitData[i];
            for (let j = 0; j < initData.values.length; j++) {
                if (initData.values[j].systemId.toLowerCase() === drmSystemId.toLowerCase()) {
                    if (!createdObjForType) {
                        const keyIds = (_b = (_a = this.contentProtections) === null || _a === void 0 ? void 0 : _a.keyIds) === null || _b === void 0 ? void 0 : _b.map(val => val.keyId);
                        filtered.push({ type: initData.type,
                            keyIds,
                            values: [initData.values[j]] });
                        createdObjForType = true;
                    }
                    else {
                        filtered[filtered.length - 1].values.push(initData.values[j]);
                    }
                }
            }
        }
        return filtered;
    }
    /**
     * Returns all currently-known encryption initialization data linked to this
     * Representation.
     * Encryption initialization data is generally required to be able to decrypt
     * those Representation's media segments.
     *
     * Unlike `getEncryptionData`, this method will return all available
     * encryption data.
     * It might as such might be used when either the current drm's system id is
     * not known or when no encryption data specific to it was found. In that
     * case, providing every encryption data linked to this Representation might
     * still allow decryption.
     *
     * Returns an empty array in two cases:
     *   - the content is not encrypted.
     *   - We don't have any decryption data yet.
     *
     * /!\ Note that new encryption initialization data can be added progressively
     * through the `_addProtectionData` method or through Manifest updates.
     * It is thus highly advised to only rely on this method once every protection
     * data related to this Representation has been known to be added.
     *
     * The main situation where new encryption initialization data is added is
     * after parsing this Representation's initialization segment, if one exists.
     * @returns {Array.<Object>}
     */
    getAllEncryptionData() {
        var _a, _b;
        if (this.contentProtections === undefined ||
            this.contentProtections.initData.length === 0) {
            return [];
        }
        const keyIds = (_b = (_a = this.contentProtections) === null || _a === void 0 ? void 0 : _a.keyIds) === null || _b === void 0 ? void 0 : _b.map(val => val.keyId);
        return this.contentProtections.initData.map((x) => {
            return { type: x.type,
                keyIds,
                values: x.values };
        });
    }
    /**
     * Add new encryption initialization data to this Representation if it was not
     * already included.
     *
     * Returns `true` if new encryption initialization data has been added.
     * Returns `false` if none has been added (e.g. because it was already known).
     *
     * /!\ Mutates the current Representation
     *
     * TODO better handle use cases like key rotation by not always grouping
     * every protection data together? To check.
     * @param {string} initDataType
     * @param {Uint8Array|undefined} keyId
     * @param {Uint8Array} data
     * @returns {boolean}
     */
    _addProtectionData(initDataType, keyId, data) {
        let hasUpdatedProtectionData = false;
        if (this.contentProtections === undefined) {
            this.contentProtections = { keyIds: keyId !== undefined ? [{ keyId }] : [],
                initData: [{ type: initDataType,
                        values: data }] };
            return true;
        }
        if (keyId !== undefined) {
            const keyIds = this.contentProtections.keyIds;
            if (keyIds === undefined) {
                this.contentProtections.keyIds = [{ keyId }];
            }
            else {
                let foundKeyId = false;
                for (const knownKeyId of keyIds) {
                    if (areArraysOfNumbersEqual(knownKeyId.keyId, keyId)) {
                        foundKeyId = true;
                    }
                }
                if (!foundKeyId) {
                    src_log.warn("Manifest: found unanounced key id.");
                    keyIds.push({ keyId });
                }
            }
        }
        const cInitData = this.contentProtections.initData;
        for (let i = 0; i < cInitData.length; i++) {
            if (cInitData[i].type === initDataType) {
                const cValues = cInitData[i].values;
                // loop through data
                for (let dataI = 0; dataI < data.length; dataI++) {
                    const dataToAdd = data[dataI];
                    let cValuesIdx;
                    for (cValuesIdx = 0; cValuesIdx < cValues.length; cValuesIdx++) {
                        if (dataToAdd.systemId === cValues[cValuesIdx].systemId) {
                            if (areArraysOfNumbersEqual(dataToAdd.data, cValues[cValuesIdx].data)) {
                                // go to next dataToAdd
                                break;
                            }
                            else {
                                src_log.warn("Manifest: different init data for the same system ID");
                            }
                        }
                    }
                    if (cValuesIdx === cValues.length) {
                        // we didn't break the loop === we didn't already find that value
                        cValues.push(dataToAdd);
                        hasUpdatedProtectionData = true;
                    }
                }
                return hasUpdatedProtectionData;
            }
        }
        // If we are here, this means that we didn't find the corresponding
        // init data type in this.contentProtections.initData.
        this.contentProtections.initData.push({ type: initDataType,
            values: data });
        return true;
    }
}
/* harmony default export */ const manifest_representation = (Representation);

;// CONCATENATED MODULE: ./src/manifest/adaptation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/** List in an array every possible value for the Adaptation's `type` property. */
const SUPPORTED_ADAPTATIONS_TYPE = ["audio",
    "video",
    "text",
    "image"];
/**
 * Normalized Adaptation structure.
 * An Adaptation describes a single `Track`. For example a specific audio
 * track (in a given language) or a specific video track.
 * It istelf can be represented in different qualities, which we call here
 * `Representation`.
 * @class Adaptation
 */
class Adaptation {
    /**
     * @constructor
     * @param {Object} parsedAdaptation
     * @param {Object|undefined} [options]
     */
    constructor(parsedAdaptation, options = {}) {
        const { trickModeTracks } = parsedAdaptation;
        const { representationFilter, isManuallyAdded } = options;
        this.id = parsedAdaptation.id;
        this.type = parsedAdaptation.type;
        if (parsedAdaptation.isTrickModeTrack !== undefined) {
            this.isTrickModeTrack = parsedAdaptation.isTrickModeTrack;
        }
        if (parsedAdaptation.language !== undefined) {
            this.language = parsedAdaptation.language;
            this.normalizedLanguage = languages(parsedAdaptation.language);
        }
        if (parsedAdaptation.closedCaption !== undefined) {
            this.isClosedCaption = parsedAdaptation.closedCaption;
        }
        if (parsedAdaptation.audioDescription !== undefined) {
            this.isAudioDescription = parsedAdaptation.audioDescription;
        }
        if (parsedAdaptation.isDub !== undefined) {
            this.isDub = parsedAdaptation.isDub;
        }
        if (parsedAdaptation.isSignInterpreted !== undefined) {
            this.isSignInterpreted = parsedAdaptation.isSignInterpreted;
        }
        if (parsedAdaptation.label !== undefined) {
            this.label = parsedAdaptation.label;
        }
        if (trickModeTracks !== undefined &&
            trickModeTracks.length > 0) {
            this.trickModeTracks = trickModeTracks.map((track) => new Adaptation(track));
        }
        const argsRepresentations = parsedAdaptation.representations;
        const representations = [];
        let isSupported = false;
        for (let i = 0; i < argsRepresentations.length; i++) {
            const representation = new manifest_representation(argsRepresentations[i], { type: this.type });
            const shouldAdd = isNullOrUndefined(representationFilter) ||
                representationFilter(representation, { bufferType: this.type,
                    language: this.language,
                    normalizedLanguage: this.normalizedLanguage,
                    isClosedCaption: this.isClosedCaption,
                    isDub: this.isDub,
                    isAudioDescription: this.isAudioDescription,
                    isSignInterpreted: this.isSignInterpreted });
            if (shouldAdd) {
                representations.push(representation);
                if (!isSupported && representation.isSupported) {
                    isSupported = true;
                }
            }
        }
        representations.sort((a, b) => a.bitrate - b.bitrate);
        this.representations = representations;
        this.isSupported = isSupported;
        // for manuallyAdded adaptations (not in the manifest)
        this.manuallyAdded = isManuallyAdded === true;
    }
    /**
     * Returns unique bitrate for every Representation in this Adaptation.
     * @returns {Array.<Number>}
     */
    getAvailableBitrates() {
        const bitrates = [];
        for (let i = 0; i < this.representations.length; i++) {
            const representation = this.representations[i];
            if (representation.decipherable !== false) {
                bitrates.push(representation.bitrate);
            }
        }
        return uniq(bitrates);
    }
    /**
     * Returns all Representation in this Adaptation that can be played (that is:
     * not undecipherable and with a supported codec).
     * @returns {Array.<Representation>}
     */
    getPlayableRepresentations() {
        return this.representations.filter(rep => {
            return rep.isSupported && rep.decipherable !== false;
        });
    }
    /**
     * Returns the Representation linked to the given ID.
     * @param {number|string} wantedId
     * @returns {Object|undefined}
     */
    getRepresentation(wantedId) {
        return arrayFind(this.representations, ({ id }) => wantedId === id);
    }
}

;// CONCATENATED MODULE: ./src/utils/object_values.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {Object|Array} o
 * @returns {Array.<*>}
 */
function objectValues(o) {
    return Object.keys(o).map((k) => o[k]);
}
// eslint-disable-next-line  @typescript-eslint/unbound-method, no-restricted-properties
/* harmony default export */ const object_values = (typeof Object.values === "function" ? Object.values :
    objectValues);


;// CONCATENATED MODULE: ./src/manifest/period.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Class representing the tracks and qualities available from a given time
 * period in the the Manifest.
 * @class Period
 */
class Period {
    /**
     * @constructor
     * @param {Object} args
     * @param {function|undefined} [representationFilter]
     */
    constructor(args, representationFilter) {
        this.contentWarnings = [];
        this.id = args.id;
        this.adaptations = Object.keys(args.adaptations)
            .reduce((acc, type) => {
            const adaptationsForType = args.adaptations[type];
            if (adaptationsForType == null) {
                return acc;
            }
            const filteredAdaptations = adaptationsForType
                .map((adaptation) => {
                const newAdaptation = new Adaptation(adaptation, { representationFilter });
                if (newAdaptation.representations.length > 0 && !newAdaptation.isSupported) {
                    const error = new MediaError("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
                    this.contentWarnings.push(error);
                }
                return newAdaptation;
            })
                .filter((adaptation) => adaptation.representations.length > 0);
            if (filteredAdaptations.every(adaptation => !adaptation.isSupported) &&
                adaptationsForType.length > 0 &&
                (type === "video" || type === "audio")) {
                throw new MediaError("MANIFEST_PARSE_ERROR", "No supported " + type + " adaptations");
            }
            if (filteredAdaptations.length > 0) {
                acc[type] = filteredAdaptations;
            }
            return acc;
        }, {});
        if (!Array.isArray(this.adaptations.video) &&
            !Array.isArray(this.adaptations.audio)) {
            throw new MediaError("MANIFEST_PARSE_ERROR", "No supported audio and video tracks.");
        }
        this.duration = args.duration;
        this.start = args.start;
        if (this.duration != null && this.start != null) {
            this.end = this.start + this.duration;
        }
        this.streamEvents = args.streamEvents === undefined ?
            [] :
            args.streamEvents;
    }
    /**
     * Returns every `Adaptations` (or `tracks`) linked to that Period, in an
     * Array.
     * @returns {Array.<Object>}
     */
    getAdaptations() {
        const adaptationsByType = this.adaptations;
        return object_values(adaptationsByType).reduce(
        // Note: the second case cannot happen. TS is just being dumb here
        (acc, adaptations) => adaptations != null ? acc.concat(adaptations) :
            acc, []);
    }
    /**
     * Returns every `Adaptations` (or `tracks`) linked to that Period for a
     * given type.
     * @param {string} adaptationType
     * @returns {Array.<Object>}
     */
    getAdaptationsForType(adaptationType) {
        const adaptationsForType = this.adaptations[adaptationType];
        return adaptationsForType == null ? [] :
            adaptationsForType;
    }
    /**
     * Returns the Adaptation linked to the given ID.
     * @param {number|string} wantedId
     * @returns {Object|undefined}
     */
    getAdaptation(wantedId) {
        return arrayFind(this.getAdaptations(), ({ id }) => wantedId === id);
    }
    /**
     * Returns Adaptations that contain Representations in supported codecs.
     * @param {string|undefined} type - If set filter on a specific Adaptation's
     * type. Will return for all types if `undefined`.
     * @returns {Array.<Adaptation>}
     */
    getSupportedAdaptations(type) {
        if (type === undefined) {
            return this.getAdaptations().filter(ada => {
                return ada.isSupported;
            });
        }
        const adaptationsForType = this.adaptations[type];
        if (adaptationsForType === undefined) {
            return [];
        }
        return adaptationsForType.filter(ada => {
            return ada.isSupported;
        });
    }
    /**
     * Returns true if the give time is in the time boundaries of this `Period`.
     * @param {number} time
     * @returns {boolean}
     */
    containsTime(time) {
        return time >= this.start && (this.end === undefined ||
            time < this.end);
    }
}

;// CONCATENATED MODULE: ./src/manifest/representation_index/static.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple RepresentationIndex implementation for static files.
 * @class StaticRepresentationIndex
 */
class StaticRepresentationIndex {
    /**
     * @param {Object} infos
     */
    constructor(infos) {
        this._url = infos.media;
    }
    /**
     * Static contents do not have any initialization segments.
     * Just return null.
     * @returns {null}
     */
    getInitSegment() {
        return null;
    }
    /**
     * Returns the only Segment available here.
     * @returns {Array.<Object>}
     */
    getSegments() {
        return [{ id: "0",
                isInit: false,
                number: 0,
                url: this._url,
                time: 0,
                end: Number.MAX_VALUE,
                duration: Number.MAX_VALUE,
                complete: true,
                privateInfos: {},
                timescale: 1 }];
    }
    /**
     * Returns first position in index.
     * @returns {undefined}
     */
    getFirstAvailablePosition() {
        return;
    }
    /**
     * Returns last position in index.
     * @returns {undefined}
     */
    getLastAvailablePosition() {
        return;
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        return;
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     *
     * Always `false` in a `StaticRepresentationIndex` because all segments should
     * be directly available.
     * @returns {boolean}
     */
    awaitSegmentBetween() {
        return false;
    }
    /**
     * Returns false as a static file never need to be refreshed.
     * @returns {Boolean}
     */
    shouldRefresh() {
        return false;
    }
    /**
     * @returns {null}
     */
    checkDiscontinuity() {
        return null;
    }
    /**
     * Returns true as a static file should never need lose availability.
     * @returns {Boolean}
     */
    isSegmentStillAvailable() {
        return true;
    }
    /**
     * @returns {Boolean}
     */
    canBeOutOfSyncError() {
        return false;
    }
    /**
     * @returns {Boolean}
     */
    isFinished() {
        return true;
    }
    /**
     * @returns {Boolean}
     */
    isInitialized() {
        return true;
    }
    _replace() {
        src_log.warn("Tried to replace a static RepresentationIndex");
    }
    _update() {
        src_log.warn("Tried to update a static RepresentationIndex");
    }
}

;// CONCATENATED MODULE: ./src/manifest/types.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Enumerate the different ways a Manifest update can be done. */
var MANIFEST_UPDATE_TYPE;
(function (MANIFEST_UPDATE_TYPE) {
    /**
     * Manifest is updated entirely thanks to a re-downloaded version of
     * the original manifest document.
     */
    MANIFEST_UPDATE_TYPE[MANIFEST_UPDATE_TYPE["Full"] = 0] = "Full";
    /**
     * Manifest is updated partially thanks to a shortened version
     * of the manifest document. The latter's URL might be different
     * from the original one.
     */
    MANIFEST_UPDATE_TYPE[MANIFEST_UPDATE_TYPE["Partial"] = 1] = "Partial";
})(MANIFEST_UPDATE_TYPE || (MANIFEST_UPDATE_TYPE = {}));

;// CONCATENATED MODULE: ./src/utils/array_find_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Array.prototype.find ponyfill.
 * @param {Array} arr
 * @param {Function} predicate
 * @param {*} context
 * @returns {boolean}
 */
function arrayFindIndex(arr, predicate, thisArg) {
    if (typeof Array.prototype.findIndex === "function") {
        return arr.findIndex(predicate, thisArg);
    }
    const len = arr.length >>> 0;
    for (let i = 0; i < len; i++) {
        if (predicate.call(thisArg, arr[i], i, arr)) {
            return i;
        }
    }
    return -1;
}

;// CONCATENATED MODULE: ./src/manifest/update_period_in_place.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Update oldPeriod attributes with the one from newPeriod (e.g. when updating
 * the Manifest).
 * @param {Object} oldPeriod
 * @param {Object} newPeriod
 */
function updatePeriodInPlace(oldPeriod, newPeriod, updateType) {
    oldPeriod.start = newPeriod.start;
    oldPeriod.end = newPeriod.end;
    oldPeriod.duration = newPeriod.duration;
    oldPeriod.streamEvents = newPeriod.streamEvents;
    const oldAdaptations = oldPeriod.getAdaptations();
    const newAdaptations = newPeriod.getAdaptations();
    for (let j = 0; j < oldAdaptations.length; j++) {
        const oldAdaptation = oldAdaptations[j];
        const newAdaptation = arrayFind(newAdaptations, a => a.id === oldAdaptation.id);
        if (newAdaptation === undefined) {
            src_log.warn("Manifest: Adaptation \"" +
                oldAdaptations[j].id +
                "\" not found when merging.");
        }
        else {
            const oldRepresentations = oldAdaptations[j].representations;
            const newRepresentations = newAdaptation.representations;
            for (let k = 0; k < oldRepresentations.length; k++) {
                const oldRepresentation = oldRepresentations[k];
                const newRepresentation = arrayFind(newRepresentations, representation => representation.id === oldRepresentation.id);
                if (newRepresentation === undefined) {
                    src_log.warn(`Manifest: Representation "${oldRepresentations[k].id}" ` +
                        "not found when merging.");
                }
                else {
                    oldRepresentation.cdnMetadata = newRepresentation.cdnMetadata;
                    if (updateType === MANIFEST_UPDATE_TYPE.Full) {
                        oldRepresentation.index._replace(newRepresentation.index);
                    }
                    else {
                        oldRepresentation.index._update(newRepresentation.index);
                    }
                }
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/manifest/update_periods.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Update old periods by adding new periods and removing
 * not available ones.
 * @param {Array.<Object>} oldPeriods
 * @param {Array.<Object>} newPeriods
 */
function replacePeriods(oldPeriods, newPeriods) {
    let firstUnhandledPeriodIdx = 0;
    for (let i = 0; i < newPeriods.length; i++) {
        const newPeriod = newPeriods[i];
        let j = firstUnhandledPeriodIdx;
        let oldPeriod = oldPeriods[j];
        while (oldPeriod != null && oldPeriod.id !== newPeriod.id) {
            j++;
            oldPeriod = oldPeriods[j];
        }
        if (oldPeriod != null) {
            updatePeriodInPlace(oldPeriod, newPeriod, MANIFEST_UPDATE_TYPE.Full);
            const periodsToInclude = newPeriods.slice(firstUnhandledPeriodIdx, i);
            const nbrOfPeriodsToRemove = j - firstUnhandledPeriodIdx;
            oldPeriods.splice(firstUnhandledPeriodIdx, nbrOfPeriodsToRemove, ...periodsToInclude);
            firstUnhandledPeriodIdx = i + 1;
        }
    }
    if (firstUnhandledPeriodIdx > oldPeriods.length) {
        src_log.error("Manifest: error when updating Periods");
        return;
    }
    if (firstUnhandledPeriodIdx < oldPeriods.length) {
        oldPeriods.splice(firstUnhandledPeriodIdx, oldPeriods.length - firstUnhandledPeriodIdx);
    }
    const remainingNewPeriods = newPeriods.slice(firstUnhandledPeriodIdx, newPeriods.length);
    if (remainingNewPeriods.length > 0) {
        oldPeriods.push(...remainingNewPeriods);
    }
}
/**
 * Update old periods by adding new periods and removing
 * not available ones.
 * @param {Array.<Object>} oldPeriods
 * @param {Array.<Object>} newPeriods
 */
function updatePeriods(oldPeriods, newPeriods) {
    if (oldPeriods.length === 0) {
        oldPeriods.splice(0, 0, ...newPeriods);
        return;
    }
    if (newPeriods.length === 0) {
        return;
    }
    const oldLastPeriod = oldPeriods[oldPeriods.length - 1];
    if (oldLastPeriod.start < newPeriods[0].start) {
        if (oldLastPeriod.end !== newPeriods[0].start) {
            throw new MediaError("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: not enough data");
        }
        oldPeriods.push(...newPeriods);
        return;
    }
    const indexOfNewFirstPeriod = arrayFindIndex(oldPeriods, ({ id }) => id === newPeriods[0].id);
    if (indexOfNewFirstPeriod < 0) {
        throw new MediaError("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: incoherent data");
    }
    // The first updated Period can only be a partial part
    updatePeriodInPlace(oldPeriods[indexOfNewFirstPeriod], newPeriods[0], MANIFEST_UPDATE_TYPE.Partial);
    let prevIndexOfNewPeriod = indexOfNewFirstPeriod + 1;
    for (let i = 1; i < newPeriods.length; i++) {
        const newPeriod = newPeriods[i];
        let indexOfNewPeriod = -1;
        for (let j = prevIndexOfNewPeriod; j < oldPeriods.length; j++) {
            if (newPeriod.id === oldPeriods[j].id) {
                indexOfNewPeriod = j;
                break; // end the loop
            }
        }
        if (indexOfNewPeriod < 0) {
            oldPeriods.splice(prevIndexOfNewPeriod, oldPeriods.length - prevIndexOfNewPeriod, ...newPeriods.slice(i, newPeriods.length));
            return;
        }
        if (indexOfNewPeriod > prevIndexOfNewPeriod) {
            oldPeriods.splice(prevIndexOfNewPeriod, indexOfNewPeriod - prevIndexOfNewPeriod);
            indexOfNewPeriod = prevIndexOfNewPeriod;
        }
        // Later Periods can be fully replaced
        updatePeriodInPlace(oldPeriods[indexOfNewPeriod], newPeriod, MANIFEST_UPDATE_TYPE.Full);
        prevIndexOfNewPeriod++;
    }
    if (prevIndexOfNewPeriod < oldPeriods.length) {
        oldPeriods.splice(prevIndexOfNewPeriod, oldPeriods.length - prevIndexOfNewPeriod);
    }
}

;// CONCATENATED MODULE: ./src/manifest/manifest.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */











const generateSupplementaryTrackID = idGenerator();
const generateNewManifestId = idGenerator();
/**
 * Normalized Manifest structure.
 *
 * Details the current content being played:
 *   - the duration of the content
 *   - the available tracks
 *   - the available qualities
 *   - the segments defined in those qualities
 *   - ...
 * while staying agnostic of the transport protocol used (Smooth, DASH etc.).
 *
 * The Manifest and its contained information can evolve over time (like when
 * updating a dynamic manifest or when right management forbid some tracks from
 * being played).
 * To perform actions on those changes, any module using this Manifest can
 * listen to its sent events and react accordingly.
 *
 * @class Manifest
 */
class Manifest extends EventEmitter {
    /**
     * Construct a Manifest instance from a parsed Manifest object (as returned by
     * Manifest parsers) and options.
     *
     * Some minor errors can arise during that construction. `this.contentWarnings`
     * will contain all such errors, in the order they have been encountered.
     * @param {Object} parsedManifest
     * @param {Object} options
     */
    constructor(parsedManifest, options) {
        var _a;
        super();
        const { supplementaryTextTracks = [], supplementaryImageTracks = [], representationFilter, manifestUpdateUrl } = options;
        this.contentWarnings = [];
        this.id = generateNewManifestId();
        this.expired = (_a = parsedManifest.expired) !== null && _a !== void 0 ? _a : null;
        this.transport = parsedManifest.transportType;
        this.clockOffset = parsedManifest.clockOffset;
        this.periods = parsedManifest.periods.map((parsedPeriod) => {
            const period = new Period(parsedPeriod, representationFilter);
            this.contentWarnings.push(...period.contentWarnings);
            return period;
        }).sort((a, b) => a.start - b.start);
        /**
         * @deprecated It is here to ensure compatibility with the way the
         * v3.x.x manages adaptations at the Manifest level
         */
        /* eslint-disable import/no-deprecated */
        this.adaptations = this.periods[0] === undefined ? {} :
            this.periods[0].adaptations;
        /* eslint-enable import/no-deprecated */
        this._timeBounds = parsedManifest.timeBounds;
        this.isDynamic = parsedManifest.isDynamic;
        this.isLive = parsedManifest.isLive;
        this.isLastPeriodKnown = parsedManifest.isLastPeriodKnown;
        this.uris = parsedManifest.uris === undefined ? [] :
            parsedManifest.uris;
        this.updateUrl = manifestUpdateUrl;
        this.lifetime = parsedManifest.lifetime;
        this.suggestedPresentationDelay = parsedManifest.suggestedPresentationDelay;
        this.availabilityStartTime = parsedManifest.availabilityStartTime;
        this.publishTime = parsedManifest.publishTime;
        if (supplementaryImageTracks.length > 0) {
            this._addSupplementaryImageAdaptations(supplementaryImageTracks);
        }
        if (supplementaryTextTracks.length > 0) {
            this._addSupplementaryTextAdaptations(supplementaryTextTracks);
        }
    }
    /**
     * Returns the Period corresponding to the given `id`.
     * Returns `undefined` if there is none.
     * @param {string} id
     * @returns {Object|undefined}
     */
    getPeriod(id) {
        return arrayFind(this.periods, (period) => {
            return id === period.id;
        });
    }
    /**
     * Returns the Period encountered at the given time.
     * Returns `undefined` if there is no Period exactly at the given time.
     * @param {number} time
     * @returns {Object|undefined}
     */
    getPeriodForTime(time) {
        return arrayFind(this.periods, (period) => {
            return time >= period.start &&
                (period.end === undefined || period.end > time);
        });
    }
    /**
     * Returns the first Period starting strictly after the given time.
     * Returns `undefined` if there is no Period starting after that time.
     * @param {number} time
     * @returns {Object|undefined}
     */
    getNextPeriod(time) {
        return arrayFind(this.periods, (period) => {
            return period.start > time;
        });
    }
    /**
     * Returns the Period coming chronologically just after another given Period.
     * Returns `undefined` if not found.
     * @param {Object} period
     * @returns {Object|null}
     */
    getPeriodAfter(period) {
        const endOfPeriod = period.end;
        if (endOfPeriod === undefined) {
            return null;
        }
        const nextPeriod = arrayFind(this.periods, (_period) => {
            return _period.end === undefined || endOfPeriod < _period.end;
        });
        return nextPeriod === undefined ? null :
            nextPeriod;
    }
    /**
     * Returns the most important URL from which the Manifest can be refreshed.
     * `undefined` if no URL is found.
     * @returns {string|undefined}
     */
    getUrl() {
        return this.uris[0];
    }
    /**
     * Update the current Manifest properties by giving a new updated version.
     * This instance will be updated with the new information coming from it.
     * @param {Object} newManifest
     */
    replace(newManifest) {
        this._performUpdate(newManifest, MANIFEST_UPDATE_TYPE.Full);
    }
    /**
     * Update the current Manifest properties by giving a new but shorter version
     * of it.
     * This instance will add the new information coming from it and will
     * automatically clean old Periods that shouldn't be available anymore.
     *
     * /!\ Throws if the given Manifest cannot be used or is not sufficient to
     * update the Manifest.
     * @param {Object} newManifest
     */
    update(newManifest) {
        this._performUpdate(newManifest, MANIFEST_UPDATE_TYPE.Partial);
    }
    /**
     * Returns the theoretical minimum playable position on the content
     * regardless of the current Adaptation chosen, as estimated at parsing
     * time.
     * @returns {number}
     */
    getMinimumSafePosition() {
        var _a, _b;
        const windowData = this._timeBounds;
        if (windowData.timeshiftDepth === null) {
            return (_a = windowData.minimumSafePosition) !== null && _a !== void 0 ? _a : 0;
        }
        const { maximumTimeData } = windowData;
        let maximumTime;
        if (!windowData.maximumTimeData.isLinear) {
            maximumTime = maximumTimeData.maximumSafePosition;
        }
        else {
            const timeDiff = performance.now() - maximumTimeData.time;
            maximumTime = maximumTimeData.maximumSafePosition + timeDiff / 1000;
        }
        const theoricalMinimum = maximumTime - windowData.timeshiftDepth;
        return Math.max((_b = windowData.minimumSafePosition) !== null && _b !== void 0 ? _b : 0, theoricalMinimum);
    }
    /**
     * Get the position of the live edge - that is, the position of what is
     * currently being broadcasted, in seconds.
     * @returns {number|undefined}
     */
    getLivePosition() {
        const { maximumTimeData } = this._timeBounds;
        if (!this.isLive || maximumTimeData.livePosition === undefined) {
            return undefined;
        }
        if (!maximumTimeData.isLinear) {
            return maximumTimeData.livePosition;
        }
        const timeDiff = performance.now() - maximumTimeData.time;
        return maximumTimeData.livePosition + timeDiff / 1000;
    }
    /**
     * Returns the theoretical maximum playable position on the content
     * regardless of the current Adaptation chosen, as estimated at parsing
     * time.
     */
    getMaximumSafePosition() {
        const { maximumTimeData } = this._timeBounds;
        if (!maximumTimeData.isLinear) {
            return maximumTimeData.maximumSafePosition;
        }
        const timeDiff = performance.now() - maximumTimeData.time;
        return maximumTimeData.maximumSafePosition + timeDiff / 1000;
    }
    /**
     * Look in the Manifest for Representations linked to the given key ID,
     * and mark them as being impossible to decrypt.
     * Then trigger a "decipherabilityUpdate" event to notify everyone of the
     * changes performed.
     * @param {Function} isDecipherableCb
     */
    updateRepresentationsDeciperability(isDecipherableCb) {
        const updates = updateDeciperability(this, isDecipherableCb);
        if (updates.length > 0) {
            this.trigger("decipherabilityUpdate", updates);
        }
    }
    /**
     * @deprecated only returns adaptations for the first period
     * @returns {Array.<Object>}
     */
    getAdaptations() {
        warnOnce("manifest.getAdaptations() is deprecated." +
            " Please use manifest.period[].getAdaptations() instead");
        const firstPeriod = this.periods[0];
        if (firstPeriod === undefined) {
            return [];
        }
        const adaptationsByType = firstPeriod.adaptations;
        const adaptationsList = [];
        for (const adaptationType in adaptationsByType) {
            if (adaptationsByType.hasOwnProperty(adaptationType)) {
                const adaptations = adaptationsByType[adaptationType];
                adaptationsList.push(...adaptations);
            }
        }
        return adaptationsList;
    }
    /**
     * @deprecated only returns adaptations for the first period
     * @returns {Array.<Object>}
     */
    getAdaptationsForType(adaptationType) {
        warnOnce("manifest.getAdaptationsForType(type) is deprecated." +
            " Please use manifest.period[].getAdaptationsForType(type) instead");
        const firstPeriod = this.periods[0];
        if (firstPeriod === undefined) {
            return [];
        }
        const adaptationsForType = firstPeriod.adaptations[adaptationType];
        return adaptationsForType === undefined ? [] :
            adaptationsForType;
    }
    /**
     * @deprecated only returns adaptations for the first period
     * @returns {Array.<Object>}
     */
    getAdaptation(wantedId) {
        warnOnce("manifest.getAdaptation(id) is deprecated." +
            " Please use manifest.period[].getAdaptation(id) instead");
        /* eslint-disable import/no-deprecated */
        return arrayFind(this.getAdaptations(), ({ id }) => wantedId === id);
        /* eslint-enable import/no-deprecated */
    }
    /**
     * Add supplementary image Adaptation(s) to the manifest.
     * @private
     * @param {Object|Array.<Object>} imageTracks
     */
    _addSupplementaryImageAdaptations(
    /* eslint-disable import/no-deprecated */
    imageTracks) {
        const _imageTracks = Array.isArray(imageTracks) ? imageTracks : [imageTracks];
        const newImageTracks = _imageTracks.map(({ mimeType, url }) => {
            const adaptationID = "gen-image-ada-" + generateSupplementaryTrackID();
            const representationID = "gen-image-rep-" + generateSupplementaryTrackID();
            const indexOfFilename = getFilenameIndexInUrl(url);
            const cdnUrl = url.substring(0, indexOfFilename);
            const filename = url.substring(indexOfFilename);
            const newAdaptation = new Adaptation({ id: adaptationID,
                type: "image",
                representations: [{
                        bitrate: 0,
                        cdnMetadata: [{ baseUrl: cdnUrl }],
                        id: representationID,
                        mimeType,
                        index: new StaticRepresentationIndex({
                            media: filename,
                        })
                    }] }, { isManuallyAdded: true });
            if (newAdaptation.representations.length > 0 && !newAdaptation.isSupported) {
                const error = new MediaError("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
                this.contentWarnings.push(error);
            }
            return newAdaptation;
        });
        if (newImageTracks.length > 0 && this.periods.length > 0) {
            const { adaptations } = this.periods[0];
            adaptations.image =
                adaptations.image != null ? adaptations.image.concat(newImageTracks) :
                    newImageTracks;
        }
    }
    /**
     * Add supplementary text Adaptation(s) to the manifest.
     * @private
     * @param {Object|Array.<Object>} textTracks
     */
    _addSupplementaryTextAdaptations(
    /* eslint-disable import/no-deprecated */
    textTracks
    /* eslint-enable import/no-deprecated */
    ) {
        const _textTracks = Array.isArray(textTracks) ? textTracks : [textTracks];
        const newTextAdaptations = _textTracks.reduce((allSubs, { mimeType, codecs, url, language, 
        /* eslint-disable import/no-deprecated */
        languages, 
        /* eslint-enable import/no-deprecated */
        closedCaption, }) => {
            const langsToMapOn = language != null ? [language] :
                languages != null ? languages :
                    [];
            const indexOfFilename = getFilenameIndexInUrl(url);
            const cdnUrl = url.substring(0, indexOfFilename);
            const filename = url.substring(indexOfFilename);
            return allSubs.concat(langsToMapOn.map((_language) => {
                const adaptationID = "gen-text-ada-" + generateSupplementaryTrackID();
                const representationID = "gen-text-rep-" + generateSupplementaryTrackID();
                const newAdaptation = new Adaptation({ id: adaptationID,
                    type: "text",
                    language: _language,
                    closedCaption,
                    representations: [{
                            bitrate: 0,
                            cdnMetadata: [{ baseUrl: cdnUrl }],
                            id: representationID,
                            mimeType,
                            codecs,
                            index: new StaticRepresentationIndex({
                                media: filename,
                            })
                        }] }, { isManuallyAdded: true });
                if (newAdaptation.representations.length > 0 && !newAdaptation.isSupported) {
                    const error = new MediaError("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
                    this.contentWarnings.push(error);
                }
                return newAdaptation;
            }));
        }, []);
        if (newTextAdaptations.length > 0 && this.periods.length > 0) {
            const { adaptations } = this.periods[0];
            adaptations.text =
                adaptations.text != null ? adaptations.text.concat(newTextAdaptations) :
                    newTextAdaptations;
        }
    }
    /**
     * @param {Object} newManifest
     * @param {number} type
     */
    _performUpdate(newManifest, updateType) {
        this.availabilityStartTime = newManifest.availabilityStartTime;
        this.expired = newManifest.expired;
        this.isDynamic = newManifest.isDynamic;
        this.isLive = newManifest.isLive;
        this.isLastPeriodKnown = newManifest.isLastPeriodKnown;
        this.lifetime = newManifest.lifetime;
        this.contentWarnings = newManifest.contentWarnings;
        this.suggestedPresentationDelay = newManifest.suggestedPresentationDelay;
        this.transport = newManifest.transport;
        this.publishTime = newManifest.publishTime;
        if (updateType === MANIFEST_UPDATE_TYPE.Full) {
            this._timeBounds = newManifest._timeBounds;
            this.uris = newManifest.uris;
            replacePeriods(this.periods, newManifest.periods);
        }
        else {
            this._timeBounds.maximumTimeData = newManifest._timeBounds.maximumTimeData;
            this.updateUrl = newManifest.uris[0];
            updatePeriods(this.periods, newManifest.periods);
            // Partial updates do not remove old Periods.
            // This can become a memory problem when playing a content long enough.
            // Let's clean manually Periods behind the minimum possible position.
            const min = this.getMinimumSafePosition();
            while (this.periods.length > 0) {
                const period = this.periods[0];
                if (period.end === undefined || period.end > min) {
                    break;
                }
                this.periods.shift();
            }
        }
        // Re-set this.adaptations for retro-compatibility in v3.x.x
        /* eslint-disable import/no-deprecated */
        this.adaptations = this.periods[0] === undefined ?
            {} :
            this.periods[0].adaptations;
        /* eslint-enable import/no-deprecated */
        // Let's trigger events at the end, as those can trigger side-effects.
        // We do not want the current Manifest object to be incomplete when those
        // happen.
        this.trigger("manifestUpdate", null);
    }
}
/**
 * Update `decipherable` property of every `Representation` found in the
 * Manifest based on the result of a `isDecipherable` callback:
 *   - When that callback returns `true`, update `decipherable` to `true`
 *   - When that callback returns `false`, update `decipherable` to `false`
 *   - When that callback returns `undefined`, update `decipherable` to
 *     `undefined`
 * @param {Manifest} manifest
 * @param {Function} isDecipherable
 * @returns {Array.<Object>}
 */
function updateDeciperability(manifest, isDecipherable) {
    const updates = [];
    for (const period of manifest.periods) {
        for (const adaptation of period.getAdaptations()) {
            for (const representation of adaptation.representations) {
                const result = isDecipherable(representation);
                if (result !== representation.decipherable) {
                    updates.push({ manifest, period, adaptation, representation });
                    representation.decipherable = result;
                }
            }
        }
    }
    return updates;
}

;// CONCATENATED MODULE: ./src/manifest/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/* harmony default export */ const src_manifest = (Manifest);



;// CONCATENATED MODULE: ./src/utils/ranges.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file contains functions helping with TimeRanges management.
 *
 * For simplicity/performance reasons, many of those work with a simplified
 * "Range" object, which is an object with two keys:
 *   - start {Number}
 *   - end {Number}
 *
 * Those two corresponds to what is returned by the start and end methods of a
 * TimeRanges Object.
 *
 * You can convert from TimeRanges to Range object(s) with the getRange/
 * convertToRanges methods.
 */
// Factor for rounding errors
const EPSILON = 1 / 60;
/**
 * Check equality with a tolerance of EPSILON.
 * Used for various functions with this sort of tolerance regarding the
 * start/end of contiguous ranges.
 * @param {Number} a
 * @param {Number} b
 * @returns {Boolean}
 */
function nearlyEqual(a, b) {
    return Math.abs(a - b) < EPSILON;
}
/**
 * Construct a new range which will have, as start/end, the min/max
 * of both the range given, and the given bitrate.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Object}
 */
function createRangeUnion(range1, range2) {
    const start = Math.min(range1.start, range2.start);
    const end = Math.max(range1.end, range2.end);
    return { start, end };
}
/**
 * Clean array ranges from "empty" ranges.
 * That is, range objects which have their start equal to their end.
 * /!\ Mutate the array of ranges.
 * @param {Array<Object>} ranges
 * @returns {Array<Object>}
 */
function removeEmptyRanges(ranges) {
    for (let index = 0; index < ranges.length; index++) {
        const range = ranges[index];
        if (range.start === range.end) {
            ranges.splice(index--, 1);
        }
    }
    return ranges;
}
/**
 * /!\ Mutate the array of ranges.
 * @param {Array<Object>} ranges
 * @returns {Array<Object>}
 */
function mergeContiguousRanges(ranges) {
    for (let index = 1; index < ranges.length; index++) {
        const prevRange = ranges[index - 1];
        const currRange = ranges[index];
        if (areRangesNearlyContiguous(prevRange, currRange)) {
            const unionRange = createRangeUnion(prevRange, currRange);
            ranges.splice(--index, 2, unionRange);
        }
    }
    return ranges;
}
/**
 * True if range1 is considered _after_ range2.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */
function isAfter(range1, range2) {
    return range1.start >= range2.end;
}
/**
 * True if range1 is considered _before_ range2.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */
function isBefore(range1, range2) {
    return range1.end <= range2.start;
}
/**
 * Returns true if the time given can be considered as part of any of the given
 * ranges.
 * @param {Array.<Object>} ranges
 * @param {number} time
 * @returns {boolean}
 */
function isTimeInRanges(ranges, time) {
    for (let i = 0; i < ranges.length; i++) {
        if (isTimeInRange(ranges[i], time)) {
            return true;
        }
    }
    return false;
}
/**
 * Returns true if the time given can be considered as part of the given range.
 * @param {Object} range1
 * @param {Number} Time
 * @returns {Boolean}
 */
function isTimeInRange({ start, end }, time) {
    return start <= time && time < end;
}
/**
 * Returns true if the two ranges given are overlapping.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */
function areRangesOverlapping(range1, range2) {
    return isTimeInRange(range1, range2.start) ||
        range1.start < range2.end && range2.end < range1.end ||
        isTimeInRange(range2, range1.start);
}
/**
 * Returns true if the two ranges given can be considered contiguous.
 * @param {Object} range1
 * @param {Object} range2
 * @returns {Boolean}
 */
function areRangesNearlyContiguous(range1, range2) {
    return nearlyEqual(range2.start, range1.end) ||
        nearlyEqual(range2.end, range1.start);
}
/**
 * Convert from a TimeRanges object to an array of Ranges.
 * @param {TimeRanges} timeRanges
 * @returns {Array.<Object>}
 */
function convertToRanges(timeRanges) {
    const ranges = [];
    for (let i = 0; i < timeRanges.length; i++) {
        ranges.push({ start: timeRanges.start(i),
            end: timeRanges.end(i) });
    }
    return ranges;
}
/**
 * Get range object of a specific time in a TimeRanges object.
 * @param {TimeRanges} timeRanges
 * @returns {Object}
 */
function getRange(timeRanges, time) {
    for (let i = timeRanges.length - 1; i >= 0; i--) {
        const start = timeRanges.start(i);
        if (time >= start) {
            const end = timeRanges.end(i);
            if (time < end) {
                return { start,
                    end };
            }
        }
    }
    return null;
}
/**
 * Get gap from a specific time until the start of the next Range.
 * @param {TimeRanges} timeRanges
 * @param {Number} time
 * @returns {Number}
 */
function getNextRangeGap(timeRanges, time) {
    const len = timeRanges.length;
    for (let i = 0; i < len; i++) {
        const start = timeRanges.start(i);
        if (time < start) {
            return start - time;
        }
    }
    return Infinity;
}
/**
 * @param {TimeRanges} timeRanges
 * @param {Number} time
 * @returns {Object} - Object with two properties:
 *   - outerRanges {Array.<Object>}: every ranges which does not contain the
 *     given time.
 *   - innerRange {Object|null}: the range which contain the given time.
 */
function getInnerAndOuterTimeRanges(timeRanges, time) {
    let innerRange = null;
    const outerRanges = [];
    for (let i = 0; i < timeRanges.length; i++) {
        const start = timeRanges.start(i);
        const end = timeRanges.end(i);
        if (time < start || time >= end) {
            outerRanges.push({ start, end });
        }
        else {
            innerRange = { start, end };
        }
    }
    return { outerRanges, innerRange };
}
/**
 * Get "size" (difference between end and start) of the range containing the
 * given time. 0 if the range is not found.
 * @param {TimeRanges} timeRanges
 * @param {Number} currentTime
 * @returns {Number}
 */
function getSizeOfRange(timeRanges, currentTime) {
    const range = getRange(timeRanges, currentTime);
    return range !== null ? range.end - range.start :
        0;
}
/**
 * Get "currently played" (difference between time given and start) of the
 * range containing the given time. 0 if the range is not found.
 * @param {TimeRanges} timeRanges
 * @param {Number} currentTime
 * @returns {Number}
 */
function getPlayedSizeOfRange(timeRanges, currentTime) {
    const range = getRange(timeRanges, currentTime);
    return range !== null ? currentTime - range.start :
        0;
}
/**
 * Get "left to play" (difference between end and time given) of the range
 * containing the given time. Infinity if the range is not found.
 * @param {TimeRanges} timeRanges
 * @param {Number} currentTime
 * @returns {Number}
 */
function getLeftSizeOfRange(timeRanges, currentTime) {
    const range = getRange(timeRanges, currentTime);
    return range !== null ? range.end - currentTime :
        Infinity;
}
/**
 * Insert a range object into an array of ranges objects, at the right place.
 * /!\ Mutate the array of ranges.
 * @param {Array.<Object>} ranges
 * @param {Object} rangeToAddArg
 * @returns {Array.<Object>}
 */
function insertInto(ranges, rangeToAddArg) {
    if (rangeToAddArg.start === rangeToAddArg.end) {
        return ranges;
    }
    let rangeToAdd = rangeToAddArg;
    // For each present range check if we need to:
    // - In case we are overlapping or contiguous:
    //   - if added range has the same bitrate as the overlapped or
    //     contiguous one, we can merge themcurrentRange
    //   - if added range has a different bitrate we need to insert it
    //     in place
    // - Need to insert in place, we we are completely, not overlapping
    //   and not contiguous in between two ranges.
    let index = 0;
    for (; index < ranges.length; index++) {
        const range = ranges[index];
        const overlapping = areRangesOverlapping(rangeToAdd, range);
        const contiguous = areRangesNearlyContiguous(rangeToAdd, range);
        // We assume ranges are ordered and two ranges can not be
        // completely overlapping.
        if (overlapping || contiguous) {
            rangeToAdd = createRangeUnion(rangeToAdd, range);
            ranges.splice(index--, 1);
        }
        else {
            // Check the case for which there is no more to do
            if (index === 0) {
                if (isBefore(rangeToAdd, ranges[0])) {
                    // First index, and we are completely before that range (and
                    // not contiguous, nor overlapping). We just need to be
                    // inserted here.
                    break;
                }
            }
            else {
                if (isBefore(ranges[index - 1], rangeToAdd)
                    && isBefore(rangeToAdd, range)) {
                    // We are exactly after the current previous range, and
                    // before the current range, while not overlapping with none
                    // of them. Insert here.
                    break;
                }
            }
        }
    }
    // Now that we are sure we don't overlap with any range, just add it.
    ranges.splice(index, 0, rangeToAdd);
    return mergeContiguousRanges(removeEmptyRanges(ranges));
}
/**
 * Returns range, from a range objects array overlapping with a range given
 * in argument. null if none is found.
 * @param {Object} range
 * @param {Array.<Object>} ranges
 * @returns {Array.<Object>}
 */
function findOverlappingRanges(range, ranges) {
    const resultingRanges = [];
    for (let i = 0; i < ranges.length; i++) {
        if (areRangesOverlapping(range, ranges[i])) {
            resultingRanges.push(ranges[i]);
        }
    }
    return resultingRanges;
}
/**
 * Returns only the intersection between the two ranges, from the first
 * ranges argument given.
 * @param {Array.<Range>} ranges1
 * @param {Array.<Range>} ranges2
 * @returns {Array.<Range>}
 */
function keepRangeIntersection(ranges1, ranges2) {
    const result = [];
    for (let i = 0; i < ranges1.length; i++) {
        const range = ranges1[i];
        const overlappingRanges = findOverlappingRanges(range, ranges2);
        if (overlappingRanges.length > 0) {
            for (let j = 0; j < overlappingRanges.length; j++) {
                const overlappingRange = overlappingRanges[j];
                result.push({ start: Math.max(range.start, overlappingRange.start),
                    end: Math.min(range.end, overlappingRange.end) });
            }
        }
    }
    return result;
}
/**
 * Exclude from the `baseRanges` everything that is in `rangesToExclude`.
 * Example:
 *
 * Let's say we have the following base ranges:
 *       |==========|        |===============| |======|    |==========|
 *
 * From which we want to "exclude" the following ranges:
 *          |=========| |==|        |===|  |=====|
 *
 * We will obtain the first ranges from which we remove the second ranges:
 * -----------------------------------------------------------------------
 *       |==========|        |===============| |======|    |==========|
 *          |=========| |==|        |===|  |=====|
 * _______________________________________________________________________
 *                                     |
 *                                     |
 *                                     V
 * -----------------------------------------------------------------------
 *       |==|                |======|   |==|     |====|    |==========|
 * -----------------------------------------------------------------------
 *
 * @param {Array.<Object} baseRanges
 * @param {Array.<Object} rangesToExclude
 * @return {Array.<Object>}
 */
function excludeFromRanges(baseRanges, rangesToExclude) {
    const result = [];
    // For every range in `baseRanges`, find overlapping ranges with
    // `rangesToExclude` and remove them.
    for (let i = 0; i < baseRanges.length; i++) {
        const range = baseRanges[i];
        const intersections = [];
        const overlappingRanges = findOverlappingRanges(range, rangesToExclude);
        if (overlappingRanges.length > 0) {
            for (let j = 0; j < overlappingRanges.length; j++) {
                const overlappingRange = overlappingRanges[j];
                intersections.push({ start: Math.max(range.start, overlappingRange.start),
                    end: Math.min(range.end, overlappingRange.end) });
            }
        }
        if (intersections.length === 0) {
            result.push(range);
        }
        else {
            let lastStart = range.start;
            for (let j = 0; j < intersections.length; j++) {
                if (intersections[j].start > lastStart) {
                    result.push({ start: lastStart,
                        end: intersections[j].start });
                }
                lastStart = intersections[j].end;
            }
            if (lastStart < range.end) {
                result.push({ start: lastStart,
                    end: range.end });
            }
        }
    }
    return result;
}
/**
 * Returns `true` if the given `time` is available in the TimeRanges object
 * given.
 * Returns `false` otherwise.
 * @param {TimeRanges} ranges
 * @param {Number} time
 * @returns {boolean}
 */
function isTimeInTimeRanges(ranges, time) {
    for (let i = 0; i < ranges.length; i++) {
        if (ranges.start(i) <= time && time < ranges.end(i)) {
            return true;
        }
    }
    return false;
}


;// CONCATENATED MODULE: ./src/compat/eme/custom_key_system_access.ts
/**
 * Simple implementation of the MediaKeySystemAccess EME API.
 *
 * All needed arguments are given to the constructor
 * @class CustomMediaKeySystemAccess
 */
class CustomMediaKeySystemAccess {
    /**
     * @param {string} _keyType - type of key system (e.g. "widevine" or
     * "com.widevine.alpha").
     * @param {Object} _mediaKeys - MediaKeys implementation
     * @param {Object} _configuration - Configuration accepted for this
     * MediaKeySystemAccess.
     */
    constructor(_keyType, _mediaKeys, _configuration) {
        this._keyType = _keyType;
        this._mediaKeys = _mediaKeys;
        this._configuration = _configuration;
    }
    /**
     * @returns {string} - current key system type (e.g. "widevine" or
     * "com.widevine.alpha").
     */
    get keySystem() {
        return this._keyType;
    }
    /**
     * @returns {Promise.<Object>} - Promise wrapping the MediaKeys for this
     * MediaKeySystemAccess. Never rejects.
     */
    createMediaKeys() {
        return new Promise((res) => res(this._mediaKeys));
    }
    /**
     * @returns {Object} - Configuration accepted for this MediaKeySystemAccess.
     */
    getConfiguration() {
        return this._configuration;
    }
}

;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/ms_media_keys_constructor.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let MSMediaKeysConstructor;
if (!is_node) {
    const { MSMediaKeys } = window;
    if (MSMediaKeys !== undefined &&
        MSMediaKeys.prototype !== undefined &&
        typeof MSMediaKeys.isTypeSupported === "function" &&
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        typeof MSMediaKeys.prototype.createSession === "function"
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
    ) {
        MSMediaKeysConstructor = MSMediaKeys;
    }
}


;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/ie11_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class IE11MediaKeySession extends EventEmitter {
    constructor(mk) {
        super();
        this.expiration = NaN;
        this.keyStatuses = new Map();
        this._mk = mk;
        this._closeSession$ = new Subject();
        this.closed = new Promise((resolve) => {
            this._closeSession$.subscribe(resolve);
        });
        this.update = (license) => {
            return new Promise((resolve, reject) => {
                if (this._ss === undefined) {
                    return reject("MediaKeySession not set.");
                }
                try {
                    resolve(this._ss.update(license, ""));
                }
                catch (err) {
                    reject(err);
                }
            });
        };
    }
    generateRequest(_initDataType, initData) {
        return new Promise((resolve) => {
            const initDataU8 = initData instanceof Uint8Array ? initData :
                initData instanceof ArrayBuffer ? new Uint8Array(initData) :
                    new Uint8Array(initData.buffer);
            this._ss = this._mk.createSession("video/mp4", initDataU8);
            merge(onKeyMessage$(this._ss), onKeyAdded$(this._ss), onKeyError$(this._ss)).pipe(takeUntil(this._closeSession$))
                .subscribe((evt) => this.trigger(evt.type, evt));
            resolve();
        });
    }
    close() {
        return new Promise((resolve) => {
            if (this._ss != null) {
                this._ss.close();
                this._ss = undefined;
            }
            this._closeSession$.next();
            this._closeSession$.complete();
            resolve();
        });
    }
    load() {
        return Promise.resolve(false);
    }
    remove() {
        return Promise.resolve();
    }
    get sessionId() {
        var _a, _b;
        return (_b = (_a = this._ss) === null || _a === void 0 ? void 0 : _a.sessionId) !== null && _b !== void 0 ? _b : "";
    }
}
class IE11CustomMediaKeys {
    constructor(keyType) {
        if (MSMediaKeysConstructor === undefined) {
            throw new Error("No MSMediaKeys API.");
        }
        this._mediaKeys = new MSMediaKeysConstructor(keyType);
    }
    _setVideo(videoElement) {
        this._videoElement = videoElement;
        if (this._videoElement.msSetMediaKeys !== undefined) {
            return this._videoElement.msSetMediaKeys(this._mediaKeys);
        }
    }
    createSession( /* sessionType */) {
        if (this._videoElement === undefined || this._mediaKeys === undefined) {
            throw new Error("Video not attached to the MediaKeys");
        }
        return new IE11MediaKeySession(this._mediaKeys);
    }
    setServerCertificate() {
        throw new Error("Server certificate is not implemented in your browser");
    }
}
function getIE11MediaKeysCallbacks() {
    const isTypeSupported = (keySystem, type) => {
        if (MSMediaKeysConstructor === undefined) {
            throw new Error("No MSMediaKeys API.");
        }
        if (type !== undefined) {
            return MSMediaKeysConstructor.isTypeSupported(keySystem, type);
        }
        return MSMediaKeysConstructor.isTypeSupported(keySystem);
    };
    const createCustomMediaKeys = (keyType) => new IE11CustomMediaKeys(keyType);
    const setMediaKeys = (elt, mediaKeys) => {
        if (mediaKeys === null) {
            // msSetMediaKeys only accepts native MSMediaKeys as argument.
            // Calling it with null or undefined will raise an exception.
            // There is no way to unset the mediakeys in that case, so return here.
            return;
        }
        if (!(mediaKeys instanceof IE11CustomMediaKeys)) {
            throw new Error("Custom setMediaKeys is supposed to be called " +
                "with IE11 custom MediaKeys.");
        }
        return mediaKeys._setVideo(elt);
    };
    return {
        isTypeSupported,
        createCustomMediaKeys,
        setMediaKeys,
    };
}


;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/moz_media_keys_constructor.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let MozMediaKeysConstructor;
if (!is_node) {
    const { MozMediaKeys } = window;
    if (MozMediaKeys !== undefined &&
        MozMediaKeys.prototype !== undefined &&
        typeof MozMediaKeys.isTypeSupported === "function" &&
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        typeof MozMediaKeys.prototype.createSession === "function"
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
    ) {
        MozMediaKeysConstructor = MozMediaKeys;
    }
}

function getMozMediaKeysCallbacks() {
    const isTypeSupported = (keySystem, type) => {
        if (MozMediaKeysConstructor === undefined) {
            throw new Error("No MozMediaKeys API.");
        }
        if (type !== undefined) {
            return MozMediaKeysConstructor.isTypeSupported(keySystem, type);
        }
        return MozMediaKeysConstructor.isTypeSupported(keySystem);
    };
    const createCustomMediaKeys = (keyType) => {
        if (MozMediaKeysConstructor === undefined) {
            throw new Error("No MozMediaKeys API.");
        }
        return new MozMediaKeysConstructor(keyType);
    };
    const setMediaKeys = (mediaElement, mediaKeys) => {
        const elt = mediaElement;
        if (elt.mozSetMediaKeys === undefined || typeof elt.mozSetMediaKeys !== "function") {
            throw new Error("Can't set video on MozMediaKeys.");
        }
        return elt.mozSetMediaKeys(mediaKeys);
    };
    return {
        isTypeSupported,
        createCustomMediaKeys,
        setMediaKeys,
    };
}

;// CONCATENATED MODULE: ./src/utils/base64.ts
/* eslint-disable */
/*
MIT License
Copyright (c) 2020 Egor Nepomnyaschih
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

/*
// This constant can also be computed with the following algorithm:
const base64abc = [],
  A = "A".charCodeAt(0),
  a = "a".charCodeAt(0),
  n = "0".charCodeAt(0);
for (let i = 0; i < 26; ++i) {
  base64abc.push(String.fromCharCode(A + i));
}
for (let i = 0; i < 26; ++i) {
  base64abc.push(String.fromCharCode(a + i));
}
for (let i = 0; i < 10; ++i) {
  base64abc.push(String.fromCharCode(n + i));
}
base64abc.push("+");
base64abc.push("/");
 */
const base64abc = [
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/",
];
/*
// This constant can also be computed with the following algorithm:
const l = 256, base64codes = new Uint8Array(l);
for (let i = 0; i < l; ++i) {
  base64codes[i] = 255; // invalid character
}
base64abc.forEach((char, index) => {
  base64codes[char.charCodeAt(0)] = index;
});
base64codes["=".charCodeAt(0)] = 0; // ignored anyway, so we just need to prevent an error
 */
const base64codes = [
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63,
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255,
    255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255,
    255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
];
/**
 * Obtain the value corresponding to a base64 char code.
 * /!\ Can throw if the char code given is invalid.
 * @param {number} charCode
 * @returns {number}
 */
function getBase64Code(charCode) {
    if (charCode >= base64codes.length) {
        throw new Error("Unable to parse base64 string.");
    }
    const code = base64codes[charCode];
    if (code === 255) {
        throw new Error("Unable to parse base64 string.");
    }
    return code;
}
/**
 * Convert an array of bytes into a base64 string.
 * @param {Array.<number>|Uint8Array} bytes
 * @returns {string}
 */
function bytesToBase64(bytes) {
    let result = "";
    let i;
    const length = bytes.length;
    for (i = 2; i < length; i += 3) {
        result += base64abc[bytes[i - 2] >> 2];
        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];
        result += base64abc[((bytes[i - 1] & 0x0F) << 2) | (bytes[i] >> 6)];
        result += base64abc[bytes[i] & 0x3F];
    }
    if (i === length + 1) { // 1 octet yet to write
        result += base64abc[bytes[i - 2] >> 2];
        result += base64abc[(bytes[i - 2] & 0x03) << 4];
        result += "==";
    }
    if (i === length) { // 2 octets yet to write
        result += base64abc[bytes[i - 2] >> 2];
        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];
        result += base64abc[(bytes[i - 1] & 0x0F) << 2];
        result += "=";
    }
    return result;
}
/**
 * Convert a base64 string into the corresponding Uint8Array containing its
 * corresponding binary data.
 * /!\ Can throw if an invalid base64 string was given.
 * @param {Array.<number>|Uint8Array} bytes
 * @returns {string}
 */
function base64ToBytes(str) {
    const paddingNeeded = str.length % 4;
    let paddedStr = str;
    if (paddingNeeded !== 0) {
        src_log.warn("base64ToBytes: base64 given miss padding");
        paddedStr += paddingNeeded === 3 ? "=" :
            paddingNeeded === 2 ? "==" :
                "==="; // invalid, but we will catch it
    }
    const index = paddedStr.indexOf("=");
    if (index !== -1 && index < paddedStr.length - 2) {
        throw new Error("Unable to parse base64 string.");
    }
    const missingOctets = paddedStr.endsWith("==") ? 2 :
        paddedStr.endsWith("=") ? 1 : 0;
    const n = paddedStr.length;
    const result = new Uint8Array((n / 4) * 3);
    let buffer;
    for (let i = 0, j = 0; i < n; i += 4, j += 3) {
        buffer = getBase64Code(paddedStr.charCodeAt(i)) << 18 |
            getBase64Code(paddedStr.charCodeAt(i + 1)) << 12 |
            getBase64Code(paddedStr.charCodeAt(i + 2)) << 6 |
            getBase64Code(paddedStr.charCodeAt(i + 3));
        result[j] = buffer >> 16;
        result[j + 1] = (buffer >> 8) & 0xFF;
        result[j + 2] = buffer & 0xFF;
    }
    return result.subarray(0, result.length - missingOctets);
}

;// CONCATENATED MODULE: ./src/utils/string_parsing.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const hasTextDecoder = typeof window === "object" &&
    typeof window.TextDecoder === "function";
const hasTextEncoder = typeof window === "object" &&
    typeof window.TextEncoder === "function";
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-16 code
 * units in little-endian.
 * @param {string} str
 * @returns {Uint8Array}
 */
function strToUtf16LE(str) {
    const buffer = new ArrayBuffer(str.length * 2);
    const res = new Uint8Array(buffer);
    for (let i = 0; i < res.length; i += 2) {
        const value = str.charCodeAt(i / 2);
        res[i] = value & 0xFF;
        res[i + 1] = value >> 8 & 0xFF;
    }
    return res;
}
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-16 code
 * units in little-endian.
 * @param {string} str
 * @returns {Uint8Array}
 */
function strToBeUtf16(str) {
    const buffer = new ArrayBuffer(str.length * 2);
    const res = new Uint8Array(buffer);
    for (let i = 0; i < res.length; i += 2) {
        const value = str.charCodeAt(i / 2);
        res[i + 1] = value & 0xFF;
        res[i] = value >> 8 & 0xFF;
    }
    return res;
}
/**
 * Construct string from the little-endian UTF-16 code units given.
 * @param {Uint8Array} bytes
 * @returns {string}
 */
function utf16LEToStr(bytes) {
    if (hasTextDecoder) {
        try {
            // instanciation throws if the encoding is unsupported
            const decoder = new TextDecoder("utf-16le");
            return decoder.decode(bytes);
        }
        catch (e) {
            const err = e instanceof Error ? e : "";
            src_log.warn("Utils: could not use TextDecoder to parse UTF-16LE, " +
                "fallbacking to another implementation", err);
        }
    }
    let str = "";
    for (let i = 0; i < bytes.length; i += 2) {
        str += String.fromCharCode((bytes[i + 1] << 8) + bytes[i]);
    }
    return str;
}
/**
 * Construct string from the little-endian UTF-16 code units given.
 * @param {Uint8Array} bytes
 * @returns {string}
 */
function beUtf16ToStr(bytes) {
    if (hasTextDecoder) {
        try {
            // instanciation throws if the encoding is unsupported
            const decoder = new TextDecoder("utf-16be");
            return decoder.decode(bytes);
        }
        catch (e) {
            const err = e instanceof Error ? e : "";
            log.warn("Utils: could not use TextDecoder to parse UTF-16BE, " +
                "fallbacking to another implementation", err);
        }
    }
    let str = "";
    for (let i = 0; i < bytes.length; i += 2) {
        str += String.fromCharCode((bytes[i] << 8) + bytes[i + 1]);
    }
    return str;
}
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-8 code
 * units.
 * @param {string} str
 * @returns {Uint8Array}
 */
function strToUtf8(str) {
    if (hasTextEncoder) {
        try {
            const encoder = new TextEncoder();
            return encoder.encode(str);
        }
        catch (e) {
            const err = e instanceof Error ? e : "";
            src_log.warn("Utils: could not use TextEncoder to encode string into UTF-8, " +
                "fallbacking to another implementation", err);
        }
    }
    // http://stackoverflow.com/a/13691499 provides an ugly but functional solution.
    // (Note you have to dig deeper to understand it but I have more faith in
    // stackoverflow not going down in the future so I leave that link.)
    // Briefly said, `utf8Str` will contain a version of `str` where every
    // non-ASCII characters will be replaced by an escape sequence of the
    // corresponding representation of those characters in UTF-8.
    // It does sound weird and unnecessarily complicated, but it works!
    //
    // Here is actually what happens with more words. We will rely on two browser
    // APIs:
    //
    //   - `encodeURIComponent` will take a string and convert the non-ASCII
    //     characters in it into the percent-encoded version of the corresponding
    //     UTF-8 bytes
    //     Example: encodeURIComponent("é") => 0xC3 0xA9 => `"%C3%A9"`
    //
    //   - `unescape` unescapes (so far so good) a percent-encoded string. But it
    //     does it in a really simple way: percent-encoded byte by percent-encoded
    //     byte into the corresponding extended ASCII representation on 8 bits.
    //     As a result, we end-up with a string which actually contains instead of
    //     each of its original characters, the UTF-8 code units (8 bits) of
    //     those characters.
    //     Let's take our previous `"é" => "%C3%A9"` example. Here we would get:
    //     unecape("%C3%A9") => "\u00c3\u00a9" === "Ã©" (in extended ASCII)
    //
    // By iterating on the resulting string, we will then be able to generate a
    // Uint8Array containing the UTF-8 representation of that original string, by
    // just calling the charCodeAt API on it.
    let utf8Str;
    const pcStr = encodeURIComponent(str);
    // As "unescape" is a deprecated function we want to declare a fallback in the
    // case a browser decide to not implement it.
    if (typeof unescape === "function") {
        utf8Str = unescape(pcStr);
    }
    else {
        // Let's implement a simple unescape function (got to admit it was for the challenge)
        // http://ecma-international.org/ecma-262/9.0/#sec-unescape-string
        const isHexChar = /[0-9a-fA-F]/;
        const pcStrLen = pcStr.length;
        utf8Str = "";
        for (let i = 0; i < pcStr.length; i++) {
            let wasPercentEncoded = false;
            if (pcStr[i] === "%") {
                if (i <= pcStrLen - 6 &&
                    pcStr[i + 1] === "u" &&
                    isHexChar.test(pcStr[i + 2]) &&
                    isHexChar.test(pcStr[i + 3]) &&
                    isHexChar.test(pcStr[i + 4]) &&
                    isHexChar.test(pcStr[i + 5])) {
                    const charCode = parseInt(pcStr.substring(i + 1, i + 6), 16);
                    utf8Str += String.fromCharCode(charCode);
                    wasPercentEncoded = true;
                    i += 5; // Skip the next 5 chars
                }
                else if (i <= pcStrLen - 3 &&
                    isHexChar.test(pcStr[i + 1]) &&
                    isHexChar.test(pcStr[i + 2])) {
                    const charCode = parseInt(pcStr.substring(i + 1, i + 3), 16);
                    utf8Str += String.fromCharCode(charCode);
                    wasPercentEncoded = true;
                    i += 2; // Skip the next 2 chars
                }
            }
            if (!wasPercentEncoded) {
                utf8Str += pcStr[i];
            }
        }
    }
    // Now let's just build our array from every other bytes of that string's
    // UTF-16 representation
    const res = new Uint8Array(utf8Str.length);
    for (let i = 0; i < utf8Str.length; i++) {
        res[i] = utf8Str.charCodeAt(i) & 0xFF; // first byte should be 0x00 anyway
    }
    return res;
}
/**
 * Creates a new string from the given array of char codes.
 * @param {Uint8Array} args
 * @returns {string}
 */
function stringFromCharCodes(args) {
    const max = 16000;
    let ret = "";
    for (let i = 0; i < args.length; i += max) {
        const subArray = args.subarray(i, i + max);
        // NOTE: ugly I know, but TS is problematic here (you can try)
        ret += String.fromCharCode.apply(null, subArray);
    }
    return ret;
}
/**
 * Transform an integer into an hexadecimal string of the given length, padded
 * to the left with `0` if needed.
 * @example
 * ```
 * intToHex(5, 4); // => "0005"
 * intToHex(5, 2); // => "05"
 * intToHex(10, 1); // => "a"
 * intToHex(268, 3); // => "10c"
 * intToHex(4584, 6) // => "0011e8"
 * intToHex(123456, 4); // => "1e240" (we do nothing when going over 4 chars)
 * ```
 * @param {number} num
 * @param {number} size
 * @returns {string}
 */
function intToHex(num, size) {
    const toStr = num.toString(16);
    return toStr.length >= size ? toStr :
        new Array(size - toStr.length + 1).join("0") + toStr;
}
/**
 * Creates a string from the given Uint8Array containing utf-8 code units.
 * @param {Uint8Array} bytes
 * @returns {string}
 */
function utf8ToStr(data) {
    if (hasTextDecoder) {
        try {
            // TextDecoder use UTF-8 by default
            const decoder = new TextDecoder();
            return decoder.decode(data);
        }
        catch (e) {
            const err = e instanceof Error ? e : "";
            src_log.warn("Utils: could not use TextDecoder to parse UTF-8, " +
                "fallbacking to another implementation", err);
        }
    }
    let uint8 = data;
    // If present, strip off the UTF-8 BOM.
    if (uint8[0] === 0xEF && uint8[1] === 0xBB && uint8[2] === 0xBF) {
        uint8 = uint8.subarray(3);
    }
    // We're basically doing strToUtf8 in reverse.
    // You can look at that other function for the whole story.
    // Generate string containing escaped UTF-8 code units
    const utf8Str = stringFromCharCodes(uint8);
    let escaped;
    if (typeof escape === "function") {
        // Transform UTF-8 escape sequence into percent-encoded escape sequences.
        escaped = escape(utf8Str);
    }
    else {
        // Let's implement a simple escape function
        // http://ecma-international.org/ecma-262/9.0/#sec-escape-string
        const nonEscapedChar = /[A-Za-z0-9*_\+-\.\/]/;
        escaped = "";
        for (let i = 0; i < utf8Str.length; i++) {
            if (nonEscapedChar.test(utf8Str[i])) {
                escaped += utf8Str[i];
            }
            else {
                const charCode = utf8Str.charCodeAt(i);
                escaped += charCode >= 256 ? "%u" + intToHex(charCode, 4) :
                    "%" + intToHex(charCode, 2);
            }
        }
    }
    // Decode the percent-encoded UTF-8 string into the proper JS string.
    // Example: "g#%E3%82%AC" -> "g#€"
    return decodeURIComponent(escaped);
}
/**
 * Convert hex codes in a string form into the corresponding bytes.
 * @param {string} str
 * @returns {Uint8Array}
 * @throws TypeError - str.length is odd
 */
function string_parsing_hexToBytes(str) {
    const len = str.length;
    const arr = new Uint8Array(len / 2);
    for (let i = 0, j = 0; i < len; i += 2, j++) {
        arr[j] = parseInt(str.substring(i, i + 2), 16) & 0xFF;
    }
    return arr;
}
/**
 * Convert bytes into the corresponding hex string, with the possibility
 * to add a separator.
 * @param {Uint8Array} bytes
 * @param {string} [sep=""] - separator. Separate each two hex character.
 * @returns {string}
 */
function bytesToHex(bytes, sep = "") {
    let hex = "";
    for (let i = 0; i < bytes.byteLength; i++) {
        hex += (bytes[i] >>> 4).toString(16);
        hex += (bytes[i] & 0xF).toString(16);
        if (sep.length > 0 && i < bytes.byteLength - 1) {
            hex += sep;
        }
    }
    return hex;
}
/**
 * Convert little-endian GUID into big-endian UUID.
 * @param {Uint8Array} guid
 * @returns {Uint8Array} - uuid
 * @throws AssertionError - The guid length is not 16
 */
function guidToUuid(guid) {
    assert_assert(guid.length === 16, "GUID length should be 16");
    const p1A = guid[0];
    const p1B = guid[1];
    const p1C = guid[2];
    const p1D = guid[3];
    const p2A = guid[4];
    const p2B = guid[5];
    const p3A = guid[6];
    const p3B = guid[7];
    const uuid = new Uint8Array(16);
    // swapping byte endian on 4 bytes
    // [1, 2, 3, 4] => [4, 3, 2, 1]
    uuid[0] = p1D;
    uuid[1] = p1C;
    uuid[2] = p1B;
    uuid[3] = p1A;
    // swapping byte endian on 2 bytes
    // [5, 6] => [6, 5]
    uuid[4] = p2B;
    uuid[5] = p2A;
    // swapping byte endian on 2 bytes
    // [7, 8] => [8, 7]
    uuid[6] = p3B;
    uuid[7] = p3A;
    uuid.set(guid.subarray(8, 16), 8);
    return uuid;
}
/**
 * Decode string from bytes (UTF-8).
 * Keeps reading until it reaches a byte that equals to zero.
 * @param {Uint8Array} buffer
 * @param {number} offset
 * @returns {Object}
 */
function readNullTerminatedString(buffer, offset) {
    let position = offset;
    while (position < buffer.length) {
        const value = buffer[position];
        if (value === 0) {
            break;
        }
        position += 1;
    }
    const bytes = buffer.subarray(offset, position);
    return { end: position + 1,
        string: utf8ToStr(bytes) };
}


;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/old_webkit_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Returns true if the given media element has old webkit methods
 * corresponding to the IOldWebkitHTMLMediaElement interface.
 * @param {HTMLMediaElement} element
 * @returns {Boolean}
 */
function isOldWebkitMediaElement(element) {
    return typeof element
        .webkitGenerateKeyRequest === "function";
}
/**
 * MediaKeySession implementation for older versions of WebKit relying on APIs
 * such as `webkitGenerateKeyRequest` `webkitAddKey` to be called on the
 * HTMLMediaElement.
 * @class OldWebkitMediaKeySession
 */
class OldWebkitMediaKeySession extends EventEmitter {
    constructor(mediaElement, keySystem) {
        super();
        this._vid = mediaElement;
        this._key = keySystem;
        this.sessionId = "";
        this._closeSession = utils_noop; // Just here to make TypeScript happy
        this.keyStatuses = new Map();
        this.expiration = NaN;
        const onSessionRelatedEvent = (evt) => {
            this.trigger(evt.type, evt);
        };
        this.closed = new Promise((resolve) => {
            this._closeSession = () => {
                ["keymessage", "message", "keyadded", "ready", "keyerror", "error"]
                    .forEach(evt => {
                    mediaElement.removeEventListener(evt, onSessionRelatedEvent);
                    mediaElement.removeEventListener(`webkit${evt}`, onSessionRelatedEvent);
                });
                resolve();
            };
        });
        ["keymessage", "message", "keyadded", "ready", "keyerror", "error"]
            .forEach(evt => {
            mediaElement.addEventListener(evt, onSessionRelatedEvent);
            mediaElement.addEventListener(`webkit${evt}`, onSessionRelatedEvent);
        });
    }
    update(license) {
        return new Promise((resolve, reject) => {
            try {
                if (this._key.indexOf("clearkey") >= 0) {
                    const licenseTypedArray = license instanceof ArrayBuffer ? new Uint8Array(license) :
                        license;
                    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
                    /* eslint-disable @typescript-eslint/no-unsafe-argument */
                    /* eslint-disable @typescript-eslint/no-unsafe-assignment */
                    const json = JSON.parse(utf8ToStr(licenseTypedArray));
                    const key = base64ToBytes(json.keys[0].k);
                    const kid = base64ToBytes(json.keys[0].kid);
                    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
                    /* eslint-enable @typescript-eslint/no-unsafe-argument */
                    /* eslint-enable @typescript-eslint/no-unsafe-assignment */
                    resolve(this._vid.webkitAddKey(this._key, key, kid, /* sessionId */ ""));
                }
                else {
                    resolve(this._vid.webkitAddKey(this._key, license, null, /* sessionId */ ""));
                }
            }
            catch (err) {
                reject(err);
            }
        });
    }
    generateRequest(_initDataType, initData) {
        return new Promise((resolve) => {
            this._vid.webkitGenerateKeyRequest(this._key, initData);
            resolve();
        });
    }
    close() {
        return new Promise((resolve) => {
            this._closeSession();
            resolve();
        });
    }
    /**
     * Load a Persistent MediaKeySession.
     * Do nothing here because this implementation doesn't handle them.
     * @returns {Promise.<boolean>}
     */
    load() {
        // Not implemented. Always return false as in "no session with that id".
        return Promise.resolve(false);
    }
    remove() {
        return Promise.resolve();
    }
}
class OldWebKitCustomMediaKeys {
    constructor(keySystem) {
        this._keySystem = keySystem;
    }
    _setVideo(videoElement) {
        if (!isOldWebkitMediaElement(videoElement)) {
            throw new Error("Video not attached to the MediaKeys");
        }
        this._videoElement = videoElement;
    }
    createSession( /* sessionType */) {
        if (this._videoElement == null) {
            throw new Error("Video not attached to the MediaKeys");
        }
        return new OldWebkitMediaKeySession(this._videoElement, this._keySystem);
    }
    setServerCertificate() {
        throw new Error("Server certificate is not implemented in your browser");
    }
}
function getOldWebKitMediaKeysCallbacks() {
    const isTypeSupported = function (keyType) {
        // get any <video> element from the DOM or create one
        // and try the `canPlayType` method
        let videoElement = document.querySelector("video");
        if (videoElement == null) {
            videoElement = document.createElement("video");
        }
        if (videoElement != null && typeof videoElement.canPlayType === "function") {
            return !!videoElement.canPlayType("video/mp4", keyType);
        }
        else {
            return false;
        }
    };
    const createCustomMediaKeys = (keyType) => new OldWebKitCustomMediaKeys(keyType);
    const setMediaKeys = (elt, mediaKeys) => {
        if (mediaKeys === null) {
            return;
        }
        if (!(mediaKeys instanceof OldWebKitCustomMediaKeys)) {
            throw new Error("Custom setMediaKeys is supposed to be called " +
                "with old webkit custom MediaKeys.");
        }
        return mediaKeys._setVideo(elt);
    };
    return {
        isTypeSupported,
        createCustomMediaKeys,
        setMediaKeys,
    };
}

;// CONCATENATED MODULE: ./src/utils/byte_parsing.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a Uint8Array from the arguments given, in order:
 *   - if the next argument given is a number N set the N next bytes to 0.
 *   - else set the next bytes to the argument given.
 * @param {...(Number|Uint8Array)} args
 * @returns {Uint8Array}
 */
function byte_parsing_concat(...args) {
    const l = args.length;
    let i = -1;
    let len = 0;
    let arg;
    while (++i < l) {
        arg = args[i];
        len += (typeof arg === "number") ? arg : arg.length;
    }
    const arr = new Uint8Array(len);
    let offset = 0;
    i = -1;
    while (++i < l) {
        arg = args[i];
        if (typeof arg === "number") {
            offset += arg;
        }
        else if (arg.length > 0) {
            arr.set(arg, offset);
            offset += arg.length;
        }
    }
    return arr;
}
/**
 * Translate groups of 2 big-endian bytes to Integer (from 0 up to 65535).
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function be2toi(bytes, offset) {
    return ((bytes[offset + 0] << 8) +
        (bytes[offset + 1] << 0));
}
/**
 * Translate groups of 3 big-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function be3toi(bytes, offset) {
    return ((bytes[offset + 0] * 0x0010000) +
        (bytes[offset + 1] * 0x0000100) +
        (bytes[offset + 2]));
}
/**
 * Translate groups of 4 big-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function be4toi(bytes, offset) {
    return ((bytes[offset + 0] * 0x1000000) +
        (bytes[offset + 1] * 0x0010000) +
        (bytes[offset + 2] * 0x0000100) +
        (bytes[offset + 3]));
}
/**
 * Translate groups of 8 big-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function be8toi(bytes, offset) {
    return (((bytes[offset + 0] * 0x1000000) +
        (bytes[offset + 1] * 0x0010000) +
        (bytes[offset + 2] * 0x0000100) +
        (bytes[offset + 3])) * 0x100000000 +
        (bytes[offset + 4] * 0x1000000) +
        (bytes[offset + 5] * 0x0010000) +
        (bytes[offset + 6] * 0x0000100) +
        (bytes[offset + 7]));
}
/**
 * Translate Integer (from 0 up to 65535) to a Uint8Array of length 2 of
 * the corresponding big-endian bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */
function itobe2(num) {
    return new Uint8Array([(num >>> 8) & 0xFF,
        (num) & 0xFF]);
}
/**
 * Translate Integer to a Uint8Array of length 4 of the corresponding big-endian
 * bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */
function byte_parsing_itobe4(num) {
    return new Uint8Array([(num >>> 24) & 0xFF,
        (num >>> 16) & 0xFF,
        (num >>> 8) & 0xFF,
        (num) & 0xFF]);
}
/**
 * Translate Integer to a Uint8Array of length 8 of the corresponding big-endian
 * bytes.
 * /!\ If the top-most bytes are set, this might go over MAX_SAFE_INTEGER, thus
 * leading to a "bad" value.
 * @param {Number} num
 * @returns {Uint8Array}
 */
function itobe8(num) {
    const l = (num % 0x100000000);
    const h = (num - l) / 0x100000000;
    return new Uint8Array([(h >>> 24) & 0xFF,
        (h >>> 16) & 0xFF,
        (h >>> 8) & 0xFF,
        (h) & 0xFF,
        (l >>> 24) & 0xFF,
        (l >>> 16) & 0xFF,
        (l >>> 8) & 0xFF,
        (l) & 0xFF]);
}
/**
 * Translate groups of 2 little-endian bytes to Integer (from 0 up to 65535).
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function le2toi(bytes, offset) {
    return ((bytes[offset + 0] << 0) +
        (bytes[offset + 1] << 8));
}
/**
 * Translate groups of 4 little-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function le4toi(bytes, offset) {
    return ((bytes[offset + 0]) +
        (bytes[offset + 1] * 0x0000100) +
        (bytes[offset + 2] * 0x0010000) +
        (bytes[offset + 3] * 0x1000000));
}
/**
 * Translate groups of 8 little-endian bytes to Integer.
 * @param {Uint8Array} bytes
 * @param {Number} offset - The offset (from the start of the given array)
 * @returns {Number}
 */
function le8toi(bytes, offset) {
    return (bytes[offset + 0]) +
        (bytes[offset + 1] * 0x0000100) +
        (bytes[offset + 2] * 0x0010000) +
        (bytes[offset + 3] * 0x1000000) +
        ((bytes[offset + 4]) +
            (bytes[offset + 5] * 0x0000100) +
            (bytes[offset + 6] * 0x0010000) +
            (bytes[offset + 7] * 0x1000000)) * 0x100000000;
}
/**
 * Translate Integer (from 0 up to 65535) to a Uint8Array of length 2 of
 * the corresponding little-endian bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */
function itole2(num) {
    return new Uint8Array([(num) & 0xFF,
        (num >>> 8) & 0xFF]);
}
/**
 * Translate Integer to a Uint8Array of length 4 of the corresponding
 * little-endian bytes.
 * @param {Number} num
 * @returns {Uint8Array}
 */
function itole4(num) {
    return new Uint8Array([(num) & 0xFF,
        (num >>> 8) & 0xFF,
        (num >>> 16) & 0xFF,
        (num >>> 24) & 0xFF]);
}
/**
 * Check if an ArrayBuffer is equal to the bytes given.
 * @param {ArrayBuffer} buffer
 * @param {Uint8Array} bytes
 * @returns {Boolean}
 */
function isABEqualBytes(buffer, bytes) {
    const view = new DataView(buffer);
    const len = view.byteLength;
    if (len !== bytes.length) {
        return false;
    }
    for (let i = 0; i < len; i++) {
        if (view.getUint8(i) !== bytes[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Convert any BufferSource-typed structure into the corresponding Uint8Array.
 * @param {BufferSource} input
 * @returns {Uint8Array}
 */
function toUint8Array(input) {
    return input instanceof Uint8Array ? input :
        input instanceof ArrayBuffer ? new Uint8Array(input) :
            new Uint8Array(input.buffer);
}


;// CONCATENATED MODULE: ./src/compat/eme/get_webkit_fairplay_initdata.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create formatted fairplay initdata for WebKit createSession.
 * Layout is :
 * [initData][4 byte: idLength][idLength byte: id]
 * [4 byte:certLength][certLength byte: cert]
 * @param {Uint8Array} initData
 * @param {Uint8Array} serverCertificate
 * @returns {Uint8Array}
 */
function getWebKitFairPlayInitData(initDataBytes, serverCertificateBytes) {
    const initData = initDataBytes instanceof Uint8Array ? initDataBytes :
        new Uint8Array(initDataBytes);
    const serverCertificate = serverCertificateBytes instanceof Uint8Array ?
        serverCertificateBytes :
        new Uint8Array(serverCertificateBytes);
    const length = le4toi(initData, 0);
    if (length + 4 !== initData.length) {
        throw new Error("Unsupported WebKit initData.");
    }
    const initDataUri = utf16LEToStr(initData);
    const skdIndexInInitData = initDataUri.indexOf("skd://");
    const contentIdStr = skdIndexInInitData > -1 ?
        initDataUri.substring(skdIndexInInitData + 6) :
        initDataUri;
    const id = strToUtf16LE(contentIdStr);
    let offset = 0;
    const res = new Uint8Array(initData.byteLength
        /* id length */ + 4 + id.byteLength
        /* certificate length */ + 4 + serverCertificate.byteLength);
    res.set(initData);
    offset += initData.length;
    res.set(itole4(id.byteLength), offset);
    offset += 4;
    res.set(id, offset);
    offset += id.byteLength;
    res.set(itole4(serverCertificate.byteLength), offset);
    offset += 4;
    res.set(serverCertificate, offset);
    return res;
}

;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/webkit_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Check if keyType is for fairplay DRM
 * @param {string} keyType
 * @returns {boolean}
 */
function isFairplayKeyType(keyType) {
    return keyType === "com.apple.fps.1_0" ||
        keyType === "com.apple.fps.2_0";
}
/**
 * Set media keys on video element using native HTMLMediaElement
 * setMediaKeys from WebKit.
 * @param {HTMLMediaElement} videoElement
 * @param {Object|null} mediaKeys
 */
function setWebKitMediaKeys(videoElement, mediaKeys) {
    const elt = videoElement;
    if (elt.webkitSetMediaKeys === undefined) {
        throw new Error("No webKitMediaKeys API.");
    }
    return elt.webkitSetMediaKeys(mediaKeys);
}
/**
 * On Safari browsers (>= 9), there are specific webkit prefixed APIs for cyphered
 * content playback. Standard EME APIs are therefore available since Safari 12.1, but they
 * don't allow to play fairplay cyphered content.
 *
 * This class implements a standard EME API polyfill that wraps webkit prefixed Safari
 * EME custom APIs.
 */
class WebkitMediaKeySession extends EventEmitter {
    /**
     * @param {HTMLMediaElement} mediaElement
     * @param {string} keyType
     * @param {Uint8Array | undefined} serverCertificate
     */
    constructor(mediaElement, keyType, serverCertificate) {
        super();
        this._serverCertificate = serverCertificate;
        this._videoElement = mediaElement;
        this._keyType = keyType;
        this._unbindSession = utils_noop;
        this._closeSession = utils_noop; // Just here to make TypeScript happy
        this.closed = new Promise((resolve) => {
            this._closeSession = resolve;
        });
        this.keyStatuses = new Map();
        this.expiration = NaN;
    }
    update(license) {
        return new Promise((resolve, reject) => {
            /* eslint-disable @typescript-eslint/no-unsafe-member-access */
            if (this._nativeSession === undefined ||
                this._nativeSession.update === undefined ||
                typeof this._nativeSession.update !== "function") {
                return reject("Unavailable WebKit key session.");
            }
            try {
                let uInt8Arraylicense;
                if (license instanceof ArrayBuffer) {
                    uInt8Arraylicense = new Uint8Array(license);
                }
                else if (license instanceof Uint8Array) {
                    uInt8Arraylicense = license;
                }
                else {
                    uInt8Arraylicense = new Uint8Array(license.buffer);
                }
                /* eslint-disable @typescript-eslint/no-unsafe-member-access */
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                resolve(this._nativeSession.update(uInt8Arraylicense));
                /* eslint-enable @typescript-eslint/no-unsafe-member-access */
            }
            catch (err) {
                reject(err);
            }
            /* eslint-enable @typescript-eslint/no-unsafe-member-access */
        });
    }
    generateRequest(_initDataType, initData) {
        return new Promise((resolve) => {
            var _a;
            const elt = this._videoElement;
            if (((_a = elt.webkitKeys) === null || _a === void 0 ? void 0 : _a.createSession) === undefined) {
                throw new Error("No WebKitMediaKeys API.");
            }
            let formattedInitData;
            if (isFairplayKeyType(this._keyType)) {
                if (this._serverCertificate === undefined) {
                    throw new Error("A server certificate is needed for creating fairplay session.");
                }
                formattedInitData = getWebKitFairPlayInitData(initData, this._serverCertificate);
            }
            else {
                formattedInitData = initData;
            }
            const keySession = elt.webkitKeys.createSession("video/mp4", formattedInitData);
            if (keySession === undefined || keySession === null) {
                throw new Error("Impossible to get the key sessions");
            }
            this._listenEvent(keySession);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this._nativeSession = keySession;
            resolve();
        });
    }
    close() {
        return new Promise((resolve, reject) => {
            this._unbindSession();
            this._closeSession();
            if (this._nativeSession === undefined) {
                reject("No session to close.");
                return;
            }
            /* eslint-disable @typescript-eslint/no-floating-promises */
            this._nativeSession.close();
            /* eslint-enable @typescript-eslint/no-floating-promises */
            resolve();
        });
    }
    load() {
        return Promise.resolve(false);
    }
    remove() {
        return Promise.resolve();
    }
    get sessionId() {
        var _a, _b;
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        /* eslint-disable @typescript-eslint/no-unsafe-return */
        return (_b = (_a = this._nativeSession) === null || _a === void 0 ? void 0 : _a.sessionId) !== null && _b !== void 0 ? _b : "";
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */
        /* eslint-enable @typescript-eslint/no-unsafe-return */
    }
    _listenEvent(session) {
        this._unbindSession(); // If previous session was linked
        const onEvent = (evt) => {
            this.trigger(evt.type, evt);
        };
        /* eslint-disable @typescript-eslint/no-unsafe-call */
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        /* eslint-disable @typescript-eslint/no-unsafe-return */
        ["keymessage", "message", "keyadded", "ready", "keyerror", "error"]
            .forEach(evt => {
            session.addEventListener(evt, onEvent);
            session.addEventListener(`webkit${evt}`, onEvent);
        });
        this._unbindSession = () => {
            ["keymessage", "message", "keyadded", "ready", "keyerror", "error"]
                .forEach(evt => {
                session.removeEventListener(evt, onEvent);
                session.removeEventListener(`webkit${evt}`, onEvent);
            });
        };
        /* eslint-disable @typescript-eslint/no-unsafe-return */
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        /* eslint-enable @typescript-eslint/no-unsafe-call */
    }
}
class WebKitCustomMediaKeys {
    constructor(keyType) {
        if (WebKitMediaKeysConstructor === undefined) {
            throw new Error("No WebKitMediaKeys API.");
        }
        this._keyType = keyType;
        this._mediaKeys = new WebKitMediaKeysConstructor(keyType);
    }
    _setVideo(videoElement) {
        this._videoElement = videoElement;
        if (this._videoElement === undefined) {
            throw new Error("Video not attached to the MediaKeys");
        }
        return setWebKitMediaKeys(this._videoElement, this._mediaKeys);
    }
    createSession( /* sessionType */) {
        if (this._videoElement === undefined ||
            this._mediaKeys === undefined) {
            throw new Error("Video not attached to the MediaKeys");
        }
        return new WebkitMediaKeySession(this._videoElement, this._keyType, this._serverCertificate);
    }
    setServerCertificate(serverCertificate) {
        this._serverCertificate = serverCertificate;
        return Promise.resolve();
    }
}
function getWebKitMediaKeysCallbacks() {
    if (WebKitMediaKeysConstructor === undefined) {
        throw new Error("No WebKitMediaKeys API.");
    }
    const isTypeSupported = WebKitMediaKeysConstructor.isTypeSupported;
    const createCustomMediaKeys = (keyType) => new WebKitCustomMediaKeys(keyType);
    const setMediaKeys = (elt, mediaKeys) => {
        if (mediaKeys === null) {
            return setWebKitMediaKeys(elt, mediaKeys);
        }
        if (!(mediaKeys instanceof WebKitCustomMediaKeys)) {
            throw new Error("Custom setMediaKeys is supposed to be called " +
                "with webkit custom MediaKeys.");
        }
        return mediaKeys._setVideo(elt);
    };
    return {
        isTypeSupported,
        createCustomMediaKeys,
        setMediaKeys,
    };
}

;// CONCATENATED MODULE: ./src/compat/eme/custom_media_keys/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */











let requestMediaKeySystemAccess = null;
/**
 * Set the given MediaKeys on the given HTMLMediaElement.
 * Emits null when done then complete.
 * @param {HTMLMediaElement} elt
 * @param {Object} mediaKeys
 */
let setMediaKeys = function defaultSetMediaKeys(mediaElement, mediaKeys) {
    const elt = mediaElement;
    /* eslint-disable @typescript-eslint/unbound-method */
    if (typeof elt.setMediaKeys === "function") {
        return elt.setMediaKeys(mediaKeys);
    }
    /* eslint-enable @typescript-eslint/unbound-method */
    // If we get in the following code, it means that no compat case has been
    // found and no standard setMediaKeys API exists. This case is particulary
    // rare. We will try to call each API with native media keys.
    if (typeof elt.webkitSetMediaKeys === "function") {
        return elt.webkitSetMediaKeys(mediaKeys);
    }
    if (typeof elt.mozSetMediaKeys === "function") {
        return elt.mozSetMediaKeys(mediaKeys);
    }
    if (typeof elt.msSetMediaKeys === "function" && mediaKeys !== null) {
        return elt.msSetMediaKeys(mediaKeys);
    }
};
/**
 * Since Safari 12.1, EME APIs are available without webkit prefix.
 * However, it seems that since fairplay CDM implementation within the browser is not
 * standard with EME w3c current spec, the requestMediaKeySystemAccess API doesn't resolve
 * positively, even if the drm (fairplay in most cases) is supported.
 *
 * Therefore, we prefer not to use requestMediaKeySystemAccess on Safari when webkit API
 * is available.
 */
if (is_node ||
    (navigator.requestMediaKeySystemAccess != null && !shouldFavourCustomSafariEME())) {
    requestMediaKeySystemAccess = (...args) => navigator.requestMediaKeySystemAccess(...args);
}
else {
    let isTypeSupported;
    let createCustomMediaKeys;
    // This is for Chrome with unprefixed EME api
    if (isOldWebkitMediaElement(HTMLVideoElement.prototype)) {
        const callbacks = getOldWebKitMediaKeysCallbacks();
        isTypeSupported = callbacks.isTypeSupported;
        createCustomMediaKeys = callbacks.createCustomMediaKeys;
        setMediaKeys = callbacks.setMediaKeys;
        // This is for WebKit with prefixed EME api
    }
    else if (WebKitMediaKeysConstructor !== undefined) {
        const callbacks = getWebKitMediaKeysCallbacks();
        isTypeSupported = callbacks.isTypeSupported;
        createCustomMediaKeys = callbacks.createCustomMediaKeys;
        setMediaKeys = callbacks.setMediaKeys;
    }
    else if (isIE11 && MSMediaKeysConstructor !== undefined) {
        const callbacks = getIE11MediaKeysCallbacks();
        isTypeSupported = callbacks.isTypeSupported;
        createCustomMediaKeys = callbacks.createCustomMediaKeys;
        setMediaKeys = callbacks.setMediaKeys;
    }
    else if (MozMediaKeysConstructor !== undefined) {
        const callbacks = getMozMediaKeysCallbacks();
        isTypeSupported = callbacks.isTypeSupported;
        createCustomMediaKeys = callbacks.createCustomMediaKeys;
        setMediaKeys = callbacks.setMediaKeys;
    }
    else {
        const MK = window.MediaKeys;
        const checkForStandardMediaKeys = () => {
            if (MK === undefined) {
                throw new MediaError("MEDIA_KEYS_NOT_SUPPORTED", "No `MediaKeys` implementation found " +
                    "in the current browser.");
            }
            if (typeof MK.isTypeSupported === "undefined") {
                const message = "This browser seems to be unable to play encrypted contents " +
                    "currently. Note: Some browsers do not allow decryption " +
                    "in some situations, like when not using HTTPS.";
                throw new Error(message);
            }
        };
        isTypeSupported = (keyType) => {
            checkForStandardMediaKeys();
            assert_assert(typeof MK.isTypeSupported === "function");
            return MK.isTypeSupported(keyType);
        };
        createCustomMediaKeys = (keyType) => {
            checkForStandardMediaKeys();
            return new MK(keyType);
        };
    }
    requestMediaKeySystemAccess = function (keyType, keySystemConfigurations) {
        if (!isTypeSupported(keyType)) {
            return Promise.reject(new Error("Unsupported key type"));
        }
        for (let i = 0; i < keySystemConfigurations.length; i++) {
            const keySystemConfiguration = keySystemConfigurations[i];
            const { videoCapabilities, audioCapabilities, initDataTypes, distinctiveIdentifier } = keySystemConfiguration;
            let supported = true;
            supported = supported &&
                (initDataTypes == null ||
                    initDataTypes.some((idt) => idt === "cenc"));
            supported = supported && (distinctiveIdentifier !== "required");
            if (supported) {
                const keySystemConfigurationResponse = {
                    initDataTypes: ["cenc"],
                    distinctiveIdentifier: "not-allowed",
                    persistentState: "required",
                    sessionTypes: ["temporary", "persistent-license"],
                };
                if (videoCapabilities !== undefined) {
                    keySystemConfigurationResponse.videoCapabilities = videoCapabilities;
                }
                if (audioCapabilities !== undefined) {
                    keySystemConfigurationResponse.audioCapabilities = audioCapabilities;
                }
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const customMediaKeys = createCustomMediaKeys(keyType);
                return Promise.resolve(new CustomMediaKeySystemAccess(keyType, customMediaKeys, keySystemConfigurationResponse));
            }
        }
        return Promise.reject(new Error("Unsupported configuration"));
    };
}


;// CONCATENATED MODULE: ./src/core/decrypt/utils/media_keys_infos_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Store the MediaKeys infos attached to a media element.
const currentMediaState = new WeakMap();
/* harmony default export */ const media_keys_infos_store = ({
    /**
     * Update MediaKeys infos set on a HMTLMediaElement
     * @param {HTMLMediaElement} mediaElement
     * @param {Object} state
     */
    setState(mediaElement, state) {
        currentMediaState.set(mediaElement, state);
    },
    /**
     * Get MediaKeys infos currently set on a HMTLMediaElement
     * @param {HTMLMediaElement} mediaElement
     * @returns {Object}
     */
    getState(mediaElement) {
        const currentState = currentMediaState.get(mediaElement);
        return currentState === undefined ? null :
            currentState;
    },
    /**
     * Remove MediaKeys infos currently set on a HMTLMediaElement
     * @param {HTMLMediaElement} mediaElement
     */
    clearState(mediaElement) {
        currentMediaState.set(mediaElement, null);
    },
});

;// CONCATENATED MODULE: ./src/core/decrypt/dispose_decryption_resources.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Free up all ressources taken by the content decryption logic.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Promise}
 */
async function disposeDecryptionResources(mediaElement) {
    const currentState = media_keys_infos_store.getState(mediaElement);
    if (currentState === null) {
        return;
    }
    src_log.info("DRM: Disposing of the current MediaKeys");
    const { loadedSessionsStore } = currentState;
    media_keys_infos_store.clearState(mediaElement);
    await loadedSessionsStore.closeAllSessions();
    setMediaKeys(mediaElement, null);
}

;// CONCATENATED MODULE: ./src/core/decrypt/get_current_key_system.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the name of the current key system used.
 * @param {HTMLMediaElement} mediaElement
 * @returns {string|null}
 */
function getCurrentKeySystem(mediaElement) {
    const currentState = media_keys_infos_store.getState(mediaElement);
    return currentState == null ? null :
        currentState.keySystemOptions.type;
}

;// CONCATENATED MODULE: ./src/compat/should_unset_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the mediakeys associated to a media element should be
 * unset once the content is stopped.
 * Depends on the target.
 * @returns {Boolean}
 */
function shouldUnsetMediaKeys() {
    return isIE11;
}

;// CONCATENATED MODULE: ./src/core/decrypt/clear_on_stop.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Clear DRM-related resources that should be cleared when the current content
 * stops its playback.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function clearOnStop(mediaElement) {
    src_log.info("DRM: Clearing-up DRM session.");
    if (shouldUnsetMediaKeys()) {
        src_log.info("DRM: disposing current MediaKeys.");
        return disposeDecryptionResources(mediaElement);
    }
    const currentState = media_keys_infos_store.getState(mediaElement);
    if (currentState !== null &&
        currentState.keySystemOptions.closeSessionsOnStop === true) {
        src_log.info("DRM: closing all current sessions.");
        return currentState.loadedSessionsStore.closeAllSessions();
    }
    src_log.info("DRM: Nothing to clear. Returning right away. No state =", currentState === null);
    return Promise.resolve();
}

;// CONCATENATED MODULE: ./src/errors/request_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Internal Error used when doing requests through fetch / XHRs.
 *
 * It is not part of the API, as such it is only a temporary error which is
 * later converted to another Error instance (e.g. NETWORK_ERROR).
 *
 * @class RequestError
 * @extends Error
 */
class RequestError extends Error {
    /**
     * @param {XMLHttpRequest} xhr
     * @param {string} url
     * @param {string} type
     */
    constructor(url, status, type, xhr) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, RequestError.prototype);
        this.name = "RequestError";
        this.url = url;
        if (xhr !== undefined) {
            this.xhr = xhr;
        }
        this.status = status;
        this.type = type;
        this.message = type;
    }
}

;// CONCATENATED MODULE: ./src/core/fetchers/utils/error_selector.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generate a new error from the infos given.
 * @param {string} code
 * @param {Error} error
 * @returns {Error}
 */
function errorSelector(error) {
    if (error instanceof RequestError) {
        return new NetworkError("PIPELINE_LOAD_ERROR", error);
    }
    return formatError(error, {
        defaultCode: "PIPELINE_LOAD_ERROR",
        defaultReason: "Unknown error when fetching the Manifest",
    });
}

;// CONCATENATED MODULE: ./src/compat/is_offline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Some browsers have a builtin API to know if it's connected at least to a
 * LAN network, at most to the internet.
 *
 * /!\ This feature can be dangerous as you can both have false positives and
 * false negatives.
 *
 * False positives:
 *   - you can still play local contents (on localhost) if isOffline == true
 *   - on some browsers isOffline might be true even if we're connected to a LAN
 *     or a router (it would mean we're just not able to connect to the
 *     Internet). So we can eventually play LAN contents if isOffline == true
 *
 * False negatives:
 *   - in some cases, we even might have isOffline at false when we do not have
 *     any connection:
 *       - in browsers that do not support the feature
 *       - in browsers running in some virtualization softwares where the
 *         network adapters are always connected.
 *
 * Use with these cases in mind.
 * @returns {Boolean}
 */
function isOffline() {
    /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
    return navigator.onLine === false;
    /* eslint-enable @typescript-eslint/no-unnecessary-boolean-literal-compare */
}

;// CONCATENATED MODULE: ./src/errors/custom_loader_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Internal error used to better handle errors happening when a custom
 * `segmentLoader` or `manifestLoader` has been used.
 *
 * It is not part of the API, as such it is only a temporary error which is
 * later converted to another Error instance (e.g. NETWORK_ERROR).
 * @class CustomLoaderError
 * @extends Error
 */
class CustomLoaderError extends Error {
    /**
     * @param {string} message
     * @param {boolean} canRetry
     * @param {boolean} isOfflineError
     * @param {XMLHttpRequest} xhr
     */
    constructor(message, canRetry, isOfflineError, xhr) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, CustomLoaderError.prototype);
        this.name = "CustomLoaderError";
        this.message = message;
        this.canRetry = canRetry;
        this.isOfflineError = isOfflineError;
        this.xhr = xhr;
    }
}

;// CONCATENATED MODULE: ./src/utils/cancellable_sleep.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Wait the given `delay`, resolving the Promise when finished.
 *
 * The `cancellationSignal` given allows to cancel that timeout. In the case it
 * is triggered before the timeout ended, this function will reject the
 * corresponding `CancellationError` through the returned Promise.
 *
 * @param {number} delay - Delay to wait, in milliseconds
 * @param {Object} cancellationSignal - `CancellationSignal` allowing to abort
 * the timeout.
 * @returns {Promise} - Resolve on timeout completion, rejects on timeout
 * cancellation with the corresponding `CancellationError`.
 */
function cancellableSleep(delay, cancellationSignal) {
    return new Promise((res, rej) => {
        const timeout = setTimeout(() => {
            unregisterCancelSignal();
            res();
        }, delay);
        const unregisterCancelSignal = cancellationSignal
            .register(function onCancel(cancellationError) {
            clearTimeout(timeout);
            rej(cancellationError);
        });
    });
}

;// CONCATENATED MODULE: ./src/utils/get_fuzzed_delay.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const FUZZ_FACTOR = 0.3;
/**
 * Perform "fuzzing" on the delay given.
 * @param {Number} retryDelay
 * @returns {Number}
 */
function getFuzzedDelay(retryDelay) {
    const fuzzingFactor = ((Math.random() * 2) - 1) * FUZZ_FACTOR;
    return retryDelay * (fuzzingFactor + 1); // Max 1.3 Min 0.7
}

;// CONCATENATED MODULE: ./src/core/fetchers/utils/schedule_request.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Called on a loader error.
 * Returns whether the loader request should be retried.
 *
 * TODO the notion of retrying or not could be transport-specific (e.g. 412 are
 * mainly used for Smooth contents) and thus as part of the transport code (e.g.
 * by rejecting with an error always having a `canRetry` property?).
 * Or not, to ponder.
 *
 * @param {Error} error
 * @returns {Boolean} - If true, the request can be retried.
 */
function shouldRetry(error) {
    if (error instanceof RequestError) {
        if (error.type === NetworkErrorTypes.ERROR_HTTP_CODE) {
            return error.status >= 500 ||
                error.status === 404 ||
                error.status === 415 || // some CDN seems to use that code when
                // requesting low-latency segments too much
                // in advance
                error.status === 412;
        }
        return error.type === NetworkErrorTypes.TIMEOUT ||
            error.type === NetworkErrorTypes.ERROR_EVENT;
    }
    else if (error instanceof CustomLoaderError) {
        if (typeof error.canRetry === "boolean") {
            return error.canRetry;
        }
        if (error.xhr !== undefined) {
            return error.xhr.status >= 500 ||
                error.xhr.status === 404 ||
                error.xhr.status === 415 || // some CDN seems to use that code when
                // requesting low-latency segments too much
                // in advance
                error.xhr.status === 412;
        }
        return false;
    }
    return isKnownError(error) && error.code === "INTEGRITY_ERROR";
}
/**
 * Returns true if we're pretty sure that the current error is due to the
 * user being offline.
 * @param {Error} error
 * @returns {Boolean}
 */
function isOfflineRequestError(error) {
    if (error instanceof RequestError) {
        return error.type === NetworkErrorTypes.ERROR_EVENT &&
            isOffline();
    }
    else if (error instanceof CustomLoaderError) {
        return error.isOfflineError;
    }
    return false; // under doubt, return false
}
/**
 * Guess the type of error obtained.
 * @param {*} error
 * @returns {number}
 */
function getRequestErrorType(error) {
    return isOfflineRequestError(error) ? 2 /* REQUEST_ERROR_TYPES.Offline */ :
        1 /* REQUEST_ERROR_TYPES.Regular */;
}
/**
 * Specific algorithm used to perform segment and manifest requests.
 *
 * Here how it works:
 *
 *   1. You give it one or multiple of the CDN available for the resource you
 *      want to request (from the most important one to the least important),
 *      a callback doing the request with the chosen CDN in argument, and some
 *      options.
 *
 *   2. it tries to call the request callback with the most prioritized CDN
 *      first:
 *        - if it works as expected, it resolves the returned Promise with that
 *          request's response.
 *        - if it fails, it calls ther `onRetry` callback given with the
 *          corresponding error, un-prioritize that CDN and try with the new
 *          most prioritized CDN.
 *
 *      Each CDN might be retried multiple times, depending on the nature of the
 *      error and the Configuration given.
 *
 *      Multiple retries of the same CDN are done after a delay to avoid
 *      overwhelming it, this is what we call a "backoff". That delay raises
 *      exponentially as multiple consecutive errors are encountered on this
 *      CDN.
 *
 * @param {Array.<string>|null} cdns - The different CDN on which the
 * wanted resource is available. `scheduleRequestWithCdns` will call the
 * `performRequest` callback with the right element from that array if different
 * from `null`.
 *
 * Can be set to `null` when that resource is not reachable through a CDN, in
 * which case the `performRequest` callback may be called with `null`.
 * @param {Object|null} cdnPrioritizer - Interface allowing to give the priority
 * between multiple CDNs.
 * @param {Function} performRequest - Callback implementing the request in
 * itself. Resolving when the resource request succeed and rejecting with the
 * corresponding error when the request failed.
 * @param {Object} options - Configuration allowing to tweak the number on which
 * the algorithm behind `scheduleRequestWithCdns` bases itself.
 * @param {Object} cancellationSignal - CancellationSignal allowing to cancel
 * the logic of `scheduleRequestWithCdns`.
 * To trigger if the resource is not needed anymore.
 * @returns {Promise} - Promise resolving, with the corresponding
 * `performRequest`'s data, when the resource request succeed and rejecting in
 * the following scenarios:
 *   - `scheduleRequestWithCdns` has been cancelled due to `cancellationSignal`
 *     being triggered. In that case a `CancellationError` is thrown.
 *
 *   - The resource request(s) failed and will not be retried anymore.
 */
async function scheduleRequestWithCdns(cdns, cdnPrioritizer, performRequest, options, cancellationSignal) {
    if (cancellationSignal.cancellationError !== null) {
        return Promise.reject(cancellationSignal.cancellationError);
    }
    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry } = options;
    if (cdns !== null && cdns.length === 0) {
        src_log.warn("Fetchers: no CDN given to `scheduleRequestWithCdns`.");
    }
    const missedAttempts = new Map();
    const initialCdnToRequest = getCdnToRequest();
    if (initialCdnToRequest === undefined) {
        throw new Error("No CDN to request");
    }
    return requestCdn(initialCdnToRequest);
    /**
     * Returns what is now the most prioritary CDN to request the wanted resource.
     *
     * A return value of `null` indicates that the resource can be requested
     * through another mean than by doing an HTTP request.
     *
     * A return value of `undefined` indicates that there's no CDN left to request
     * the resource.
     * @returns {Object|null|undefined}
     */
    function getCdnToRequest() {
        if (cdns === null) {
            const nullAttemptObject = missedAttempts.get(null);
            if (nullAttemptObject !== undefined && nullAttemptObject.isBlacklisted) {
                return undefined;
            }
            return null;
        }
        else if (cdnPrioritizer === null) {
            return getPrioritaryRequestableCdnFromSortedList(cdns);
        }
        else {
            const prioritized = cdnPrioritizer.getCdnPreferenceForResource(cdns);
            return getPrioritaryRequestableCdnFromSortedList(prioritized);
        }
    }
    /**
     * Perform immediately the request for the given CDN.
     *
     * If it fails, forbid the CDN from being used - optionally and in some
     * conditions, only temporarily, then try the next CDN according to
     * previously-set delays (with a potential sleep before to respect them).
     *
     * Reject if both the request fails and there's no CDN left to use.
     * @param {string|null} cdn
     * @returns {Promise}
     */
    async function requestCdn(cdn) {
        try {
            const res = await performRequest(cdn, cancellationSignal);
            return res;
        }
        catch (error) {
            if (TaskCanceller.isCancellationError(error)) {
                throw error;
            }
            if (cdn !== null && cdnPrioritizer !== null) {
                // We failed requesting the resource on this CDN.
                // Globally give priority to the next CDN through the CdnPrioritizer.
                cdnPrioritizer.downgradeCdn(cdn);
            }
            const currentErrorType = getRequestErrorType(error);
            let missedAttemptsObj = missedAttempts.get(cdn);
            if (missedAttemptsObj === undefined) {
                missedAttemptsObj = { errorCounter: 1,
                    lastErrorType: currentErrorType,
                    blockedUntil: undefined,
                    isBlacklisted: false };
                missedAttempts.set(cdn, missedAttemptsObj);
            }
            else {
                if (currentErrorType !== missedAttemptsObj.lastErrorType) {
                    missedAttemptsObj.errorCounter = 1;
                    missedAttemptsObj.lastErrorType = currentErrorType;
                }
                else {
                    missedAttemptsObj.errorCounter++;
                }
            }
            if (!shouldRetry(error)) {
                missedAttemptsObj.blockedUntil = undefined;
                missedAttemptsObj.isBlacklisted = true;
                return retryWithNextCdn(error);
            }
            const maxRetry = currentErrorType === 2 /* REQUEST_ERROR_TYPES.Offline */ ?
                maxRetryOffline :
                maxRetryRegular;
            if (missedAttemptsObj.errorCounter > maxRetry) {
                missedAttemptsObj.blockedUntil = undefined;
                missedAttemptsObj.isBlacklisted = true;
            }
            else {
                const errorCounter = missedAttemptsObj.errorCounter;
                const delay = Math.min(baseDelay * Math.pow(2, errorCounter - 1), maxDelay);
                const fuzzedDelay = getFuzzedDelay(delay);
                missedAttemptsObj.blockedUntil = performance.now() + fuzzedDelay;
            }
            return retryWithNextCdn(error);
        }
    }
    /**
     * After a request error, find the new most prioritary CDN and perform the
     * request with it, optionally after a delay.
     *
     * If there's no CDN left to test, reject the original request error.
     * @param {*} prevRequestError
     * @returns {Promise}
     */
    async function retryWithNextCdn(prevRequestError) {
        const nextCdn = getCdnToRequest();
        if (cancellationSignal.isCancelled) {
            throw cancellationSignal.cancellationError;
        }
        if (nextCdn === undefined) {
            throw prevRequestError;
        }
        onRetry(prevRequestError);
        if (cancellationSignal.isCancelled) {
            throw cancellationSignal.cancellationError;
        }
        return waitPotentialBackoffAndRequest(nextCdn, prevRequestError);
    }
    /**
     * Request the corresponding CDN after the optional backoff needed before
     * requesting it.
     *
     * If a new CDN become prioritary in the meantime, request it instead, again
     * awaiting its optional backoff delay if it exists.
     * @param {string|null} nextWantedCdn
     * @param {*} prevRequestError
     * @returns {Promise}
     */
    function waitPotentialBackoffAndRequest(nextWantedCdn, prevRequestError) {
        const nextCdnAttemptObj = missedAttempts.get(nextWantedCdn);
        if (nextCdnAttemptObj === undefined ||
            nextCdnAttemptObj.blockedUntil === undefined) {
            return requestCdn(nextWantedCdn);
        }
        const now = performance.now();
        const blockedFor = nextCdnAttemptObj.blockedUntil - now;
        if (blockedFor <= 0) {
            return requestCdn(nextWantedCdn);
        }
        const canceller = new TaskCanceller({ cancelOn: cancellationSignal });
        return new Promise((res, rej) => {
            /* eslint-disable-next-line @typescript-eslint/no-misused-promises */
            cdnPrioritizer === null || cdnPrioritizer === void 0 ? void 0 : cdnPrioritizer.addEventListener("priorityChange", () => {
                const updatedPrioritaryCdn = getCdnToRequest();
                if (cancellationSignal.isCancelled) {
                    throw cancellationSignal.cancellationError;
                }
                if (updatedPrioritaryCdn === undefined) {
                    return rej(prevRequestError);
                }
                if (updatedPrioritaryCdn !== nextWantedCdn) {
                    canceller.cancel();
                    waitPotentialBackoffAndRequest(updatedPrioritaryCdn, prevRequestError)
                        .then(res, rej);
                }
            }, canceller.signal);
            cancellableSleep(blockedFor, canceller.signal)
                .then(() => requestCdn(nextWantedCdn).then(res, rej), utils_noop);
        });
    }
    /**
     * Takes in input the list of CDN that can be used to request the resource, in
     * a general preference order.
     *
     * Returns the actual most prioritary Cdn to request, based on the current
     * attempts already done for that resource.
     *
     * Returns `undefined` if there's no Cdn left to request the resource.
     * @param {Array.<Object>}
     * @returns {Object|undefined}
     */
    function getPrioritaryRequestableCdnFromSortedList(sortedCdns) {
        var _a;
        if (missedAttempts.size === 0) {
            return sortedCdns[0];
        }
        const now = performance.now();
        return (_a = sortedCdns
            .filter(c => { var _a; return ((_a = missedAttempts.get(c)) === null || _a === void 0 ? void 0 : _a.isBlacklisted) !== true; })
            .reduce((acc, x) => {
            var _a;
            let blockedUntil = (_a = missedAttempts.get(x)) === null || _a === void 0 ? void 0 : _a.blockedUntil;
            if (blockedUntil !== undefined && blockedUntil <= now) {
                blockedUntil = undefined;
            }
            if (acc === undefined) {
                return [x, blockedUntil];
            }
            if (blockedUntil === undefined) {
                if (acc[1] === undefined) {
                    return acc;
                }
                return [x, undefined];
            }
            return acc[1] === undefined ? acc :
                blockedUntil < acc[1] ? [x, blockedUntil] :
                    acc;
        }, undefined)) === null || _a === void 0 ? void 0 : _a[0];
    }
}
/**
 * Lightweight version of the request algorithm, this time with only a simple
 * Promise given.
 * @param {Function} performRequest
 * @param {Object} options
 * @returns {Promise}
 */
function scheduleRequestPromise(performRequest, options, cancellationSignal) {
    // same than for a single unknown CDN
    return scheduleRequestWithCdns(null, null, performRequest, options, cancellationSignal);
}

;// CONCATENATED MODULE: ./src/core/fetchers/manifest/manifest_fetcher.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * Class allowing to facilitate the task of loading and parsing a Manifest.
 * @class ManifestFetcher
 * @example
 * ```js
 * const manifestFetcher = new ManifestFetcher(manifestUrl, pipelines, options);
 * manifestFetcher.fetch().pipe(
 *   // Filter only responses (might also receive warning events)
 *   filter((evt) => evt.type === "response");
 *   // Parse the Manifest
 *   mergeMap(res => res.parse({ externalClockOffset }))
 *   // (again)
 *   filter((evt) => evt.type === "parsed");
 * ).subscribe(({ value }) => {
 *   console.log("Manifest:", value.manifest);
 * });
 * ```
 */
class ManifestFetcher {
    /**
     * Construct a new ManifestFetcher.
     * @param {string | undefined} url - Default Manifest url, will be used when
     * no URL is provided to the `fetch` function.
     * `undefined` if unknown or if a Manifest should be retrieved through other
     * means than an HTTP request.
     * @param {Object} pipelines - Transport pipelines used to perform the
     * Manifest loading and parsing operations.
     * @param {Object} settings - Configure the `ManifestFetcher`.
     */
    constructor(url, pipelines, settings) {
        this._manifestUrl = url;
        this._pipelines = pipelines.manifest;
        this._settings = settings;
    }
    /**
     * (re-)Load the Manifest.
     * This method does not yet parse it, parsing will then be available through
     * a callback available on the response.
     *
     * You can set an `url` on which that Manifest will be requested.
     * If not set, the regular Manifest url - defined on the `ManifestFetcher`
     * instanciation - will be used instead.
     *
     * @param {string} [url]
     * @returns {Observable}
     */
    fetch(url) {
        return new Observable_Observable((obs) => {
            const settings = this._settings;
            const pipelines = this._pipelines;
            const requestUrl = url !== null && url !== void 0 ? url : this._manifestUrl;
            /** `true` if the loading pipeline is already completely executed. */
            let hasFinishedLoading = false;
            /** Allows to cancel the loading operation. */
            const canceller = new TaskCanceller();
            const backoffSettings = this._getBackoffSetting((err) => {
                obs.next({ type: "warning", value: errorSelector(err) });
            });
            const loadingPromise = pipelines.resolveManifestUrl === undefined ?
                callLoaderWithRetries(requestUrl) :
                callResolverWithRetries(requestUrl).then(callLoaderWithRetries);
            loadingPromise
                .then(response => {
                hasFinishedLoading = true;
                obs.next({
                    type: "response",
                    parse: (parserOptions) => {
                        return this._parseLoadedManifest(response, parserOptions);
                    },
                });
                obs.complete();
            })
                .catch((err) => {
                if (canceller.isUsed) {
                    // Cancellation has already been handled by RxJS
                    return;
                }
                hasFinishedLoading = true;
                obs.error(errorSelector(err));
            });
            return () => {
                if (!hasFinishedLoading) {
                    canceller.cancel();
                }
            };
            /**
             * Call the resolver part of the pipeline, retrying if it fails according
             * to the current settings.
             * Returns the Promise of the last attempt.
             * /!\ This pipeline should have a `resolveManifestUrl` function defined.
             * @param {string | undefined}  resolverUrl
             * @returns {Promise}
             */
            function callResolverWithRetries(resolverUrl) {
                const { resolveManifestUrl } = pipelines;
                assert_assert(resolveManifestUrl !== undefined);
                const callResolver = () => resolveManifestUrl(resolverUrl, canceller.signal);
                return scheduleRequestPromise(callResolver, backoffSettings, canceller.signal);
            }
            /**
             * Call the loader part of the pipeline, retrying if it fails according
             * to the current settings.
             * Returns the Promise of the last attempt.
             * @param {string | undefined} manifestUrl
             * @returns {Promise}
             */
            function callLoaderWithRetries(manifestUrl) {
                const { loadManifest } = pipelines;
                let requestTimeout = isNullOrUndefined(settings.requestTimeout) ?
                    src_config.getCurrent().DEFAULT_REQUEST_TIMEOUT :
                    settings.requestTimeout;
                if (requestTimeout < 0) {
                    requestTimeout = undefined;
                }
                const callLoader = () => loadManifest(manifestUrl, { timeout: requestTimeout }, canceller.signal);
                return scheduleRequestPromise(callLoader, backoffSettings, canceller.signal);
            }
        });
    }
    /**
     * Parse an already loaded Manifest.
     *
     * This method should be reserved for Manifests for which no request has been
     * done.
     * In other cases, it's preferable to go through the `fetch` method, so
     * information on the request can be used by the parsing process.
     * @param {*} manifest
     * @param {Object} parserOptions
     * @returns {Observable}
     */
    parse(manifest, parserOptions) {
        return this._parseLoadedManifest({ responseData: manifest,
            size: undefined,
            requestDuration: undefined }, parserOptions);
    }
    /**
     * Parse a Manifest.
     *
     * @param {Object} loaded - Information about the loaded Manifest as well as
     * about the corresponding request.
     * @param {Object} parserOptions - Options used when parsing the Manifest.
     * @returns {Observable}
     */
    _parseLoadedManifest(loaded, parserOptions) {
        return new Observable_Observable(obs => {
            const parsingTimeStart = performance.now();
            const canceller = new TaskCanceller();
            const { sendingTime, receivedTime } = loaded;
            const backoffSettings = this._getBackoffSetting((err) => {
                obs.next({ type: "warning", value: errorSelector(err) });
            });
            const opts = { externalClockOffset: parserOptions.externalClockOffset,
                unsafeMode: parserOptions.unsafeMode,
                previousManifest: parserOptions.previousManifest,
                originalUrl: this._manifestUrl };
            try {
                const res = this._pipelines.parseManifest(loaded, opts, onWarnings, canceller.signal, scheduleRequest);
                if (!manifest_fetcher_isPromise(res)) {
                    emitManifestAndComplete(res.manifest);
                }
                else {
                    res
                        .then(({ manifest }) => emitManifestAndComplete(manifest))
                        .catch((err) => {
                        if (canceller.isUsed) {
                            // Cancellation is already handled by RxJS
                            return;
                        }
                        emitError(err, true);
                    });
                }
            }
            catch (err) {
                if (canceller.isUsed) {
                    // Cancellation is already handled by RxJS
                    return undefined;
                }
                emitError(err, true);
            }
            return () => {
                canceller.cancel();
            };
            /**
             * Perform a request with the same retry mechanisms and error handling
             * than for a Manifest loader.
             * @param {Function} performRequest
             * @returns {Function}
             */
            async function scheduleRequest(performRequest) {
                try {
                    const data = await scheduleRequestPromise(performRequest, backoffSettings, canceller.signal);
                    return data;
                }
                catch (err) {
                    throw errorSelector(err);
                }
            }
            /**
             * Handle minor errors encountered by a Manifest parser.
             * @param {Array.<Error>} warnings
             */
            function onWarnings(warnings) {
                for (const warning of warnings) {
                    if (canceller.isUsed) {
                        return;
                    }
                    emitError(warning, false);
                }
            }
            /**
             * Emit a formatted "parsed" event through `obs`.
             * To call once the Manifest has been parsed.
             * @param {Object} manifest
             */
            function emitManifestAndComplete(manifest) {
                onWarnings(manifest.contentWarnings);
                const parsingTime = performance.now() - parsingTimeStart;
                src_log.info(`MF: Manifest parsed in ${parsingTime}ms`);
                obs.next({ type: "parsed",
                    manifest,
                    sendingTime,
                    receivedTime,
                    parsingTime });
                obs.complete();
            }
            /**
             * Format the given Error and emit it through `obs`.
             * Either through a `"warning"` event, if `isFatal` is `false`, or through
             * a fatal Observable error, if `isFatal` is set to `true`.
             * @param {*} err
             * @param {boolean} isFatal
             */
            function emitError(err, isFatal) {
                const formattedError = formatError(err, {
                    defaultCode: "PIPELINE_PARSE_ERROR",
                    defaultReason: "Unknown error when parsing the Manifest",
                });
                if (isFatal) {
                    obs.error(formattedError);
                }
                else {
                    obs.next({ type: "warning",
                        value: formattedError });
                }
            }
        });
    }
    /**
     * Construct "backoff settings" that can be used with a range of functions
     * allowing to perform multiple request attempts
     * @param {Function} onRetry
     * @returns {Object}
     */
    _getBackoffSetting(onRetry) {
        const { DEFAULT_MAX_MANIFEST_REQUEST_RETRY, DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE, INITIAL_BACKOFF_DELAY_BASE, MAX_BACKOFF_DELAY_BASE } = src_config.getCurrent();
        const { lowLatencyMode, maxRetryRegular: ogRegular, maxRetryOffline: ogOffline } = this._settings;
        const baseDelay = lowLatencyMode ? INITIAL_BACKOFF_DELAY_BASE.LOW_LATENCY :
            INITIAL_BACKOFF_DELAY_BASE.REGULAR;
        const maxDelay = lowLatencyMode ? MAX_BACKOFF_DELAY_BASE.LOW_LATENCY :
            MAX_BACKOFF_DELAY_BASE.REGULAR;
        const maxRetryRegular = ogRegular !== null && ogRegular !== void 0 ? ogRegular : DEFAULT_MAX_MANIFEST_REQUEST_RETRY;
        const maxRetryOffline = ogOffline !== null && ogOffline !== void 0 ? ogOffline : DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE;
        return { onRetry,
            baseDelay,
            maxDelay,
            maxRetryRegular,
            maxRetryOffline };
    }
}
/**
 * Returns `true` when the returned value seems to be a Promise instance, as
 * created by the RxPlayer.
 * @param {*} val
 * @returns {boolean}
 */
function manifest_fetcher_isPromise(val) {
    return val instanceof Promise;
}

;// CONCATENATED MODULE: ./src/core/fetchers/manifest/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const manifest = (ManifestFetcher);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/finalize.js

function finalize(callback) {
  return operate(function (source, subscriber) {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js



function ignoreElements() {
  return operate(function (source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, noop));
  });
}
;// CONCATENATED MODULE: ./src/compat/should_reload_media_source_on_decipherability_update.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns true if we have to reload the MediaSource due to an update in the
 * decipherability status of some segments based on the current key sytem.
 *
 * We found that on all Widevine targets tested, a simple seek is sufficient.
 * As widevine clients make a good chunk of users, we can make a difference
 * between them and others as it is for the better.
 * @param {string|null} currentKeySystem
 * @returns {Boolean}
 */
function shouldReloadMediaSourceOnDecipherabilityUpdate(currentKeySystem) {
    return currentKeySystem === null ||
        currentKeySystem.indexOf("widevine") < 0;
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/Action.js


var Action = function (_super) {
  __extends(Action, _super);
  function Action(scheduler, work) {
    return _super.call(this) || this;
  }
  Action.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return this;
  };
  return Action;
}(Subscription);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js

var intervalProvider = {
  setInterval: function (_setInterval) {
    function setInterval(_x, _x2) {
      return _setInterval.apply(this, arguments);
    }
    setInterval.toString = function () {
      return _setInterval.toString();
    };
    return setInterval;
  }(function (handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
  }),
  clearInterval: function (_clearInterval) {
    function clearInterval(_x3) {
      return _clearInterval.apply(this, arguments);
    }
    clearInterval.toString = function () {
      return _clearInterval.toString();
    };
    return clearInterval;
  }(function (handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  }),
  delegate: undefined
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js




var AsyncAction = function (_super) {
  __extends(AsyncAction, _super);
  function AsyncAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction.prototype.schedule = function (state, delay) {
    var _a;
    if (delay === void 0) {
      delay = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
    return this;
  };
  AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  };
  AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return undefined;
  };
  AsyncAction.prototype.execute = function (state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }
    this.pending = false;
    var error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction.prototype._execute = function (state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error('Scheduled action threw falsy error');
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction.prototype.unsubscribe = function () {
    if (!this.closed) {
      var _a = this,
        id = _a.id,
        scheduler = _a.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction;
}(Action);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function setImmediate(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function () {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function clearImmediate(handle) {
    findAndClearHandle(handle);
  }
};
var TestTools = {
  pending: function pending() {
    return Object.keys(activeHandles).length;
  }
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js


var _setImmediate = Immediate.setImmediate,
  _clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function setImmediate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || _setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function clearImmediate(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || _clearImmediate)(handle);
  },
  delegate: undefined
};
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js



var AsapAction = function (_super) {
  __extends(AsapAction, _super);
  function AsapAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
  };
  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    var _a;
    if (delay === void 0) {
      delay = 0;
    }
    if (delay != null ? delay > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      immediateProvider.clearImmediate(id);
      scheduler._scheduled = undefined;
    }
    return undefined;
  };
  return AsapAction;
}(AsyncAction);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Scheduler.js

var Scheduler = function () {
  function Scheduler(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  };
  Scheduler.now = dateTimestampProvider.now;
  return Scheduler;
}();

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js


var AsyncScheduler = function (_super) {
  __extends(AsyncScheduler, _super);
  function AsyncScheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler.prototype.flush = function (action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler;
}(Scheduler);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js


var AsapScheduler = function (_super) {
  __extends(AsapScheduler, _super);
  function AsapScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler.prototype.flush = function (action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = undefined;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler;
}(AsyncScheduler);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/asap.js


var asapScheduler = new AsapScheduler(AsapAction);
var asap = (/* unused pure expression or super */ null && (asapScheduler));
;// CONCATENATED MODULE: ./src/utils/defer_subscriptions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * At subscription, instead of "running" the Observable right away, wait until
 * the current task has finished executing before actually running this
 * Observable.
 *
 * This can be important for example when you want in a given function to
 * exploit the same shared Observable which may send synchronous events directly
 * after subscription.
 *
 * Here, you might be left in a situation where the first element subscribing to
 * that Observable will receive those synchronous events immediately on
 * subscription. Further subscriptions on that Observable will miss out on those
 * events - even if those subscriptions happen synchronously after the first
 * one.
 *
 * Calling `deferSubscriptions` in those cases will make sure that all such
 * subscriptions can be registered before the Observable start emitting events
 * (as long as such Subscriptions are done synchronously).
 *
 * @example
 * ```js
 * const myObservable = rxjs.timer(100).pipe(mapTo("ASYNC MSG"),
 *                                           startWith("SYNCHRONOUS MSG"),
 *                                           share());
 *
 * myObservable.subscribe(x => console.log("Sub1:", x));
 * myObservable.subscribe(x => console.log("Sub2:", x));
 *
 * setTimeout(() => {
 *   myObservable.subscribe(x => console.log("Sub3:", x));
 * }, 50);
 *
 * // You will get:
 * // Sub1: SYNCHRONOUS MSG
 * // Sub1: ASYNC MSG
 * // Sub2: ASYNC MSG
 * // Sub3: ASYNC MSG
 *
 * // ------------------------------
 *
 * const myObservableDeferred = rxjs.timer(100).pipe(mapTo("ASYNC MSG"),
 *                                                   startWith("SYNCHRONOUS MSG"),
 *                                                   deferSubscriptions(),
 *                                                   // NOTE: the order is important here
 *                                                   share());
 *
 * myObservableDeferred.subscribe(x => console.log("Sub1:", x));
 * myObservableDeferred.subscribe(x => console.log("Sub2:", x));
 *
 * setTimeout(() => {
 *   myObservableDeferred.subscribe(x => console.log("Sub3:", x));
 * }, 50);
 *
 * // You will get:
 * // Sub1: SYNCHRONOUS MSG
 * // Sub2: SYNCHRONOUS MSG
 * // Sub1: ASYNC MSG
 * // Sub2: ASYNC MSG
 * // Sub3: ASYNC MSG
 * ```
 * @returns {function}
 */
function deferSubscriptions() {
    return (source) => {
        // TODO asapScheduler seems to not push the subscription in the microtask
        // queue as nextTick does but in a regular event loop queue.
        // This means that the subscription will be run even later that we wish for.
        // This is not dramatic but it could be better.
        // Either this is a problem with RxJS or this was wanted, in which case we
        // may need to add our own scheduler.
        return source.pipe(subscribeOn(asapScheduler));
    };
}

;// CONCATENATED MODULE: ./src/utils/filter_map.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Special kind of map which will ignore the result when the value emitted
 * corresponds to a given token.
 *
 * This can also be performed through a `mergeMap` (by returning the `EMPTY`
 * Observable when we want to ignore events) but using `filterMap` is both more
 * straightforward and more performant.
 * @param {function} callback
 * @param {*} filteringToken
 * @returns {function}
 */
function filterMap(callback, filteringToken) {
    return (source) => defer(() => {
        return source.pipe(map(callback), filter((x) => x !== filteringToken));
    });
}

;// CONCATENATED MODULE: ./src/utils/take_first_set.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function takeFirstSet(...args) {
    let i = 0;
    const len = args.length;
    while (i < len) {
        const arg = args[i];
        if (!isNullOrUndefined(arg)) {
            return arg;
        }
        i++;
    }
    return undefined;
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/get_buffer_levels.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Return "Buffer Levels" which are steps of available buffers from which we
 * are normally able switch safely to the next available bitrate.
 * (Following an algorithm close to BOLA)
 * @param {Array.<number>} bitrates - All available bitrates, __sorted__ in
 * ascending order.
 * @returns {Array.<number>}
 */
function getBufferLevels(bitrates) {
    const logs = bitrates.map((b) => Math.log(b / bitrates[0]));
    const utilities = logs.map(l => l - logs[0] + 1); // normalize
    const gp = (utilities[utilities.length - 1] - 1) / ((bitrates.length * 2) + 10);
    const Vp = 1 / gp;
    return bitrates.map((_, i) => minBufferLevelForBitrate(i));
    /**
     * Get minimum buffer we should keep ahead to pick this bitrate.
     * @param {number} index
     * @returns {number}
     */
    function minBufferLevelForBitrate(index) {
        if (index === 0) {
            return 0;
        }
        const boundedIndex = Math.min(Math.max(1, index), bitrates.length - 1);
        if (bitrates[boundedIndex] === bitrates[boundedIndex - 1]) {
            return minBufferLevelForBitrate(index - 1);
        }
        return Vp * (gp + (bitrates[boundedIndex] * utilities[boundedIndex - 1] -
            bitrates[boundedIndex - 1] * utilities[boundedIndex]) / (bitrates[boundedIndex] -
            bitrates[boundedIndex - 1])) + 4;
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/buffer_based_chooser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Choose a bitrate based on the currently available buffer.
 *
 * This algorithm is based on a deviation of the BOLA algorithm.
 * It is a hybrid solution that also relies on a given bitrate's
 * "maintainability".
 * Each time a chunk is downloaded, from the ratio between the chunk duration
 * and chunk's request time, we can assume that the representation is
 * "maintanable" or not.
 * If so, we may switch to a better quality, or conversely to a worse quality.
 *
 * @class BufferBasedChooser
 */
class BufferBasedChooser {
    /**
     * @param {Array.<number>} bitrates
     */
    constructor(bitrates) {
        this._levelsMap = getBufferLevels(bitrates);
        this._bitrates = bitrates;
        src_log.debug("ABR: Steps for buffer based chooser.", this._levelsMap.map((l, i) => `bufferLevel: ${l}, bitrate: ${bitrates[i]}`)
            .join(" ,"));
    }
    /**
     * @param {Object} playbackObservation
     * @returns {number|undefined}
     */
    getEstimate(playbackObservation) {
        const bufferLevels = this._levelsMap;
        const bitrates = this._bitrates;
        const { bufferGap, currentBitrate, currentScore, speed } = playbackObservation;
        if (currentBitrate == null) {
            return bitrates[0];
        }
        const currentBitrateIndex = arrayFindIndex(bitrates, b => b === currentBitrate);
        if (currentBitrateIndex < 0 || bitrates.length !== bufferLevels.length) {
            src_log.error("ABR: Current Bitrate not found in the calculated levels");
            return bitrates[0];
        }
        let scaledScore;
        if (currentScore != null) {
            scaledScore = speed === 0 ? currentScore : (currentScore / speed);
        }
        if (scaledScore != null && scaledScore > 1) {
            const currentBufferLevel = bufferLevels[currentBitrateIndex];
            const nextIndex = (() => {
                for (let i = currentBitrateIndex + 1; i < bufferLevels.length; i++) {
                    if (bufferLevels[i] > currentBufferLevel) {
                        return i;
                    }
                }
            })();
            if (nextIndex != null) {
                const nextBufferLevel = bufferLevels[nextIndex];
                if (bufferGap >= nextBufferLevel) {
                    return bitrates[nextIndex];
                }
            }
        }
        if (scaledScore == null || scaledScore < 1.15) {
            const currentBufferLevel = bufferLevels[currentBitrateIndex];
            if (bufferGap < currentBufferLevel) {
                for (let i = currentBitrateIndex - 1; i >= 0; i--) {
                    if (bitrates[i] < currentBitrate) {
                        return bitrates[i];
                    }
                }
                return currentBitrate;
            }
        }
        return currentBitrate;
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/ewma.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Tweaked implementation of an exponential weighted Moving Average.
 * @class EWMA
 */
class EWMA {
    /**
     * @param {number} halfLife
     */
    constructor(halfLife) {
        // (half-life = log(1/2) / log(Decay Factor)
        this._alpha = Math.exp(Math.log(0.5) / halfLife);
        this._lastEstimate = 0;
        this._totalWeight = 0;
    }
    /**
     * @param {number} weight
     * @param {number} value
     */
    addSample(weight, value) {
        const adjAlpha = Math.pow(this._alpha, weight);
        const newEstimate = value * (1 - adjAlpha) +
            adjAlpha * this._lastEstimate;
        if (!isNaN(newEstimate)) {
            this._lastEstimate = newEstimate;
            this._totalWeight += weight;
        }
    }
    /**
     * @returns {number} value
     */
    getEstimate() {
        const zeroFactor = 1 - Math.pow(this._alpha, this._totalWeight);
        return this._lastEstimate / zeroFactor;
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/network_analyzer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Get pending segment request(s) starting with the asked segment position.
 * @param {Object} requests - Every requests pending, in a chronological
 * order in terms of segment time.
 * @param {number} neededPosition
 * @returns {Array.<Object>}
 */
function getConcernedRequests(requests, neededPosition) {
    /** Index of the request for the next needed segment, in `requests`. */
    let nextSegmentIndex = -1;
    for (let i = 0; i < requests.length; i++) {
        const { segment } = requests[i].content;
        if (segment.duration <= 0) {
            continue;
        }
        const segmentEnd = segment.time + segment.duration;
        if (!segment.complete) {
            if (i === requests.length - 1 && neededPosition - segment.time > -1.2) {
                nextSegmentIndex = i;
                break;
            }
        }
        if (segmentEnd > neededPosition && neededPosition - segment.time > -1.2) {
            nextSegmentIndex = i;
            break;
        }
    }
    if (nextSegmentIndex < 0) { // Not found
        return [];
    }
    const nextRequest = requests[nextSegmentIndex];
    const segmentTime = nextRequest.content.segment.time;
    const filteredRequests = [nextRequest];
    // Get the possibly multiple requests for that segment's position
    for (let i = nextSegmentIndex + 1; i < requests.length; i++) {
        if (requests[i].content.segment.time === segmentTime) {
            filteredRequests.push(requests[i]);
        }
        else {
            break;
        }
    }
    return filteredRequests;
}
/**
 * Estimate the __VERY__ recent bandwidth based on a single unfinished request.
 * Useful when the current bandwidth seemed to have fallen quickly.
 *
 * @param {Object} request
 * @returns {number|undefined}
 */
function estimateRequestBandwidth(request) {
    if (request.progress.length < 5) { // threshold from which we can consider
        // progress events reliably
        return undefined;
    }
    // try to infer quickly the current bitrate based on the
    // progress events
    const ewma1 = new EWMA(2);
    const { progress } = request;
    for (let i = 1; i < progress.length; i++) {
        const bytesDownloaded = progress[i].size - progress[i - 1].size;
        const timeElapsed = progress[i].timestamp - progress[i - 1].timestamp;
        const reqBitrate = (bytesDownloaded * 8) / (timeElapsed / 1000);
        ewma1.addSample(timeElapsed / 1000, reqBitrate);
    }
    return ewma1.getEstimate();
}
/**
 * Estimate remaining time for a pending request from a progress event.
 * @param {Object} lastProgressEvent
 * @param {number} bandwidthEstimate
 * @returns {number}
 */
function estimateRemainingTime(lastProgressEvent, bandwidthEstimate) {
    const remainingData = (lastProgressEvent.totalSize - lastProgressEvent.size) * 8;
    return Math.max(remainingData / bandwidthEstimate, 0);
}
/**
 * Check if the request for the most needed segment is too slow.
 * If that's the case, re-calculate the bandwidth urgently based on
 * this single request.
 * @param {Object} pendingRequests - Every requests pending, in a chronological
 * order in terms of segment time.
 * @param {Object} playbackInfo - Information on the current playback.
 * @param {Object|null} currentRepresentation - The Representation being
 * presently being loaded.
 * @param {boolean} lowLatencyMode - If `true`, we're playing the content as a
 * low latency content - where requests might be pending when the segment is
 * still encoded.
 * @param {Number} lastEstimatedBitrate - Last bitrate estimate emitted.
 * @returns {Number|undefined}
 */
function estimateStarvationModeBitrate(pendingRequests, playbackInfo, currentRepresentation, lowLatencyMode, lastEstimatedBitrate) {
    if (lowLatencyMode) {
        // TODO Skip only for newer segments?
        return undefined;
    }
    const { bufferGap, speed, position } = playbackInfo;
    const realBufferGap = isFinite(bufferGap) ? bufferGap :
        0;
    const nextNeededPosition = position.last + realBufferGap;
    const concernedRequests = getConcernedRequests(pendingRequests, nextNeededPosition);
    if (concernedRequests.length !== 1) { // 0  == no request
        // 2+ == too complicated to calculate
        return undefined;
    }
    const concernedRequest = concernedRequests[0];
    const now = performance.now();
    const lastProgressEvent = concernedRequest.progress.length > 0 ?
        concernedRequest.progress[concernedRequest.progress.length - 1] :
        undefined;
    // first, try to do a quick estimate from progress events
    const bandwidthEstimate = estimateRequestBandwidth(concernedRequest);
    if (lastProgressEvent !== undefined && bandwidthEstimate !== undefined) {
        const remainingTime = estimateRemainingTime(lastProgressEvent, bandwidthEstimate);
        // if the remaining time does seem reliable
        if ((now - lastProgressEvent.timestamp) / 1000 <= remainingTime) {
            // Calculate estimated time spent rebuffering if we continue doing that request.
            const expectedRebufferingTime = remainingTime -
                (realBufferGap / speed);
            if (expectedRebufferingTime > 2000) {
                return bandwidthEstimate;
            }
        }
    }
    if (!concernedRequest.content.segment.complete) {
        return undefined;
    }
    const chunkDuration = concernedRequest.content.segment.duration;
    const requestElapsedTime = (now - concernedRequest.requestTimestamp) / 1000;
    const reasonableElapsedTime = requestElapsedTime <=
        ((chunkDuration * 1.5 + 2) / speed);
    if (currentRepresentation == null || reasonableElapsedTime) {
        return undefined;
    }
    // calculate a reduced bitrate from the current one
    const factor = chunkDuration / requestElapsedTime;
    const reducedBitrate = currentRepresentation.bitrate * Math.min(0.7, factor);
    if (lastEstimatedBitrate === undefined ||
        reducedBitrate < lastEstimatedBitrate) {
        return reducedBitrate;
    }
}
/**
 * Returns true if, based on the current requests, it seems that the ABR should
 * switch immediately if a lower bitrate is more adapted.
 * Returns false if it estimates that you have time before switching to a lower
 * bitrate.
 * @param {Object} playbackInfo - Information on the current playback.
 * @param {Object} requests - Every requests pending, in a chronological
 * order in terms of segment time.
 * @param {boolean} lowLatencyMode - If `true`, we're playing the content as a
 * low latency content, as close to the live edge as possible.
 * @returns {boolean}
 */
function shouldDirectlySwitchToLowBitrate(playbackInfo, requests, lowLatencyMode) {
    if (lowLatencyMode) {
        // TODO only when playing close to the live edge?
        return true;
    }
    const realBufferGap = isFinite(playbackInfo.bufferGap) ? playbackInfo.bufferGap :
        0;
    const nextNeededPosition = playbackInfo.position.last + realBufferGap;
    const nextRequest = arrayFind(requests, ({ content }) => content.segment.duration > 0 &&
        (content.segment.time + content.segment.duration) > nextNeededPosition);
    if (nextRequest === undefined) {
        return true;
    }
    const now = performance.now();
    const lastProgressEvent = nextRequest.progress.length > 0 ?
        nextRequest.progress[nextRequest.progress.length - 1] :
        undefined;
    // first, try to do a quick estimate from progress events
    const bandwidthEstimate = estimateRequestBandwidth(nextRequest);
    if (lastProgressEvent === undefined || bandwidthEstimate === undefined) {
        return true;
    }
    const remainingTime = estimateRemainingTime(lastProgressEvent, bandwidthEstimate);
    if ((now - lastProgressEvent.timestamp) / 1000 > (remainingTime * 1.2)) {
        return true;
    }
    const expectedRebufferingTime = remainingTime -
        (realBufferGap / playbackInfo.speed);
    return expectedRebufferingTime > -1.5;
}
/**
 * Analyze the current network conditions and give a bandwidth estimate as well
 * as a maximum bitrate a Representation should be.
 * @class NetworkAnalyzer
 */
class NetworkAnalyzer {
    constructor(initialBitrate, lowLatencyMode) {
        const { ABR_STARVATION_GAP, OUT_OF_STARVATION_GAP, ABR_STARVATION_FACTOR, ABR_REGULAR_FACTOR } = src_config.getCurrent();
        this._initialBitrate = initialBitrate;
        this._inStarvationMode = false;
        this._lowLatencyMode = lowLatencyMode;
        if (lowLatencyMode) {
            this._config = { starvationGap: ABR_STARVATION_GAP.LOW_LATENCY,
                outOfStarvationGap: OUT_OF_STARVATION_GAP.LOW_LATENCY,
                starvationBitrateFactor: ABR_STARVATION_FACTOR.LOW_LATENCY,
                regularBitrateFactor: ABR_REGULAR_FACTOR.LOW_LATENCY };
        }
        else {
            this._config = { starvationGap: ABR_STARVATION_GAP.DEFAULT,
                outOfStarvationGap: OUT_OF_STARVATION_GAP.DEFAULT,
                starvationBitrateFactor: ABR_STARVATION_FACTOR.DEFAULT,
                regularBitrateFactor: ABR_REGULAR_FACTOR.DEFAULT };
        }
    }
    /**
     * Gives an estimate of the current bandwidth and of the bitrate that should
     * be considered for chosing a `representation`.
     * This estimate is only based on network metrics.
     * @param {Object} playbackInfo - Gives current information about playback.
     * @param {Object} bandwidthEstimator - `BandwidthEstimator` allowing to
     * produce network bandwidth estimates.
     * @param {Object|null} currentRepresentation - The Representation currently
     * chosen.
     * `null` if no Representation has been chosen yet.
     * @param {Array.<Object>} currentRequests - All segment requests by segment's
     * start chronological order
     * @param {number|undefined} lastEstimatedBitrate - Bitrate emitted during the
     * last estimate.
     * @returns {Object}
     */
    getBandwidthEstimate(playbackInfo, bandwidthEstimator, currentRepresentation, currentRequests, lastEstimatedBitrate) {
        let newBitrateCeil; // bitrate ceil for the chosen Representation
        let bandwidthEstimate;
        const localConf = this._config;
        const { bufferGap, position, duration } = playbackInfo;
        const realBufferGap = isFinite(bufferGap) ? bufferGap :
            0;
        const { ABR_STARVATION_DURATION_DELTA } = src_config.getCurrent();
        // check if should get in/out of starvation mode
        if (isNaN(duration) ||
            realBufferGap + position.last < duration - ABR_STARVATION_DURATION_DELTA) {
            if (!this._inStarvationMode && realBufferGap <= localConf.starvationGap) {
                src_log.info("ABR: enter starvation mode.");
                this._inStarvationMode = true;
            }
            else if (this._inStarvationMode &&
                realBufferGap >= localConf.outOfStarvationGap) {
                src_log.info("ABR: exit starvation mode.");
                this._inStarvationMode = false;
            }
        }
        else if (this._inStarvationMode) {
            src_log.info("ABR: exit starvation mode.");
            this._inStarvationMode = false;
        }
        // If in starvation mode, check if a quick new estimate can be done
        // from the last requests.
        // If so, cancel previous estimates and replace it by the new one
        if (this._inStarvationMode) {
            bandwidthEstimate = estimateStarvationModeBitrate(currentRequests, playbackInfo, currentRepresentation, this._lowLatencyMode, lastEstimatedBitrate);
            if (bandwidthEstimate != null) {
                src_log.info("ABR: starvation mode emergency estimate:", bandwidthEstimate);
                bandwidthEstimator.reset();
                newBitrateCeil = currentRepresentation == null ?
                    bandwidthEstimate :
                    Math.min(bandwidthEstimate, currentRepresentation.bitrate);
            }
        }
        // if newBitrateCeil is not yet defined, do the normal estimation
        if (newBitrateCeil == null) {
            bandwidthEstimate = bandwidthEstimator.getEstimate();
            if (bandwidthEstimate != null) {
                newBitrateCeil = bandwidthEstimate *
                    (this._inStarvationMode ? localConf.starvationBitrateFactor :
                        localConf.regularBitrateFactor);
            }
            else if (lastEstimatedBitrate != null) {
                newBitrateCeil = lastEstimatedBitrate *
                    (this._inStarvationMode ? localConf.starvationBitrateFactor :
                        localConf.regularBitrateFactor);
            }
            else {
                newBitrateCeil = this._initialBitrate;
            }
        }
        if (playbackInfo.speed > 1) {
            newBitrateCeil /= playbackInfo.speed;
        }
        return { bandwidthEstimate, bitrateChosen: newBitrateCeil };
    }
    /**
     * For a given wanted bitrate, tells if should switch urgently.
     * @param {number} bitrate - The new estimated bitrate.
     * @param {Object|null} currentRepresentation - The Representation being
     * presently being loaded.
     * @param {Array.<Object>} currentRequests - All segment requests by segment's
     * start chronological order
     * @param {Object} playbackInfo - Information on the current playback.
     * @returns {boolean}
     */
    isUrgent(bitrate, currentRepresentation, currentRequests, playbackInfo) {
        if (currentRepresentation === null) {
            return true;
        }
        else if (bitrate === currentRepresentation.bitrate) {
            return false;
        }
        else if (bitrate > currentRepresentation.bitrate) {
            return !this._inStarvationMode;
        }
        return shouldDirectlySwitchToLowBitrate(playbackInfo, currentRequests, this._lowLatencyMode);
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/guess_based_chooser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Estimate which Representation should be played based on risky "guesses".
 *
 * Basically, this `GuessBasedChooser` will attempt switching to the superior
 * quality when conditions allows this and then check if we're able to maintain
 * this quality. If we're not, it will rollbacks to the previous, maintaninable,
 * guess.
 *
 * The algorithm behind the `GuessBasedChooser` is very risky in terms of
 * rebuffering chances. As such, it should only be used when other approach
 * don't work (e.g.  low-latency contents).
 * @class GuessBasedChooser
 */
class GuessBasedChooser {
    /**
     * Create a new `GuessBasedChooser`.
     * @param {Object} scoreCalculator
     * @param {Object} prevEstimate
     */
    constructor(scoreCalculator, prevEstimate) {
        this._scoreCalculator = scoreCalculator;
        this._lastAbrEstimate = prevEstimate;
        this._consecutiveWrongGuesses = 0;
        this._blockGuessesUntil = 0;
        this._lastMaintanableBitrate = null;
    }
    /**
     * Perform a "guess", which basically indicates which Representation should be
     * chosen according to the `GuessBasedChooser`.
     *
     * @param {Array.<Object>} representations - Array of all Representation the
     * GuessBasedChooser can choose from, sorted by bitrate ascending.
     * /!\ It is very important that Representation in that Array are sorted by
     * bitrate ascending for this method to work as intented.
     * @param {Object} observation - Last playback observation performed.
     * @param {Object} currentRepresentation - The Representation currently
     * loading.
     * @param {number} incomingBestBitrate - The bitrate of the Representation
     * chosen by the more optimistic of the other ABR algorithms currently.
     * @param {Array.<Object>} requests - Information on all pending requests.
     * @returns {Object|null} - If a guess is made, return that guess, else
     * returns `null` (in which case you should fallback to another ABR
     * algorithm).
     */
    getGuess(representations, observation, currentRepresentation, incomingBestBitrate, requests) {
        const { bufferGap, speed } = observation;
        const lastChosenRep = this._lastAbrEstimate.representation;
        if (lastChosenRep === null) {
            return null; // There's nothing to base our guess on
        }
        if (incomingBestBitrate > lastChosenRep.bitrate) {
            // ABR estimates are already superior or equal to the guess
            // we'll be doing here, so no need to guess
            if (this._lastAbrEstimate.algorithmType === 2 /* ABRAlgorithmType.GuessBased */) {
                if (this._lastAbrEstimate.representation !== null) {
                    this._lastMaintanableBitrate = this._lastAbrEstimate.representation.bitrate;
                }
                this._consecutiveWrongGuesses = 0;
            }
            return null;
        }
        const scoreData = this._scoreCalculator.getEstimate(currentRepresentation);
        if (this._lastAbrEstimate.algorithmType !== 2 /* ABRAlgorithmType.GuessBased */) {
            if (scoreData === undefined) {
                return null; // not enough information to start guessing
            }
            if (this._canGuessHigher(bufferGap, speed, scoreData)) {
                const nextRepresentation = getNextRepresentation(representations, currentRepresentation);
                if (nextRepresentation !== null) {
                    return nextRepresentation;
                }
            }
            return null;
        }
        // If we reached here, we're currently already in guessing mode
        if (this._isLastGuessValidated(lastChosenRep, incomingBestBitrate, scoreData)) {
            src_log.debug("ABR: Guessed Representation validated", lastChosenRep.bitrate);
            this._lastMaintanableBitrate = lastChosenRep.bitrate;
            this._consecutiveWrongGuesses = 0;
        }
        if (currentRepresentation.id !== lastChosenRep.id) {
            return lastChosenRep;
        }
        const shouldStopGuess = this._shouldStopGuess(currentRepresentation, scoreData, bufferGap, requests);
        if (shouldStopGuess) {
            // Block guesses for a time
            this._consecutiveWrongGuesses++;
            this._blockGuessesUntil = performance.now() +
                Math.min(this._consecutiveWrongGuesses * 15000, 120000);
            return getPreviousRepresentation(representations, currentRepresentation);
        }
        else if (scoreData === undefined) {
            return currentRepresentation;
        }
        if (this._canGuessHigher(bufferGap, speed, scoreData)) {
            const nextRepresentation = getNextRepresentation(representations, currentRepresentation);
            if (nextRepresentation !== null) {
                return nextRepresentation;
            }
        }
        return currentRepresentation;
    }
    /**
     * Returns `true` if we've enough confidence on the current situation to make
     * a higher guess.
     * @param {number} bufferGap
     * @param {number} speed
     * @param {Array} scoreData
     * @returns {boolean}
     */
    _canGuessHigher(bufferGap, speed, [score, scoreConfidenceLevel]) {
        return isFinite(bufferGap) && bufferGap >= 2.5 &&
            performance.now() > this._blockGuessesUntil &&
            scoreConfidenceLevel === 1 /* ScoreConfidenceLevel.HIGH */ &&
            score / speed > 1.01;
    }
    /**
     * Returns `true` if the pending guess of `lastGuess` seems to not
     * be maintainable and as such should be stopped.
     * @param {Object} lastGuess
     * @param {Array} scoreData
     * @param {number} bufferGap
     * @param {Array.<Object>} requests
     * @returns {boolean}
     */
    _shouldStopGuess(lastGuess, scoreData, bufferGap, requests) {
        if (scoreData !== undefined && scoreData[0] < 1.01) {
            return true;
        }
        else if ((scoreData === undefined || scoreData[0] < 1.2) && bufferGap < 0.6) {
            return true;
        }
        const guessedRepresentationRequests = requests.filter(req => {
            return req.content.representation.id === lastGuess.id;
        });
        const now = performance.now();
        for (const req of guessedRepresentationRequests) {
            const requestElapsedTime = now - req.requestTimestamp;
            if (req.content.segment.isInit) {
                if (requestElapsedTime > 1000) {
                    return true;
                }
            }
            else if (requestElapsedTime > req.content.segment.duration * 1000 + 200) {
                return true;
            }
            else {
                const fastBw = estimateRequestBandwidth(req);
                if (fastBw !== undefined && fastBw < lastGuess.bitrate * 0.8) {
                    return true;
                }
            }
        }
        return false;
    }
    _isLastGuessValidated(lastGuess, incomingBestBitrate, scoreData) {
        if (scoreData !== undefined &&
            scoreData[1] === 1 /* ScoreConfidenceLevel.HIGH */ &&
            scoreData[0] > 1.5) {
            return true;
        }
        return incomingBestBitrate >= lastGuess.bitrate &&
            (this._lastMaintanableBitrate === null ||
                this._lastMaintanableBitrate < lastGuess.bitrate);
    }
}
/**
 * From the array of Representations given, returns the Representation with a
 * bitrate immediately superior to the current one.
 * Returns `null` if that "next" Representation is not found.
 *
 * /!\ The representations have to be already sorted by bitrate, in ascending
 * order.
 * @param {Array.<Object>} representations - Available representations to choose
 * from, sorted by bitrate in ascending order.
 * @param {Object} currentRepresentation - The Representation currently
 * considered.
 * @returns {Object|null}
 */
function getNextRepresentation(representations, currentRepresentation) {
    const len = representations.length;
    let index = arrayFindIndex(representations, ({ id }) => id === currentRepresentation.id);
    if (index < 0) {
        src_log.error("ABR: Current Representation not found.");
        return null;
    }
    while (++index < len) {
        if (representations[index].bitrate > currentRepresentation.bitrate) {
            return representations[index];
        }
    }
    return null;
}
/**
 * From the array of Representations given, returns the Representation with a
 * bitrate immediately inferior.
 * Returns `null` if that "previous" Representation is not found.
 * @param {Array.<Object>} representations
 * @param {Object} currentRepresentation
 * @returns {Object|null}
 */
function getPreviousRepresentation(representations, currentRepresentation) {
    let index = arrayFindIndex(representations, ({ id }) => id === currentRepresentation.id);
    if (index < 0) {
        src_log.error("ABR: Current Representation not found.");
        return null;
    }
    while (--index >= 0) {
        if (representations[index].bitrate < currentRepresentation.bitrate) {
            return representations[index];
        }
    }
    return null;
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/bandwidth_estimator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Calculate a mean bandwidth based on the bytes downloaded and the amount
 * of time needed to do so.
 * @class BandwidthEstimator
 */
class BandwidthEstimator {
    constructor() {
        const { ABR_FAST_EMA, ABR_SLOW_EMA } = src_config.getCurrent();
        this._fastEWMA = new EWMA(ABR_FAST_EMA);
        this._slowEWMA = new EWMA(ABR_SLOW_EMA);
        this._bytesSampled = 0;
    }
    /**
     * Takes a bandwidth sample.
     * @param {number} durationInMs - The amount of time, in milliseconds, for a
     * particular request.
     * @param {number} numberOfBytes - The total number of bytes transferred in
     * that request.
     */
    addSample(durationInMs, numberOfBytes) {
        const { ABR_MINIMUM_CHUNK_SIZE } = src_config.getCurrent();
        if (numberOfBytes < ABR_MINIMUM_CHUNK_SIZE) {
            return;
        }
        const bandwidth = numberOfBytes * 8000 / durationInMs;
        const weight = durationInMs / 1000;
        this._bytesSampled += numberOfBytes;
        this._fastEWMA.addSample(weight, bandwidth);
        this._slowEWMA.addSample(weight, bandwidth);
    }
    /**
     * Get estimate of the bandwidth, in bits per seconds.
     * @returns {Number|undefined}
     */
    getEstimate() {
        const { ABR_MINIMUM_TOTAL_BYTES } = src_config.getCurrent();
        if (this._bytesSampled < ABR_MINIMUM_TOTAL_BYTES) {
            return undefined;
        }
        // Take the minimum of these two estimates.
        // This should have the effect of adapting down quickly, but up more slowly.
        return Math.min(this._fastEWMA.getEstimate(), this._slowEWMA.getEstimate());
    }
    /** Reset the bandwidth estimation. */
    reset() {
        const { ABR_FAST_EMA, ABR_SLOW_EMA } = src_config.getCurrent();
        this._fastEWMA = new EWMA(ABR_FAST_EMA);
        this._slowEWMA = new EWMA(ABR_SLOW_EMA);
        this._bytesSampled = 0;
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/filter_by_bitrate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Get only representations lower or equal to a given bitrate.
 * If no representation is lower than the given bitrate, returns an array containing
 * all Representation(s) with the lowest available bitrate.
 * @param {Array.<Object>} representations - All Representations available
 * @param {Number} bitrate
 * @returns {Array.<Object>}
 */
function filterByBitrate(representations, bitrate) {
    if (representations.length === 0) {
        return [];
    }
    representations.sort((ra, rb) => ra.bitrate - rb.bitrate);
    const minimumBitrate = representations[0].bitrate;
    const bitrateCeil = Math.max(bitrate, minimumBitrate);
    const firstSuperiorBitrateIndex = arrayFindIndex(representations, (representation) => representation.bitrate > bitrateCeil);
    if (firstSuperiorBitrateIndex === -1) {
        return representations; // All representations have lower bitrates.
    }
    return representations.slice(0, firstSuperiorBitrateIndex);
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/filter_by_width.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Filter representations based on their width:
 *   - the highest width considered will be the one linked to the first
 *     representation which has a superior width to the one given.
 * @param {Array.<Object>} representations - The representations array
 * @param {Number} width
 * @returns {Array.<Object>}
 */
function filterByWidth(representations, width) {
    const sortedRepsByWidth = representations
        .slice() // clone
        .sort((a, b) => takeFirstSet(a.width, 0) -
        takeFirstSet(b.width, 0));
    const repWithMaxWidth = arrayFind(sortedRepsByWidth, (representation) => typeof representation.width === "number" &&
        representation.width >= width);
    if (repWithMaxWidth === undefined) {
        return representations;
    }
    const maxWidth = typeof repWithMaxWidth.width === "number" ? repWithMaxWidth.width :
        0;
    return representations.filter(representation => typeof representation.width === "number" ? representation.width <= maxWidth :
        true);
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/last_estimate_storage.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Stores the last estimate made by the `RepresentationEstimator`. */
class LastEstimateStorage {
    constructor() {
        this.bandwidth = undefined;
        this.representation = null;
        this.algorithmType = 3 /* ABRAlgorithmType.None */;
    }
    /**
     * Update this `LastEstimateStorage` with new values.
     * @param {Object} representation - Estimated Representation.
     * @param {number|undefined} bandwidth - Estimated bandwidth.
     * @param {number} algorithmType - The type of algorithm used to produce that
     * estimate.
     */
    update(representation, bandwidth, algorithmType) {
        this.representation = representation;
        this.bandwidth = bandwidth;
        this.algorithmType = algorithmType;
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/pending_requests_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Store information about pending requests, like information about:
 *   - for which segments they are
 *   - how the request's progress goes
 * @class PendingRequestsStore
 */
class PendingRequestsStore {
    constructor() {
        this._currentRequests = {};
    }
    /**
     * Add information about a new pending request.
     * @param {Object} payload
     */
    add(payload) {
        const { id, requestTimestamp, content } = payload;
        this._currentRequests[id] = { requestTimestamp,
            progress: [],
            content };
    }
    /**
     * Notify of the progress of a currently pending request.
     * @param {Object} progress
     */
    addProgress(progress) {
        const request = this._currentRequests[progress.id];
        if (request == null) {
            if (false) {}
            src_log.warn("ABR: progress for a request not added");
            return;
        }
        request.progress.push(progress);
    }
    /**
     * Remove a request previously set as pending.
     * @param {string} id
     */
    remove(id) {
        if (this._currentRequests[id] == null) {
            if (false) {}
            src_log.warn("ABR: can't remove unknown request");
        }
        delete this._currentRequests[id];
    }
    /**
     * Returns information about all pending requests, in segment's chronological
     * order.
     * @returns {Array.<Object>}
     */
    getRequests() {
        return object_values(this._currentRequests)
            .filter((x) => x != null)
            .sort((reqA, reqB) => reqA.content.segment.time - reqB.content.segment.time);
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/representation_score_calculator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Calculate the "maintainability score" of a given Representation:
 *   - A score higher than 1 means that the Representation can theorically
 *     be downloaded faster than the duration of the media it represents.
 *     (e.g. a segment representing 4 seconds can be downloaded in less than 4
 *     seconds).
 *   - A score lower or equal to 1 means that the Representation cannot be
 *     downloaded
 *
 * The score follows a simple linear relation to both variables it is based
 * on:
 *   - if n seconds of content can be downloaded in 2*n seconds, the score will
 *     be `0.5`.
 *   - if n seconds of content can be downloaded in n seconds, the score will be
 *     `1`.
 *   - if n seconds of content can be downloaded in n/2 seconds, the score will
 *     be `2`.
 *   - ...
 *
 * The score is mainly here to tell you when your buffer-based guesses are
 * actually higher than the quality you should normally reach.
 *
 * /!\ Please bear in mind that we don't consider the playback rate in those
 * operations.
 * Still, integrating the playback rate a posteriori should not be difficult
 * (e.g. you can just divide the score by that rate).
 *
 * @class RepresentationScoreCalculator
 */
class RepresentationScoreCalculator {
    constructor() {
        this._currentRepresentationData = null;
        this._lastRepresentationWithGoodScore = null;
    }
    /**
     * Add new sample data.
     * @param {Representation} representation
     * @param {number} requestDuration - duration taken for doing the request for
     * the whole segment.
     * @param {number} segmentDuration - media duration of the whole segment, in
     * seconds.
     */
    addSample(representation, requestDuration, segmentDuration) {
        const ratio = segmentDuration / requestDuration;
        const currentRep = this._currentRepresentationData;
        let currentEWMA;
        if (currentRep !== null && currentRep.representation.id === representation.id) {
            currentEWMA = currentRep.ewma;
            currentRep.ewma.addSample(requestDuration, ratio);
            currentRep.loadedDuration += segmentDuration;
            currentRep.loadedSegments++;
        }
        else {
            currentEWMA = new EWMA(5);
            currentEWMA.addSample(requestDuration, ratio);
            this._currentRepresentationData = { representation,
                ewma: currentEWMA,
                loadedDuration: segmentDuration,
                loadedSegments: 0 };
        }
        if (currentEWMA.getEstimate() > 1 &&
            this._lastRepresentationWithGoodScore !== representation) {
            src_log.debug("ABR: New last stable representation", representation.bitrate);
            this._lastRepresentationWithGoodScore = representation;
        }
    }
    /**
     * Get score estimate for the given Representation.
     * undefined if no estimate is available.
     * @param {Representation} representation
     * @returns {number|undefined}
     */
    getEstimate(representation) {
        if (this._currentRepresentationData === null ||
            this._currentRepresentationData.representation.id !== representation.id) {
            return undefined;
        }
        const { ewma, loadedSegments, loadedDuration } = this._currentRepresentationData;
        const estimate = ewma.getEstimate();
        const confidenceLevel = loadedSegments >= 5 &&
            loadedDuration >= 10 ? 1 /* ScoreConfidenceLevel.HIGH */ :
            0 /* ScoreConfidenceLevel.LOW */;
        return [estimate, confidenceLevel];
    }
    /**
     * Returns last Representation which had reached a score superior to 1.
     * This Representation is the last known one which could be maintained.
     * Useful to know if a current guess is higher than what you should
     * normally be able to play.
     * `null` if no Representation ever reach that score.
     * @returns {Representation|null}
     */
    getLastStableRepresentation() {
        return this._lastRepresentationWithGoodScore;
    }
}

;// CONCATENATED MODULE: ./src/core/adaptive/utils/select_optimal_representation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * From the given array of Representations (sorted by bitrate order ascending),
 * returns the one corresponding to the given optimal, minimum and maximum
 * bitrates.
 * @param {Array.<Representation>} representations - The representations array,
 * sorted in bitrate ascending order.
 * @param {Number} optimalBitrate - The optimal bitrate the Representation
 * should have under the current condition.
 * @param {Number} minBitrate - The minimum bitrate the chosen Representation
 * should have. We will take the Representation with the maximum bitrate if none
 * is found.
 * @param {Number} maxBitrate - The maximum bitrate the chosen Representation
 * should have. We will take the Representation with the minimum bitrate if none
 * is found.
 * @returns {Representation|undefined}
 */
function selectOptimalRepresentation(representations, optimalBitrate, minBitrate, maxBitrate) {
    const wantedBitrate = optimalBitrate <= minBitrate ? minBitrate :
        optimalBitrate >= maxBitrate ? maxBitrate :
            optimalBitrate;
    const firstIndexTooHigh = arrayFindIndex(representations, (representation) => representation.bitrate > wantedBitrate);
    if (firstIndexTooHigh === -1) {
        return representations[representations.length - 1];
    }
    else if (firstIndexTooHigh === 0) {
        return representations[0];
    }
    return representations[firstIndexTooHigh - 1];
}

;// CONCATENATED MODULE: ./src/core/adaptive/adaptive_representation_selector.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
















/**
 * Select the most adapted Representation according to the network and buffer
 * metrics it receives.
 *
 * @param {Object} options - Initial configuration (see type definition)
 * @returns {Object} - Interface allowing to select a Representation.
 * @see IRepresentationEstimator
 */
function createAdaptiveRepresentationSelector(options) {
    /**
     * Allows to estimate the current network bandwidth.
     * One per active media type.
     */
    const bandwidthEstimators = {};
    const { manualBitrates, minAutoBitrates, maxAutoBitrates, initialBitrates, throttlers, lowLatencyMode } = options;
    /**
     * Returns Object emitting Representation estimates as well as callbacks
     * allowing to helping it produce them.
     *
     * @see IRepresentationEstimator
     * @param {Object} context
     * @param {Object} currentRepresentation
     * @param {Object} representations
     * @param {Object} playbackObserver
     * @param {Object} stopAllEstimates
     * @returns {Array.<Object>}
     */
    return function getEstimates(context, currentRepresentation, representations, playbackObserver, stopAllEstimates) {
        const { type } = context.adaptation;
        const bandwidthEstimator = _getBandwidthEstimator(type);
        const manualBitrate = takeFirstSet(manualBitrates[type], createSharedReference(-1));
        const minAutoBitrate = takeFirstSet(minAutoBitrates[type], createSharedReference(0));
        const maxAutoBitrate = takeFirstSet(maxAutoBitrates[type], createSharedReference(Infinity));
        const initialBitrate = takeFirstSet(initialBitrates[type], 0);
        const filters = {
            limitWidth: takeFirstSet(throttlers.limitWidth[type], createSharedReference(undefined)),
            throttleBitrate: takeFirstSet(throttlers.throttleBitrate[type], throttlers.throttle[type], createSharedReference(Infinity)),
        };
        return getEstimateReference({ bandwidthEstimator,
            context,
            currentRepresentation,
            filters,
            initialBitrate,
            manualBitrate,
            minAutoBitrate,
            maxAutoBitrate,
            playbackObserver,
            representations,
            lowLatencyMode }, stopAllEstimates);
    };
    /**
     * Returns interface allowing to estimate network throughtput for a given type.
     * @param {string} bufferType
     * @returns {Object}
     */
    function _getBandwidthEstimator(bufferType) {
        const originalBandwidthEstimator = bandwidthEstimators[bufferType];
        if (originalBandwidthEstimator == null) {
            src_log.debug("ABR: Creating new BandwidthEstimator for ", bufferType);
            const bandwidthEstimator = new BandwidthEstimator();
            bandwidthEstimators[bufferType] = bandwidthEstimator;
            return bandwidthEstimator;
        }
        return originalBandwidthEstimator;
    }
}
/**
 * Estimate regularly the current network bandwidth and the best Representation
 * that can be played according to the current network and playback conditions.
 *
 * `getEstimateReference` only does estimations for a given type (e.g.
 * "audio", "video" etc.) and Period.
 *
 * If estimates for multiple types and/or Periods are needed, you should
 * call `getEstimateReference` as many times.
 *
 * This function returns a tuple:
 *   - the first element being the object through which estimates will be produced
 *   - the second element being callbacks that have to be triggered at various
 *     events to help it doing those estimates.
 *
 * @param {Object} args
 * @param {Object} stopAllEstimates
 * @returns {Array.<Object>}
 */
function getEstimateReference({ bandwidthEstimator, context, currentRepresentation, filters, initialBitrate, lowLatencyMode, manualBitrate, maxAutoBitrate, minAutoBitrate, playbackObserver, representations: representationsRef }, stopAllEstimates) {
    const scoreCalculator = new RepresentationScoreCalculator();
    const networkAnalyzer = new NetworkAnalyzer(initialBitrate !== null && initialBitrate !== void 0 ? initialBitrate : 0, lowLatencyMode);
    const requestsStore = new PendingRequestsStore();
    let onAddedSegment = utils_noop;
    const callbacks = {
        metrics: onMetric,
        requestBegin: onRequestBegin,
        requestProgress: onRequestProgress,
        requestEnd: onRequestEnd,
        addedSegment(val) { onAddedSegment(val); },
    };
    /**
     * `TaskCanceller` allowing to stop producing estimate.
     * This TaskCanceller is used both for restarting estimates with a new
     * configuration and to cancel them altogether.
     */
    let currentEstimatesCanceller = new TaskCanceller({ cancelOn: stopAllEstimates });
    // Create `ISharedReference` on which estimates will be emitted.
    const estimateRef = createEstimateReference(manualBitrate.getValue(), representationsRef.getValue(), currentEstimatesCanceller.signal);
    manualBitrate.onUpdate(restartEstimatesProductionFromCurrentConditions, { clearSignal: stopAllEstimates });
    representationsRef.onUpdate(restartEstimatesProductionFromCurrentConditions, { clearSignal: stopAllEstimates });
    return { estimates: estimateRef, callbacks };
    function createEstimateReference(manualBitrateVal, representations, innerCancellationSignal) {
        if (manualBitrateVal >= 0) {
            // A manual bitrate has been set. Just choose Representation according to it.
            const manualRepresentation = selectOptimalRepresentation(representations, manualBitrateVal, 0, Infinity);
            return createSharedReference({
                representation: manualRepresentation,
                bitrate: undefined,
                knownStableBitrate: undefined,
                manual: true,
                urgent: true, // a manual bitrate switch should happen immediately
            });
        }
        if (representations.length === 1) {
            // There's only a single Representation. Just choose it.
            return createSharedReference({ bitrate: undefined,
                representation: representations[0],
                manual: false,
                urgent: true,
                knownStableBitrate: undefined });
        }
        /** If true, Representation estimates based on the buffer health might be used. */
        let allowBufferBasedEstimates = false;
        /**
         * Current optimal Representation's bandwidth choosen by a buffer-based
         * adaptive algorithm.
         */
        let currentBufferBasedEstimate;
        const bitrates = representations.map(r => r.bitrate);
        /**
         * Module calculating the optimal Representation based on the current
         * buffer's health (i.e. whether enough data is buffered, history of
         * buffer size etc.).
         */
        const bufferBasedChooser = new BufferBasedChooser(bitrates);
        /** Store the previous estimate made here. */
        const prevEstimate = new LastEstimateStorage();
        /**
         * Module calculating the optimal Representation by "guessing it" with a
         * step-by-step algorithm.
         * Only used in very specific scenarios.
         */
        const guessBasedChooser = new GuessBasedChooser(scoreCalculator, prevEstimate);
        // get initial observation for initial estimate
        let lastPlaybackObservation = playbackObserver.getReference().getValue();
        /** Reference through which estimates are emitted. */
        const innerEstimateRef = createSharedReference(getCurrentEstimate());
        // subscribe to subsequent playback observations
        playbackObserver.listen((obs) => {
            lastPlaybackObservation = obs;
            updateEstimate();
        }, { includeLastObservation: false, clearSignal: innerCancellationSignal });
        onAddedSegment = function (val) {
            if (lastPlaybackObservation === null) {
                return;
            }
            const { position, speed } = lastPlaybackObservation;
            const timeRanges = val.buffered;
            const bufferGap = getLeftSizeOfRange(timeRanges, position.last);
            const { representation } = val.content;
            const scoreData = scoreCalculator.getEstimate(representation);
            const currentScore = scoreData === null || scoreData === void 0 ? void 0 : scoreData[0];
            const currentBitrate = representation.bitrate;
            const observation = { bufferGap, currentBitrate, currentScore, speed };
            currentBufferBasedEstimate = bufferBasedChooser.getEstimate(observation);
            updateEstimate();
        };
        minAutoBitrate.onUpdate(updateEstimate, { clearSignal: innerCancellationSignal });
        maxAutoBitrate.onUpdate(updateEstimate, { clearSignal: innerCancellationSignal });
        filters.limitWidth.onUpdate(updateEstimate, { clearSignal: innerCancellationSignal });
        filters.limitWidth.onUpdate(updateEstimate, { clearSignal: innerCancellationSignal });
        return innerEstimateRef;
        function updateEstimate() {
            innerEstimateRef.setValue(getCurrentEstimate());
        }
        /** Returns the actual estimate based on all methods and algorithm available. */
        function getCurrentEstimate() {
            const { bufferGap, position, maximumPosition } = lastPlaybackObservation;
            const widthLimit = filters.limitWidth.getValue();
            const bitrateThrottle = filters.throttleBitrate.getValue();
            const currentRepresentationVal = currentRepresentation.getValue();
            const minAutoBitrateVal = minAutoBitrate.getValue();
            const maxAutoBitrateVal = maxAutoBitrate.getValue();
            const filteredReps = getFilteredRepresentations(representations, widthLimit, bitrateThrottle);
            const requests = requestsStore.getRequests();
            const { bandwidthEstimate, bitrateChosen } = networkAnalyzer
                .getBandwidthEstimate(lastPlaybackObservation, bandwidthEstimator, currentRepresentationVal, requests, prevEstimate.bandwidth);
            const stableRepresentation = scoreCalculator.getLastStableRepresentation();
            const knownStableBitrate = stableRepresentation === null ?
                undefined :
                stableRepresentation.bitrate / (lastPlaybackObservation.speed > 0 ?
                    lastPlaybackObservation.speed :
                    1);
            if (allowBufferBasedEstimates && bufferGap <= 5) {
                allowBufferBasedEstimates = false;
            }
            else if (!allowBufferBasedEstimates &&
                isFinite(bufferGap) &&
                bufferGap > 10) {
                allowBufferBasedEstimates = true;
            }
            /**
             * Representation chosen when considering only [pessimist] bandwidth
             * calculation.
             * This is a safe enough choice but might be lower than what the user
             * could actually profit from.
             */
            const chosenRepFromBandwidth = selectOptimalRepresentation(filteredReps, bitrateChosen, minAutoBitrateVal, maxAutoBitrateVal);
            let currentBestBitrate = chosenRepFromBandwidth.bitrate;
            /**
             * Representation chosen when considering the current buffer size.
             * If defined, takes precedence over `chosenRepFromBandwidth`.
             *
             * This is a very safe choice, yet it is very slow and might not be
             * adapted to cases where a buffer cannot be build, such as live contents.
             *
             * `null` if this buffer size mode is not enabled or if we don't have a
             * choice from it yet.
             */
            let chosenRepFromBufferSize = null;
            if (allowBufferBasedEstimates &&
                currentBufferBasedEstimate !== undefined &&
                currentBufferBasedEstimate > currentBestBitrate) {
                chosenRepFromBufferSize = selectOptimalRepresentation(filteredReps, currentBufferBasedEstimate, minAutoBitrateVal, maxAutoBitrateVal);
                currentBestBitrate = chosenRepFromBufferSize.bitrate;
            }
            /**
             * Representation chosen by the more adventurous `GuessBasedChooser`,
             * which iterates through Representations one by one until finding one
             * that cannot be "maintained".
             *
             * If defined, takes precedence over both `chosenRepFromBandwidth` and
             * `chosenRepFromBufferSize`.
             *
             * This is the riskiest choice (in terms of rebuffering chances) but is
             * only enabled when no other solution is adapted (for now, this just
             * applies for low-latency contents when playing close to the live
             * edge).
             *
             * `null` if not enabled or if there's currently no guess.
             */
            let chosenRepFromGuessMode = null;
            if (lowLatencyMode &&
                currentRepresentationVal !== null &&
                context.manifest.isDynamic &&
                maximumPosition - position.last < 40) {
                chosenRepFromGuessMode = guessBasedChooser
                    .getGuess(representations, lastPlaybackObservation, currentRepresentationVal, currentBestBitrate, requests);
            }
            if (chosenRepFromGuessMode !== null &&
                chosenRepFromGuessMode.bitrate > currentBestBitrate) {
                src_log.debug("ABR: Choosing representation with guess-based estimation.", chosenRepFromGuessMode.bitrate, chosenRepFromGuessMode.id);
                prevEstimate.update(chosenRepFromGuessMode, bandwidthEstimate, 2 /* ABRAlgorithmType.GuessBased */);
                return { bitrate: bandwidthEstimate,
                    representation: chosenRepFromGuessMode,
                    urgent: currentRepresentationVal === null ||
                        chosenRepFromGuessMode.bitrate < currentRepresentationVal.bitrate,
                    manual: false,
                    knownStableBitrate };
            }
            else if (chosenRepFromBufferSize !== null) {
                src_log.debug("ABR: Choosing representation with buffer-based estimation.", chosenRepFromBufferSize.bitrate, chosenRepFromBufferSize.id);
                prevEstimate.update(chosenRepFromBufferSize, bandwidthEstimate, 0 /* ABRAlgorithmType.BufferBased */);
                return { bitrate: bandwidthEstimate,
                    representation: chosenRepFromBufferSize,
                    urgent: networkAnalyzer.isUrgent(chosenRepFromBufferSize.bitrate, currentRepresentationVal, requests, lastPlaybackObservation),
                    manual: false,
                    knownStableBitrate };
            }
            else {
                src_log.debug("ABR: Choosing representation with bandwidth estimation.", chosenRepFromBandwidth.bitrate, chosenRepFromBandwidth.id);
                prevEstimate.update(chosenRepFromBandwidth, bandwidthEstimate, 1 /* ABRAlgorithmType.BandwidthBased */);
                return { bitrate: bandwidthEstimate,
                    representation: chosenRepFromBandwidth,
                    urgent: networkAnalyzer.isUrgent(chosenRepFromBandwidth.bitrate, currentRepresentationVal, requests, lastPlaybackObservation),
                    manual: false,
                    knownStableBitrate };
            }
        }
    }
    /**
     * Stop previous estimate production (if one) and restart it considering new
     * conditions (such as a manual bitrate and/or a new list of Representations).
     */
    function restartEstimatesProductionFromCurrentConditions() {
        const manualBitrateVal = manualBitrate.getValue();
        const representations = representationsRef.getValue();
        currentEstimatesCanceller.cancel();
        currentEstimatesCanceller = new TaskCanceller({ cancelOn: stopAllEstimates });
        const newRef = createEstimateReference(manualBitrateVal, representations, currentEstimatesCanceller.signal);
        newRef.onUpdate(function onNewEstimate(newEstimate) {
            estimateRef.setValue(newEstimate);
        }, { clearSignal: currentEstimatesCanceller.signal,
            emitCurrentValue: true });
    }
    /**
     * Callback to call when new metrics are available
     * @param {Object} value
     */
    function onMetric(value) {
        const { requestDuration, segmentDuration, size, content } = value;
        // calculate bandwidth
        bandwidthEstimator.addSample(requestDuration, size);
        if (!content.segment.isInit) {
            // calculate "maintainability score"
            const { segment, representation } = content;
            if (segmentDuration === undefined && !segment.complete) {
                // We cannot know the real duration of the segment
                return;
            }
            const segDur = segmentDuration !== null && segmentDuration !== void 0 ? segmentDuration : segment.duration;
            scoreCalculator.addSample(representation, requestDuration / 1000, segDur);
        }
    }
    /** Callback called when a new request begins. */
    function onRequestBegin(val) {
        requestsStore.add(val);
    }
    /** Callback called when progress information is known on a pending request. */
    function onRequestProgress(val) {
        requestsStore.addProgress(val);
    }
    /** Callback called when a pending request ends. */
    function onRequestEnd(val) {
        requestsStore.remove(val.id);
    }
}
/**
 * Filter representations given through filters options.
 * @param {Array.<Representation>} representations
 * @param {number | undefined} widthLimit - Filter Object.
 * @returns {Array.<Representation>}
 */
function getFilteredRepresentations(representations, widthLimit, bitrateThrottle) {
    let filteredReps = representations;
    if (bitrateThrottle < Infinity) {
        filteredReps = filterByBitrate(filteredReps, bitrateThrottle);
    }
    if (widthLimit !== undefined) {
        filteredReps = filterByWidth(filteredReps, widthLimit);
    }
    return filteredReps;
}

;// CONCATENATED MODULE: ./src/core/adaptive/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const adaptive = (createAdaptiveRepresentationSelector);

;// CONCATENATED MODULE: ./src/core/fetchers/cdn_prioritizer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Class signaling the priority between multiple CDN available for any given
 * resource.
 *
 * This class might perform requests and schedule timeouts by itself to keep its
 * internal list of CDN priority up-to-date.
 * When it is not needed anymore, you should call the `dispose` method to clear
 * all resources.
 *
 * @class CdnPrioritizer
 */
class CdnPrioritizer extends EventEmitter {
    /**
     * @param {Object} destroySignal
     */
    constructor(destroySignal) {
        super();
        this._downgradedCdnList = { metadata: [], timeouts: [] };
        destroySignal.register(() => {
            for (const timeout of this._downgradedCdnList.timeouts) {
                clearTimeout(timeout);
            }
            this._downgradedCdnList = { metadata: [], timeouts: [] };
        });
    }
    /**
     * From the list of __ALL__ CDNs available to a resource, return them in the
     * order in which requests should be performed.
     *
     * Note: It is VERY important to include all CDN that are able to reach the
     * wanted resource, even those which will in the end not be used anyway.
     * If some CDN are not communicated, the `CdnPrioritizer` might wrongly
     * consider that the current resource don't have any of the CDN prioritized
     * internally and return other CDN which should have been forbidden if it knew
     * about the other, non-used, ones.
     *
     * @param {Array.<string>} everyCdnForResource - Array of ALL available CDN
     * able to reach the wanted resource - even those which might not be used in
     * the end.
     * @returns {Array.<Object>} - Array of CDN that can be tried to reach the
     * resource, sorted by order of CDN preference, according to the
     * `CdnPrioritizer`'s own list of priorities.
     */
    getCdnPreferenceForResource(everyCdnForResource) {
        if (everyCdnForResource.length <= 1) {
            // The huge majority of contents have only one CDN available.
            // Here, prioritizing make no sense.
            return everyCdnForResource;
        }
        return this._innerGetCdnPreferenceForResource(everyCdnForResource);
    }
    /**
     * Limit usage of the CDN for a configured amount of time.
     * Call this method if you encountered an issue with that CDN which leads you
     * to want to prevent its usage currently.
     *
     * Note that the CDN can still be the preferred one if no other CDN exist for
     * a wanted resource.
     * @param {string} metadata
     */
    downgradeCdn(metadata) {
        const indexOf = indexOfMetadata(this._downgradedCdnList.metadata, metadata);
        if (indexOf >= 0) {
            this._removeIndexFromDowngradeList(indexOf);
        }
        const { DEFAULT_CDN_DOWNGRADE_TIME } = src_config.getCurrent();
        const downgradeTime = DEFAULT_CDN_DOWNGRADE_TIME;
        this._downgradedCdnList.metadata.push(metadata);
        const timeout = window.setTimeout(() => {
            const newIndex = indexOfMetadata(this._downgradedCdnList.metadata, metadata);
            if (newIndex >= 0) {
                this._removeIndexFromDowngradeList(newIndex);
            }
            this.trigger("priorityChange", null);
        }, downgradeTime);
        this._downgradedCdnList.timeouts.push(timeout);
        this.trigger("priorityChange", null);
    }
    /**
     * From the list of __ALL__ CDNs available to a resource, return them in the
     * order in which requests should be performed.
     *
     * Note: It is VERY important to include all CDN that are able to reach the
     * wanted resource, even those which will in the end not be used anyway.
     * If some CDN are not communicated, the `CdnPrioritizer` might wrongly
     * consider that the current resource don't have any of the CDN prioritized
     * internally and return other CDN which should have been forbidden if it knew
     * about the other, non-used, ones.
     *
     * @param {Array.<string>} everyCdnForResource - Array of ALL available CDN
     * able to reach the wanted resource - even those which might not be used in
     * the end.
     * @returns {Array.<string>} - Array of CDN that can be tried to reach the
     * resource, sorted by order of CDN preference, according to the
     * `CdnPrioritizer`'s own list of priorities.
     */
    _innerGetCdnPreferenceForResource(everyCdnForResource) {
        const [allowedInOrder, downgradedInOrder] = everyCdnForResource
            .reduce((acc, elt) => {
            if (this._downgradedCdnList.metadata.some(c => c.id === elt.id &&
                c.baseUrl === elt.baseUrl)) {
                acc[1].push(elt);
            }
            else {
                acc[0].push(elt);
            }
            return acc;
        }, [[], []]);
        return allowedInOrder.concat(downgradedInOrder);
    }
    /**
     * @param {number} index
     */
    _removeIndexFromDowngradeList(index) {
        this._downgradedCdnList.metadata.splice(index, 1);
        const oldTimeout = this._downgradedCdnList.timeouts.splice(index, 1);
        clearTimeout(oldTimeout[0]);
    }
}
/**
 * Find the index of the given CDN metadata in a CDN metadata array.
 * Returns `-1` if not found.
 * @param {Array.<Object>} arr
 * @param {Object} elt
 * @returns {number}
 */
function indexOfMetadata(arr, elt) {
    if (arr.length === 0) {
        return -1;
    }
    return elt.id !== undefined ? arrayFindIndex(arr, m => m.id === elt.id) :
        arrayFindIndex(arr, m => m.baseUrl === elt.baseUrl);
}

;// CONCATENATED MODULE: ./src/core/fetchers/segment/prioritized_segment_fetcher.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This function basically put in relation:
 *   - an `ISegmentFetcher`, which will be used to perform the segment requests
 *   - a `TaskPrioritizer`, which will handle the priority of a segment request
 *
 * and returns functions to fetch segments with a given priority.
 * @param {Object} prioritizer
 * @param {Object} fetcher
 * @returns {Object}
 */
function applyPrioritizerToSegmentFetcher(prioritizer, fetcher) {
    /**
     * Map Promises returned by the `createRequest` method into the actual tasks
     * used by the `TaskPrioritizer`, allowing to update task priorities just by
     * using the Promise.
     */
    const taskHandlers = new WeakMap();
    return {
        /**
         * Create a Segment request with a given priority.
         * @param {Object} content - content to request
         * @param {Number} priority - priority at which the content should be requested.
         * Lower number == higher priority.
         * @param {Object} callbacks
         * @param {Object} cancelSignal
         * @returns {Promise}
         */
        createRequest(content, priority, callbacks, cancelSignal) {
            const givenTask = (innerCancelSignal) => {
                return fetcher(content, callbacks, innerCancelSignal);
            };
            const ret = prioritizer.create(givenTask, priority, callbacks, cancelSignal);
            taskHandlers.set(ret, givenTask);
            return ret;
        },
        /**
         * Update the priority of a pending request, created through
         * `createRequest`.
         * @param {Promise} task - The Promise returned by `createRequest`.
         * @param {Number} priority - The new priority value.
         */
        updatePriority(task, priority) {
            const correspondingTask = taskHandlers.get(task);
            if (correspondingTask === undefined) {
                src_log.warn("Fetchers: Cannot update the priority of a request: task not found.");
                return;
            }
            prioritizer.updatePriority(correspondingTask, priority);
        },
    };
}

;// CONCATENATED MODULE: ./src/manifest/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check if two contents are the same
 * @param {Object} content1
 * @param {Object} content2
 * @returns {boolean}
 */
function areSameContent(content1, content2) {
    return (content1.segment.id === content2.segment.id &&
        content1.representation.id === content2.representation.id &&
        content1.adaptation.id === content2.adaptation.id &&
        content1.period.id === content2.period.id);
}
/**
 * Get string describing a given ISegment, useful for log functions.
 * @param {Object} content
 * @returns {string|null|undefined}
 */
function getLoggableSegmentId(content) {
    if (isNullOrUndefined(content)) {
        return "";
    }
    const { period, adaptation, representation, segment } = content;
    return `${adaptation.type} P: ${period.id} A: ${adaptation.id} ` +
        `R: ${representation.id} S: ` +
        (segment.isInit ? "init" :
            segment.complete ? `${segment.time}-${segment.duration}` :
                `${segment.time}`);
}

;// CONCATENATED MODULE: ./src/utils/initialization_segment_cache.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Caching object used to cache initialization segments.
 * This allow to have a faster representation switch and faster seeking.
 * @class InitializationSegmentCache
 */
class InitializationSegmentCache {
    constructor() {
        this._cache = new WeakMap();
    }
    /**
     * @param {Object} obj
     * @param {*} response
     */
    add({ representation, segment }, response) {
        if (segment.isInit) {
            this._cache.set(representation, response);
        }
    }
    /**
     * @param {Object} obj
     * @returns {*} response
     */
    get({ representation, segment }) {
        if (segment.isInit) {
            const value = this._cache.get(representation);
            if (value !== undefined) {
                return value;
            }
        }
        return null;
    }
}
/* harmony default export */ const initialization_segment_cache = (InitializationSegmentCache);

;// CONCATENATED MODULE: ./src/core/fetchers/segment/segment_fetcher.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */












/** Allows to generate a unique identifies for each request. */
const generateRequestID = idGenerator();
/**
 * Create an `ISegmentFetcher` object which will allow to easily fetch and parse
 * segments.
 * An `ISegmentFetcher` also implements a retry mechanism, based on the given
 * `options` argument, which may retry a segment request when it fails.
 *
 * @param {string} bufferType
 * @param {Object} pipeline
 * @param {Object} lifecycleCallbacks
 * @param {Object} options
 * @returns {Function}
 */
function createSegmentFetcher(bufferType, pipeline, cdnPrioritizer, lifecycleCallbacks, options) {
    const requestOptions = {
        timeout: options.requestTimeout < 0 ? undefined :
            options.requestTimeout,
    };
    /**
     * Cache audio and video initialization segments.
     * This allows to avoid doing too many requests for what are usually very
     * small files.
     */
    const cache = arrayIncludes(["audio", "video"], bufferType) ?
        new initialization_segment_cache() :
        undefined;
    const { loadSegment, parseSegment } = pipeline;
    /**
     * Fetch a specific segment.
     * @param {Object} content
     * @param {Object} fetcherCallbacks
     * @param {Object} cancellationSignal
     * @returns {Promise}
     */
    return async function fetchSegment(content, fetcherCallbacks, cancellationSignal) {
        var _a, _b;
        // used by logs
        const segmentIdString = getLoggableSegmentId(content);
        const requestId = generateRequestID();
        /**
         * If the request succeeded, set to the corresponding
         * `IChunkCompleteInformation` object.
         * For any other completion cases: if the request either failed, was
         * cancelled or just if no request was needed, set to `null`.
         *
         * Stays to `undefined` when the request is still pending.
         */
        let requestInfo;
        /**
         * Array containing one entry per loaded chunk, in chronological order.
         * The boolean indicates if the chunk has been parsed at least once.
         *
         * This is used to know when all loaded chunks have been parsed, which
         * can be useful to e.g. construct metrics about the loaded segment.
         */
        const parsedChunks = [];
        /**
         * Addition of the duration of each encountered and parsed chunks.
         * Allows to have an idea of the real duration of the full segment once
         * all chunks have been parsed.
         *
         * `undefined` if at least one of the parsed chunks has unknown duration.
         */
        let segmentDurationAcc = 0;
        /** Set to `true` once network metrics have been sent. */
        let metricsSent = false;
        const loaderCallbacks = {
            /**
             * Callback called when the segment loader has progress information on
             * the request.
             * @param {Object} info
             */
            onProgress(info) {
                var _a;
                if (requestInfo !== undefined) {
                    return; // request already termminated
                }
                if (info.totalSize !== undefined && info.size < info.totalSize) {
                    (_a = lifecycleCallbacks.onProgress) === null || _a === void 0 ? void 0 : _a.call(lifecycleCallbacks, { duration: info.duration,
                        size: info.size,
                        totalSize: info.totalSize,
                        timestamp: performance.now(),
                        id: requestId });
                }
            },
            /**
             * Callback called when the segment is communicated by the loader
             * through decodable sub-segment(s) called chunk(s), with a chunk in
             * argument.
             * @param {*} chunkData
             */
            onNewChunk(chunkData) {
                fetcherCallbacks.onChunk(generateParserFunction(chunkData, true));
            },
        };
        // Retrieve from cache if it exists
        const cached = cache !== undefined ? cache.get(content) :
            null;
        if (cached !== null) {
            src_log.debug("SF: Found wanted segment in cache", segmentIdString);
            fetcherCallbacks.onChunk(generateParserFunction(cached, false));
            return Promise.resolve();
        }
        src_log.debug("SF: Beginning request", segmentIdString);
        (_a = lifecycleCallbacks.onRequestBegin) === null || _a === void 0 ? void 0 : _a.call(lifecycleCallbacks, { requestTimestamp: performance.now(),
            id: requestId,
            content });
        cancellationSignal.register(() => {
            var _a;
            if (requestInfo !== undefined) {
                return; // Request already terminated
            }
            src_log.debug("SF: Segment request cancelled", segmentIdString);
            requestInfo = null;
            (_a = lifecycleCallbacks.onRequestEnd) === null || _a === void 0 ? void 0 : _a.call(lifecycleCallbacks, { id: requestId });
        });
        try {
            const res = await scheduleRequestWithCdns(content.representation.cdnMetadata, cdnPrioritizer, callLoaderWithUrl, object_assign({ onRetry }, options), cancellationSignal);
            if (res.resultType === "segment-loaded") {
                const loadedData = res.resultData.responseData;
                if (cache !== undefined) {
                    cache.add(content, res.resultData.responseData);
                }
                fetcherCallbacks.onChunk(generateParserFunction(loadedData, false));
            }
            else if (res.resultType === "segment-created") {
                fetcherCallbacks.onChunk(generateParserFunction(res.resultData, false));
            }
            src_log.debug("SF: Segment request ended with success", segmentIdString);
            fetcherCallbacks.onAllChunksReceived();
            if (res.resultType !== "segment-created") {
                requestInfo = res.resultData;
                sendNetworkMetricsIfAvailable();
            }
            else {
                requestInfo = null;
            }
            if (!cancellationSignal.isCancelled) {
                // The current task could have been canceled as a result of one
                // of the previous callbacks call. In that case, we don't want to send
                // a "requestEnd" again as it has already been sent on cancellation.
                (_b = lifecycleCallbacks.onRequestEnd) === null || _b === void 0 ? void 0 : _b.call(lifecycleCallbacks, { id: requestId });
            }
        }
        catch (err) {
            requestInfo = null;
            if (err instanceof CancellationError) {
                src_log.debug("SF: Segment request aborted", segmentIdString);
                throw err;
            }
            src_log.debug("SF: Segment request failed", segmentIdString);
            throw errorSelector(err);
        }
        /**
         * Call a segment loader for the given URL with the right arguments.
         * @param {Object|null} cdnMetadata
         * @returns {Promise}
         */
        function callLoaderWithUrl(cdnMetadata) {
            return loadSegment(cdnMetadata, content, requestOptions, cancellationSignal, loaderCallbacks);
        }
        /**
         * Generate function allowing to parse a loaded segment.
         * @param {*} data
         * @param {Boolean} isChunked
         * @returns {Function}
         */
        function generateParserFunction(data, isChunked) {
            parsedChunks.push(false);
            const parsedChunkId = parsedChunks.length - 1;
            return function parse(initTimescale) {
                const loaded = { data, isChunked };
                try {
                    const parsed = parseSegment(loaded, content, initTimescale);
                    if (!parsedChunks[parsedChunkId]) {
                        segmentDurationAcc = segmentDurationAcc !== undefined &&
                            parsed.segmentType === "media" &&
                            parsed.chunkInfos !== null &&
                            parsed.chunkInfos.duration !== undefined ?
                            segmentDurationAcc + parsed.chunkInfos.duration :
                            undefined;
                        parsedChunks[parsedChunkId] = true;
                        sendNetworkMetricsIfAvailable();
                    }
                    return parsed;
                }
                catch (error) {
                    throw formatError(error, { defaultCode: "PIPELINE_PARSE_ERROR",
                        defaultReason: "Unknown parsing error" });
                }
            };
        }
        /**
         * Function called when the function request is retried.
         * @param {*} err
         */
        function onRetry(err) {
            fetcherCallbacks.onRetry(errorSelector(err));
        }
        /**
         * Send netork metrics if they haven't yet been sent and if all data to
         * define them is available.
         */
        function sendNetworkMetricsIfAvailable() {
            var _a;
            if (metricsSent) {
                return;
            }
            if (!isNullOrUndefined(requestInfo) &&
                requestInfo.size !== undefined &&
                requestInfo.requestDuration !== undefined &&
                parsedChunks.length > 0 &&
                parsedChunks.every(isParsed => isParsed)) {
                metricsSent = true;
                (_a = lifecycleCallbacks.onMetrics) === null || _a === void 0 ? void 0 : _a.call(lifecycleCallbacks, {
                    size: requestInfo.size,
                    requestDuration: requestInfo.requestDuration,
                    content,
                    segmentDuration: segmentDurationAcc,
                });
            }
        }
    };
}
/**
 * @param {string} bufferType
 * @param {Object}
 * @returns {Object}
 */
function getSegmentFetcherOptions(bufferType, { maxRetryRegular, maxRetryOffline, lowLatencyMode, requestTimeout }) {
    const { DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR, DEFAULT_REQUEST_TIMEOUT, DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE, INITIAL_BACKOFF_DELAY_BASE, MAX_BACKOFF_DELAY_BASE } = src_config.getCurrent();
    return { maxRetryRegular: bufferType === "image" ? 0 :
            maxRetryRegular !== null && maxRetryRegular !== void 0 ? maxRetryRegular : DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR,
        maxRetryOffline: maxRetryOffline !== null && maxRetryOffline !== void 0 ? maxRetryOffline : DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
        baseDelay: lowLatencyMode ? INITIAL_BACKOFF_DELAY_BASE.LOW_LATENCY :
            INITIAL_BACKOFF_DELAY_BASE.REGULAR,
        maxDelay: lowLatencyMode ? MAX_BACKOFF_DELAY_BASE.LOW_LATENCY :
            MAX_BACKOFF_DELAY_BASE.REGULAR,
        requestTimeout: isNullOrUndefined(requestTimeout) ? DEFAULT_REQUEST_TIMEOUT :
            requestTimeout };
}

;// CONCATENATED MODULE: ./src/core/fetchers/segment/task_prioritizer.ts



class TaskPrioritizer {
    /**
     * @param {Options} prioritizerOptions
     */
    constructor({ prioritySteps }) {
        this._minPendingPriority = null;
        this._waitingQueue = [];
        this._pendingTasks = [];
        this._prioritySteps = prioritySteps;
        if (this._prioritySteps.high >= this._prioritySteps.low) {
            throw new Error("TP: the max high level priority should be given a lower" +
                "priority number than the min low priority.");
        }
    }
    /**
     * Create a priorized Promise from a base task.
     *
     * This task will immediately have its priority compared to all the
     * already-running ones created from this class.
     *
     * Only if this number is inferior or equal to the priority of the
     * minimum priority number of all currently-running tasks  will it be
     * immediately started.
     * In the opposite case, we will wait for higher-priority tasks to
     * finish before starting it.
     *
     * Note that while this task is waiting for its turn, it is possible
     * to update its property through the updatePriority method, by providing
     * the task again and its new priority number.
     *
     * @param {Function} taskFn
     * @param {number} priority
     * @param {Object} callbacks
     * @param {Object} cancelSignal
     * @returns {Promise}
     */
    create(taskFn, priority, callbacks, cancelSignal) {
        let newTask;
        return new Promise((resolve, reject) => {
            /** Function allowing to start the underlying Promise. */
            const trigger = () => {
                if (newTask.hasEnded) {
                    unregisterCancelSignal();
                    return;
                }
                const interrupter = new TaskCanceller({ cancelOn: cancelSignal });
                newTask.interrupter = interrupter;
                interrupter.signal.register(() => {
                    newTask.interrupter = null;
                    if (!cancelSignal.isCancelled) {
                        callbacks.beforeInterrupted();
                    }
                });
                this._minPendingPriority = this._minPendingPriority === null ?
                    newTask.priority :
                    Math.min(this._minPendingPriority, newTask.priority);
                this._pendingTasks.push(newTask);
                newTask.taskFn(interrupter.signal)
                    .then(onResolve)
                    .catch((err) => {
                    if (!cancelSignal.isCancelled &&
                        interrupter.isUsed &&
                        err instanceof CancellationError) {
                        return;
                    }
                    onReject(err);
                });
            };
            const unregisterCancelSignal = cancelSignal.register((cancellationError) => {
                this._endTask(newTask);
                reject(cancellationError);
            });
            const finishTask = () => {
                unregisterCancelSignal();
                this._endTask(newTask);
            };
            const onResolve = (value) => {
                callbacks.beforeEnded();
                finishTask();
                resolve(value);
            };
            const onReject = (err) => {
                finishTask();
                reject(err);
            };
            newTask = {
                hasEnded: false,
                priority,
                trigger,
                taskFn,
                interrupter: null,
            };
            if (!this._canBeStartedNow(newTask)) {
                this._waitingQueue.push(newTask);
            }
            else {
                // We can start the task right away
                newTask.trigger();
                if (this._isRunningHighPriorityTasks()) {
                    // Note: we want to begin interrupting low-priority tasks just
                    // after starting the current one because the interrupting
                    // logic can call external code.
                    // This would mean re-entrancy, itself meaning that some weird
                    // half-state could be reached unless we're very careful.
                    // To be sure no harm is done, we put that code at the last
                    // possible position.
                    this._interruptCancellableTasks();
                }
            }
        });
    }
    _endTask(task) {
        task.hasEnded = true;
        const waitingQueueIndex = _findTaskIndex(task.taskFn, this._waitingQueue);
        if (waitingQueueIndex >= 0) {
            // If it was still waiting for its turn
            this._waitingQueue.splice(waitingQueueIndex, 1);
        }
        else {
            // remove it from pending queue if in it
            const pendingTasksIndex = _findTaskIndex(task.taskFn, this._pendingTasks);
            if (pendingTasksIndex < 0) {
                return;
            }
            this._pendingTasks.splice(pendingTasksIndex, 1);
            if (this._pendingTasks.length > 0) {
                if (this._minPendingPriority === task.priority) {
                    this._minPendingPriority = Math.min(...this._pendingTasks.map(t => t.priority));
                }
            }
            else {
                this._minPendingPriority = null;
            }
            this._loopThroughWaitingQueue();
        }
    }
    /**
     * Update the priority of a promise given to the TaskPrioritizer.
     * @param {Object} promise
     * @param {number} priority
     */
    updatePriority(promise, priority) {
        const waitingQueueIndex = _findTaskIndex(promise, this._waitingQueue);
        if (waitingQueueIndex >= 0) { // If it was still waiting for its turn
            const waitingQueueElt = this._waitingQueue[waitingQueueIndex];
            if (waitingQueueElt.priority === priority) {
                return;
            }
            waitingQueueElt.priority = priority;
            if (!this._canBeStartedNow(waitingQueueElt)) {
                return;
            }
            this._findAndRunWaitingQueueTask(waitingQueueIndex);
            if (this._isRunningHighPriorityTasks()) {
                // Re-check to cancel every "cancellable" pending task
                //
                // Note: We start the task before interrupting cancellable tasks on
                // purpose.
                // Because both `_findAndRunWaitingQueueTask` and
                // `_interruptCancellableTasks` can emit events and thus call external
                // code, we could retrieve ourselves in a very weird state at this point
                //
                // By starting the task first, we ensure that this is manageable:
                // `_getMinPendingPriority()` has already been updated to the right value at
                // the time we reached external code, the priority of the current
                // Task has just been updated, and `_interruptCancellableTasks`
                // will ensure that we're basing ourselves on the last `priority` value
                // each time.
                // Doing it in the reverse order is an order of magnitude more difficult
                // to write and to reason about.
                this._interruptCancellableTasks();
            }
            return;
        }
        const pendingTasksIndex = _findTaskIndex(promise, this._pendingTasks);
        if (pendingTasksIndex < 0) {
            src_log.warn("TP: request to update the priority of a non-existent task");
            return;
        }
        const task = this._pendingTasks[pendingTasksIndex];
        if (task.priority === priority) {
            return;
        }
        const prevPriority = task.priority;
        task.priority = priority;
        if (this._minPendingPriority === null || priority < this._minPendingPriority) {
            this._minPendingPriority = priority;
        }
        else if (this._minPendingPriority === prevPriority) { // was highest priority
            if (this._pendingTasks.length === 1) {
                this._minPendingPriority = priority;
            }
            else {
                this._minPendingPriority = Math.min(...this._pendingTasks.map(t => t.priority));
            }
            this._loopThroughWaitingQueue();
        }
        if (this._isRunningHighPriorityTasks()) {
            // Always interrupt cancellable tasks after all other side-effects, to
            // avoid re-entrancy issues
            this._interruptCancellableTasks();
        }
    }
    /**
     * Browse the current waiting queue and start all task in it that needs to be
     * started: start the ones with the lowest priority value below
     * `_minPendingPriority`.
     *
     * Private properties, such as `_minPendingPriority` are updated accordingly
     * while this method is called.
     */
    _loopThroughWaitingQueue() {
        const minWaitingPriority = this._waitingQueue.reduce((acc, elt) => {
            return acc === null || acc > elt.priority ? elt.priority :
                acc;
        }, null);
        if (minWaitingPriority === null ||
            (this._minPendingPriority !== null &&
                this._minPendingPriority < minWaitingPriority)) {
            return;
        }
        for (let i = 0; i < this._waitingQueue.length; i++) {
            const priorityToCheck = this._minPendingPriority === null ?
                minWaitingPriority :
                Math.min(this._minPendingPriority, minWaitingPriority);
            const elt = this._waitingQueue[i];
            if (elt.priority <= priorityToCheck) {
                this._findAndRunWaitingQueueTask(i);
                i--; // previous operation should have removed that element from the
                // the waiting queue
            }
        }
    }
    /**
     * Interrupt and move back to the waiting queue all pending tasks that are
     * low priority (having a higher priority number than
     * `this._prioritySteps.low`).
     */
    _interruptCancellableTasks() {
        for (let i = 0; i < this._pendingTasks.length; i++) {
            const pendingObj = this._pendingTasks[i];
            if (pendingObj.priority >= this._prioritySteps.low) {
                this._interruptPendingTask(pendingObj);
                // The previous call could have a lot of potential side-effects.
                // It is safer to re-start the function to not miss any pending
                // task that needs to be cancelled.
                return this._interruptCancellableTasks();
            }
        }
    }
    /**
     * Start task which is at the given index in the waiting queue.
     * The task will be removed from the waiting queue in the process.
     * @param {number} index
     */
    _findAndRunWaitingQueueTask(index) {
        if (index >= this._waitingQueue.length || index < 0) {
            src_log.warn("TP : Tried to start a non existing task");
            return false;
        }
        const task = this._waitingQueue.splice(index, 1)[0];
        task.trigger();
        return true;
    }
    /**
     * Move back pending task to the waiting queue and interrupt it.
     * @param {object} task
     */
    _interruptPendingTask(task) {
        var _a;
        const pendingTasksIndex = _findTaskIndex(task.taskFn, this._pendingTasks);
        if (pendingTasksIndex < 0) {
            src_log.warn("TP: Interrupting a non-existent pending task. Aborting...");
            return;
        }
        // Stop task and put it back in the waiting queue
        this._pendingTasks.splice(pendingTasksIndex, 1);
        this._waitingQueue.push(task);
        if (this._pendingTasks.length === 0) {
            this._minPendingPriority = null;
        }
        else if (this._minPendingPriority === task.priority) {
            this._minPendingPriority = Math.min(...this._pendingTasks.map(t => t.priority));
        }
        (_a = task.interrupter) === null || _a === void 0 ? void 0 : _a.cancel(); // Interrupt at last step because it calls external code
    }
    /**
     * Return `true` if the given task can be started immediately based on its
     * priority.
     * @param {Object} task
     * @returns {boolean}
     */
    _canBeStartedNow(task) {
        return this._minPendingPriority === null ||
            task.priority <= this._minPendingPriority;
    }
    /**
     * Returns `true` if any running task is considered "high priority".
     * returns `false` otherwise.
     * @returns {boolean}
     */
    _isRunningHighPriorityTasks() {
        return this._minPendingPriority !== null &&
            this._minPendingPriority <= this._prioritySteps.high;
    }
}
/**
 * Simple utils function allowing to find a given task function in the given
 * `queue`.
 *
 * Returns `-1` if `taskFn` is not found.
 * @param {Function} taskFn
 * @param {Array.<Object>} queue
 * @returns {number}
 */
function _findTaskIndex(taskFn, queue) {
    return arrayFindIndex(queue, (elt) => elt.taskFn === taskFn);
}

;// CONCATENATED MODULE: ./src/core/fetchers/segment/segment_fetcher_creator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Interact with the transport pipelines to download segments with the right
 * priority.
 *
 * @class SegmentFetcherCreator
 *
 * @example
 * ```js
 * const creator = new SegmentFetcherCreator(transport, {
 *   lowLatencyMode: false,
 *   maxRetryRegular: Infinity,
 *   maxRetryOffline: Infinity,
 * });
 *
 * // 2 - create a new fetcher with its backoff options
 * const fetcher = creator.createSegmentFetcher("audio", {
 *   // ... (lifecycle callbacks if wanted)
 * });
 *
 * // 3 - load a segment with a given priority
 * fetcher.createRequest(myContent, 1)
 *   // 4 - parse it
 *   .pipe(
 *     filter(evt => evt.type === "chunk"),
 *     mergeMap(response => response.parse());
 *   )
 *   // 5 - use it
 *   .subscribe((res) => console.log("audio chunk downloaded:", res));
 * ```
 */
class SegmentFetcherCreator {
    /**
     * @param {Object} transport
     */
    constructor(transport, options, cancelSignal) {
        const cdnPrioritizer = new CdnPrioritizer(cancelSignal);
        const { MIN_CANCELABLE_PRIORITY, MAX_HIGH_PRIORITY_LEVEL } = src_config.getCurrent();
        this._transport = transport;
        this._prioritizer = new TaskPrioritizer({
            prioritySteps: { high: MAX_HIGH_PRIORITY_LEVEL,
                low: MIN_CANCELABLE_PRIORITY },
        });
        this._cdnPrioritizer = cdnPrioritizer;
        this._backoffOptions = options;
    }
    /**
     * Create a segment fetcher, allowing to easily perform segment requests.
     * @param {string} bufferType - The type of buffer concerned (e.g. "audio",
     * "video", etc.)
     * @param {Object} callbacks
     * @returns {Object}
     */
    createSegmentFetcher(bufferType, callbacks) {
        const backoffOptions = getSegmentFetcherOptions(bufferType, this._backoffOptions);
        const pipelines = this._transport[bufferType];
        // Types are very complicated here as they are per-type of buffer.
        const segmentFetcher = createSegmentFetcher(bufferType, pipelines, this._cdnPrioritizer, callbacks, backoffOptions);
        return applyPrioritizerToSegmentFetcher(this._prioritizer, segmentFetcher);
    }
}

;// CONCATENATED MODULE: ./src/core/fetchers/segment/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const segment = (SegmentFetcherCreator);

;// CONCATENATED MODULE: ./src/compat/clear_element_src.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Clear element's src attribute.
 * @param {HTMLMediaElement} element
 */
function clearElementSrc(element) {
    // On some browsers, we first have to make sure the textTracks elements are
    // both disabled and removed from the DOM.
    // If we do not do that, we may be left with displayed text tracks on the
    // screen, even if the track elements are properly removed, due to browser
    // issues.
    // Bug seen on Firefox (I forgot which version) and Chrome 96.
    const { textTracks } = element;
    if (!isNullOrUndefined(textTracks)) {
        for (let i = 0; i < textTracks.length; i++) {
            textTracks[i].mode = "disabled";
        }
        if (element.hasChildNodes()) {
            const { childNodes } = element;
            for (let j = childNodes.length - 1; j >= 0; j--) {
                if (childNodes[j].nodeName === "track") {
                    try {
                        element.removeChild(childNodes[j]);
                    }
                    catch (err) {
                        src_log.warn("Compat: Could not remove text track child from element.");
                    }
                }
            }
        }
    }
    element.src = "";
    // On IE11, element.src = "" is not sufficient as it
    // does not clear properly the current MediaKey Session.
    // Microsoft recommended to use element.removeAttr("src").
    element.removeAttribute("src");
}

;// CONCATENATED MODULE: ./src/core/init/create_media_source.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





const { onSourceOpen$: create_media_source_onSourceOpen$ } = event_listeners_namespaceObject;
/**
 * Dispose of ressources taken by the MediaSource:
 *   - Clear the MediaSource' SourceBuffers
 *   - Clear the mediaElement's src (stop the mediaElement)
 *   - Revoke MediaSource' URL
 * @param {HTMLMediaElement} mediaElement
 * @param {MediaSource|null} mediaSource
 * @param {string|null} mediaSourceURL
 */
function resetMediaSource(mediaElement, mediaSource, mediaSourceURL) {
    if (mediaSource !== null && mediaSource.readyState !== "closed") {
        const { readyState, sourceBuffers } = mediaSource;
        for (let i = sourceBuffers.length - 1; i >= 0; i--) {
            const sourceBuffer = sourceBuffers[i];
            try {
                if (readyState === "open") {
                    src_log.info("Init: Removing SourceBuffer from mediaSource");
                    sourceBuffer.abort();
                }
                mediaSource.removeSourceBuffer(sourceBuffer);
            }
            catch (e) {
                src_log.warn("Init: Error while disposing SourceBuffer", e instanceof Error ? e : "");
            }
        }
        if (sourceBuffers.length > 0) {
            src_log.warn("Init: Not all SourceBuffers could have been removed.");
        }
    }
    clearElementSrc(mediaElement);
    if (mediaSourceURL !== null) {
        try {
            src_log.debug("Init: Revoking previous URL");
            URL.revokeObjectURL(mediaSourceURL);
        }
        catch (e) {
            src_log.warn("Init: Error while revoking the media source URL", e instanceof Error ? e : "");
        }
    }
}
/**
 * Create, on subscription, a MediaSource instance and attach it to the given
 * mediaElement element's src attribute.
 *
 * Returns an Observable which emits the MediaSource when created and attached
 * to the mediaElement element.
 * This Observable never completes. It can throw if MediaSource is not
 * available in the current environment.
 *
 * On unsubscription, the mediaElement.src is cleaned, MediaSource SourceBuffers
 * are aborted and some minor cleaning is done.
 *
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function createMediaSource(mediaElement) {
    return new Observable_Observable((observer) => {
        if (MediaSource_ == null) {
            throw new MediaError("MEDIA_SOURCE_NOT_SUPPORTED", "No MediaSource Object was found in the current browser.");
        }
        // make sure the media has been correctly reset
        const oldSrc = isNonEmptyString(mediaElement.src) ? mediaElement.src :
            null;
        resetMediaSource(mediaElement, null, oldSrc);
        src_log.info("Init: Creating MediaSource");
        const mediaSource = new MediaSource_();
        const objectURL = URL.createObjectURL(mediaSource);
        src_log.info("Init: Attaching MediaSource URL to the media element", objectURL);
        mediaElement.src = objectURL;
        observer.next(mediaSource);
        return () => {
            resetMediaSource(mediaElement, mediaSource, objectURL);
        };
    });
}
/**
 * Create and open a new MediaSource object on the given media element.
 * Emit the MediaSource when done.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function openMediaSource(mediaElement) {
    return createMediaSource(mediaElement).pipe(mergeMap(mediaSource => {
        return create_media_source_onSourceOpen$(mediaSource).pipe(take(1), map(() => mediaSource));
    }));
}

;// CONCATENATED MODULE: ./src/core/init/events_generators.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Construct a "loaded" event.
 * @returns {Object}
 */
function loaded(segmentBuffersStore) {
    return { type: "loaded", value: { segmentBuffersStore } };
}
/**
 * Construct a "stalled" event.
 * @param {Object|null} rebuffering
 * @returns {Object}
 */
function stalled(rebuffering) {
    return { type: "stalled", value: rebuffering };
}
/**
 * Construct a "stalled" event.
 * @returns {Object}
 */
function unstalled() {
    return { type: "unstalled", value: null };
}
/**
 * Construct a "decipherabilityUpdate" event.
 * @param {Array.<Object>} arg
 * @returns {Object}
 */
function decipherabilityUpdate(arg) {
    return { type: "decipherabilityUpdate", value: arg };
}
/**
 * Construct a "manifestReady" event.
 * @param {Object} manifest
 * @returns {Object}
 */
function manifestReady(manifest) {
    return { type: "manifestReady", value: { manifest } };
}
/**
 * Construct a "manifestUpdate" event.
 * @returns {Object}
 */
function manifestUpdate() {
    return { type: "manifestUpdate", value: null };
}
/**
 * Construct a "representationChange" event.
 * @param {string} type
 * @param {Object} period
 * @returns {Object}
 */
function nullRepresentation(type, period) {
    return { type: "representationChange",
        value: { type,
            representation: null,
            period } };
}
/**
 * construct a "warning" event.
 * @param {error} value
 * @returns {object}
 */
function warning(value) {
    return { type: "warning", value };
}
/**
 * construct a "reloading-media-source" event.
 * @returns {object}
 */
function reloadingMediaSource() {
    return { type: "reloading-media-source", value: undefined };
}
const INIT_EVENTS = { loaded,
    decipherabilityUpdate,
    manifestReady,
    manifestUpdate,
    nullRepresentation,
    reloadingMediaSource,
    stalled,
    unstalled,
    warning };
/* harmony default export */ const events_generators = (INIT_EVENTS);

;// CONCATENATED MODULE: ./src/core/init/get_initial_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Returns the calculated initial time for the content described by the given
 * Manifest:
 *   1. if a start time is defined by user, calculate starting time from the
 *      manifest information
 *   2. else if the media is live, use the live edge and suggested delays from
 *      it
 *   3. else returns the minimum time announced in the manifest
 * @param {Manifest} manifest
 * @param {boolean} lowLatencyMode
 * @param {Object} startAt
 * @returns {Number}
 */
function getInitialTime(manifest, lowLatencyMode, startAt) {
    if (!isNullOrUndefined(startAt)) {
        const min = manifest.getMinimumSafePosition();
        let max;
        if (manifest.isLive) {
            max = manifest.getLivePosition();
        }
        if (max === undefined) {
            max = manifest.getMaximumSafePosition();
        }
        if (!isNullOrUndefined(startAt.position)) {
            src_log.debug("Init: using startAt.minimumPosition");
            return Math.max(Math.min(startAt.position, max), min);
        }
        else if (!isNullOrUndefined(startAt.wallClockTime)) {
            src_log.debug("Init: using startAt.wallClockTime");
            const ast = manifest.availabilityStartTime === undefined ?
                0 :
                manifest.availabilityStartTime;
            const position = startAt.wallClockTime - ast;
            return Math.max(Math.min(position, max), min);
        }
        else if (!isNullOrUndefined(startAt.fromFirstPosition)) {
            src_log.debug("Init: using startAt.fromFirstPosition");
            const { fromFirstPosition } = startAt;
            return fromFirstPosition <= 0 ? min :
                Math.min(max, min + fromFirstPosition);
        }
        else if (!isNullOrUndefined(startAt.fromLastPosition)) {
            src_log.debug("Init: using startAt.fromLastPosition");
            const { fromLastPosition } = startAt;
            return fromLastPosition >= 0 ? max :
                Math.max(min, max + fromLastPosition);
        }
        else if (!isNullOrUndefined(startAt.percentage)) {
            src_log.debug("Init: using startAt.percentage");
            const { percentage } = startAt;
            if (percentage > 100) {
                return max;
            }
            else if (percentage < 0) {
                return min;
            }
            const ratio = +percentage / 100;
            const extent = max - min;
            return min + extent * ratio;
        }
    }
    const minimumPosition = manifest.getMinimumSafePosition();
    if (manifest.isLive) {
        const { suggestedPresentationDelay, clockOffset } = manifest;
        const maximumPosition = manifest.getMaximumSafePosition();
        let liveTime;
        const { DEFAULT_LIVE_GAP } = src_config.getCurrent();
        if (clockOffset === undefined) {
            src_log.info("Init: no clock offset found for a live content, " +
                "starting close to maximum available position");
            liveTime = maximumPosition;
        }
        else {
            src_log.info("Init: clock offset found for a live content, " +
                "checking if we can start close to it");
            const ast = manifest.availabilityStartTime === undefined ?
                0 :
                manifest.availabilityStartTime;
            const clockRelativeLiveTime = (performance.now() + clockOffset) / 1000 - ast;
            liveTime = Math.min(maximumPosition, clockRelativeLiveTime);
        }
        const diffFromLiveTime = suggestedPresentationDelay !== undefined ? suggestedPresentationDelay :
            lowLatencyMode ? DEFAULT_LIVE_GAP.LOW_LATENCY :
                DEFAULT_LIVE_GAP.DEFAULT;
        src_log.debug(`Init: ${liveTime} defined as the live time, applying a live gap` +
            ` of ${diffFromLiveTime}`);
        return Math.max(liveTime - diffFromLiveTime, minimumPosition);
    }
    src_log.info("Init: starting at the minimum available position:", minimumPosition);
    return minimumPosition;
}

;// CONCATENATED MODULE: ./src/compat/has_eme_apis.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the browser has the minimum needed EME APIs to decrypt a
 * content.
 * @returns {Boolean}
 */
function hasEMEAPIs() {
    return typeof requestMediaKeySystemAccess === "function";
}

;// CONCATENATED MODULE: ./src/utils/slice_uint8array.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {Uint8Array} arr - The Uint8Array you want to slice
 * @param {number} start - The starting byte index from the beginning
 * @param {number} end -     Byte index before which to end slicing.
 * If end is unspecified, the new ArrayBuffer contains all bytes from begin to
 * the end of this ArrayBuffer. If negative, it will make the Byte index begin
 * from the last Byte.
 * @returns {Uint8Array}
 */
function arraySlice(arr, start, end) {
    return new Uint8Array(Array.prototype.slice.call(arr, start, end));
}
/**
 * @param {Uint8Array} arr - The Uint8Array you want to slice
 * @param {number} start - The starting byte index from the beginning
 * @param {number} end -     Byte index before which to end slicing.
 * If end is unspecified, the new ArrayBuffer contains all bytes from begin to
 * the end of this ArrayBuffer. If negative, it will make the Byte index begin
 * from the last Byte.
 * @returns {Uint8Array}
 */
function uint8ArraySlice(arr, start, end) {
    return arr.slice(start, end);
}
/* harmony default export */ const slice_uint8array = (typeof Uint8Array.prototype.slice === "function" ?
    uint8ArraySlice :
    arraySlice);

;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/get_box.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * From a given buffer representing ISOBMFF data, browses inner boxes in
 * `childNames`, each element being a child box of the one before it.
 * Returns `null` if one of the child (or if the parent) is not found.
 * @param {Uint8Array} buf
 * @param {number[]} childNames
 * @returns {Uint8Array|null}
 */
function getChildBox(buf, childNames) {
    let currBox = buf;
    for (const childName of childNames) {
        const box = getBoxContent(currBox, childName);
        if (box === null) {
            return null;
        }
        currBox = box;
    }
    return currBox;
}
/**
 * Returns the content of a box based on its name.
 * `null` if not found.
 * @param {Uint8Array} buf - the isobmff data
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 byte integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {UInt8Array|null}
 */
function getBoxContent(buf, boxName) {
    const offsets = get_box_getBoxOffsets(buf, boxName);
    return offsets !== null ? buf.subarray(offsets[1], offsets[2]) :
        null;
}
/**
 * Reads the whole ISOBMFF and returns the content of all boxes with the given
 * name, in order.
 * @param {Uint8Array} buf - the isobmff data
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 byte integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {Array.<Uint8Array>}
 */
function getBoxesContent(buf, boxName) {
    const ret = [];
    let currentBuf = buf;
    while (true) {
        const offsets = get_box_getBoxOffsets(currentBuf, boxName);
        if (offsets === null) {
            return ret;
        }
        // Guard against a (very highly improbable) infinite loop
        assert_assert(offsets[2] !== 0 && currentBuf.length !== 0);
        ret.push(currentBuf.subarray(offsets[1], offsets[2]));
        currentBuf = currentBuf.subarray(offsets[2]);
    }
}
/**
 * Returns an ISOBMFF box - size and name included - based on its name.
 * `null` if not found.
 * @param {Uint8Array} buf - the isobmff data
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 byte integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {UInt8Array|null}
 */
function getBox(buf, boxName) {
    const offsets = get_box_getBoxOffsets(buf, boxName);
    return offsets !== null ? buf.subarray(offsets[0], offsets[2]) :
        null;
}
/**
 * Returns byte offsets for the start of the box, the start of its content and
 * the end of the box (not inclusive).
 *
 * `null` if not found.
 *
 * If found, the tuple returned has three elements, all numbers:
 *   1. The starting byte corresponding to the start of the box (from its size)
 *   2. The beginning of the box content - meaning the first byte after the
 *      size and the name of the box.
 *   3. The first byte after the end of the box, might be equal to `buf`'s
 *      length if we're considering the last box.
 * @param {Uint8Array} buf - the isobmff data
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 byte integer
 * generated from encoding the corresponding ASCII in big endian.
 * @returns {Array.<number>|null}
 */
function get_box_getBoxOffsets(buf, boxName) {
    const len = buf.length;
    let boxBaseOffset = 0;
    let name;
    let lastBoxSize = 0;
    let lastOffset;
    while (boxBaseOffset + 8 <= len) {
        lastOffset = boxBaseOffset;
        lastBoxSize = be4toi(buf, lastOffset);
        lastOffset += 4;
        name = be4toi(buf, lastOffset);
        lastOffset += 4;
        if (lastBoxSize === 0) {
            lastBoxSize = len - boxBaseOffset;
        }
        else if (lastBoxSize === 1) {
            if (lastOffset + 8 > len) {
                return null;
            }
            lastBoxSize = be8toi(buf, lastOffset);
            lastOffset += 8;
        }
        if (lastBoxSize < 0) {
            throw new Error("ISOBMFF: Size out of range");
        }
        if (name === boxName) {
            if (boxName === 0x75756964 /* === "uuid" */) {
                lastOffset += 16; // Skip uuid name
            }
            return [boxBaseOffset, lastOffset, boxBaseOffset + lastBoxSize];
        }
        else {
            boxBaseOffset += lastBoxSize;
        }
    }
    return null;
}
/**
 * Gives the content of a specific UUID box.
 * `undefined` if that box is not found.
 *
 * If found, the returned Uint8Array contains just the box's content: the box
 * without its name and size.
 * @param {Uint8Array} buf
 * @param {Number} id1
 * @param {Number} id2
 * @param {Number} id3
 * @param {Number} id4
 * @returns {Uint8Array|undefined}
 */
function getUuidContent(buf, id1, id2, id3, id4) {
    const len = buf.length;
    let boxSize;
    for (let boxBaseOffset = 0; boxBaseOffset < len; boxBaseOffset += boxSize) {
        let currentOffset = boxBaseOffset;
        boxSize = be4toi(buf, currentOffset);
        currentOffset += 4;
        const boxName = be4toi(buf, currentOffset);
        currentOffset += 4;
        if (boxSize === 0) {
            boxSize = len - boxBaseOffset;
        }
        else if (boxSize === 1) {
            if (currentOffset + 8 > len) {
                return undefined;
            }
            boxSize = be8toi(buf, currentOffset);
            currentOffset += 8;
        }
        if (boxName === 0x75756964 /* === "uuid" */ &&
            currentOffset + 16 <= len &&
            be4toi(buf, currentOffset) === id1 &&
            be4toi(buf, currentOffset + 4) === id2 &&
            be4toi(buf, currentOffset + 8) === id3 &&
            be4toi(buf, currentOffset + 12) === id4) {
            currentOffset += 16;
            return buf.subarray(currentOffset, boxBaseOffset + boxSize);
        }
    }
}
/**
 * For the next encountered box, return byte offsets corresponding to:
 *   1. the starting byte offset for the next box (should always be equal to
 *       `0`).
 *   2. The beginning of the box content - meaning the first byte after the
 *      size and the name of the box.
 *   3. The first byte after the end of the box, might be equal to `buf`'s
 *      length if we're considering the last box.
 *
 * `null` if no box is found.
 * @param {Uint8Array} buf - the isobmff data
 * @param {Number} boxName - the 4-letter 'name' of the box as a 4 byte integer
 * generated from encoding the corresponding ASCII in big endian.
 */
function getNextBoxOffsets(buf) {
    const len = buf.length;
    if (len < 8) {
        src_log.warn("ISOBMFF: box inferior to 8 bytes, cannot find offsets");
        return null;
    }
    let lastOffset = 0;
    let boxSize = be4toi(buf, lastOffset);
    lastOffset += 4;
    const name = be4toi(buf, lastOffset);
    lastOffset += 4;
    if (boxSize === 0) {
        boxSize = len;
    }
    else if (boxSize === 1) {
        if (lastOffset + 8 > len) {
            src_log.warn("ISOBMFF: box too short, cannot find offsets");
            return null;
        }
        boxSize = be8toi(buf, lastOffset);
        lastOffset += 8;
    }
    if (boxSize < 0) {
        throw new Error("ISOBMFF: Size out of range");
    }
    if (name === 0x75756964 /* === "uuid" */) {
        lastOffset += 16; // Skip uuid name
    }
    return [0, lastOffset, boxSize];
}


;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/take_pssh_out.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Replace every PSSH box from an ISOBMFF segment by FREE boxes and returns the
 * removed PSSH in an array.
 * Useful to manually manage encryption while avoiding the round-trip with the
 * browser's encrypted event.
 * @param {Uint8Array} data - the ISOBMFF segment
 * @returns {Array.<Uint8Array>} - The extracted PSSH boxes. In the order they
 * are encountered.
 */
function takePSSHOut(data) {
    let i = 0;
    const moov = getBoxContent(data, 0x6D6F6F76 /* moov */);
    if (moov === null) {
        return [];
    }
    const psshBoxes = [];
    while (i < moov.length) {
        let psshOffsets;
        try {
            psshOffsets = get_box_getBoxOffsets(moov, 0x70737368 /* pssh */);
        }
        catch (e) {
            const err = e instanceof Error ? e : "";
            src_log.warn("Error while removing PSSH from ISOBMFF", err);
            return psshBoxes;
        }
        if (psshOffsets == null) {
            return psshBoxes;
        }
        const pssh = slice_uint8array(moov, psshOffsets[0], psshOffsets[2]);
        const systemId = getPsshSystemID(pssh, psshOffsets[1] - psshOffsets[0]);
        if (systemId !== undefined) {
            psshBoxes.push({ systemId, data: pssh });
        }
        // replace by `free` box.
        moov[psshOffsets[0] + 4] = 0x66;
        moov[psshOffsets[0] + 5] = 0x72;
        moov[psshOffsets[0] + 6] = 0x65;
        moov[psshOffsets[0] + 7] = 0x65;
        i = psshOffsets[2];
    }
    return psshBoxes;
}
/**
 * Parse systemId from a "pssh" box into an hexadecimal string.
 * `undefined` if we could not extract a systemId.
 * @param {Uint8Array} buff - The pssh box
 * @param {number} initialDataOffset - offset of the first byte after the size
 * and name in this pssh box.
 * @returns {string|undefined}
 */
function getPsshSystemID(buff, initialDataOffset) {
    if (buff[initialDataOffset] > 1) {
        src_log.warn("ISOBMFF: un-handled PSSH version");
        return undefined;
    }
    const offset = initialDataOffset +
        4; /* version + flags */
    if (offset + 16 > buff.length) {
        return undefined;
    }
    const systemIDBytes = slice_uint8array(buff, offset, offset + 16);
    return bytesToHex(systemIDBytes);
}

;// CONCATENATED MODULE: ./src/compat/eme/constants.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// The way "pssh" will be written in ISOBMFF files
const PSSH_TO_INTEGER = be4toi(strToUtf8("pssh"), 0);

;// CONCATENATED MODULE: ./src/compat/eme/get_init_data.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Take in input initialization data from an encrypted event and generate the
 * corresponding array of initialization data values from it.
 *
 * At the moment, this function only handles initialization data which have the
 * "cenc" initialization data type.
 * It will just return a single value with an `undefined` `systemId` for all
 * other types of data.
 * @param {Uint8Array} initData - Raw initialization data
 * @returns {Array.<Object>}
 */
function getInitializationDataValues(initData) {
    const result = [];
    let offset = 0;
    while (offset < initData.length) {
        if (initData.length < offset + 8 ||
            be4toi(initData, offset + 4) !== PSSH_TO_INTEGER) {
            src_log.warn("Compat: Unrecognized initialization data. Use as is.");
            return [{ systemId: undefined,
                    data: initData }];
        }
        const len = be4toi(new Uint8Array(initData), offset);
        if (offset + len > initData.length) {
            src_log.warn("Compat: Unrecognized initialization data. Use as is.");
            return [{ systemId: undefined,
                    data: initData }];
        }
        const currentPSSH = initData.subarray(offset, offset + len);
        const systemId = getPsshSystemID(currentPSSH, 8);
        const currentItem = { systemId, data: currentPSSH };
        if (isPSSHAlreadyEncountered(result, currentItem)) {
            // As we observed on some browsers (IE and Edge), the initialization data on
            // some segments have sometimes duplicated PSSH when sent through an encrypted
            // event (but not when the corresponding segment has been pushed to the
            // SourceBuffer).
            // We prefer filtering them out, to avoid further issues.
            src_log.warn("Compat: Duplicated PSSH found in initialization data, removing it.");
        }
        else {
            result.push(currentItem);
        }
        offset += len;
    }
    if (offset !== initData.length) {
        src_log.warn("Compat: Unrecognized initialization data. Use as is.");
        return [{ systemId: undefined,
                data: initData }];
    }
    return result;
}
/**
 * Returns `true` if the given PSSH has already been stored in the
 * `encounteredPSSHs` cache given.
 * Returns `false` otherwise.
 * @param {Array.<Object>} encounteredPSSHs
 * @param {Uint8Array} pssh
 * @returns {boolean}
 */
function isPSSHAlreadyEncountered(encounteredPSSHs, pssh) {
    for (let i = 0; i < encounteredPSSHs.length; i++) {
        const item = encounteredPSSHs[i];
        if (pssh.systemId === undefined ||
            item.systemId === undefined ||
            pssh.systemId === item.systemId) {
            if (areArraysOfNumbersEqual(pssh.data, item.data)) {
                return true;
            }
        }
    }
    return false;
}
/**
 * Take out the two things we need on an encryptedEvent:
 *   - the initialization Data
 *   - the initialization Data type
 *
 * @param {MediaEncryptedEvent} encryptedEvent - Payload received with an
 * "encrypted" event.
 * @returns {Object} - Initialization data and Initialization data type.
 * @throws {EncryptedMediaError} - Throws if no initialization data is
 * encountered in the given event.
 */
function getInitData(encryptedEvent) {
    const { initData, initDataType } = encryptedEvent;
    if (initData == null) {
        src_log.warn("Compat: No init data found on media encrypted event.");
        return null;
    }
    const initDataBytes = new Uint8Array(initData);
    const values = getInitializationDataValues(initDataBytes);
    return { type: initDataType, values };
}

;// CONCATENATED MODULE: ./src/core/decrypt/attach_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Dispose of the MediaKeys instance attached to the given media element, if
 * one.
 * @param {Object} mediaElement
 */
function disableMediaKeys(mediaElement) {
    media_keys_infos_store.setState(mediaElement, null);
    setMediaKeys(mediaElement, null);
}
/**
 * Attach MediaKeys and its associated state to an HTMLMediaElement.
 *
 * /!\ Mutates heavily MediaKeysInfosStore
 * @param {Object} mediaKeysInfos
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
async function attachMediaKeys(mediaElement, { keySystemOptions, loadedSessionsStore, mediaKeySystemAccess, mediaKeys }, cancelSignal) {
    const previousState = media_keys_infos_store.getState(mediaElement);
    const closeAllSessions = previousState !== null &&
        previousState.loadedSessionsStore !== loadedSessionsStore ?
        previousState.loadedSessionsStore.closeAllSessions() :
        Promise.resolve();
    await closeAllSessions;
    // If this task has been cancelled while we were closing previous sessions,
    // stop now (and thus avoid setting the new media keys);
    if (cancelSignal.isCancelled) {
        throw cancelSignal.cancellationError;
    }
    media_keys_infos_store.setState(mediaElement, { keySystemOptions,
        mediaKeySystemAccess,
        mediaKeys,
        loadedSessionsStore });
    if (mediaElement.mediaKeys === mediaKeys) {
        return;
    }
    src_log.info("DRM: Attaching MediaKeys to the media element");
    setMediaKeys(mediaElement, mediaKeys);
    src_log.info("DRM: MediaKeys attached with success");
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/is_session_usable.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * If all key statuses attached to session are valid (either not
 * "expired" or "internal-error"), return true.
 * If not, return false.
 * @param {MediaKeySession} loadedSession
 * @returns {MediaKeySession}
 */
function isSessionUsable(loadedSession) {
    if (loadedSession.sessionId === "") {
        return false;
    }
    const keyStatusesMap = loadedSession.keyStatuses;
    const keyStatuses = [];
    keyStatusesMap.forEach((keyStatus) => {
        keyStatuses.push(keyStatus);
    });
    if (keyStatuses.length <= 0) {
        src_log.debug("DRM: isSessionUsable: MediaKeySession given has an empty keyStatuses", loadedSession.sessionId);
        return false;
    }
    if (arrayIncludes(keyStatuses, "expired")) {
        src_log.debug("DRM: isSessionUsable: MediaKeySession given has an expired key", loadedSession.sessionId);
        return false;
    }
    if (arrayIncludes(keyStatuses, "internal-error")) {
        src_log.debug("DRM: isSessionUsable: MediaKeySession given has a key with an " +
            "internal-error", loadedSession.sessionId);
        return false;
    }
    src_log.debug("DRM: isSessionUsable: MediaKeySession is usable", loadedSession.sessionId);
    return true;
}

;// CONCATENATED MODULE: ./src/core/decrypt/create_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create a new Session or load a persistent one on the given MediaKeys,
 * according to wanted settings and what is currently stored.
 *
 * If session creating fails, remove the oldest MediaKeySession loaded and
 * retry.
 *
 * /!\ This only creates new sessions.
 * It will fail if loadedSessionsStore already has a MediaKeySession with
 * the given initialization data.
 * @param {Object} stores
 * @param {Object} initData
 * @param {string} wantedSessionType
 * @param {Object} cancelSignal
 * @returns {Promise}
 */
function createSession(stores, initData, wantedSessionType, cancelSignal) {
    const { loadedSessionsStore, persistentSessionsStore } = stores;
    if (wantedSessionType === "temporary") {
        return createTemporarySession(loadedSessionsStore, initData);
    }
    else if (persistentSessionsStore === null) {
        src_log.warn("DRM: Cannot create persistent MediaKeySession, " +
            "PersistentSessionsStore not created.");
        return createTemporarySession(loadedSessionsStore, initData);
    }
    return createAndTryToRetrievePersistentSession(loadedSessionsStore, persistentSessionsStore, initData, cancelSignal);
}
/**
 * Create a new temporary MediaKeySession linked to the given initData and
 * initDataType.
 * @param {Object} loadedSessionsStore
 * @param {Object} initData
 * @returns {Promise}
 */
function createTemporarySession(loadedSessionsStore, initData) {
    src_log.info("DRM: Creating a new temporary session");
    const entry = loadedSessionsStore.createSession(initData, "temporary");
    return Promise.resolve({ type: "created-session" /* MediaKeySessionLoadingType.Created */,
        value: entry });
}
/**
 * Create a persistent MediaKeySession and try to load on it a previous
 * MediaKeySession linked to the same initialization data.
 * @param {Object} loadedSessionsStore
 * @param {Object} persistentSessionsStore
 * @param {Object} initData
 * @param {Object} cancelSignal
 * @returns {Promise}
 */
async function createAndTryToRetrievePersistentSession(loadedSessionsStore, persistentSessionsStore, initData, cancelSignal) {
    if (cancelSignal.cancellationError !== null) {
        throw cancelSignal.cancellationError;
    }
    src_log.info("DRM: Creating persistent MediaKeySession");
    const entry = loadedSessionsStore.createSession(initData, "persistent-license");
    const storedEntry = persistentSessionsStore.getAndReuse(initData);
    if (storedEntry === null) {
        return { type: "created-session" /* MediaKeySessionLoadingType.Created */,
            value: entry };
    }
    try {
        const hasLoadedSession = await loadedSessionsStore.loadPersistentSession(entry.mediaKeySession, storedEntry.sessionId);
        if (!hasLoadedSession) {
            src_log.warn("DRM: No data stored for the loaded session");
            persistentSessionsStore.delete(storedEntry.sessionId);
            // The EME specification is kind of implicit about it but it seems from my
            // understanding (Paul B.) that a MediaKeySession on wich a `load` attempt
            // did not succeed due to the loaded session not being found by the
            // browser/CDM, should neither be used anymore nor closed.
            // Thus, we're creating another `"persistent-license"` `MediaKeySession`
            // in that specific case.
            loadedSessionsStore.removeSessionWithoutClosingIt(entry.mediaKeySession);
            const newEntry = loadedSessionsStore.createSession(initData, "persistent-license");
            return { type: "created-session" /* MediaKeySessionLoadingType.Created */,
                value: newEntry };
        }
        if (hasLoadedSession && isSessionUsable(entry.mediaKeySession)) {
            persistentSessionsStore.add(initData, initData.keyIds, entry.mediaKeySession);
            src_log.info("DRM: Succeeded to load persistent session.");
            return { type: "loaded-persistent-session" /* MediaKeySessionLoadingType.LoadedPersistentSession */,
                value: entry };
        }
        // Unusable persistent session: recreate a new session from scratch.
        src_log.warn("DRM: Previous persistent session not usable anymore.");
        return recreatePersistentSession();
    }
    catch (err) {
        src_log.warn("DRM: Unable to load persistent session: " +
            (err instanceof Error ? err.toString() :
                "Unknown Error"));
        return recreatePersistentSession();
    }
    /**
     * Helper function to close and restart the current persistent session
     * considered, and re-create it from scratch.
     * @returns {Observable}
     */
    async function recreatePersistentSession() {
        if (cancelSignal.cancellationError !== null) {
            throw cancelSignal.cancellationError;
        }
        src_log.info("DRM: Removing previous persistent session.");
        const persistentEntry = persistentSessionsStore.get(initData);
        if (persistentEntry !== null) {
            persistentSessionsStore.delete(persistentEntry.sessionId);
        }
        try {
            await loadedSessionsStore.closeSession(entry.mediaKeySession);
        }
        catch (err) {
            // From reading the EME specification in details, it seems that a
            // `MediaKeySession`'s ability to be closed is tightly linked to its
            // possession of a "sanitized session ID" set as `sessionId`.
            // This is never clearly stated however and I'm (Paul B.) always afraid of
            // breaking compatibility when it comes to EME code.
            // So we still try to close the `MediaKeySession` in any case, only, if it
            // fails and it didn't had any `sessionId` set, we just ignore the error.
            // Note that trying to close the `MediaKeySession` might incur some delays
            // in those rare cases.
            if (entry.mediaKeySession.sessionId !== "") {
                throw err;
            }
            loadedSessionsStore.removeSessionWithoutClosingIt(entry.mediaKeySession);
        }
        if (cancelSignal.cancellationError !== null) {
            throw cancelSignal.cancellationError;
        }
        const newEntry = loadedSessionsStore.createSession(initData, "persistent-license");
        return { type: "created-session" /* MediaKeySessionLoadingType.Created */,
            value: newEntry };
    }
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/clean_old_loaded_sessions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Close sessions from the loadedSessionsStore to allow at maximum `limit`
 * stored MediaKeySessions in it.
 *
 * Emit event when a MediaKeySession begin to be closed and another when the
 * MediaKeySession is closed.
 * @param {Object} loadedSessionsStore
 * @returns {Observable}
 */
async function cleanOldLoadedSessions(loadedSessionsStore, limit) {
    if (limit < 0 || limit >= loadedSessionsStore.getLength()) {
        return;
    }
    const proms = [];
    const entries = loadedSessionsStore.getAll().slice(); // clone
    const toDelete = entries.length - limit;
    for (let i = 0; i < toDelete; i++) {
        const entry = entries[i];
        proms.push(loadedSessionsStore.closeSession(entry.mediaKeySession));
    }
    await Promise.all(proms);
}

;// CONCATENATED MODULE: ./src/core/decrypt/create_or_load_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Handle MediaEncryptedEvents sent by a HTMLMediaElement:
 * Either create a MediaKeySession, recuperate a previous MediaKeySession or
 * load a persistent session.
 *
 * Some previously created MediaKeySession can be closed in this process to
 * respect the maximum limit of concurrent MediaKeySession, as defined by the
 * `EME_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS` config property.
 *
 * You can refer to the events emitted to know about the current situation.
 * @param {Object} initializationData
 * @param {Object} stores
 * @param {string} wantedSessionType
 * @param {number} maxSessionCacheSize
 * @param {Object} cancelSignal
 * @returns {Promise}
 */
async function createOrLoadSession(initializationData, stores, wantedSessionType, maxSessionCacheSize, cancelSignal) {
    /** Store previously-loaded compatible MediaKeySession, if one. */
    let previousLoadedSession = null;
    const { loadedSessionsStore, persistentSessionsStore } = stores;
    const entry = loadedSessionsStore.reuse(initializationData);
    if (entry !== null) {
        previousLoadedSession = entry.mediaKeySession;
        if (isSessionUsable(previousLoadedSession)) {
            src_log.info("DRM: Reuse loaded session", previousLoadedSession.sessionId);
            return { type: "loaded-open-session" /* MediaKeySessionLoadingType.LoadedOpenSession */,
                value: { mediaKeySession: previousLoadedSession,
                    sessionType: entry.sessionType,
                    keySessionRecord: entry.keySessionRecord } };
        }
        else if (persistentSessionsStore !== null) {
            // If the session is not usable anymore, we can also remove it from the
            // PersistentSessionsStore.
            // TODO Are we sure this is always what we want?
            if (entry.mediaKeySession.sessionId !== "") {
                persistentSessionsStore.delete(entry.mediaKeySession.sessionId);
            }
        }
    }
    if (previousLoadedSession !== null) {
        await loadedSessionsStore.closeSession(previousLoadedSession);
        if (cancelSignal.cancellationError !== null) {
            throw cancelSignal.cancellationError; // stop here if cancelled since
        }
    }
    await cleanOldLoadedSessions(loadedSessionsStore, maxSessionCacheSize);
    if (cancelSignal.cancellationError !== null) {
        throw cancelSignal.cancellationError; // stop here if cancelled since
    }
    const evt = await createSession(stores, initializationData, wantedSessionType, cancelSignal);
    return { type: evt.type,
        value: { mediaKeySession: evt.value.mediaKeySession,
            sessionType: evt.value.sessionType,
            keySessionRecord: evt.value.keySessionRecord } };
}

;// CONCATENATED MODULE: ./src/compat/can_reuse_media_keys.ts

/**
 * Returns `true` if a `MediaKeys` instance (the  `Encrypted Media Extension`
 * concept) can be reused between contents.
 *
 * This should usually be the case but we found rare devices where this would
 * cause problem:
 *   - (2022-10-26): WebOS (LG TVs) 2021 and 2022 just rebuffered indefinitely
 *     when loading a content already-loaded on the HTMLMediaElement.
 *
 * @returns {boolean}
 */
function canReuseMediaKeys() {
    return !(isWebOs2021 || isWebOs2022);
}

;// CONCATENATED MODULE: ./src/compat/should_renew_media_key_system_access.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the current target require the MediaKeySystemAccess to be
 * renewed on each content.
 * @returns {Boolean}
 */
function shouldRenewMediaKeySystemAccess() {
    return isIE11;
}

;// CONCATENATED MODULE: ./src/utils/flat_map.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Map each element using a mapping function, then flat the result into
 * a new array.
 * @param {Array.<*>} originalArray
 * @param {Function} fn
 */
function flatMap(originalArray, fn) {
    /* eslint-disable @typescript-eslint/unbound-method */
    if (typeof Array.prototype.flatMap === "function") {
        return originalArray.flatMap(fn);
    }
    /* eslint-enable @typescript-eslint/unbound-method */
    return originalArray.reduce((acc, arg) => {
        const r = fn(arg);
        if (Array.isArray(r)) {
            acc.push(...r);
            return acc;
        }
        acc.push(r);
        return acc;
    }, []);
}

;// CONCATENATED MODULE: ./src/core/decrypt/find_key_system.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * @param {Array.<Object>} keySystems
 * @param {MediaKeySystemAccess} currentKeySystemAccess
 * @param {Object} currentKeySystemOptions
 * @returns {null|Object}
 */
function checkCachedMediaKeySystemAccess(keySystems, currentKeySystemAccess, currentKeySystemOptions) {
    const mksConfiguration = currentKeySystemAccess.getConfiguration();
    if (shouldRenewMediaKeySystemAccess() || mksConfiguration == null) {
        return null;
    }
    const firstCompatibleOption = keySystems.filter((ks) => {
        // TODO Do it with MediaKeySystemAccess.prototype.keySystem instead
        if (ks.type !== currentKeySystemOptions.type) {
            return false;
        }
        if ((ks.persistentLicense === true || ks.persistentStateRequired === true) &&
            mksConfiguration.persistentState !== "required") {
            return false;
        }
        if (ks.distinctiveIdentifierRequired === true &&
            mksConfiguration.distinctiveIdentifier !== "required") {
            return false;
        }
        return true;
    })[0];
    if (firstCompatibleOption != null) {
        return { keySystemOptions: firstCompatibleOption,
            keySystemAccess: currentKeySystemAccess };
    }
    return null;
}
/**
 * Find key system canonical name from key system type.
 * @param {string} ksType - Obtained via inversion
 * @returns {string|undefined} - Either the canonical name, or undefined.
 */
function findKeySystemCanonicalName(ksType) {
    const { EME_KEY_SYSTEMS } = src_config.getCurrent();
    for (const ksName of Object.keys(EME_KEY_SYSTEMS)) {
        if (arrayIncludes(EME_KEY_SYSTEMS[ksName], ksType)) {
            return ksName;
        }
    }
    return undefined;
}
/**
 * Build configuration for the requestMediaKeySystemAccess EME API, based
 * on the current keySystem object.
 * @param {string|undefined} ksName - Generic name for the key system. e.g.
 * "clearkey", "widevine", "playready". Can be used to make exceptions depending
 * on it.
 * @param {string|undefined} ksType - KeySystem complete type (e.g.
 * "com.widevine.alpha").
 * @param {Object} keySystem
 * @returns {Array.<Object>} - Configuration to give to the
 * requestMediaKeySystemAccess API.
 */
function buildKeySystemConfigurations(ksName, ksType, keySystem) {
    const sessionTypes = ["temporary"];
    let persistentState = "optional";
    let distinctiveIdentifier = "optional";
    if (keySystem.persistentLicense === true) {
        persistentState = "required";
        sessionTypes.push("persistent-license");
    }
    if (keySystem.persistentStateRequired === true) {
        persistentState = "required";
    }
    if (keySystem.distinctiveIdentifierRequired === true) {
        distinctiveIdentifier = "required";
    }
    const { EME_DEFAULT_WIDEVINE_ROBUSTNESSES, EME_DEFAULT_PLAYREADY_ROBUSTNESSES } = src_config.getCurrent();
    // Set robustness, in order of consideration:
    //   1. the user specified its own robustnesses
    //   2. a "widevine" key system is used, in that case set the default widevine
    //      robustnesses as defined in the config
    //   3. set an undefined robustness
    let videoRobustnesses;
    if (!isNullOrUndefined(keySystem.videoRobustnesses)) {
        videoRobustnesses = keySystem.videoRobustnesses;
    }
    else if (ksName === "widevine") {
        videoRobustnesses = EME_DEFAULT_WIDEVINE_ROBUSTNESSES;
    }
    else if (ksType === "com.microsoft.playready.recommendation") {
        videoRobustnesses = EME_DEFAULT_PLAYREADY_ROBUSTNESSES;
    }
    else {
        videoRobustnesses = [];
    }
    let audioRobustnesses;
    if (!isNullOrUndefined(keySystem.audioRobustnesses)) {
        audioRobustnesses = keySystem.audioRobustnesses;
    }
    else if (ksName === "widevine") {
        audioRobustnesses = EME_DEFAULT_WIDEVINE_ROBUSTNESSES;
    }
    else if (ksType === "com.microsoft.playready.recommendation") {
        audioRobustnesses = EME_DEFAULT_PLAYREADY_ROBUSTNESSES;
    }
    else {
        audioRobustnesses = [];
    }
    if (videoRobustnesses.length === 0) {
        videoRobustnesses.push(undefined);
    }
    if (audioRobustnesses.length === 0) {
        audioRobustnesses.push(undefined);
    }
    // From the W3 EME spec, we have to provide videoCapabilities and
    // audioCapabilities.
    // These capabilities must specify a codec (even though you can use a
    // completely different codec afterward).
    // It is also strongly recommended to specify the required security
    // robustness. As we do not want to forbide any security level, we specify
    // every existing security level from highest to lowest so that the best
    // security level is selected.
    // More details here:
    // https://storage.googleapis.com/wvdocs/Chrome_EME_Changes_and_Best_Practices.pdf
    // https://www.w3.org/TR/encrypted-media/#get-supported-configuration-and-consent
    const videoCapabilities = flatMap(videoRobustnesses, (robustness) => ["video/mp4;codecs=\"avc1.4d401e\"",
        "video/mp4;codecs=\"avc1.42e01e\"",
        "video/webm;codecs=\"vp8\""].map(contentType => {
        return robustness !== undefined ? { contentType, robustness } :
            { contentType };
    }));
    const audioCapabilities = flatMap(audioRobustnesses, (robustness) => ["audio/mp4;codecs=\"mp4a.40.2\"",
        "audio/webm;codecs=opus"].map(contentType => {
        return robustness !== undefined ? { contentType, robustness } :
            { contentType };
    }));
    // TODO Re-test with a set contentType but an undefined robustness on the
    // STBs on which this problem was found.
    //
    // add another with no {audio,video}Capabilities for some legacy browsers.
    // As of today's spec, this should return NotSupported but the first
    // candidate configuration should be good, so we should have no downside
    // doing that.
    // initDataTypes: ["cenc"],
    // videoCapabilities: undefined,
    // audioCapabilities: undefined,
    // distinctiveIdentifier,
    // persistentState,
    // sessionTypes,
    return [{ initDataTypes: ["cenc"],
            videoCapabilities,
            audioCapabilities,
            distinctiveIdentifier,
            persistentState,
            sessionTypes }];
}
/**
 * Try to find a compatible key system from the keySystems array given.
 *
 * This function will request a MediaKeySystemAccess based on the various
 * keySystems provided.
 *
 * This Promise might either:
 *   - resolves the MediaKeySystemAccess and the keySystems as an object, when
 *     found.
 *   - reject if no compatible key system has been found.
 *
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystems - The keySystems you want to test.
 * @param {Object} cancelSignal
 * @returns {Promise.<Object>}
 */
function getMediaKeySystemAccess(mediaElement, keySystemsConfigs, cancelSignal) {
    src_log.info("DRM: Searching for compatible MediaKeySystemAccess");
    const currentState = media_keys_infos_store.getState(mediaElement);
    if (currentState != null) {
        // Fast way to find a compatible keySystem if the currently loaded
        // one as exactly the same compatibility options.
        const cachedKeySystemAccess = checkCachedMediaKeySystemAccess(keySystemsConfigs, currentState.mediaKeySystemAccess, currentState.keySystemOptions);
        if (cachedKeySystemAccess !== null) {
            src_log.info("DRM: Found cached compatible keySystem");
            return Promise.resolve({
                type: "reuse-media-key-system-access",
                value: { mediaKeySystemAccess: cachedKeySystemAccess.keySystemAccess,
                    options: cachedKeySystemAccess.keySystemOptions },
            });
        }
    }
    /**
     * Array of set keySystems for this content.
     * Each item of this array is an object containing the following keys:
     *   - keyName {string}: keySystem canonical name (e.g. "widevine")
     *   - keyType {string}: keySystem type (e.g. "com.widevine.alpha")
     *   - keySystem {Object}: the original keySystem object
     * @type {Array.<Object>}
     */
    const keySystemsType = keySystemsConfigs.reduce((arr, keySystemOptions) => {
        const { EME_KEY_SYSTEMS } = src_config.getCurrent();
        const managedRDNs = EME_KEY_SYSTEMS[keySystemOptions.type];
        let ksType;
        if (managedRDNs != null) {
            ksType = managedRDNs.map((keyType) => {
                const keyName = keySystemOptions.type;
                return { keyName, keyType, keySystemOptions };
            });
        }
        else {
            const keyName = findKeySystemCanonicalName(keySystemOptions.type);
            const keyType = keySystemOptions.type;
            ksType = [{ keyName, keyType, keySystemOptions }];
        }
        return arr.concat(ksType);
    }, []);
    return recursivelyTestKeySystems(0);
    /**
     * Test all key system configuration stored in `keySystemsType` one by one
     * recursively.
     * Returns a Promise which will emit the MediaKeySystemAccess if one was
     * found compatible with one of the configurations or just reject if none
     * were found to be compatible.
     * @param {Number} index - The index in `keySystemsType` to start from.
     * Should be set to `0` when calling directly.
     * @returns {Promise.<Object>}
     */
    async function recursivelyTestKeySystems(index) {
        // if we iterated over the whole keySystemsType Array, quit on error
        if (index >= keySystemsType.length) {
            throw new EncryptedMediaError("INCOMPATIBLE_KEYSYSTEMS", "No key system compatible with your wanted " +
                "configuration has been found in the current " +
                "browser.");
        }
        if (requestMediaKeySystemAccess == null) {
            throw new Error("requestMediaKeySystemAccess is not implemented in your browser.");
        }
        const { keyName, keyType, keySystemOptions } = keySystemsType[index];
        const keySystemConfigurations = buildKeySystemConfigurations(keyName, keyType, keySystemOptions);
        src_log.debug(`DRM: Request keysystem access ${keyType},` +
            `${index + 1} of ${keySystemsType.length}`);
        try {
            const keySystemAccess = await requestMediaKeySystemAccess(keyType, keySystemConfigurations);
            src_log.info("DRM: Found compatible keysystem", keyType, index + 1);
            return { type: "create-media-key-system-access",
                value: { options: keySystemOptions,
                    mediaKeySystemAccess: keySystemAccess } };
        }
        catch (_) {
            src_log.debug("DRM: Rejected access to keysystem", keyType, index + 1);
            if (cancelSignal.cancellationError !== null) {
                throw cancelSignal.cancellationError;
            }
            return recursivelyTestKeySystems(index + 1);
        }
    }
}

;// CONCATENATED MODULE: ./src/compat/eme/generate_key_request.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Modify "initialization data" sent to a `generateKeyRequest` EME call to
 * improve the player's browser compatibility:
 *
 *   1. some browsers/CDM have problems when the CENC PSSH box is the first
 *      encountered PSSH box in the initialization data (for the moment just
 *      Edge was noted with this behavior).
 *      We found however that it works on every browser when the CENC pssh
 *      box(es) is/are the last box(es) encountered.
 *
 *      To that end, we move CENC pssh boxes at the end of the initialization
 *      data in this function.
 *
 *   2. Some poorly encoded/packaged contents communicate both a CENC with a
 *      pssh version of 0 and one with a version of 1. We found out that this is
 *      not always well handled on some devices/browsers (on Edge and some other
 *      embedded devices that shall remain nameless for now!).
 *
 *      Here this function will filter out CENC pssh with a version different to
 *      1 when one(s) with a version of 1 is/are already present.
 *
 * If the initData is unrecognized or if a CENC PSSH is not found, this function
 * throws.
 * @param {Uint8Array} initData - Initialization data you want to patch
 * @returns {Uint8Array} - Initialization data, patched
 */
function patchInitData(initData) {
    src_log.info("Compat: Trying to move CENC PSSH from init data at the end of it.");
    let foundCencV1 = false;
    let concatenatedCencs = new Uint8Array();
    let resInitData = new Uint8Array();
    let offset = 0;
    while (offset < initData.length) {
        if (initData.length < offset + 8 ||
            be4toi(initData, offset + 4) !== PSSH_TO_INTEGER) {
            src_log.warn("Compat: unrecognized initialization data. Cannot patch it.");
            throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
        }
        const len = be4toi(new Uint8Array(initData), offset);
        if (offset + len > initData.length) {
            src_log.warn("Compat: unrecognized initialization data. Cannot patch it.");
            throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
        }
        const currentPSSH = initData.subarray(offset, offset + len);
        // yep
        if (initData[offset + 12] === 0x10 &&
            initData[offset + 13] === 0x77 &&
            initData[offset + 14] === 0xEF &&
            initData[offset + 15] === 0xEC &&
            initData[offset + 16] === 0xC0 &&
            initData[offset + 17] === 0xB2 &&
            initData[offset + 18] === 0x4D &&
            initData[offset + 19] === 0x02 &&
            initData[offset + 20] === 0xAC &&
            initData[offset + 21] === 0xE3 &&
            initData[offset + 22] === 0x3C &&
            initData[offset + 23] === 0x1E &&
            initData[offset + 24] === 0x52 &&
            initData[offset + 25] === 0xE2 &&
            initData[offset + 26] === 0xFB &&
            initData[offset + 27] === 0x4B) {
            const cencOffsets = getNextBoxOffsets(currentPSSH);
            const version = cencOffsets === null ? undefined :
                currentPSSH[cencOffsets[1]];
            src_log.info("Compat: CENC PSSH found with version", version);
            if (version === undefined) {
                src_log.warn("Compat: could not read version of CENC PSSH");
            }
            else if (foundCencV1 === (version === 1)) {
                // Either `concatenatedCencs` only contains v1 or does not contain any
                concatenatedCencs = byte_parsing_concat(concatenatedCencs, currentPSSH);
            }
            else if (version === 1) {
                src_log.warn("Compat: cenc version 1 encountered, " +
                    "removing every other cenc pssh box.");
                concatenatedCencs = currentPSSH;
                foundCencV1 = true;
            }
            else {
                src_log.warn("Compat: filtering out cenc pssh box with wrong version", version);
            }
        }
        else {
            resInitData = byte_parsing_concat(resInitData, currentPSSH);
        }
        offset += len;
    }
    if (offset !== initData.length) {
        src_log.warn("Compat: unrecognized initialization data. Cannot patch it.");
        throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
    }
    return byte_parsing_concat(resInitData, concatenatedCencs);
}
/**
 * Generate a request from session.
 * @param {MediaKeySession} session - MediaKeySession on which the request will
 * be done.
 * @param {string} initializationDataType - Initialization data type given e.g.
 * by the "encrypted" event for the corresponding request.
 * @param {Uint8Array} initializationData - Initialization data given e.g. by
 * the "encrypted" event for the corresponding request.
 * @returns {Promise} - Emit when done. Errors if fails.
 */
function generateKeyRequest(session, initializationDataType, initializationData) {
    src_log.debug("Compat: Calling generateRequest on the MediaKeySession");
    let patchedInit;
    try {
        patchedInit = patchInitData(initializationData);
    }
    catch (_e) {
        patchedInit = initializationData;
    }
    const initDataType = initializationDataType !== null && initializationDataType !== void 0 ? initializationDataType : "";
    return session.generateRequest(initDataType, patchedInit)
        .catch((error) => {
        if (initDataType !== "" || !(error instanceof TypeError)) {
            throw error;
        }
        // On newer EME versions of the specification, the initialization data
        // type given to generateRequest cannot be an empty string (it returns
        // a rejected promise with a TypeError in that case).
        // Retry with a default "cenc" value for initialization data type if
        // we're in that condition.
        src_log.warn("Compat: error while calling `generateRequest` with an empty " +
            "initialization data type. Retrying with a default \"cenc\" value.", error);
        return session.generateRequest("cenc", patchedInit);
    });
}

;// CONCATENATED MODULE: ./src/compat/eme/load_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES = 100;
/**
 * Load a persistent session, based on its `sessionId`, on the given
 * MediaKeySession.
 *
 * Returns a Promise which resolves with:
 *   - `true` if the persistent MediaKeySession was found and loaded
 *   - `false` if no persistent MediaKeySession was found with that `sessionId`.
 *
 * The Promise rejects if anything goes wrong in the process.
 * @param {MediaKeySession} session
 * @param {string} sessionId
 * @returns {Promise.<boolean>}
 */
async function loadSession(session, sessionId) {
    src_log.info("Compat/DRM: Load persisted session", sessionId);
    const isLoaded = await session.load(sessionId);
    if (!isLoaded || session.keyStatuses.size > 0) {
        return isLoaded;
    }
    // A browser race condition can exist, seen for example in some
    // Chromium/Chrome versions where the `keyStatuses` property from a loaded
    // MediaKeySession would not be populated directly as the load answer but
    // asynchronously after.
    return new Promise((resolve) => {
        session.addEventListener("keystatuseschange", resolveWithLoadedStatus);
        const timeout = setTimeout(resolveWithLoadedStatus, EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES);
        function resolveWithLoadedStatus() {
            cleanUp();
            resolve(isLoaded);
        }
        function cleanUp() {
            clearTimeout(timeout);
            session.removeEventListener("keystatuseschange", resolveWithLoadedStatus);
        }
    });
}

;// CONCATENATED MODULE: ./src/compat/eme/close_session.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Close the given `MediaKeySession` and returns a Promise resolving when the
 * session is closed.
 * This promise does not reject, even if we're unable to close the
 * `MediaKeySession`.
 *
 * Note that there is a lot of browser issues linked to the impossibility to
 * either close a MediaKeySession or to know if a MediaKeySession was closed.
 * Due to this, the returned Promise might take some time before resolving on
 * some devices.
 * @param {MediaKeySession|Object} session
 * @returns {Promise.<undefined>}
 */
function closeSession(session) {
    const timeoutCanceller = new TaskCanceller();
    return Promise.race([
        session.close()
            .then(() => { timeoutCanceller.cancel(); }),
        // The `closed` promise may resolve, even if `close()` result has not
        // (seen at some point on Firefox).
        session.closed
            .then(() => { timeoutCanceller.cancel(); }),
        waitTimeoutAndCheck(),
    ]);
    /**
     * If the session is not closed after 1000ms, try to communicate with the
     * MediaKeySession and check if an error is returned.
     * This is needed because on some browsers with poor EME implementation,
     * knowing when a MediaKeySession is closed is actually a hard task.
     *
     * The returned Promise will never reject.
     * @returns {Promise.<undefined>}
     */
    async function waitTimeoutAndCheck() {
        try {
            await cancellableSleep(1000, timeoutCanceller.signal);
            await tryUpdatingSession();
        }
        catch (err) {
            if (err instanceof CancellationError) { // cancelled == session closed
                return;
            }
            const message = err instanceof Error ?
                err.message :
                "Unknown error made it impossible to close the session";
            src_log.error(`DRM: ${message}`);
        }
    }
    /**
     * Try to update `MediaKeySession` and check its error if it failed.
     * If we still don't know whether it closed yet, wait a second
     * timeout then quit.
     *
     * The returned Promise resolves if the `MediaKeySession` seems closed and
     * rejects if we couldn't know or it doesn't.
     * @returns {Promise.<undefined>}
     */
    async function tryUpdatingSession() {
        try {
            await session.update(new Uint8Array(1));
        }
        catch (err) {
            if (timeoutCanceller.isUsed) { // Reminder: cancelled == session closed
                return;
            }
            // The caught error can tell if session is closed
            // (Chrome may throw this error)
            // I know... Checking the error message is not the best practice ever.
            if (err instanceof Error &&
                err.message === "The session is already closed.") {
                return;
            }
            await cancellableSleep(1000, timeoutCanceller.signal);
        }
        if (timeoutCanceller.isUsed) { // Reminder: cancelled == session closed
            return;
        }
        throw new Error("Compat: Couldn't know if session is closed");
    }
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/key_id_comparison.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns `true` if both given key id appear to be equal.
 * @param {Uint8Array} keyId1
 * @param {Uint8Array} keyId2
 * @returns {boolean}
 */
function areKeyIdsEqual(keyId1, keyId2) {
    return keyId1 === keyId2 || areArraysOfNumbersEqual(keyId1, keyId2);
}
/**
 * @param {Uint8Array} wantedKeyId
 * @param {Array.<Uint8Array>} keyIdsArr
 * @returns {boolean}
 */
function isKeyIdContainedIn(wantedKeyId, keyIdsArr) {
    return keyIdsArr.some(k => areKeyIdsEqual(k, wantedKeyId));
}
/**
 * Returns `true` if all key ids in `wantedKeyIds` are present in the
 * `keyIdsArr` array.
 * @param {Array.<Uint8Array>} wantedKeyIds
 * @param {Array.<Uint8Array>} keyIdsArr
 * @returns {boolean}
 */
function areAllKeyIdsContainedIn(wantedKeyIds, keyIdsArr) {
    for (const keyId of wantedKeyIds) {
        const found = keyIdsArr.some(k => areKeyIdsEqual(k, keyId));
        if (!found) {
            return false;
        }
    }
    return true;
}
/**
 * Returns `true` if at least one key id in `wantedKeyIds` is present in the
 * `keyIdsArr` array.
 * @param {Array.<Uint8Array>} wantedKeyIds
 * @param {Array.<Uint8Array>} keyIdsArr
 * @returns {boolean}
 */
function areSomeKeyIdsContainedIn(wantedKeyIds, keyIdsArr) {
    for (const keyId of wantedKeyIds) {
        const found = keyIdsArr.some(k => areKeyIdsEqual(k, keyId));
        if (found) {
            return true;
        }
    }
    return false;
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/key_session_record.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class storing key-related information linked to a created `MediaKeySession`.
 *
 * This class allows to regroup one or multiple key ids and can be linked to a
 * single MediaKeySession so you can know which key that MediaKeySession
 * handles.
 *
 * The main use case behind the complexities of this `KeySessionRecord` is to
 * better handle the `singleLicensePer` RxPlayer option, which allows the
 * recuperation of a license containing multiple keys, even if only one of
 * those keys was asked for (which in turn allows to reduce the number of
 * requests and to improve performance).
 * Here, the `KeySessionRecord` will regroup all those key's id and can be
 * linked to the corresponding MediaKeySession.
 * That way, you can later check if another encrypted content is compatible with
 * that session through the `KeySessionRecord`'s `isCompatibleWith` method.
 *
 * @example
 * ```js
 * const record = new KeySessionRecord(initData);
 *
 * // Create a MediaKeySession linked to that initialization data and fetch the
 * // license
 * // ...
 *
 * // Once the license has been loaded to the MediaKeySession linked to that
 - // initialization data, associate the license's key Ids with the latter.
 * record.associateKeyIds(someKeyIds);
 *
 * // Function called when new initialization data is encountered
 * function onNewInitializationData(newInitializationData) {
 *   if (record.isCompatibleWith(newInitializationData)) {
 *     console.log("This initialization data should already be handled, ignored.");
 *   } else {
 *     console.log("This initialization data is not handled yet.";
 *   }
 * }
 * ```
 * @class KeySessionRecord
 */
class KeySessionRecord {
    /**
     * Create a new `KeySessionRecord`, linked to its corresponding initialization
     * data,
     * @param {Object} initializationData
     */
    constructor(initializationData) {
        this._initializationData = initializationData;
        this._keyIds = null;
    }
    /**
     * Associate supplementary key ids to this `KeySessionRecord` so it becomes
     * "compatible" to them.
     *
     * After this call, new initialization data linked to subsets of those key
     * ids will be considered compatible  to this `KeySessionRecord` (calls to
     * `isCompatibleWith` with the corresponding initialization data will return
     * `true`).
     * @param {Array.<Uint8Array>} keyIds
     */
    associateKeyIds(keyIds) {
        if (this._keyIds === null) {
            this._keyIds = [];
        }
        const keyIdsArr = Array.from(keyIds);
        for (const keyId of keyIdsArr) {
            if (!this.isAssociatedWithKeyId(keyId)) {
                this._keyIds.push(keyId);
            }
        }
    }
    /**
     * @param {Uint8Array} keyId
     * @returns {boolean}
     */
    isAssociatedWithKeyId(keyId) {
        if (this._keyIds === null) {
            return false;
        }
        for (const storedKeyId of this._keyIds) {
            if (areKeyIdsEqual(storedKeyId, keyId)) {
                return true;
            }
        }
        return false;
    }
    /**
     * @returns {Array.<Uint8Array>}
     */
    getAssociatedKeyIds() {
        if (this._keyIds === null) {
            return [];
        }
        return this._keyIds;
    }
    /**
     * Check if that `KeySessionRecord` is compatible to the initialization data
     * given.
     *
     * If it returns `true`, it means that this `KeySessionRecord` is already
     * linked to that initialization data's key. As such, if that
     * `KeySessionRecord` is already associated to an active MediaKeySession for
     * example, the content linked to that initialization data should already be
     * handled.
     *
     * If it returns `false`, it means that this `KeySessionRecord` has no
     * relation with the given initialization data.
     *
     * @param {Object} initializationData
     * @returns {boolean}
     */
    isCompatibleWith(initializationData) {
        const { keyIds } = initializationData;
        if (keyIds !== undefined && keyIds.length > 0) {
            if (this._keyIds !== null && areAllKeyIdsContainedIn(keyIds, this._keyIds)) {
                return true;
            }
            if (this._initializationData.keyIds !== undefined) {
                return areAllKeyIdsContainedIn(keyIds, this._initializationData.keyIds);
            }
        }
        return this._checkInitializationDataCompatibility(initializationData);
    }
    _checkInitializationDataCompatibility(initializationData) {
        if (initializationData.keyIds !== undefined &&
            initializationData.keyIds.length > 0 &&
            this._initializationData.keyIds !== undefined) {
            return areAllKeyIdsContainedIn(initializationData.keyIds, this._initializationData.keyIds);
        }
        if (this._initializationData.type !== initializationData.type) {
            return false;
        }
        return this._initializationData.values
            .isCompatibleWith(initializationData.values);
    }
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/loaded_sessions_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Create and store MediaKeySessions linked to a single MediaKeys
 * instance.
 *
 * Keep track of sessionTypes and of the initialization data each
 * MediaKeySession is created for.
 * @class LoadedSessionsStore
 */
class LoadedSessionsStore {
    /**
     * Create a new LoadedSessionsStore, which will store information about
     * loaded MediaKeySessions on the given MediaKeys instance.
     * @param {MediaKeys} mediaKeys
     */
    constructor(mediaKeys) {
        this._mediaKeys = mediaKeys;
        this._storage = [];
    }
    /**
     * Create a new MediaKeySession and store it in this store.
     * @param {Object} initData
     * @param {string} sessionType
     * @returns {Object}
     */
    createSession(initData, sessionType) {
        const keySessionRecord = new KeySessionRecord(initData);
        const mediaKeySession = this._mediaKeys.createSession(sessionType);
        const entry = { mediaKeySession,
            sessionType,
            keySessionRecord,
            isGeneratingRequest: false,
            isLoadingPersistentSession: false,
            closingStatus: { type: "none" } };
        if (!isNullOrUndefined(mediaKeySession.closed)) {
            mediaKeySession.closed
                .then(() => {
                const index = this.getIndex(keySessionRecord);
                if (index >= 0 &&
                    this._storage[index].mediaKeySession === mediaKeySession) {
                    this._storage.splice(index, 1);
                }
            })
                .catch((e) => {
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                src_log.warn(`DRM-LSS: MediaKeySession.closed rejected: ${e}`);
            });
        }
        src_log.debug("DRM-LSS: Add MediaKeySession", entry.sessionType);
        this._storage.push(Object.assign({}, entry));
        return entry;
    }
    /**
     * Find a stored entry compatible with the initialization data given and moves
     * this entry at the end of the `LoadedSessionsStore`''s storage, returned by
     * its `getAll` method.
     *
     * This can be used for example to tell when a previously-stored
     * entry is re-used to then be able to implement a caching replacement
     * algorithm based on the least-recently-used values by just evicting the first
     * values returned by `getAll`.
     * @param {Object} initializationData
     * @returns {Object|null}
     */
    reuse(initializationData) {
        for (let i = this._storage.length - 1; i >= 0; i--) {
            const stored = this._storage[i];
            if (stored.keySessionRecord.isCompatibleWith(initializationData)) {
                this._storage.splice(i, 1);
                this._storage.push(stored);
                return Object.assign({}, stored);
            }
        }
        return null;
    }
    /**
     * Get `LoadedSessionsStore`'s entry for a given MediaKeySession.
     * Returns `null` if the given MediaKeySession is not stored in the
     * `LoadedSessionsStore`.
     * @param {MediaKeySession} mediaKeySession
     * @returns {Object|null}
     */
    getEntryForSession(mediaKeySession) {
        for (let i = this._storage.length - 1; i >= 0; i--) {
            const stored = this._storage[i];
            if (stored.mediaKeySession === mediaKeySession) {
                return Object.assign({}, stored);
            }
        }
        return null;
    }
    /**
     * Generate a license request on the given MediaKeySession, while indicating
     * to the LoadedSessionsStore that a license-request is pending so
     * session-closing orders are properly scheduled after it is done.
     * @param {Object} mediaKeySession
     * @param {string} initializationDataType - Initialization data type given
     * e.g. by the "encrypted" event for the corresponding request.
     * @param {Uint8Array} initializationData - Initialization data given e.g. by
     * the "encrypted" event for the corresponding request.
     * @returns {Promise}
     */
    async generateLicenseRequest(mediaKeySession, initializationDataType, initializationData) {
        let entry;
        for (const stored of this._storage) {
            if (stored.mediaKeySession === mediaKeySession) {
                entry = stored;
                break;
            }
        }
        if (entry === undefined) {
            src_log.error("DRM-LSS: generateRequest error. No MediaKeySession found with " +
                "the given initData and initDataType");
            return generateKeyRequest(mediaKeySession, initializationDataType, initializationData);
        }
        entry.isGeneratingRequest = true;
        // Note the `as string` is needed due to TypeScript not understanding that
        // the `closingStatus` might change in the next checks
        if (entry.closingStatus.type !== "none") {
            throw new Error("The `MediaKeySession` is being closed.");
        }
        try {
            await generateKeyRequest(mediaKeySession, initializationDataType, initializationData);
        }
        catch (err) {
            if (entry === undefined) {
                throw err;
            }
            entry.isGeneratingRequest = false;
            if (entry.closingStatus.type === "awaiting") {
                entry.closingStatus.start();
            }
            throw err;
        }
        if (entry === undefined) {
            return undefined;
        }
        entry.isGeneratingRequest = false;
        if (entry.closingStatus.type === "awaiting") {
            entry.closingStatus.start();
        }
    }
    /**
     * @param {Object} mediaKeySession
     * @param {string} sessionId
     * @returns {Promise}
     */
    async loadPersistentSession(mediaKeySession, sessionId) {
        let entry;
        for (const stored of this._storage) {
            if (stored.mediaKeySession === mediaKeySession) {
                entry = stored;
                break;
            }
        }
        if (entry === undefined) {
            src_log.error("DRM-LSS: loadPersistentSession error. No MediaKeySession found with " +
                "the given initData and initDataType");
            return loadSession(mediaKeySession, sessionId);
        }
        entry.isLoadingPersistentSession = true;
        // Note the `as string` is needed due to TypeScript not understanding that
        // the `closingStatus` might change in the next checks
        if (entry.closingStatus.type !== "none") {
            throw new Error("The `MediaKeySession` is being closed.");
        }
        let ret;
        try {
            ret = await loadSession(mediaKeySession, sessionId);
        }
        catch (err) {
            if (entry === undefined) {
                throw err;
            }
            entry.isLoadingPersistentSession = false;
            if (entry.closingStatus.type === "awaiting") {
                entry.closingStatus.start();
            }
            throw err;
        }
        if (entry === undefined) {
            return ret;
        }
        entry.isLoadingPersistentSession = false;
        if (entry.closingStatus.type === "awaiting") {
            entry.closingStatus.start();
        }
        return ret;
    }
    /**
     * Close a MediaKeySession and remove its related stored information from the
     * `LoadedSessionsStore`.
     * Emit when done.
     * @param {Object} mediaKeySession
     * @returns {Promise}
     */
    async closeSession(mediaKeySession) {
        let entry;
        for (const stored of this._storage) {
            if (stored.mediaKeySession === mediaKeySession) {
                entry = stored;
                break;
            }
        }
        if (entry === undefined) {
            src_log.warn("DRM-LSS: No MediaKeySession found with " +
                "the given initData and initDataType");
            return Promise.resolve(false);
        }
        return this._closeEntry(entry);
    }
    /**
     * Returns the number of stored MediaKeySessions in this LoadedSessionsStore.
     * @returns {number}
     */
    getLength() {
        return this._storage.length;
    }
    /**
     * Returns information about all stored MediaKeySession, in the order in which
     * the MediaKeySession have been created.
     * @returns {Array.<Object>}
     */
    getAll() {
        return this._storage;
    }
    /**
     * Close all sessions in this store.
     * Emit `null` when done.
     * @returns {Promise}
     */
    async closeAllSessions() {
        const allEntries = this._storage;
        src_log.debug("DRM-LSS: Closing all current MediaKeySessions", allEntries.length);
        // re-initialize the storage, so that new interactions with the
        // `LoadedSessionsStore` do not rely on MediaKeySessions we're in the
        // process of removing
        this._storage = [];
        const closingProms = allEntries
            .map((entry) => this._closeEntry(entry));
        await Promise.all(closingProms);
    }
    /**
     * Find the given `MediaKeySession` in the `LoadedSessionsStore` and removes
     * any reference to it without actually closing it.
     *
     * Returns `true` if the given `mediaKeySession` has been found and removed,
     * `false` otherwise.
     *
     * Note that this may create a `MediaKeySession` leakage in the wrong
     * conditions, cases where this method should be called should be very
     * carefully evaluated.
     * @param {MediaKeySession} mediaKeySession
     * @returns {boolean}
     */
    removeSessionWithoutClosingIt(mediaKeySession) {
        assert_assert(mediaKeySession.sessionId === "", "Initialized `MediaKeySession`s should always be properly closed");
        for (let i = this._storage.length - 1; i >= 0; i--) {
            const stored = this._storage[i];
            if (stored.mediaKeySession === mediaKeySession) {
                this._storage.splice(i, 1);
                return true;
            }
        }
        return false;
    }
    /**
     * Get the index of a stored MediaKeySession entry based on its
     * `KeySessionRecord`.
     * Returns -1 if not found.
     * @param {Object} record
     * @returns {number}
     */
    getIndex(record) {
        for (let i = 0; i < this._storage.length; i++) {
            const stored = this._storage[i];
            if (stored.keySessionRecord === record) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Prepare the closure of a `MediaKeySession` stored as an entry of the
     * `LoadedSessionsStore`.
     * Allows to postpone the closure action if another MediaKeySession action
     * is already pending.
     * @param {Object} entry
     * @returns {Promise.<boolean>}
     */
    async _closeEntry(entry) {
        const { mediaKeySession } = entry;
        return new Promise((resolve, reject) => {
            if (entry !== undefined &&
                (entry.isLoadingPersistentSession || entry.isGeneratingRequest)) {
                entry.closingStatus = { type: "awaiting",
                    start: tryClosingEntryAndResolve };
            }
            else {
                tryClosingEntryAndResolve();
            }
            function tryClosingEntryAndResolve() {
                if (entry !== undefined) {
                    entry.closingStatus = { type: "pending" };
                }
                safelyCloseMediaKeySession(mediaKeySession)
                    .then(() => {
                    if (entry !== undefined) {
                        entry.closingStatus = { type: "done" };
                    }
                    resolve(true);
                })
                    .catch((err) => {
                    if (entry !== undefined) {
                        entry.closingStatus = { type: "failed" };
                    }
                    reject(err);
                });
            }
        });
    }
}
/**
 * Close a MediaKeySession and just log an error if it fails (while resolving).
 * Emits then complete when done.
 * @param {MediaKeySession} mediaKeySession
 * @returns {Observable}
 */
async function safelyCloseMediaKeySession(mediaKeySession) {
    src_log.debug("DRM: Trying to close a MediaKeySession", mediaKeySession.sessionId);
    try {
        await closeSession(mediaKeySession);
        src_log.debug("DRM: Succeeded to close MediaKeySession");
        return;
    }
    catch (err) {
        src_log.error("DRM: Could not close MediaKeySession: " +
            (err instanceof Error ? err.toString() :
                "Unknown error"));
        return;
    }
}

;// CONCATENATED MODULE: ./src/utils/hash_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Convert given buffer to a 32bit integer hash
 *
 * This algorithm is the same one that Java `String.hashCode()` one which
 * is a fast hashing function adapted to short ASCII strings.
 * This consequently might not be the most adapted to buffers of various length
 * containing a various amount of data but still has the advantage of being
 * fast.
 *
 * As this function is used in persistent MediaKeySession storage, we probably
 * should keep this function somewhere as long as we want to support
 * MediaKeySessions persisted in old versions of the RxPlayer.
 *
 * @param {Array.<number>|TypedArray} buffer
 * @returns {number}
 */
function hashBuffer(buffer) {
    let hash = 0;
    let char;
    for (let i = 0; i < buffer.length; i++) {
        char = buffer[i];
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/serializable_bytes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Wrap byte-based data and allow serialization of it into base64. */
class SerializableBytes {
    /**
     * Create a new `SerializableBytes`, wrapping the initialization data
     * given and allowing serialization into base64.
     * @param {Uint8Array}
     */
    constructor(initData) {
        this.initData = initData;
    }
    /**
     * Convert it to base64.
     * `toJSON` is specially interpreted by JavaScript engines to be able to rely
     * on it when calling `JSON.stringify` on it or any of its parent objects:
     * https://tc39.es/ecma262/#sec-serializejsonproperty
     * @returns {string}
     */
    toJSON() {
        return bytesToBase64(this.initData);
    }
    /**
     * Decode a base64 sequence representing an initialization data back to an
     * Uint8Array.
     * @param {string}
     * @returns {Uint8Array}
     */
    static decode(base64) {
        return base64ToBytes(base64);
    }
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/are_init_values_compatible.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns `true` if both values are compatible initialization data, which
 * means that one is completely contained in the other.
 *
 * Both values given should be sorted by systemId the same way.
 * @param {Array.<Object>} stored
 * @param {Array.<Object>} newElts
 * @returns {boolean}
 */
function areInitializationValuesCompatible(stored, newElts) {
    var _a, _b;
    return (_b = (_a = _isAInB(stored, newElts)) !== null && _a !== void 0 ? _a : _isAInB(newElts, stored)) !== null && _b !== void 0 ? _b : false;
}
/**
 * Take two arrays of initialization data values, `a` and `b`, sorted by
 * their `systemId` property in the same order.
 *
 * Returns `true` if `a` is not empty and is completely contained in the `b`
 * array.
 * This is equivalent to: "`a` is contained in `b`".
 *
 * Returns `false` either if `a` is empty or if `b` has different initialization
 * data than it for equivalent system ids.
 * This is equivalent to: "`a` represents different data than `b`".
 *
 * Returns `null` if `a` is not fully contained in `b` but can still be
 * compatible with it.
 * This is equivalent to: "`a` is not contained in `b`, but `b` could be
 * contained in `a`".
 * @param {Array.<Object>} a
 * @param {Array.<Object>} b
 * @returns {boolean}
 */
function _isAInB(a, b) {
    if (a.length === 0) {
        return false;
    }
    if (b.length < a.length) {
        return null;
    }
    const firstAElt = a[0];
    let aIdx = 0;
    let bIdx = 0;
    for (; bIdx < b.length; bIdx++) {
        const bElt = b[bIdx];
        if (bElt.systemId !== firstAElt.systemId) {
            continue;
        }
        if (bElt.hash !== firstAElt.hash) {
            return false;
        }
        const aData = firstAElt.data instanceof Uint8Array ? firstAElt.data :
            typeof firstAElt.data === "string" ? SerializableBytes.decode(firstAElt.data) :
                firstAElt.data.initData;
        const bData = bElt.data instanceof Uint8Array ? bElt.data :
            typeof bElt.data === "string" ? SerializableBytes.decode(bElt.data) :
                bElt.data.initData;
        if (!areArraysOfNumbersEqual(aData, bData)) {
            return false;
        }
        if (b.length - bIdx < a.length) {
            // not enough place to store `a`'s initialization data.
            return null;
        }
        // first `a` value was found. Check if all `a` values are found in `b`
        for (aIdx = 1; aIdx < a.length; aIdx++) {
            const aElt = a[aIdx];
            for (bIdx += 1; bIdx < b.length; bIdx++) {
                const bNewElt = b[bIdx];
                if (aElt.systemId !== bNewElt.systemId) {
                    continue;
                }
                if (aElt.hash !== bNewElt.hash) {
                    return false;
                }
                const aNewData = aElt.data instanceof Uint8Array ? aElt.data :
                    typeof aElt.data === "string" ? SerializableBytes.decode(aElt.data) :
                        aElt.data.initData;
                const bNewData = bNewElt.data instanceof Uint8Array ? bNewElt.data :
                    typeof bNewElt.data === "string" ? SerializableBytes.decode(bNewElt.data) :
                        bNewElt.data.initData;
                if (!areArraysOfNumbersEqual(aNewData, bNewData)) {
                    return false;
                }
                break;
            }
            if (aIdx === b.length) {
                // we didn't find `aElt`'s systemId in b
                return null;
            }
        }
        // If we're here, then we've found all `a`'s systemId in `b` and they match
        return true;
    }
    return null; // We didn't find the firstAElt`s systemId in `b`.
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/persistent_sessions_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










/**
 * Throw if the given storage does not respect the right interface.
 * @param {Object} storage
 */
function checkStorage(storage) {
    assertInterface(storage, { save: "function", load: "function" }, "licenseStorage");
}
/**
 * Set representing persisted licenses. Depends on a simple local-
 * storage implementation with a `save`/`load` synchronous interface
 * to persist information on persisted sessions.
 *
 * This set is used only for a cdm/keysystem with license persistency
 * supported.
 * @class PersistentSessionsStore
 */
class PersistentSessionsStore {
    /**
     * Create a new PersistentSessionsStore.
     * @param {Object} storage
     */
    constructor(storage) {
        checkStorage(storage);
        this._entries = [];
        this._storage = storage;
        try {
            let entries = this._storage.load();
            if (!Array.isArray(entries)) {
                entries = [];
            }
            this._entries = entries;
        }
        catch (e) {
            src_log.warn("DRM-PSS: Could not get entries from license storage", e instanceof Error ? e : "");
            this.dispose();
        }
    }
    /**
     * Returns the number of stored values.
     * @returns {number}
     */
    getLength() {
        return this._entries.length;
    }
    /**
     * Returns information about all stored MediaKeySession, in the order in which
     * the MediaKeySession have been created.
     * @returns {Array.<Object>}
     */
    getAll() {
        return this._entries;
    }
    /**
     * Retrieve an entry based on its initialization data.
     * @param {Object}  initData
     * @param {string|undefined} initDataType
     * @returns {Object|null}
     */
    get(initData) {
        const index = this._getIndex(initData);
        return index === -1 ? null :
            this._entries[index];
    }
    /**
     * Like `get`, but also move the corresponding value at the end of the store
     * (as returned by `getAll`) if found.
     * This can be used for example to tell when a previously-stored value is
     * re-used to then be able to implement a caching replacement algorithm based
     * on the least-recently-used values by just evicting the first values
     * returned by `getAll`.
     * @param {Uint8Array} initData
     * @param {string|undefined} initDataType
     * @returns {*}
     */
    getAndReuse(initData) {
        const index = this._getIndex(initData);
        if (index === -1) {
            return null;
        }
        const item = this._entries.splice(index, 1)[0];
        this._entries.push(item);
        return item;
    }
    /**
     * Add a new entry in the PersistentSessionsStore.
     * @param {Uint8Array}  initData
     * @param {string|undefined} initDataType
     * @param {MediaKeySession} session
     */
    add(initData, keyIds, session) {
        var _a;
        if (isNullOrUndefined(session) || !isNonEmptyString(session.sessionId)) {
            src_log.warn("DRM-PSS: Invalid Persisten Session given.");
            return;
        }
        const { sessionId } = session;
        const currentIndex = this._getIndex(initData);
        if (currentIndex >= 0) {
            const currVersion = keyIds === undefined ? 3 :
                4;
            const currentEntry = this._entries[currentIndex];
            const entryVersion = (_a = currentEntry.version) !== null && _a !== void 0 ? _a : -1;
            if (entryVersion >= currVersion && sessionId === currentEntry.sessionId) {
                return;
            }
            src_log.info("DRM-PSS: Updating session info.", sessionId);
            this._entries.splice(currentIndex, 1);
        }
        else {
            src_log.info("DRM-PSS: Add new session", sessionId);
        }
        const storedValues = prepareValuesForStore(initData.values.getFormattedValues());
        if (keyIds === undefined) {
            this._entries.push({ version: 3,
                sessionId,
                values: storedValues,
                initDataType: initData.type });
        }
        else {
            this._entries.push({ version: 4,
                sessionId,
                keyIds: keyIds.map((k) => new SerializableBytes(k)),
                values: storedValues,
                initDataType: initData.type });
        }
        this._save();
    }
    /**
     * Delete stored MediaKeySession information based on its session id.
     * @param {string} sessionId
     */
    delete(sessionId) {
        let index = -1;
        for (let i = 0; i < this._entries.length; i++) {
            const entry = this._entries[i];
            if (entry.sessionId === sessionId) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            src_log.warn("DRM-PSS: initData to delete not found.");
            return;
        }
        const entry = this._entries[index];
        src_log.warn("DRM-PSS: Delete session from store", entry.sessionId);
        this._entries.splice(index, 1);
        this._save();
    }
    deleteOldSessions(sessionsToDelete) {
        src_log.info(`DRM-PSS: Deleting last ${sessionsToDelete} sessions.`);
        if (sessionsToDelete <= 0) {
            return;
        }
        if (sessionsToDelete <= this._entries.length) {
            this._entries.splice(0, sessionsToDelete);
        }
        else {
            src_log.warn("DRM-PSS: Asked to remove more information that it contains", sessionsToDelete, this._entries.length);
            this._entries = [];
        }
        this._save();
    }
    /**
     * Delete all saved entries.
     */
    dispose() {
        this._entries = [];
        this._save();
    }
    /**
     * Retrieve index of an entry.
     * Returns `-1` if not found.
     * @param {Object} initData
     * @returns {number}
     */
    _getIndex(initData) {
        // Older versions of the format include a concatenation of all
        // initialization data and its hash.
        // This is only computed lazily, the first time it is needed.
        let lazyConcatenatedData = null;
        function getConcatenatedInitDataInfo() {
            if (lazyConcatenatedData === null) {
                const concatInitData = initData.values.constructRequestData();
                lazyConcatenatedData = { initData: concatInitData,
                    initDataHash: hashBuffer(concatInitData) };
            }
            return lazyConcatenatedData;
        }
        for (let i = 0; i < this._entries.length; i++) {
            const entry = this._entries[i];
            if (entry.initDataType === initData.type) {
                switch (entry.version) {
                    case 4:
                        if (initData.keyIds !== undefined) {
                            const foundCompatible = initData.keyIds.every(keyId => {
                                const keyIdB64 = bytesToBase64(keyId);
                                for (const entryKid of entry.keyIds) {
                                    if (typeof entryKid === "string") {
                                        if (keyIdB64 === entryKid) {
                                            return true;
                                        }
                                    }
                                    else if (areKeyIdsEqual(entryKid.initData, keyId)) {
                                        return true;
                                    }
                                }
                                return false;
                            });
                            if (foundCompatible) {
                                return i;
                            }
                        }
                        else {
                            const formatted = initData.values.getFormattedValues();
                            if (areInitializationValuesCompatible(formatted, entry.values)) {
                                return i;
                            }
                        }
                        break;
                    case 3:
                        const formatted = initData.values.getFormattedValues();
                        if (areInitializationValuesCompatible(formatted, entry.values)) {
                            return i;
                        }
                        break;
                    case 2: {
                        const { initData: concatInitData, initDataHash: concatHash } = getConcatenatedInitDataInfo();
                        if (entry.initDataHash === concatHash) {
                            try {
                                const decodedInitData = typeof entry.initData === "string" ?
                                    SerializableBytes.decode(entry.initData) :
                                    entry.initData.initData;
                                if (areArraysOfNumbersEqual(decodedInitData, concatInitData)) {
                                    return i;
                                }
                            }
                            catch (e) {
                                src_log.warn("DRM-PSS: Could not decode initialization data.", e instanceof Error ? e : "");
                            }
                        }
                        break;
                    }
                    case 1: {
                        const { initData: concatInitData, initDataHash: concatHash } = getConcatenatedInitDataInfo();
                        if (entry.initDataHash === concatHash) {
                            if (typeof entry.initData.length === "undefined") {
                                // If length is undefined, it has been linearized. We could still
                                // convert it back to an Uint8Array but this would necessitate some
                                // ugly unreadable logic for a very very minor possibility.
                                // Just consider that it is a match based on the hash.
                                return i;
                            }
                            else if (areArraysOfNumbersEqual(entry.initData, concatInitData)) {
                                return i;
                            }
                        }
                        break;
                    }
                    default: {
                        const { initDataHash: concatHash } = getConcatenatedInitDataInfo();
                        if (entry.initData === concatHash) {
                            return i;
                        }
                    }
                }
            }
        }
        return -1;
    }
    /**
     * Use the given storage to store the current entries.
     */
    _save() {
        try {
            this._storage.save(this._entries);
        }
        catch (e) {
            src_log.warn("DRM-PSS: Could not save licenses in localStorage");
        }
    }
}
/**
 * Format given initializationData's values so they are ready to be stored:
 *   - sort them by systemId, so they are faster to compare
 *   - add hash for each initialization data encountered.
 * @param {Array.<Object>} initialValues
 * @returns {Array.<Object>}
 */
function prepareValuesForStore(initialValues) {
    return initialValues
        .map(({ systemId, data, hash }) => ({ systemId,
        hash,
        data: new SerializableBytes(data) }));
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/server_certificate_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Keep track of server certificate which have been set for a MediaKeys.
 * As it is impossible for a MediaKeys to have his server certificate reset
 * or updated, we consider that once it has been set, it will remain set until
 * the MediaKeys instance is killed.
 *
 * So, a WeakMap helps keeping a trace of which server certificate (identified
 * with a unique hash) is set on a MediaKeys.
 * `null` indicate that we don't know (and not `undefined`, because this is the
 * default value for when a WeakMap has no value for a key) which server
 * certificate is attached to a MediaKeys instance (most likely because related
 * EME APIs failed or had an unexpected behavior).
 */
const serverCertificateHashesMap = new WeakMap();
/** ServerCertificateStore */
/* harmony default export */ const server_certificate_store = ({
    /**
     * Tells the ServerCertificateStore that you begin to call the APIs to set a
     * ServerCertificate on `mediaKeys`.
     *
     * Calling this function is necessary due to how server certificate work
     * currently in EME APIs:
     * Because right now, it is impossible to tell if a MediaKeys instance has an
     * attached ServerCertificate or not when the corresponding API fails or if it
     * never answers, we prefer to announce through this function that the current
     * server certificate attached to this MediaKeys is for now invalid.
     * @param {MediaKeys | Object} mediaKeys
     */
    prepare(mediaKeys) {
        serverCertificateHashesMap.set(mediaKeys, null);
    },
    /**
     * Attach a new server certificate to a MediaKeys in the
     * ServerCertificateStore.
     *
     * Only one server certificate should ever be attached to a MediaKeys
     * instance and the `prepare` function should have been called before any
     * action to update the server certificate took place (this function does not
     * enforce either of those behaviors).
     * @param {MediaKeys | Object} mediaKeys
     * @param {ArrayBufferView | BufferSource} serverCertificate
     */
    set(mediaKeys, serverCertificate) {
        const formattedServerCertificate = serverCertificate instanceof Uint8Array ?
            serverCertificate :
            new Uint8Array(serverCertificate instanceof ArrayBuffer ? serverCertificate :
                serverCertificate.buffer);
        const hash = hashBuffer(formattedServerCertificate);
        serverCertificateHashesMap.set(mediaKeys, { hash, serverCertificate: formattedServerCertificate });
    },
    /**
     * Returns `true` if the MediaKeys instance has an attached ServerCertificate.
     * Returns `false` if it doesn't.
     *
     * Returns `undefined` if we cannot know, most likely because related EME APIs
     * failed or had an unexpected behavior.
     * @param {MediaKeys} mediaKeys
     * @returns {Boolean|undefined}
     */
    hasOne(mediaKeys) {
        const currentServerCertificate = serverCertificateHashesMap.get(mediaKeys);
        return currentServerCertificate === undefined ? false :
            currentServerCertificate === null ? undefined :
                true;
    },
    /**
     * Returns `true` if the given `mediaKeys` has `serverCertificate` attached to
     * it.
     * Returns `false` either if it doesn't of if we doesn't know if it does.
     * @param {MediaKeys | Object} mediaKeys
     * @param {ArrayBufferView | BufferSource} serverCertificate
     * @returns {boolean}
     */
    has(mediaKeys, serverCertificate) {
        const serverCertificateHash = serverCertificateHashesMap.get(mediaKeys);
        if (serverCertificateHash === undefined || serverCertificateHash === null) {
            return false;
        }
        const { hash: oldHash, serverCertificate: oldServerCertificate } = serverCertificateHash;
        const newServerCertificate = serverCertificate instanceof Uint8Array ?
            serverCertificate :
            new Uint8Array(serverCertificate instanceof ArrayBuffer ? serverCertificate :
                serverCertificate.buffer);
        const newHash = hashBuffer(newServerCertificate);
        if (newHash !== oldHash ||
            oldServerCertificate.length !== newServerCertificate.length) {
            return false;
        }
        for (let i = 0; i < oldServerCertificate.length; i++) {
            if (oldServerCertificate[i] !== newServerCertificate[i]) {
                return false;
            }
        }
        return true;
    },
});

;// CONCATENATED MODULE: ./src/core/decrypt/get_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * @throws {EncryptedMediaError}
 * @param {Object} keySystemOptions
 * @returns {Object|null}
 */
function createPersistentSessionsStorage(keySystemOptions) {
    if (keySystemOptions.persistentLicense !== true) {
        return null;
    }
    const { licenseStorage } = keySystemOptions;
    if (licenseStorage == null) {
        throw new EncryptedMediaError("INVALID_KEY_SYSTEM", "No license storage found for persistent license.");
    }
    src_log.debug("DRM: Set the given license storage");
    return new PersistentSessionsStore(licenseStorage);
}
/**
 * Create a MediaKeys instance and associated structures (or just return the
 * current ones if sufficient) based on a wanted configuration.
 * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement on which you
 * will attach the MediaKeys instance.
 * This Element is here only used to check if the current MediaKeys and
 * MediaKeySystemAccess instances are sufficient
 * @param {Array.<Object>} keySystemsConfigs - The key system configuration.
 * Needed to ask the right MediaKeySystemAccess.
 * @param {Object} cancelSignal - CancellationSignal allowing to cancel the
 * creation of the MediaKeys instance while the task is still pending.
 * @returns {Promise.<Object>}
 */
async function getMediaKeysInfos(mediaElement, keySystemsConfigs, cancelSignal) {
    const evt = await getMediaKeySystemAccess(mediaElement, keySystemsConfigs, cancelSignal);
    if (cancelSignal.cancellationError !== null) {
        throw cancelSignal.cancellationError;
    }
    const { options, mediaKeySystemAccess } = evt.value;
    const currentState = media_keys_infos_store.getState(mediaElement);
    const persistentSessionsStore = createPersistentSessionsStorage(options);
    if (canReuseMediaKeys() &&
        currentState !== null &&
        evt.type === "reuse-media-key-system-access") {
        const { mediaKeys, loadedSessionsStore } = currentState;
        // We might just rely on the currently attached MediaKeys instance.
        // First check if server certificate parameters are the same than in the
        // current MediaKeys instance. If not, re-create MediaKeys from scratch.
        if (server_certificate_store.hasOne(mediaKeys) === false ||
            (!isNullOrUndefined(options.serverCertificate) &&
                server_certificate_store.has(mediaKeys, options.serverCertificate))) {
            return { mediaKeys,
                mediaKeySystemAccess,
                stores: { loadedSessionsStore, persistentSessionsStore },
                options };
        }
    }
    const mediaKeys = await createMediaKeys(mediaKeySystemAccess);
    src_log.info("DRM: MediaKeys created with success");
    const loadedSessionsStore = new LoadedSessionsStore(mediaKeys);
    return { mediaKeys,
        mediaKeySystemAccess,
        stores: { loadedSessionsStore, persistentSessionsStore },
        options };
}
/**
 * Create `MediaKeys` from the `MediaKeySystemAccess` given.
 * Throws the right formatted error if it fails.
 * @param {MediaKeySystemAccess} mediaKeySystemAccess
 * @returns {Observable.<MediaKeys>}
 */
async function createMediaKeys(mediaKeySystemAccess) {
    src_log.info("DRM: Calling createMediaKeys on the MediaKeySystemAccess");
    try {
        const mediaKeys = await mediaKeySystemAccess.createMediaKeys();
        return mediaKeys;
    }
    catch (error) {
        const message = error instanceof Error ? error.message :
            "Unknown error when creating MediaKeys.";
        throw new EncryptedMediaError("CREATE_MEDIA_KEYS_ERROR", message);
    }
}

;// CONCATENATED MODULE: ./src/core/decrypt/init_media_keys.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Get media keys infos from key system configs then attach media keys to media element.
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystemsConfigs
 * @param {Object} cancelSignal
 * @returns {Promise.<Object>}
 */
async function initMediaKeys(mediaElement, keySystemsConfigs, cancelSignal) {
    const mediaKeysInfo = await getMediaKeysInfos(mediaElement, keySystemsConfigs, cancelSignal);
    const { mediaKeys } = mediaKeysInfo;
    const shouldDisableOldMediaKeys = mediaElement.mediaKeys !== null &&
        mediaElement.mediaKeys !== undefined &&
        mediaKeys !== mediaElement.mediaKeys;
    if (shouldDisableOldMediaKeys) {
        src_log.debug("DRM: Disabling old MediaKeys");
        disableMediaKeys(mediaElement);
    }
    return mediaKeysInfo;
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/async.js


var asyncScheduler = new AsyncScheduler(AsyncAction);
var async_async = asyncScheduler;
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isDate.js
function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/timeout.js







var TimeoutError = createErrorClass(function (_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = 'Timeout has occurred';
    this.name = 'TimeoutError';
    this.info = info;
  };
});
function timeout(config, schedulerArg) {
  var _a = isValidDate(config) ? {
      first: config
    } : typeof config === 'number' ? {
      each: config
    } : config,
    first = _a.first,
    each = _a.each,
    _b = _a["with"],
    _with = _b === void 0 ? timeoutErrorFactory : _b,
    _c = _a.scheduler,
    scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c,
    _d = _a.meta,
    meta = _d === void 0 ? null : _d;
  if (first == null && each == null) {
    throw new TypeError('No timeout provided.');
  }
  return operate(function (source, subscriber) {
    var originalSourceSubscription;
    var timerSubscription;
    var lastValue = null;
    var seen = 0;
    var startTimer = function startTimer(delay) {
      timerSubscription = executeSchedule(subscriber, scheduler, function () {
        try {
          originalSourceSubscription.unsubscribe();
          innerFrom(_with({
            meta: meta,
            lastValue: lastValue,
            seen: seen
          })).subscribe(subscriber);
        } catch (err) {
          subscriber.error(err);
        }
      }, delay);
    };
    originalSourceSubscription = source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
      seen++;
      subscriber.next(lastValue = value);
      each > 0 && startTimer(each);
    }, undefined, undefined, function () {
      if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
      }
      lastValue = null;
    }));
    !seen && startTimer(first != null ? typeof first === 'number' ? first : +first - scheduler.now() : each);
  });
}
function timeoutErrorFactory(info) {
  throw new TimeoutError(info);
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/catchError.js



function catchError(selector) {
  return operate(function (source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/concatMap.js


function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}
;// CONCATENATED MODULE: ./src/utils/cast_to_observable.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Try to cast the given value into an observable.
 * StraightForward - test first for an Observable then for a Promise.
 * @param {Observable|Function|*}
 * @returns {Observable}
 */
function castToObservable(value) {
    if (value instanceof Observable_Observable) {
        return value;
    }
    else if (value instanceof Promise ||
        (!isNullOrUndefined(value) &&
            typeof value.then === "function")) {
        return from(value);
    }
    return of(value);
}
/* harmony default export */ const cast_to_observable = (castToObservable);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/timer.js




function timer(dueTime, intervalOrScheduler, scheduler) {
  if (dueTime === void 0) {
    dueTime = 0;
  }
  if (scheduler === void 0) {
    scheduler = async_async;
  }
  var intervalDuration = -1;
  if (intervalOrScheduler != null) {
    if (isScheduler(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }
  return new Observable_Observable(function (subscriber) {
    var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
    if (due < 0) {
      due = 0;
    }
    var n = 0;
    return scheduler.schedule(function () {
      if (!subscriber.closed) {
        subscriber.next(n++);
        if (0 <= intervalDuration) {
          this.schedule(undefined, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}
;// CONCATENATED MODULE: ./src/utils/rx-retry_with_backoff.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Retry the given observable (if it triggers an error) with an exponential
 * backoff.
 * The backoff behavior can be tweaked through the options given.
 *
 * @param {Observable} obs$
 * @param {Object} options - Configuration object.
 * This object contains the following properties:
 *
 *   - retryDelay {Number} - The initial delay, in ms.
 *     This delay will be fuzzed to fall under the range +-30% each time a new
 *     retry is done.
 *     Then, this delay will be multiplied by 2^(n-1), n being the counter of
 *     retry we performed (beginning at 1 for the first retry).
 *
 *   - totalRetry {Number} - The amount of time we should retry. 0
 *     means no retry, 1 means a single retry, Infinity means infinite retry
 *     etc.
 *     If the observable still fails after this number of retry, the error will
 *     be throwed through this observable.
 *
 *   - shouldRetry {Function|undefined} -  Function which will receive the
 *     observable error each time it fails, and should return a boolean. If this
 *     boolean is false, the error will be directly thrown (without anymore
 *     retry).
 *
 *   - onRetry {Function|undefined} - Function which will be triggered at
 *     each retry. Will receive two arguments:
 *       1. The observable error
 *       2. The current retry count, beginning at 1 for the first retry
 *
 * @returns {Observable}
 * TODO Take errorSelector out. Should probably be entirely managed in the
 * calling code via a catch (much simpler to use and to understand).
 */
function retryObsWithBackoff(obs$, options) {
    const { baseDelay, maxDelay, totalRetry, shouldRetry, onRetry } = options;
    let retryCount = 0;
    return obs$.pipe(catchError((error, source) => {
        if ((!isNullOrUndefined(shouldRetry) && !shouldRetry(error)) ||
            retryCount++ >= totalRetry) {
            throw error;
        }
        if (typeof onRetry === "function") {
            onRetry(error, retryCount);
        }
        const delay = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);
        const fuzzedDelay = getFuzzedDelay(delay);
        return timer(fuzzedDelay)
            .pipe(mergeMap(() => source));
    }));
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/throwError.js


function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () {
    return errorOrErrorFactory;
  };
  var init = function init(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable_Observable(scheduler ? function (subscriber) {
    return scheduler.schedule(init, 0, subscriber);
  } : init);
}
;// CONCATENATED MODULE: ./src/utils/rx-try_catch.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Function} func - A function you want to execute
 * @param {*} argsForFunc - The function's argument
 * @returns {*} - If it fails, returns a throwing Observable, else the
 * function's result (which should be, in most cases, an Observable).
 */
function tryCatch(func, argsForFunc) {
    try {
        return func(argsForFunc);
    }
    catch (e) {
        return throwError(() => e);
    }
}

;// CONCATENATED MODULE: ./src/compat/eme/get_uuid_kid_from_keystatus_kid.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get KID from MediaKeySession keyStatus, and convert it in usual big-endian kid
 * if necessary. On EDGE, Microsoft Playready KID are presented into little-endian GUID.
 * @param {String} keySystem
 * @param {Uint8Array} baseKeyId
 * @returns {Uint8Array}
 */
function getUUIDKIDFromKeyStatusKID(keySystem, baseKeyId) {
    if (keySystem.indexOf("playready") !== -1 &&
        (isIEOrEdge || isEdgeChromium)) {
        return guidToUuid(baseKeyId);
    }
    return baseKeyId;
}

;// CONCATENATED MODULE: ./src/errors/assertion_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Error due to an abnormal assertion fails.
 *
 * This should be an internal error which is later transformed into a documented
 * (as part of the API) Error instance before being emitted to the application.
 * @class AssertionError
 * @extends Error
 */
class AssertionError extends Error {
    /**
     * @param {string} message
     */
    constructor(message) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, AssertionError.prototype);
        this.name = "AssertionError";
        this.message = message;
    }
}

;// CONCATENATED MODULE: ./src/utils/assert_unreachable.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TypeScript hack to make sure a code path is never taken.
 *
 * This can for example be used to ensure that a switch statement handle all
 * possible cases by adding a default clause calling assertUnreachable with
 * an argument (it doesn't matter which one).
 *
 * @example
 * function parseBinary(str : "0" | "1") : number {
 *   switch (str) {
 *     case "0:
 *       return 0;
 *     case "1":
 *       return 1;
 *     default:
 *       // branch never taken. If it can be, TypeScript will yell at us because
 *       // its argument (here, `str`) is not of the right type.
 *       assertUnreachable(str);
 *   }
 * }
 * @param {*} _
 * @throws AssertionError - Throw an AssertionError when called. If we're
 * sufficiently strict with how we use TypeScript, this should never happen.
 */
function assertUnreachable(_) {
    throw new AssertionError("Unreachable path taken");
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/check_key_statuses.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-disable-next-line max-len */




/**
 * Error thrown when the MediaKeySession has to be closed due to a trigger
 * specified by user configuration.
 * Such MediaKeySession should be closed immediately and may be re-created if
 * needed again.
 * @class DecommissionedSessionError
 * @extends Error
 */
class DecommissionedSessionError extends Error {
    /**
     * Creates a new `DecommissionedSessionError`.
     * @param {Error} reason - Error that led to the decision to close the
     * current MediaKeySession. Should be used for reporting purposes.
     */
    constructor(reason) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, DecommissionedSessionError.prototype);
        this.reason = reason;
    }
}
const KEY_STATUSES = { EXPIRED: "expired",
    INTERNAL_ERROR: "internal-error",
    OUTPUT_RESTRICTED: "output-restricted" };
/**
 * Look at the current key statuses in the sessions and construct the
 * appropriate warnings, whitelisted and blacklisted key ids.
 *
 * Throws if one of the keyID is on an error.
 * @param {MediaKeySession} session - The MediaKeySession from which the keys
 * will be checked.
 * @param {Object} options
 * @param {String} keySystem - The configuration keySystem used for deciphering
 * @returns {Object} - Warnings to send, whitelisted and blacklisted key ids.
 */
function checkKeyStatuses(session, options, keySystem) {
    const { fallbackOn = {}, throwOnLicenseExpiration, onKeyExpiration } = options;
    const blacklistedKeyIds = [];
    const whitelistedKeyIds = [];
    const badKeyStatuses = [];
    session.keyStatuses.forEach((_arg1, _arg2) => {
        // Hack present because the order of the arguments has changed in spec
        // and is not the same between some versions of Edge and Chrome.
        const [keyStatus, keyStatusKeyId] = (() => {
            return (typeof _arg1 === "string" ? [_arg1, _arg2] :
                [_arg2, _arg1]);
        })();
        const keyId = getUUIDKIDFromKeyStatusKID(keySystem, new Uint8Array(keyStatusKeyId));
        const keyStatusObj = { keyId: keyId.buffer, keyStatus };
        switch (keyStatus) {
            case KEY_STATUSES.EXPIRED: {
                const error = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", `A decryption key expired (${bytesToHex(keyId)})`, { keyStatuses: [keyStatusObj, ...badKeyStatuses] });
                if (onKeyExpiration === "error" ||
                    (onKeyExpiration === undefined && throwOnLicenseExpiration === false)) {
                    throw error;
                }
                switch (onKeyExpiration) {
                    case "close-session":
                        throw new DecommissionedSessionError(error);
                    case "fallback":
                        blacklistedKeyIds.push(keyId);
                        break;
                    default:
                        // I weirdly stopped relying on switch-cases here due to some TypeScript
                        // issue, not checking properly `case undefined` (bug?)
                        if (onKeyExpiration === "continue" || onKeyExpiration === undefined) {
                            whitelistedKeyIds.push(keyId);
                        }
                        else {
                            // Compile-time check throwing when not all possible cases are handled
                            assertUnreachable(onKeyExpiration);
                        }
                        break;
                }
                badKeyStatuses.push(keyStatusObj);
                break;
            }
            case KEY_STATUSES.INTERNAL_ERROR: {
                if (fallbackOn.keyInternalError !== true) {
                    throw new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", `A "${keyStatus}" status has been encountered (${bytesToHex(keyId)})`, { keyStatuses: [keyStatusObj, ...badKeyStatuses] });
                }
                badKeyStatuses.push(keyStatusObj);
                blacklistedKeyIds.push(keyId);
                break;
            }
            case KEY_STATUSES.OUTPUT_RESTRICTED: {
                if (fallbackOn.keyOutputRestricted !== true) {
                    throw new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", `A "${keyStatus}" status has been encountered (${bytesToHex(keyId)})`, { keyStatuses: [keyStatusObj, ...badKeyStatuses] });
                }
                badKeyStatuses.push(keyStatusObj);
                blacklistedKeyIds.push(keyId);
                break;
            }
            default:
                whitelistedKeyIds.push(keyId);
                break;
        }
    });
    let warning;
    if (badKeyStatuses.length > 0) {
        warning = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", "One or several problematic key statuses have been encountered", { keyStatuses: badKeyStatuses });
    }
    return { warning,
        blacklistedKeyIds,
        whitelistedKeyIds };
}

;// CONCATENATED MODULE: ./src/core/decrypt/session_events_listener.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










const { onKeyError$: session_events_listener_onKeyError$, onKeyMessage$: session_events_listener_onKeyMessage$, onKeyStatusesChange$: session_events_listener_onKeyStatusesChange$ } = event_listeners_namespaceObject;
/**
 * Error thrown when the MediaKeySession is blacklisted.
 * Such MediaKeySession should not be re-used but other MediaKeySession for the
 * same content can still be used.
 * @class BlacklistedSessionError
 * @extends Error
 */
class BlacklistedSessionError extends Error {
    constructor(sessionError) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, BlacklistedSessionError.prototype);
        this.sessionError = sessionError;
    }
}
/**
 * listen to various events from a MediaKeySession and react accordingly
 * depending on the configuration given.
 * @param {MediaKeySession} session - The MediaKeySession concerned.
 * @param {Object} keySystemOptions - The key system options.
 * @param {String} keySystem - The configuration keySystem used for deciphering
 * @returns {Observable}
 */
function SessionEventsListener(session, keySystemOptions, keySystem) {
    src_log.info("DRM: Binding session events", session.sessionId);
    const sessionWarningSubject$ = new Subject();
    const { getLicenseConfig = {} } = keySystemOptions;
    const keyErrors = session_events_listener_onKeyError$(session).pipe(map((error) => {
        throw new EncryptedMediaError("KEY_ERROR", error.type);
    }));
    const keyStatusesChange$ = session_events_listener_onKeyStatusesChange$(session)
        .pipe(mergeMap((keyStatusesEvent) => handleKeyStatusesChangeEvent(session, keySystemOptions, keySystem, keyStatusesEvent)));
    const keyMessages$ = session_events_listener_onKeyMessage$(session).pipe(mergeMap((messageEvent) => {
        const message = new Uint8Array(messageEvent.message);
        const messageType = isNonEmptyString(messageEvent.messageType) ?
            messageEvent.messageType :
            "license-request";
        src_log.info(`DRM: Received message event, type ${messageType}`, session.sessionId);
        const getLicense$ = defer(() => {
            const getLicense = keySystemOptions.getLicense(message, messageType);
            const getLicenseTimeout = isNullOrUndefined(getLicenseConfig.timeout) ?
                10 * 1000 :
                getLicenseConfig.timeout;
            return cast_to_observable(getLicense)
                .pipe(getLicenseTimeout >= 0 ? timeout(getLicenseTimeout) :
                identity /* noop */);
        });
        const backoffOptions = getLicenseBackoffOptions(sessionWarningSubject$, getLicenseConfig.retry);
        return retryObsWithBackoff(getLicense$, backoffOptions).pipe(map(licenseObject => ({
            type: "key-message-handled",
            value: { session, license: licenseObject },
        })), catchError((err) => {
            const formattedError = formatGetLicenseError(err);
            if (!isNullOrUndefined(err)) {
                const { fallbackOnLastTry } = err;
                if (fallbackOnLastTry === true) {
                    src_log.warn("DRM: Last `getLicense` attempt failed. " +
                        "Blacklisting the current session.");
                    throw new BlacklistedSessionError(formattedError);
                }
            }
            throw formattedError;
        }));
    }));
    const sessionUpdates = merge(keyMessages$, keyStatusesChange$)
        .pipe(concatMap((evt) => {
        switch (evt.type) {
            case "key-message-handled":
            case "key-status-change-handled":
                if (isNullOrUndefined(evt.value.license)) {
                    src_log.info("DRM: No message given, skipping session.update");
                    return EMPTY;
                }
                return updateSessionWithMessage(session, evt.value.license);
            default:
                return of(evt);
        }
    }));
    const sessionEvents = merge(getKeyStatusesEvents(session, keySystemOptions, keySystem), sessionUpdates, keyErrors, sessionWarningSubject$);
    return !isNullOrUndefined(session.closed) ?
        sessionEvents
            // TODO There is a subtle TypeScript issue there that made casting
            // to a type-compatible type mandatory. If a more elegant solution
            // can be found, it should be preffered.
            .pipe(takeUntil(cast_to_observable(session.closed))) :
        sessionEvents;
}
/**
 * Check current MediaKeyStatus for each key in the given MediaKeySession and
 * return an Observable which either:
 *    - throw if at least one status is a non-recoverable error
 *    - emit warning events for recoverable errors
 *    - emit blacklist-keys events for key IDs that are not decipherable
 * @param {MediaKeySession} session - The MediaKeySession concerned.
 * @param {Object} options - Options related to key statuses checks.
 * @param {String} keySystem - The name of the key system used for deciphering
 * @returns {Observable}
 */
function getKeyStatusesEvents(session, options, keySystem) {
    return defer(() => {
        if (session.keyStatuses.size === 0) {
            return EMPTY;
        }
        const { warning, blacklistedKeyIds, whitelistedKeyIds } = checkKeyStatuses(session, options, keySystem);
        const keysUpdate$ = of({ type: "keys-update",
            value: { whitelistedKeyIds,
                blacklistedKeyIds } });
        if (warning !== undefined) {
            return concat_concat(of({ type: "warning", value: warning }), keysUpdate$);
        }
        return keysUpdate$;
    });
}
/**
 * Format an error returned by a `getLicense` call to a proper form as defined
 * by the RxPlayer's API.
 * @param {*} error
 * @returns {Error}
 */
function formatGetLicenseError(error) {
    if (error instanceof TimeoutError) {
        return new EncryptedMediaError("KEY_LOAD_TIMEOUT", "The license server took too much time to " +
            "respond.");
    }
    const err = new EncryptedMediaError("KEY_LOAD_ERROR", "An error occured when calling `getLicense`.");
    if (!isNullOrUndefined(error) &&
        isNonEmptyString(error.message)) {
        err.message = error.message;
    }
    return err;
}
/**
 * Call MediaKeySession.update with the given `message`, if defined.
 * Returns the right event depending on the action taken.
 * @param {MediaKeySession} session
 * @param {ArrayBuffer|TypedArray|null} message
 * @returns {Observable}
 */
function updateSessionWithMessage(session, message) {
    src_log.info("DRM: Updating MediaKeySession with message");
    return cast_to_observable(session.update(message)).pipe(catchError((error) => {
        const reason = error instanceof Error ? error.toString() :
            "`session.update` failed";
        throw new EncryptedMediaError("KEY_UPDATE_ERROR", reason);
    }), tap(() => { src_log.info("DRM: MediaKeySession update succeeded."); }), 
    // NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
    // first type parameter as `any` instead of the perfectly fine `unknown`,
    // leading to linter issues, as it forbids the usage of `any`.
    // This is why we're disabling the eslint rule.
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
    ignoreElements());
}
/**
 * @param {MediaKeySession} session
 * @param {Object} keySystemOptions
 * @param {string} keySystem
 * @param {Event} keyStatusesEvent
 * @returns {Observable}
 */
function handleKeyStatusesChangeEvent(session, keySystemOptions, keySystem, keyStatusesEvent) {
    src_log.info("DRM: keystatuseschange event received", session.sessionId);
    const callback$ = defer(() => {
        return tryCatch(() => {
            if (typeof keySystemOptions.onKeyStatusesChange !== "function") {
                return EMPTY;
            }
            return cast_to_observable(keySystemOptions.onKeyStatusesChange(keyStatusesEvent, session));
        }, undefined);
    }).pipe(map(licenseObject => ({ type: "key-status-change-handled",
        value: { session, license: licenseObject } })), catchError((error) => {
        const err = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", "Unknown `onKeyStatusesChange` error");
        if (!isNullOrUndefined(error) &&
            isNonEmptyString(error.message)) {
            err.message = error.message;
        }
        throw err;
    }));
    return merge(getKeyStatusesEvents(session, keySystemOptions, keySystem), callback$);
}
/**
 * Construct backoff options for the getLicense call.
 * @param {Subject} sessionWarningSubject$ - Subject through which retry
 * warnings will be sent.
 * @param {number|undefined} numberOfRetry - Maximum of amount retried.
 * Equal to `2` if not defined.
 * @returns {Object}
 */
function getLicenseBackoffOptions(sessionWarningSubject$, numberOfRetry) {
    return {
        totalRetry: numberOfRetry !== null && numberOfRetry !== void 0 ? numberOfRetry : 2,
        baseDelay: 200,
        maxDelay: 3000,
        shouldRetry: (error) => error instanceof TimeoutError ||
            isNullOrUndefined(error) ||
            error.noRetry !== true,
        onRetry: (error) => sessionWarningSubject$.next({ type: "warning",
            value: formatGetLicenseError(error) }),
    };
}

;// CONCATENATED MODULE: ./src/core/decrypt/set_server_certificate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Call the setServerCertificate API with the given certificate.
 * Resolves on success, rejects on failure.
 *
 * TODO Handle returned value?
 * From the spec:
 *   - setServerCertificate resolves with true if everything worked
 *   - it resolves with false if the CDM does not support server
 *     certificates.
 *
 * @param {MediaKeys} mediaKeys
 * @param {ArrayBuffer} serverCertificate
 * @returns {Promise}
 */
async function setServerCertificate(mediaKeys, serverCertificate) {
    try {
        const res = await mediaKeys.setServerCertificate(serverCertificate);
        // Note: Even if `setServerCertificate` technically should return a
        // Promise.<boolean>, this is not technically always true.
        // Thus we prefer to return unknown here.
        return res;
    }
    catch (error) {
        src_log.warn("DRM: mediaKeys.setServerCertificate returned an error", error instanceof Error ? error : "");
        const reason = error instanceof Error ? error.toString() :
            "`setServerCertificate` error";
        throw new EncryptedMediaError("LICENSE_SERVER_CERTIFICATE_ERROR", reason);
    }
}
/**
 * Call the setCertificate API. If it fails just emit the error as warning
 * and complete.
 * @param {MediaKeys} mediaKeys
 * @param {ArrayBuffer} serverCertificate
 * @returns {Observable}
 */
async function trySettingServerCertificate(mediaKeys, serverCertificate) {
    if (server_certificate_store.hasOne(mediaKeys) === true) {
        src_log.info("DRM: The MediaKeys already has a server certificate, skipping...");
        return { type: "already-has-one" };
    }
    if (typeof mediaKeys.setServerCertificate !== "function") {
        src_log.warn("DRM: Could not set the server certificate." +
            " mediaKeys.setServerCertificate is not a function");
        return { type: "method-not-implemented" };
    }
    src_log.info("DRM: Setting server certificate on the MediaKeys");
    // Because of browser errors, or a user action that can lead to interrupting
    // server certificate setting, we might be left in a status where we don't
    // know if we attached the server certificate or not.
    // Calling `prepare` allow to invalidate temporarily that status.
    server_certificate_store.prepare(mediaKeys);
    try {
        const result = await setServerCertificate(mediaKeys, serverCertificate);
        server_certificate_store.set(mediaKeys, serverCertificate);
        return { type: "success", value: result };
    }
    catch (error) {
        const formattedErr = isKnownError(error) ?
            error :
            new EncryptedMediaError("LICENSE_SERVER_CERTIFICATE_ERROR", "Unknown error when setting the server certificate.");
        return { type: "error", value: formattedErr };
    }
}


;// CONCATENATED MODULE: ./src/core/decrypt/utils/clean_old_stored_persistent_info.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Remove old information from a PersistentSessionsStore so that it respects the
 * given `limit` as a maximum size. This can be used to prevent its size from
 * growing indefinitely.
 *
 * This is needed because our persistent session information storage is
 * un-bounded in size, adding more data will just add more data without removing
 * the old one - which can be valid or invalid.
 *
 * This is problematic for at least two reasons:
 *   - This data is loaded into JS memory which is finite (and which maximum
 *     bounds depends on the user environment).
 *   - The final storage used (as chosen by the application using the RxPlayer)
 *     will in most cases have a maximum storage size.
 */
function cleanOldStoredPersistentInfo(persistentSessionsStore, limit) {
    if (isNaN(limit) || limit < 0 || limit >= persistentSessionsStore.getLength()) {
        return;
    }
    const numberOfPersistentSessions = persistentSessionsStore.getLength();
    const toDelete = numberOfPersistentSessions - limit;
    src_log.info("DRM: Too many stored persistent sessions, removing some.", numberOfPersistentSessions, toDelete);
    persistentSessionsStore.deleteOldSessions(toDelete);
}

;// CONCATENATED MODULE: ./src/utils/starts_with.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * String.prototype.startsWith ponyfill.
 * Indicates Whether a string starts with another substring.
 *
 * Inspired from MDN polyfill, but ponyfilled instead.
 * @param {string} completeString
 * @param {string} searchString
 * @param {number} [position]
 * @returns {boolean}
 */
function startsWith(completeString, searchString, position) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    // eslint-disable-next-line no-restricted-properties
    if (typeof String.prototype.startsWith === "function") {
        // eslint-disable-next-line no-restricted-properties
        return completeString.startsWith(searchString, position);
    }
    const initialPosition = typeof position === "number" ? Math.max(position, 0) :
        0;
    return completeString.substring(initialPosition, initialPosition + searchString.length) === searchString;
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/get_drm_system_id.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {string} keySystem
 * @returns {string|undefined}
 */
function getDrmSystemId(keySystem) {
    if (startsWith(keySystem, "com.microsoft.playready") ||
        keySystem === "com.chromecast.playready" ||
        keySystem === "com.youtube.playready") {
        return "9a04f07998404286ab92e65be0885f95";
    }
    if (keySystem === "com.widevine.alpha") {
        return "edef8ba979d64acea3c827dcd51d21ed";
    }
    if (startsWith(keySystem, "com.apple.fps")) {
        return "94ce86fb07ff4f43adb893d2fa968ca2";
    }
    if (startsWith(keySystem, "com.nagra.")) {
        return "adb41c242dbf4a6d958b4457c0d27b95";
    }
    return undefined;
}

;// CONCATENATED MODULE: ./src/core/decrypt/utils/init_data_values_container.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Wrap initialization data values and reformat it so it becomes easier to check
 * compatibility with other `InitDataValuesContainer`.
 * @class InitDataValuesContainer
 */
class InitDataValuesContainer {
    /**
     * Construct a new `InitDataValuesContainer`.
     * Note that the data is not formatted right away.
     * It is only really formatted lazily the first time we need it.
     *
     * @param {Array.<Object>} initDataValues
     */
    constructor(initDataValues) {
        this._innerValues = initDataValues;
        this._lazyFormattedValues = null;
    }
    /**
     * Construct data that should be given to the `generateRequest` EME API.
     * @returns {Uint8Array}
     */
    constructRequestData() {
        // `generateKeyRequest` awaits a single Uint8Array containing all
        // initialization data.
        return byte_parsing_concat(...this._innerValues.map(i => i.data));
    }
    /**
     * Returns `true` if the given `InitDataValuesContainer` seems to be
     * "compatible" with the one stored in this instance.
     * Returns `false` if not.
     *
     * By "compatible" we mean that it will generate the same key request.
     * @param {InitDataValuesContainer | Object} initDataValues
     * @returns {boolean}
     */
    isCompatibleWith(initDataValues) {
        const formatted = initDataValues instanceof InitDataValuesContainer ?
            initDataValues.getFormattedValues() :
            initDataValues;
        return areInitializationValuesCompatible(this.getFormattedValues(), formatted);
    }
    /**
     * Return the stored initialization data values, with added niceties:
     *   - they are sorted always the same way for similar
     *     `InitDataValuesContainer`
     *   - each value is associated to its hash, which is always done with  the
     *     same hashing function than for all other InitDataValuesContainer).
     *
     * The main point being to be able to compare much faster multiple
     * `InitDataValuesContainer`, though that data can also be used in any
     * other way.
     * @returns {Array.<Object>}
     */
    getFormattedValues() {
        if (this._lazyFormattedValues === null) {
            this._lazyFormattedValues = formatInitDataValues(this._innerValues);
        }
        return this._lazyFormattedValues;
    }
}
/**
 * Format given initializationData's values so they are faster to compare:
 *   - sort them by systemId
 *   - add hash for each initialization data encountered.
 * @param {Array.<Object>} initialValues
 * @returns {Array.<Object>}
 */
function formatInitDataValues(initialValues) {
    return initialValues.slice()
        .sort((a, b) => a.systemId === b.systemId ? 0 :
        a.systemId === undefined ? 1 :
            b.systemId === undefined ? -1 :
                a.systemId < b.systemId ? -1 :
                    1)
        .map(({ systemId, data }) => ({ systemId,
        data,
        hash: hashBuffer(data) }));
}

;// CONCATENATED MODULE: ./src/core/decrypt/content_decryptor.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





















const { onEncrypted$: content_decryptor_onEncrypted$ } = event_listeners_namespaceObject;
/**
 * Module communicating with the Content Decryption Module (or CDM) to be able
 * to decrypt contents.
 *
 * The `ContentDecryptor` starts communicating with the CDM, to initialize the
 * key system, as soon as it is created.
 *
 * You can be notified of various events, such as fatal errors, by registering
 * to one of its multiple events (@see IContentDecryptorEvent).
 *
 * @class ContentDecryptor
 */
class ContentDecryptor extends EventEmitter {
    /**
     * Create a new `ContentDecryptor`, and initialize its decryption capabilities
     * right away.
     * Goes into the `WaitingForAttachment` state once that initialization is
     * done, after which you should call the `attach` method when you're ready for
     * those decryption capabilities to be attached to the HTMLMediaElement.
     *
     * @param {HTMLMediaElement} mediaElement - The MediaElement which will be
     * associated to a MediaKeys object
     * @param {Array.<Object>} ksOptions - key system configuration.
     * The `ContentDecryptor` can be given one or multiple key system
     * configurations. It will choose the appropriate one depending on user
     * settings and browser support.
     */
    constructor(mediaElement, ksOptions) {
        super();
        src_log.debug("DRM: Starting ContentDecryptor logic.");
        const canceller = new TaskCanceller();
        this._currentSessions = [];
        this._canceller = canceller;
        this._wasAttachCalled = false;
        this._initDataQueue = [];
        this._stateData = { state: ContentDecryptorState.Initializing,
            isMediaKeysAttached: false,
            isInitDataQueueLocked: true,
            data: null };
        this.error = null;
        const listenerSub = content_decryptor_onEncrypted$(mediaElement).subscribe(evt => {
            src_log.debug("DRM: Encrypted event received from media element.");
            const initData = getInitData(evt);
            if (initData !== null) {
                this.onInitializationData(initData);
            }
        });
        canceller.signal.register(() => {
            listenerSub.unsubscribe();
        });
        initMediaKeys(mediaElement, ksOptions, canceller.signal)
            .then((mediaKeysInfo) => {
            const { options, mediaKeySystemAccess } = mediaKeysInfo;
            /**
             * String identifying the key system, allowing the rest of the code to
             * only advertise the required initialization data for license requests.
             *
             * Note that we only set this value if retro-compatibility to older
             * persistent logic in the RxPlayer is not important, as the
             * optimizations this property unlocks can break the loading of
             * MediaKeySessions persisted in older RxPlayer's versions.
             */
            let systemId;
            if (isNullOrUndefined(options.licenseStorage) ||
                options.licenseStorage.disableRetroCompatibility === true) {
                systemId = getDrmSystemId(mediaKeySystemAccess.keySystem);
            }
            this.systemId = systemId;
            if (this._stateData.state === ContentDecryptorState.Initializing) {
                this._stateData = { state: ContentDecryptorState.WaitingForAttachment,
                    isInitDataQueueLocked: true,
                    isMediaKeysAttached: false,
                    data: { mediaKeysInfo,
                        mediaElement } };
                this.trigger("stateChange", this._stateData.state);
            }
        })
            .catch((err) => {
            this._onFatalError(err);
        });
    }
    /**
     * Returns the current state of the ContentDecryptor.
     * @see ContentDecryptorState
     * @returns {Object}
     */
    getState() {
        return this._stateData.state;
    }
    /**
     * Attach the current decryption capabilities to the HTMLMediaElement.
     * This method should only be called once the `ContentDecryptor` is in the
     * `WaitingForAttachment` state.
     *
     * You might want to first set the HTMLMediaElement's `src` attribute before
     * calling this method, and only push data to it once the `ReadyForContent`
     * state is reached, for compatibility reasons.
     */
    attach() {
        if (this._stateData.state !== ContentDecryptorState.WaitingForAttachment) {
            throw new Error("`attach` should only be called when " +
                "in the WaitingForAttachment state");
        }
        else if (this._wasAttachCalled) {
            src_log.warn("DRM: ContentDecryptor's `attach` method called more than once.");
            return;
        }
        this._wasAttachCalled = true;
        const { mediaElement, mediaKeysInfo } = this._stateData.data;
        const { options, mediaKeys, mediaKeySystemAccess, stores } = mediaKeysInfo;
        const stateToAttatch = { loadedSessionsStore: stores.loadedSessionsStore,
            mediaKeySystemAccess,
            mediaKeys,
            keySystemOptions: options };
        const shouldDisableLock = options.disableMediaKeysAttachmentLock === true;
        if (shouldDisableLock) {
            this._stateData = { state: ContentDecryptorState.ReadyForContent,
                isInitDataQueueLocked: true,
                isMediaKeysAttached: false,
                data: null };
            this.trigger("stateChange", this._stateData.state);
            if (this._isStopped()) { // previous trigger might have lead to disposal
                return;
            }
        }
        src_log.debug("DRM: Attaching current MediaKeys");
        attachMediaKeys(mediaElement, stateToAttatch, this._canceller.signal)
            .then(async () => {
            const { serverCertificate } = options;
            if (!isNullOrUndefined(serverCertificate)) {
                const resSsc = await trySettingServerCertificate(mediaKeys, serverCertificate);
                if (resSsc.type === "error") {
                    this.trigger("warning", resSsc.value);
                }
            }
            if (this._isStopped()) { // We might be stopped since then
                return;
            }
            const prevState = this._stateData.state;
            this._stateData = { state: ContentDecryptorState.ReadyForContent,
                isMediaKeysAttached: true,
                isInitDataQueueLocked: false,
                data: { mediaKeysData: mediaKeysInfo } };
            if (prevState !== ContentDecryptorState.ReadyForContent) {
                this.trigger("stateChange", ContentDecryptorState.ReadyForContent);
            }
            if (!this._isStopped()) {
                this._processCurrentInitDataQueue();
            }
        })
            .catch((err) => {
            this._onFatalError(err);
        });
    }
    /**
     * Stop this `ContentDecryptor` instance:
     *   - stop listening and reacting to the various event listeners
     *   - abort all operations.
     *
     * Once disposed, a `ContentDecryptor` cannot be used anymore.
     */
    dispose() {
        this.removeEventListener();
        this._stateData = { state: ContentDecryptorState.Disposed,
            isMediaKeysAttached: undefined,
            isInitDataQueueLocked: undefined,
            data: null };
        this._canceller.cancel();
        this.trigger("stateChange", this._stateData.state);
    }
    /**
     * Method to call when new protection initialization data is encounted on the
     * content.
     *
     * When called, the `ContentDecryptor` will try to obtain the decryption key
     * if not already obtained.
     *
     * @param {Object} initializationData
     */
    onInitializationData(initializationData) {
        if (this._stateData.isInitDataQueueLocked !== false) {
            if (this._isStopped()) {
                throw new Error("ContentDecryptor either disposed or stopped.");
            }
            this._initDataQueue.push(initializationData);
            return;
        }
        const { mediaKeysData } = this._stateData.data;
        const processedInitializationData = Object.assign(Object.assign({}, initializationData), { values: new InitDataValuesContainer(initializationData.values) });
        this._processInitializationData(processedInitializationData, mediaKeysData)
            .catch(err => { this._onFatalError(err); });
    }
    /**
     * Async logic run each time new initialization data has to be processed.
     * The promise return may reject, in which case a fatal error should be linked
     * the current `ContentDecryptor`.
     *
     * The Promise's resolution however provides no semantic value.
     * @param {Object} initializationData
     * @returns {Promise.<void>}
     */
    async _processInitializationData(initializationData, mediaKeysData) {
        const { mediaKeySystemAccess, stores, options } = mediaKeysData;
        if (this._tryToUseAlreadyCreatedSession(initializationData, mediaKeysData) ||
            this._isStopped()) // _isStopped is voluntarly checked after here
         {
            return;
        }
        if (options.singleLicensePer === "content") {
            const firstCreatedSession = arrayFind(this._currentSessions, (x) => x.source === "created-session" /* MediaKeySessionLoadingType.Created */);
            if (firstCreatedSession !== undefined) {
                // We already fetched a `singleLicensePer: "content"` license, yet we
                // could not use the already-created MediaKeySession with it.
                // It means that we'll never handle it and we should thus blacklist it.
                const keyIds = initializationData.keyIds;
                if (keyIds === undefined) {
                    if (initializationData.content === undefined) {
                        src_log.warn("DRM: Unable to fallback from a non-decipherable quality.");
                    }
                    else {
                        blackListProtectionData(initializationData.content.manifest, initializationData);
                    }
                    return;
                }
                firstCreatedSession.record.associateKeyIds(keyIds);
                if (initializationData.content !== undefined) {
                    if (src_log.hasLevel("DEBUG")) {
                        const hexKids = keyIds
                            .reduce((acc, kid) => `${acc}, ${bytesToHex(kid)}`, "");
                        src_log.debug("DRM: Blacklisting new key ids", hexKids);
                    }
                    updateDecipherability(initializationData.content.manifest, [], keyIds, []);
                }
                return;
            }
        }
        else if (options.singleLicensePer === "periods" &&
            initializationData.content !== undefined) {
            const { period } = initializationData.content;
            const createdSessions = this._currentSessions
                .filter(x => x.source === "created-session" /* MediaKeySessionLoadingType.Created */);
            const periodKeys = new Set();
            addKeyIdsFromPeriod(periodKeys, period);
            for (const createdSess of createdSessions) {
                const periodKeysArr = Array.from(periodKeys);
                for (const kid of periodKeysArr) {
                    if (createdSess.record.isAssociatedWithKeyId(kid)) {
                        createdSess.record.associateKeyIds(periodKeys.values());
                        // Re-loop through the Period's key ids to blacklist ones that are missing
                        // from `createdSess`'s `keyStatuses` and to update the content's
                        // decipherability.
                        for (const innerKid of periodKeysArr) {
                            if (!isKeyIdContainedIn(innerKid, createdSess.keyStatuses.whitelisted) &&
                                !isKeyIdContainedIn(innerKid, createdSess.keyStatuses.blacklisted)) {
                                createdSess.keyStatuses.blacklisted.push(innerKid);
                            }
                        }
                        updateDecipherability(initializationData.content.manifest, createdSess.keyStatuses.whitelisted, createdSess.keyStatuses.blacklisted, []);
                        return;
                    }
                }
            }
        }
        // /!\ Do not forget to unlock when done
        // TODO this is error-prone and can lead to performance issue when loading
        // persistent sessions.
        // Can we find a better strategy?
        this._lockInitDataQueue();
        let wantedSessionType;
        if (options.persistentLicense !== true) {
            wantedSessionType = "temporary";
        }
        else if (!canCreatePersistentSession(mediaKeySystemAccess)) {
            src_log.warn("DRM: Cannot create \"persistent-license\" session: not supported");
            wantedSessionType = "temporary";
        }
        else {
            wantedSessionType = "persistent-license";
        }
        const { EME_DEFAULT_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS, EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION } = src_config.getCurrent();
        const maxSessionCacheSize = typeof options.maxSessionCacheSize === "number" ?
            options.maxSessionCacheSize :
            EME_DEFAULT_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS;
        const sessionRes = await createOrLoadSession(initializationData, stores, wantedSessionType, maxSessionCacheSize, this._canceller.signal);
        if (this._isStopped()) {
            return;
        }
        const sessionInfo = {
            record: sessionRes.value.keySessionRecord,
            source: sessionRes.type,
            keyStatuses: { whitelisted: [], blacklisted: [] },
            blacklistedSessionError: null,
        };
        this._currentSessions.push(sessionInfo);
        const { mediaKeySession, sessionType } = sessionRes.value;
        /**
         * We only store persistent sessions once its keys are known.
         * This boolean allows to know if this session has already been
         * persisted or not.
         */
        let isSessionPersisted = false;
        const sub = SessionEventsListener(mediaKeySession, options, mediaKeySystemAccess.keySystem)
            .subscribe({
            next: (evt) => {
                if (evt.type === "warning") {
                    this.trigger("warning", evt.value);
                    return;
                }
                const linkedKeys = getKeyIdsLinkedToSession(initializationData, sessionInfo.record, options.singleLicensePer, sessionInfo.source === "created-session" /* MediaKeySessionLoadingType.Created */, evt.value.whitelistedKeyIds, evt.value.blacklistedKeyIds);
                sessionInfo.record.associateKeyIds(linkedKeys.whitelisted);
                sessionInfo.record.associateKeyIds(linkedKeys.blacklisted);
                sessionInfo.keyStatuses = { whitelisted: linkedKeys.whitelisted,
                    blacklisted: linkedKeys.blacklisted };
                if (sessionInfo.record.getAssociatedKeyIds().length !== 0 &&
                    sessionType === "persistent-license" &&
                    stores.persistentSessionsStore !== null &&
                    !isSessionPersisted) {
                    const { persistentSessionsStore } = stores;
                    cleanOldStoredPersistentInfo(persistentSessionsStore, EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION - 1);
                    persistentSessionsStore.add(initializationData, sessionInfo.record.getAssociatedKeyIds(), mediaKeySession);
                    isSessionPersisted = true;
                }
                if (initializationData.content !== undefined) {
                    updateDecipherability(initializationData.content.manifest, linkedKeys.whitelisted, linkedKeys.blacklisted, []);
                }
                this._unlockInitDataQueue();
            },
            error: (err) => {
                var _a;
                if (err instanceof DecommissionedSessionError) {
                    src_log.warn("DRM: A session's closing condition has been triggered");
                    this._lockInitDataQueue();
                    const indexOf = this._currentSessions.indexOf(sessionInfo);
                    if (indexOf >= 0) {
                        this._currentSessions.splice(indexOf);
                    }
                    if (initializationData.content !== undefined) {
                        updateDecipherability(initializationData.content.manifest, [], [], sessionInfo.record.getAssociatedKeyIds());
                    }
                    (_a = stores.persistentSessionsStore) === null || _a === void 0 ? void 0 : _a.delete(mediaKeySession.sessionId);
                    stores.loadedSessionsStore.closeSession(mediaKeySession)
                        .catch(e => {
                        const closeError = e instanceof Error ? e :
                            "unknown error";
                        src_log.warn("DRM: failed to close expired session", closeError);
                    })
                        .then(() => this._unlockInitDataQueue())
                        .catch((retryError) => this._onFatalError(retryError));
                    if (!this._isStopped()) {
                        this.trigger("warning", err.reason);
                    }
                    return;
                }
                if (!(err instanceof BlacklistedSessionError)) {
                    this._onFatalError(err);
                    return;
                }
                sessionInfo.blacklistedSessionError = err;
                if (initializationData.content !== undefined) {
                    const { manifest } = initializationData.content;
                    src_log.info("DRM: blacklisting Representations based on " +
                        "protection data.");
                    blackListProtectionData(manifest, initializationData);
                }
                this._unlockInitDataQueue();
                // TODO warning for blacklisted session?
            },
        });
        this._canceller.signal.register(() => {
            sub.unsubscribe();
        });
        if (options.singleLicensePer === undefined ||
            options.singleLicensePer === "init-data") {
            this._unlockInitDataQueue();
        }
        if (sessionRes.type === "created-session" /* MediaKeySessionLoadingType.Created */) {
            const requestData = initializationData.values.constructRequestData();
            try {
                await stores.loadedSessionsStore.generateLicenseRequest(mediaKeySession, initializationData.type, requestData);
            }
            catch (error) {
                // First check that the error was not due to the MediaKeySession closing
                // or being closed
                const entry = stores.loadedSessionsStore.getEntryForSession(mediaKeySession);
                if (entry === null || entry.closingStatus.type !== "none") {
                    // MediaKeySession closing/closed: Just remove from handled list and abort.
                    const indexInCurrent = this._currentSessions.indexOf(sessionInfo);
                    if (indexInCurrent >= 0) {
                        this._currentSessions.splice(indexInCurrent, 1);
                    }
                    return Promise.resolve();
                }
                throw new EncryptedMediaError("KEY_GENERATE_REQUEST_ERROR", error instanceof Error ? error.toString() :
                    "Unknown error");
            }
        }
        return Promise.resolve();
    }
    _tryToUseAlreadyCreatedSession(initializationData, mediaKeysData) {
        const { stores, options } = mediaKeysData;
        /**
         * If set, a currently-used key session is already compatible to this
         * initialization data.
         */
        const compatibleSessionInfo = arrayFind(this._currentSessions, (x) => x.record.isCompatibleWith(initializationData));
        if (compatibleSessionInfo === undefined) {
            return false;
        }
        // Check if the compatible session is blacklisted
        const blacklistedSessionError = compatibleSessionInfo.blacklistedSessionError;
        if (!isNullOrUndefined(blacklistedSessionError)) {
            if (initializationData.type === undefined ||
                initializationData.content === undefined) {
                src_log.error("DRM: This initialization data has already been blacklisted " +
                    "but the current content is not known.");
                return true;
            }
            else {
                src_log.info("DRM: This initialization data has already been blacklisted. " +
                    "Blacklisting the related content.");
                const { manifest } = initializationData.content;
                blackListProtectionData(manifest, initializationData);
                return true;
            }
        }
        // Check if the current key id(s) has been blacklisted by this session
        if (initializationData.keyIds !== undefined) {
            /**
             * If set to `true`, the Representation(s) linked to this
             * initialization data's key id should be marked as "not decipherable".
             */
            let isUndecipherable;
            if (options.singleLicensePer === undefined ||
                options.singleLicensePer === "init-data") {
                // Note: In the default "init-data" mode, we only avoid a
                // Representation if the key id was originally explicitely
                // blacklisted (and not e.g. if its key was just not present in
                // the license).
                //
                // This is to enforce v3.x.x retro-compatibility: we cannot
                // fallback from a Representation unless some RxPlayer option
                // documentating this behavior has been set.
                const { blacklisted } = compatibleSessionInfo.keyStatuses;
                isUndecipherable = areSomeKeyIdsContainedIn(initializationData.keyIds, blacklisted);
            }
            else {
                // In any other mode, as soon as not all of this initialization
                // data's linked key ids are explicitely whitelisted, we can mark
                // the corresponding Representation as "not decipherable".
                // This is because we've no such retro-compatibility guarantee to
                // make there.
                const { whitelisted } = compatibleSessionInfo.keyStatuses;
                isUndecipherable = !areAllKeyIdsContainedIn(initializationData.keyIds, whitelisted);
            }
            if (isUndecipherable) {
                if (initializationData.content === undefined) {
                    src_log.error("DRM: Cannot forbid key id, the content is unknown.");
                    return true;
                }
                src_log.info("DRM: Current initialization data is linked to blacklisted keys. " +
                    "Marking Representations as not decipherable");
                updateDecipherability(initializationData.content.manifest, [], initializationData.keyIds, []);
                return true;
            }
        }
        // If we reached here, it means that this initialization data is not
        // blacklisted in any way.
        // Search loaded session and put it on top of the cache if it exists.
        const entry = stores.loadedSessionsStore.reuse(initializationData);
        if (entry !== null) {
            // TODO update decipherability to `true` if not?
            src_log.debug("DRM: Init data already processed. Skipping it.");
            return true;
        }
        // Session not found in `loadedSessionsStore`, it might have been closed
        // since.
        // Remove from `this._currentSessions` and start again.
        const indexOf = this._currentSessions.indexOf(compatibleSessionInfo);
        if (indexOf === -1) {
            src_log.error("DRM: Unable to remove processed init data: not found.");
        }
        else {
            src_log.debug("DRM: A session from a processed init data is not available " +
                "anymore. Re-processing it.");
            this._currentSessions.splice(indexOf, 1);
        }
        return false;
    }
    /**
     * Callback that should be called if an error that made the current
     * `ContentDecryptor` instance unusable arised.
     * This callbacks takes care of resetting state and sending the right events.
     *
     * Once called, no further actions should be taken.
     *
     * @param {*} err - The error object which describes the issue. Will be
     * formatted and sent in an "error" event.
     */
    _onFatalError(err) {
        if (this._canceller.isUsed) {
            return;
        }
        const formattedErr = err instanceof Error ?
            err :
            new OtherError("NONE", "Unknown decryption error");
        this.error = formattedErr;
        this._initDataQueue.length = 0;
        this._stateData = { state: ContentDecryptorState.Error,
            isMediaKeysAttached: undefined,
            isInitDataQueueLocked: undefined,
            data: null };
        this._canceller.cancel();
        this.trigger("error", formattedErr);
        // The previous trigger might have lead to a disposal of the `ContentDecryptor`.
        if (this._stateData.state === ContentDecryptorState.Error) {
            this.trigger("stateChange", this._stateData.state);
        }
    }
    /**
     * Return `true` if the `ContentDecryptor` has either been disposed or
     * encountered a fatal error which made it stop.
     * @returns {boolean}
     */
    _isStopped() {
        return this._stateData.state === ContentDecryptorState.Disposed ||
            this._stateData.state === ContentDecryptorState.Error;
    }
    /**
     * Start processing the next initialization data of the `_initDataQueue` if it
     * isn't lock.
     */
    _processCurrentInitDataQueue() {
        while (this._stateData.isInitDataQueueLocked === false) {
            const initData = this._initDataQueue.shift();
            if (initData === undefined) {
                return;
            }
            this.onInitializationData(initData);
        }
    }
    /**
     * Lock new initialization data (from the `_initDataQueue`) from being
     * processed until `_unlockInitDataQueue` is called.
     *
     * You may want to call this method when performing operations which may have
     * an impact on the handling of other initialization data.
     */
    _lockInitDataQueue() {
        if (this._stateData.isInitDataQueueLocked === false) {
            this._stateData.isInitDataQueueLocked = true;
        }
    }
    /**
     * Unlock `_initDataQueue` and start processing the first element.
     *
     * Should have no effect if the `_initDataQueue` was not locked.
     */
    _unlockInitDataQueue() {
        if (this._stateData.isMediaKeysAttached !== true) {
            src_log.error("DRM: Trying to unlock in the wrong state");
            return;
        }
        this._stateData.isInitDataQueueLocked = false;
        this._processCurrentInitDataQueue();
    }
}
/**
 * Returns `true` if the given MediaKeySystemAccess can create
 * "persistent-license" MediaKeySessions.
 * @param {MediaKeySystemAccess} mediaKeySystemAccess
 * @returns {Boolean}
 */
function canCreatePersistentSession(mediaKeySystemAccess) {
    const { sessionTypes } = mediaKeySystemAccess.getConfiguration();
    return sessionTypes !== undefined &&
        arrayIncludes(sessionTypes, "persistent-license");
}
/**
 * Change the decipherability of Representations which have their key id in one
 * of the given Arrays:
 *
 *   - Those who have a key id listed in `whitelistedKeyIds` will have their
 *     decipherability updated to `true`
 *
 *   - Those who have a key id listed in `blacklistedKeyIds` will have their
 *     decipherability updated to `false`
 *
 *   - Those who have a key id listed in `delistedKeyIds` will have their
 *     decipherability updated to `undefined`.
 *
 * @param {Object} manifest
 * @param {Array.<Uint8Array>} whitelistedKeyIds
 * @param {Array.<Uint8Array>} blacklistedKeyIds
 * @param {Array.<Uint8Array>} delistedKeyIds
 */
function updateDecipherability(manifest, whitelistedKeyIds, blacklistedKeyIds, delistedKeyIds) {
    manifest.updateRepresentationsDeciperability((representation) => {
        if (representation.contentProtections === undefined) {
            return representation.decipherable;
        }
        const contentKIDs = representation.contentProtections.keyIds;
        if (contentKIDs !== undefined) {
            for (const elt of contentKIDs) {
                for (const blacklistedKeyId of blacklistedKeyIds) {
                    if (areKeyIdsEqual(blacklistedKeyId, elt.keyId)) {
                        return false;
                    }
                }
                for (const whitelistedKeyId of whitelistedKeyIds) {
                    if (areKeyIdsEqual(whitelistedKeyId, elt.keyId)) {
                        return true;
                    }
                }
                for (const delistedKeyId of delistedKeyIds) {
                    if (areKeyIdsEqual(delistedKeyId, elt.keyId)) {
                        return undefined;
                    }
                }
            }
        }
        return representation.decipherable;
    });
}
/**
 * Update decipherability to `false` to any Representation which is linked to
 * the given initialization data.
 * @param {Object} manifest
 * @param {Object} initData
 */
function blackListProtectionData(manifest, initData) {
    manifest.updateRepresentationsDeciperability((representation) => {
        var _a, _b;
        if (representation.decipherable === false) {
            return false;
        }
        const segmentProtections = (_b = (_a = representation.contentProtections) === null || _a === void 0 ? void 0 : _a.initData) !== null && _b !== void 0 ? _b : [];
        for (const protection of segmentProtections) {
            if (initData.type === undefined ||
                protection.type === initData.type) {
                const containedInitData = initData.values.getFormattedValues()
                    .every(undecipherableVal => {
                    return protection.values.some(currVal => {
                        return (undecipherableVal.systemId === undefined ||
                            currVal.systemId === undecipherableVal.systemId) &&
                            areArraysOfNumbersEqual(currVal.data, undecipherableVal.data);
                    });
                });
                if (containedInitData) {
                    return false;
                }
            }
        }
        return representation.decipherable;
    });
}
/** Enumeration of the various "state" the `ContentDecryptor` can be in. */
var ContentDecryptorState;
(function (ContentDecryptorState) {
    /**
     * The `ContentDecryptor` is not yet ready to create key sessions and request
     * licenses.
     * This is is the initial state of the ContentDecryptor.
     */
    ContentDecryptorState[ContentDecryptorState["Initializing"] = 0] = "Initializing";
    /**
     * The `ContentDecryptor` has been initialized.
     * You should now called the `attach` method when you want to add decryption
     * capabilities to the HTMLMediaElement. The ContentDecryptor won't go to the
     * `ReadyForContent` state until `attach` is called.
     *
     * For compatibility reasons, this should be done after the HTMLMediaElement's
     * src attribute is set.
     *
     * It is also from when this state is reached that the `ContentDecryptor`'s
     * `systemId` property may be known.
     *
     * This state is always coming after the `Initializing` state.
     */
    ContentDecryptorState[ContentDecryptorState["WaitingForAttachment"] = 1] = "WaitingForAttachment";
    /**
     * Content (encrypted or not) can begin to be pushed on the HTMLMediaElement
     * (this state was needed because some browser quirks sometimes forces us to
     * call EME API before this can be done).
     *
     * This state is always coming after the `WaitingForAttachment` state.
     */
    ContentDecryptorState[ContentDecryptorState["ReadyForContent"] = 2] = "ReadyForContent";
    /**
     * The `ContentDecryptor` has encountered a fatal error and has been stopped.
     * It is now unusable.
     */
    ContentDecryptorState[ContentDecryptorState["Error"] = 3] = "Error";
    /** The `ContentDecryptor` has been disposed of and is now unusable. */
    ContentDecryptorState[ContentDecryptorState["Disposed"] = 4] = "Disposed";
})(ContentDecryptorState || (ContentDecryptorState = {}));
/**
 * Returns set of all usable and unusable keys - explicit or implicit - that are
 * linked to a `MediaKeySession`.
 *
 * In the RxPlayer, there is a concept of "explicit" key ids, which are key ids
 * found in a license whose status can be known through the `keyStatuses`
 * property from a `MediaKeySession`, and of "implicit" key ids, which are key
 * ids which were expected to be in a fetched license, but apparently weren't.
 *
 * @param {Object} initializationData - Initialization data object used to make
 * the request for the current license.
 * @param {Object} keySessionRecord - The `KeySessionRecord` associated with the
 * session that has been loaded. It might give supplementary information on
 * keys implicitly linked to the license.
 * @param {string|undefined} singleLicensePer - Setting allowing to indicate the
 * scope a given license should have.
 * @param {boolean} isCurrentLicense - If `true` the license has been fetched
 * especially for the current content.
 *
 * Knowing this allows to determine that if decryption keys that should have
 * been referenced in the fetched license (according to the `singleLicensePer`
 * setting) are missing, then the keys surely must have been voluntarly
 * removed from the license.
 *
 * If it is however set to `false`, it means that the license is an older
 * license that might have been linked to another content, thus we cannot make
 * that assumption.
 * @param {Array.<Uint8Array>} usableKeyIds - Key ids that are present in the
 * license and can be used.
 * @param {Array.<Uint8Array>} unusableKeyIds - Key ids that are present in the
 * license yet cannot be used.
 * @returns {Object} - Returns an object with the following properties:
 *   - `whitelisted`: Array of key ids for keys that are known to be usable
 *   - `blacklisted`: Array of key ids for keys that are considered unusable.
 *     The qualities linked to those keys should not be played.
 */
function getKeyIdsLinkedToSession(initializationData, keySessionRecord, singleLicensePer, isCurrentLicense, usableKeyIds, unusableKeyIds) {
    var _a;
    /**
     * Every key id associated with the MediaKeySession, starting with
     * whitelisted ones.
     */
    const associatedKeyIds = [...usableKeyIds,
        ...unusableKeyIds];
    // Add all key ids associated to the `KeySessionRecord` yet not in
    // `usableKeyIds` nor in `unusableKeyIds`
    const allKnownKeyIds = keySessionRecord.getAssociatedKeyIds();
    for (const kid of allKnownKeyIds) {
        if (!associatedKeyIds.some(ak => areKeyIdsEqual(ak, kid))) {
            if (src_log.hasLevel("DEBUG")) {
                src_log.debug("DRM: KeySessionRecord's key missing in the license, blacklisting it", bytesToHex(kid));
            }
            associatedKeyIds.push(kid);
        }
    }
    if (singleLicensePer !== undefined && singleLicensePer !== "init-data") {
        // We want to add the current key ids in the blacklist if it is
        // not already there.
        //
        // We only do that when `singleLicensePer` is set to something
        // else than the default `"init-data"` because this logic:
        //   1. might result in a quality fallback, which is a v3.x.x
        //      breaking change if some APIs (like `singleLicensePer`)
        //      aren't used.
        //   2. Rely on the EME spec regarding key statuses being well
        //      implemented on all supported devices, which we're not
        //      sure yet. Because in any other `singleLicensePer`, we
        //      need a good implementation anyway, it doesn't matter
        //      there.
        const { keyIds: expectedKeyIds, content } = initializationData;
        if (expectedKeyIds !== undefined) {
            const missingKeyIds = expectedKeyIds.filter(expected => {
                return !associatedKeyIds.some(k => areKeyIdsEqual(k, expected));
            });
            if (missingKeyIds.length > 0) {
                if (src_log.hasLevel("DEBUG")) {
                    src_log.debug("DRM: init data keys missing in the license, blacklisting them", missingKeyIds.map(m => bytesToHex(m)).join(", "));
                }
                associatedKeyIds.push(...missingKeyIds);
            }
        }
        if (isCurrentLicense && content !== undefined) {
            if (singleLicensePer === "content") {
                // Put it in a Set to automatically filter out duplicates (by ref)
                const contentKeys = new Set();
                const { manifest } = content;
                for (const period of manifest.periods) {
                    addKeyIdsFromPeriod(contentKeys, period);
                }
                mergeKeyIdSetIntoArray(contentKeys, associatedKeyIds);
            }
            else if (singleLicensePer === "periods") {
                const { manifest } = content;
                for (const period of manifest.periods) {
                    const periodKeys = new Set();
                    addKeyIdsFromPeriod(periodKeys, period);
                    if (((_a = initializationData.content) === null || _a === void 0 ? void 0 : _a.period.id) === period.id) {
                        mergeKeyIdSetIntoArray(periodKeys, associatedKeyIds);
                    }
                    else {
                        const periodKeysArr = Array.from(periodKeys);
                        for (const kid of periodKeysArr) {
                            const isFound = associatedKeyIds.some(k => areKeyIdsEqual(k, kid));
                            if (isFound) {
                                mergeKeyIdSetIntoArray(periodKeys, associatedKeyIds);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    return { whitelisted: usableKeyIds,
        /** associatedKeyIds starts with the whitelisted one. */
        blacklisted: associatedKeyIds.slice(usableKeyIds.length) };
}
/**
 * Push all kei ids in the given `set` and add it to the `arr` Array only if it
 * isn't already present in it.
 * @param {Set.<Uint8Array>} set
 * @param {Array.<Uint8Array>} arr
 */
function mergeKeyIdSetIntoArray(set, arr) {
    const setArr = Array.from(set.values());
    for (const kid of setArr) {
        const isFound = arr.some(k => areKeyIdsEqual(k, kid));
        if (!isFound) {
            arr.push(kid);
        }
    }
}
/**
 * Add to the given `set` all key ids found in the given `Period`.
 * @param {Set.<Uint8Array>} set
 * @param {Object} period
 */
function addKeyIdsFromPeriod(set, period) {
    for (const adaptation of period.getAdaptations()) {
        for (const representation of adaptation.representations) {
            if (representation.contentProtections !== undefined &&
                representation.contentProtections.keyIds !== undefined) {
                for (const kidInf of representation.contentProtections.keyIds) {
                    set.add(kidInf.keyId);
                }
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/core/init/link_drm_and_content.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






const { onEncrypted$: link_drm_and_content_onEncrypted$ } = event_listeners_namespaceObject;
/**
 * @param {HTMLMediaElement} mediaElement
 * @param {Array.<Object>} keySystems
 * @param {Observable<Object>} contentProtections$
 * @param {Promise} linkingMedia$
 * @returns {Observable}
 */
function linkDrmAndContent(mediaElement, keySystems, contentProtections$, linkingMedia$) {
    const encryptedEvents$ = merge(link_drm_and_content_onEncrypted$(mediaElement), contentProtections$);
    if (src_features.ContentDecryptor == null) {
        return merge(encryptedEvents$.pipe(map(() => {
            src_log.error("Init: Encrypted event but EME feature not activated");
            throw new EncryptedMediaError("MEDIA_IS_ENCRYPTED_ERROR", "EME feature not activated.");
        })), linkingMedia$.pipe(map(mediaSource => ({
            type: "decryption-disabled",
            value: { drmSystemId: undefined, mediaSource },
        }))));
    }
    if (keySystems.length === 0) {
        return merge(encryptedEvents$.pipe(map(() => {
            src_log.error("Init: Ciphered media and no keySystem passed");
            throw new EncryptedMediaError("MEDIA_IS_ENCRYPTED_ERROR", "Media is encrypted and no `keySystems` given");
        })), linkingMedia$.pipe(map(mediaSource => ({
            type: "decryption-disabled",
            value: { drmSystemId: undefined, mediaSource },
        }))));
    }
    if (!hasEMEAPIs()) {
        return merge(encryptedEvents$.pipe(map(() => {
            src_log.error("Init: Encrypted event but no EME API available");
            throw new EncryptedMediaError("MEDIA_IS_ENCRYPTED_ERROR", "Encryption APIs not found.");
        })), linkingMedia$.pipe(map(mediaSource => ({
            type: "decryption-disabled",
            value: { drmSystemId: undefined, mediaSource },
        }))));
    }
    src_log.debug("Init: Creating ContentDecryptor");
    const ContentDecryptor = src_features.ContentDecryptor;
    return new Observable_Observable((obs) => {
        const contentDecryptor = new ContentDecryptor(mediaElement, keySystems);
        let mediaSub;
        contentDecryptor.addEventListener("stateChange", (state) => {
            if (state === ContentDecryptorState.WaitingForAttachment) {
                contentDecryptor.removeEventListener("stateChange");
                mediaSub = linkingMedia$.subscribe(mediaSource => {
                    contentDecryptor.addEventListener("stateChange", (newState) => {
                        if (newState === ContentDecryptorState.ReadyForContent) {
                            obs.next({ type: "decryption-ready",
                                value: { drmSystemId: contentDecryptor.systemId,
                                    mediaSource } });
                            contentDecryptor.removeEventListener("stateChange");
                        }
                    });
                    contentDecryptor.attach();
                });
            }
        });
        contentDecryptor.addEventListener("error", (e) => {
            obs.error(e);
        });
        contentDecryptor.addEventListener("warning", (w) => {
            obs.next({ type: "warning", value: w });
        });
        const protectionDataSub = contentProtections$.subscribe(data => {
            contentDecryptor.onInitializationData(data);
        });
        return () => {
            protectionDataSub.unsubscribe();
            mediaSub === null || mediaSub === void 0 ? void 0 : mediaSub.unsubscribe();
            contentDecryptor.dispose();
        };
    });
}

;// CONCATENATED MODULE: ./src/compat/change_source_buffer_type.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * If the changeType MSE API is implemented, update the current codec of the
 * SourceBuffer and return true if it succeeded.
 * In any other cases, return false.
 * @param {Object} sourceBuffer
 * @param {string} codec
 * @returns {boolean}
 */
function tryToChangeSourceBufferType(sourceBuffer, codec) {
    if (typeof sourceBuffer.changeType === "function") {
        try {
            sourceBuffer.changeType(codec);
        }
        catch (e) {
            src_log.warn("Could not call 'changeType' on the given SourceBuffer:", e instanceof Error ? e : "");
            return false;
        }
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/inventory/buffered_history.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Register a short-lived history of buffer information.
 *
 * This class can be useful to develop heuristics based on short-term buffer
 * history, such as knowing the real start and end of a buffered segment once
 * it has been pushed in a buffer.
 *
 * By storing in a history important recent actions and events, the
 * `BufferedHistory` can help other RxPlayer modules detect and work-around
 * unusual behavior.
 *
 * @class BufferedHistory
 */
class BufferedHistory {
    /**
     * @param {number} lifetime - Maximum time a history entry should be retained.
     * @param {number} maxHistoryLength - Maximum number of entries the history
     * should have.
     */
    constructor(lifetime, maxHistoryLength) {
        this._history = [];
        this._lifetime = lifetime;
        this._maxHistoryLength = maxHistoryLength;
    }
    /**
     * Add an entry to the `BufferedHistory`'s history indicating the buffered
     * range of a pushed segment.
     *
     * To call when the full range of a given segment becomes known.
     *
     * @param {Object} context
     * @param {Array.<number>|null} buffered
     */
    addBufferedSegment(context, buffered) {
        const now = performance.now();
        this._history.push({ date: now,
            buffered,
            context });
        this._cleanHistory(now);
    }
    /**
     * Returns all entries linked to the given segment.
     * @param {Object} context
     * @returns {Array.<Object>}
     */
    getHistoryFor(context) {
        return this._history.filter(el => areSameContent(el.context, context));
    }
    /**
     * If the current history does not satisfy `_lifetime` or `_maxHistoryLength`,
     * clear older entries until it does.
     * @param {number} now - Current `performance.now()` result.
     */
    _cleanHistory(now) {
        const historyEarliestLimit = now - this._lifetime;
        let firstKeptIndex = 0;
        for (const event of this._history) {
            if (event.date < historyEarliestLimit) {
                firstKeptIndex++;
            }
            else {
                break;
            }
        }
        if (firstKeptIndex > 0) {
            this._history = this._history.splice(firstKeptIndex);
        }
        if (this._history.length > this._maxHistoryLength) {
            const toRemove = this._history.length - this._maxHistoryLength;
            this._history = this._history.splice(toRemove);
        }
    }
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/inventory/segment_inventory.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Keep track of every chunk downloaded and currently in the linked media
 * buffer.
 *
 * The main point of this class is to know which chunks are already pushed to
 * the corresponding media buffer, at which bitrate, and which have been garbage-collected
 * since by the browser (and thus may need to be re-loaded).
 * @class SegmentInventory
 */
class SegmentInventory {
    constructor() {
        const { BUFFERED_HISTORY_RETENTION_TIME, BUFFERED_HISTORY_MAXIMUM_ENTRIES } = src_config.getCurrent();
        this._inventory = [];
        this._bufferedHistory = new BufferedHistory(BUFFERED_HISTORY_RETENTION_TIME, BUFFERED_HISTORY_MAXIMUM_ENTRIES);
    }
    /**
     * Reset the whole inventory.
     */
    reset() {
        this._inventory.length = 0;
    }
    /**
     * Infer each segment's `bufferedStart` and `bufferedEnd` properties from the
     * TimeRanges given.
     *
     * The TimeRanges object given should come from the media buffer linked to
     * that SegmentInventory.
     *
     * /!\ A SegmentInventory should not be associated to multiple media buffers
     * at a time, so each `synchronizeBuffered` call should be given a TimeRanges
     * coming from the same buffer.
     * @param {TimeRanges} buffered
     */
    synchronizeBuffered(buffered) {
        const inventory = this._inventory;
        let inventoryIndex = 0; // Current index considered.
        let thisSegment = inventory[0]; // Current segmentInfos considered
        const { MINIMUM_SEGMENT_SIZE } = src_config.getCurrent();
        /** Type of buffer considered, used for logs */
        const bufferType = thisSegment === null || thisSegment === void 0 ? void 0 : thisSegment.infos.adaptation.type;
        const rangesLength = buffered.length;
        for (let i = 0; i < rangesLength; i++) {
            if (thisSegment === undefined) { // we arrived at the end of our inventory
                return;
            }
            // take the i'nth contiguous buffered TimeRange
            const rangeStart = buffered.start(i);
            const rangeEnd = buffered.end(i);
            if (rangeEnd - rangeStart < MINIMUM_SEGMENT_SIZE) {
                src_log.warn("SI: skipped TimeRange when synchronizing because it was too small", bufferType, rangeStart, rangeEnd);
                continue;
            }
            const indexBefore = inventoryIndex; // keep track of that number
            // Find the first segment either within this TimeRange or completely past
            // it:
            // skip until first segment with at least `MINIMUM_SEGMENT_SIZE` past the
            // start of that range.
            while (thisSegment !== undefined &&
                (takeFirstSet(thisSegment.bufferedEnd, thisSegment.end)
                    - rangeStart) < MINIMUM_SEGMENT_SIZE) {
                thisSegment = inventory[++inventoryIndex];
            }
            // Contains infos about the last garbage-collected segment before
            // `thisSegment`.
            let lastDeletedSegmentInfos = null;
            // remove garbage-collected segments
            // (Those not in that TimeRange nor in the previous one)
            const numberOfSegmentToDelete = inventoryIndex - indexBefore;
            if (numberOfSegmentToDelete > 0) {
                const lastDeletedSegment = // last garbage-collected segment
                 inventory[indexBefore + numberOfSegmentToDelete - 1];
                lastDeletedSegmentInfos = {
                    end: takeFirstSet(lastDeletedSegment.bufferedEnd, lastDeletedSegment.end),
                    precizeEnd: lastDeletedSegment.precizeEnd,
                };
                src_log.debug(`SI: ${numberOfSegmentToDelete} segments GCed.`, bufferType);
                const removed = inventory.splice(indexBefore, numberOfSegmentToDelete);
                for (const seg of removed) {
                    if (seg.bufferedStart === undefined && seg.bufferedEnd === undefined) {
                        this._bufferedHistory.addBufferedSegment(seg.infos, null);
                    }
                }
                inventoryIndex = indexBefore;
            }
            if (thisSegment === undefined) {
                return;
            }
            // If the current segment is actually completely outside that range (it
            // is contained in one of the next one), skip that part.
            if (rangeEnd -
                takeFirstSet(thisSegment.bufferedStart, thisSegment.start)
                >= MINIMUM_SEGMENT_SIZE) {
                guessBufferedStartFromRangeStart(thisSegment, rangeStart, lastDeletedSegmentInfos, bufferType);
                if (inventoryIndex === inventory.length - 1) {
                    // This is the last segment in the inventory.
                    // We can directly update the end as the end of the current range.
                    guessBufferedEndFromRangeEnd(thisSegment, rangeEnd, bufferType);
                    return;
                }
                thisSegment = inventory[++inventoryIndex];
                // Make contiguous until first segment outside that range
                let thisSegmentStart = takeFirstSet(thisSegment.bufferedStart, thisSegment.start);
                let thisSegmentEnd = takeFirstSet(thisSegment.bufferedEnd, thisSegment.end);
                const nextRangeStart = i < rangesLength - 1 ? buffered.start(i + 1) :
                    undefined;
                while (thisSegment !== undefined &&
                    (rangeEnd - thisSegmentStart) >= MINIMUM_SEGMENT_SIZE &&
                    (nextRangeStart === undefined ||
                        rangeEnd - thisSegmentStart >= thisSegmentEnd - nextRangeStart)) {
                    const prevSegment = inventory[inventoryIndex - 1];
                    // those segments are contiguous, we have no way to infer their real
                    // end
                    if (prevSegment.bufferedEnd === undefined) {
                        prevSegment.bufferedEnd = thisSegment.precizeStart ? thisSegment.start :
                            prevSegment.end;
                        src_log.debug("SI: calculating buffered end of contiguous segment", bufferType, prevSegment.bufferedEnd, prevSegment.end);
                    }
                    thisSegment.bufferedStart = prevSegment.bufferedEnd;
                    thisSegment = inventory[++inventoryIndex];
                    if (thisSegment !== undefined) {
                        thisSegmentStart = takeFirstSet(thisSegment.bufferedStart, thisSegment.start);
                        thisSegmentEnd = takeFirstSet(thisSegment.bufferedEnd, thisSegment.end);
                    }
                }
            }
            // update the bufferedEnd of the last segment in that range
            const lastSegmentInRange = inventory[inventoryIndex - 1];
            if (lastSegmentInRange !== undefined) {
                guessBufferedEndFromRangeEnd(lastSegmentInRange, rangeEnd, bufferType);
            }
        }
        // if we still have segments left, they are not affiliated to any range.
        // They might have been garbage collected, delete them from here.
        if (thisSegment != null) {
            src_log.debug("SI: last segments have been GCed", bufferType, inventoryIndex, inventory.length);
            const removed = inventory.splice(inventoryIndex, inventory.length - inventoryIndex);
            for (const seg of removed) {
                if (seg.bufferedStart === undefined && seg.bufferedEnd === undefined) {
                    this._bufferedHistory.addBufferedSegment(seg.infos, null);
                }
            }
        }
        if (bufferType !== undefined && src_log.hasLevel("DEBUG")) {
            src_log.debug(`SI: current ${bufferType} inventory timeline:\n` +
                prettyPrintInventory(this._inventory));
        }
    }
    /**
     * Add a new chunk in the inventory.
     *
     * Chunks are decodable sub-parts of a whole segment. Once all chunks in a
     * segment have been inserted, you should call the `completeSegment` method.
     * @param {Object} chunkInformation
     */
    insertChunk({ period, adaptation, representation, segment, chunkSize, start, end }) {
        if (segment.isInit) {
            return;
        }
        const bufferType = adaptation.type;
        if (start >= end) {
            src_log.warn("SI: Invalid chunked inserted: starts before it ends", bufferType, start, end);
            return;
        }
        const inventory = this._inventory;
        const newSegment = { partiallyPushed: true,
            chunkSize,
            splitted: false,
            start,
            end,
            precizeStart: false,
            precizeEnd: false,
            bufferedStart: undefined,
            bufferedEnd: undefined,
            infos: { segment, period, adaptation, representation } };
        // begin by the end as in most use cases this will be faster
        for (let i = inventory.length - 1; i >= 0; i--) {
            const segmentI = inventory[i];
            if ((segmentI.start) <= start) {
                if ((segmentI.end) <= start) {
                    // our segment is after, push it after this one
                    //
                    // Case 1:
                    //   prevSegment  : |------|
                    //   newSegment   :        |======|
                    //   ===>         : |------|======|
                    //
                    // Case 2:
                    //   prevSegment  : |------|
                    //   newSegment   :          |======|
                    //   ===>         : |------| |======|
                    src_log.debug("SI: Pushing segment strictly after previous one.", bufferType, start, segmentI.end);
                    this._inventory.splice(i + 1, 0, newSegment);
                    i += 2; // Go to segment immediately after newSegment
                    while (i < inventory.length && inventory[i].start < newSegment.end) {
                        if (inventory[i].end > newSegment.end) {
                            // The next segment ends after newSegment.
                            // Mutate the next segment.
                            //
                            // Case 1:
                            //   prevSegment  : |------|
                            //   newSegment   :        |======|
                            //   nextSegment  :            |----|
                            //   ===>         : |------|======|-|
                            src_log.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                            inventory[i].start = newSegment.end;
                            inventory[i].bufferedStart = undefined;
                            inventory[i].precizeStart = inventory[i].precizeStart &&
                                newSegment.precizeEnd;
                            return;
                        }
                        // The next segment was completely contained in newSegment.
                        // Remove it.
                        //
                        // Case 1:
                        //   prevSegment  : |------|
                        //   newSegment   :        |======|
                        //   nextSegment  :          |---|
                        //   ===>         : |------|======|
                        //
                        // Case 2:
                        //   prevSegment  : |------|
                        //   newSegment   :        |======|
                        //   nextSegment  :          |----|
                        //   ===>         : |------|======|
                        src_log.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                        inventory.splice(i, 1);
                    }
                    return;
                }
                else {
                    if (segmentI.start === start) {
                        if (segmentI.end <= end) {
                            // In those cases, replace
                            //
                            // Case 1:
                            //  prevSegment  : |-------|
                            //  newSegment   : |=======|
                            //  ===>         : |=======|
                            //
                            // Case 2:
                            //  prevSegment  : |-------|
                            //  newSegment   : |==========|
                            //  ===>         : |==========|
                            src_log.debug("SI: Segment pushed replace another one", bufferType, start, end, segmentI.end);
                            this._inventory.splice(i, 1, newSegment);
                            i += 1; // Go to segment immediately after newSegment
                            while (i < inventory.length && inventory[i].start < newSegment.end) {
                                if (inventory[i].end > newSegment.end) {
                                    // The next segment ends after newSegment.
                                    // Mutate the next segment.
                                    //
                                    // Case 1:
                                    //   newSegment   : |======|
                                    //   nextSegment  :      |----|
                                    //   ===>         : |======|--|
                                    src_log.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                                    inventory[i].start = newSegment.end;
                                    inventory[i].bufferedStart = undefined;
                                    inventory[i].precizeStart = inventory[i].precizeStart &&
                                        newSegment.precizeEnd;
                                    return;
                                }
                                // The next segment was completely contained in newSegment.
                                // Remove it.
                                //
                                // Case 1:
                                //   newSegment   : |======|
                                //   nextSegment  :   |---|
                                //   ===>         : |======|
                                //
                                // Case 2:
                                //   newSegment   : |======|
                                //   nextSegment  :   |----|
                                //   ===>         : |======|
                                src_log.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                                inventory.splice(i, 1);
                            }
                            return;
                        }
                        else {
                            // The previous segment starts at the same time and finishes
                            // after the new segment.
                            // Update the start of the previous segment and put the new
                            // segment before.
                            //
                            // Case 1:
                            //  prevSegment  : |------------|
                            //  newSegment   : |==========|
                            //  ===>         : |==========|-|
                            src_log.debug("SI: Segment pushed ends before another with the same start", bufferType, start, end, segmentI.end);
                            inventory.splice(i, 0, newSegment);
                            segmentI.start = newSegment.end;
                            segmentI.bufferedStart = undefined;
                            segmentI.precizeStart = segmentI.precizeStart &&
                                newSegment.precizeEnd;
                            return;
                        }
                    }
                    else {
                        if (segmentI.end <= newSegment.end) {
                            // our segment has a "complex" relation with this one,
                            // update the old one end and add this one after it.
                            //
                            // Case 1:
                            //  prevSegment  : |-------|
                            //  newSegment   :    |======|
                            //  ===>         : |--|======|
                            //
                            // Case 2:
                            //  prevSegment  : |-------|
                            //  newSegment   :    |====|
                            //  ===>         : |--|====|
                            src_log.debug("SI: Segment pushed updates end of previous one", bufferType, start, end, segmentI.start, segmentI.end);
                            this._inventory.splice(i + 1, 0, newSegment);
                            segmentI.end = newSegment.start;
                            segmentI.bufferedEnd = undefined;
                            segmentI.precizeEnd = segmentI.precizeEnd &&
                                newSegment.precizeStart;
                            i += 2; // Go to segment immediately after newSegment
                            while (i < inventory.length && inventory[i].start < newSegment.end) {
                                if (inventory[i].end > newSegment.end) {
                                    // The next segment ends after newSegment.
                                    // Mutate the next segment.
                                    //
                                    // Case 1:
                                    //   newSegment   : |======|
                                    //   nextSegment  :      |----|
                                    //   ===>         : |======|--|
                                    src_log.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                                    inventory[i].start = newSegment.end;
                                    inventory[i].bufferedStart = undefined;
                                    inventory[i].precizeStart = inventory[i].precizeStart &&
                                        newSegment.precizeEnd;
                                    return;
                                }
                                // The next segment was completely contained in newSegment.
                                // Remove it.
                                //
                                // Case 1:
                                //   newSegment   : |======|
                                //   nextSegment  :   |---|
                                //   ===>         : |======|
                                //
                                // Case 2:
                                //   newSegment   : |======|
                                //   nextSegment  :   |----|
                                //   ===>         : |======|
                                src_log.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                                inventory.splice(i, 1);
                            }
                            return;
                        }
                        else {
                            // The previous segment completely recovers the new segment.
                            // Split the previous segment into two segments, before and after
                            // the new segment.
                            //
                            // Case 1:
                            //  prevSegment  : |---------|
                            //  newSegment   :    |====|
                            //  ===>         : |--|====|-|
                            src_log.warn("SI: Segment pushed is contained in a previous one", bufferType, start, end, segmentI.start, segmentI.end);
                            const nextSegment = { partiallyPushed: segmentI.partiallyPushed,
                                /**
                                 * Note: this sadly means we're doing as if
                                 * that chunk is present two times.
                                 * Thankfully, this scenario should be
                                 * fairly rare.
                                 */
                                chunkSize: segmentI.chunkSize,
                                splitted: true,
                                start: newSegment.end,
                                end: segmentI.end,
                                precizeStart: segmentI.precizeStart &&
                                    segmentI.precizeEnd &&
                                    newSegment.precizeEnd,
                                precizeEnd: segmentI.precizeEnd,
                                bufferedStart: undefined,
                                bufferedEnd: segmentI.end,
                                infos: segmentI.infos };
                            segmentI.end = newSegment.start;
                            segmentI.splitted = true;
                            segmentI.bufferedEnd = undefined;
                            segmentI.precizeEnd = segmentI.precizeEnd &&
                                newSegment.precizeStart;
                            inventory.splice(i + 1, 0, newSegment);
                            inventory.splice(i + 2, 0, nextSegment);
                            return;
                        }
                    }
                }
            }
        }
        // if we got here, we are at the first segment
        // check bounds of the previous first segment
        const firstSegment = this._inventory[0];
        if (firstSegment === undefined) { // we do not have any segment yet
            src_log.debug("SI: first segment pushed", bufferType, start, end);
            this._inventory.push(newSegment);
            return;
        }
        if (firstSegment.start >= end) {
            // our segment is before, put it before
            //
            // Case 1:
            //  firstSegment :      |----|
            //  newSegment   : |====|
            //  ===>         : |====|----|
            //
            // Case 2:
            //  firstSegment :        |----|
            //  newSegment   : |====|
            //  ===>         : |====| |----|
            src_log.debug("SI: Segment pushed comes before all previous ones", bufferType, start, end, firstSegment.start);
            this._inventory.splice(0, 0, newSegment);
        }
        else if (firstSegment.end <= end) {
            // Our segment is bigger, replace the first
            //
            // Case 1:
            //  firstSegment :   |---|
            //  newSegment   : |=======|
            //  ===>         : |=======|
            //
            // Case 2:
            //  firstSegment :   |-----|
            //  newSegment   : |=======|
            //  ===>         : |=======|
            src_log.debug("SI: Segment pushed starts before and completely " +
                "recovers the previous first one", bufferType, start, end, firstSegment.start, firstSegment.end);
            this._inventory.splice(0, 1, newSegment);
            while (inventory.length > 1 && inventory[1].start < newSegment.end) {
                if (inventory[1].end > newSegment.end) {
                    // The next segment ends after newSegment.
                    // Mutate the next segment.
                    //
                    // Case 1:
                    //   newSegment   : |======|
                    //   nextSegment  :      |----|
                    //   ===>         : |======|--|
                    src_log.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[1].start);
                    inventory[1].start = newSegment.end;
                    inventory[1].bufferedStart = undefined;
                    inventory[1].precizeStart = newSegment.precizeEnd;
                    return;
                }
                // The next segment was completely contained in newSegment.
                // Remove it.
                //
                // Case 1:
                //   newSegment   : |======|
                //   nextSegment  :   |---|
                //   ===>         : |======|
                //
                // Case 2:
                //   newSegment   : |======|
                //   nextSegment  :   |----|
                //   ===>         : |======|
                src_log.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[1].start, inventory[1].end);
                inventory.splice(1, 1);
            }
            return;
        }
        else {
            // our segment has a "complex" relation with the first one,
            // update the old one start and add this one before it.
            //
            // Case 1:
            //  firstSegment :    |------|
            //  newSegment   : |======|
            //  ===>         : |======|--|
            src_log.debug("SI: Segment pushed start of the next one", bufferType, start, end, firstSegment.start, firstSegment.end);
            firstSegment.start = end;
            firstSegment.bufferedStart = undefined;
            firstSegment.precizeStart = newSegment.precizeEnd;
            this._inventory.splice(0, 0, newSegment);
            return;
        }
    }
    /**
     * Indicate that inserted chunks can now be considered as a complete segment.
     * Take in argument the same content than what was given to `insertChunk` for
     * the corresponding chunks.
     * @param {Object} content
     */
    completeSegment(content, newBuffered) {
        if (content.segment.isInit) {
            return;
        }
        const inventory = this._inventory;
        const resSegments = [];
        for (let i = 0; i < inventory.length; i++) {
            if (areSameContent(inventory[i].infos, content)) {
                let splitted = false;
                if (resSegments.length > 0) {
                    splitted = true;
                    if (resSegments.length === 1) {
                        src_log.warn("SI: Completed Segment is splitted.", content.segment.id, content.segment.time, content.segment.end);
                        resSegments[0].splitted = true;
                    }
                }
                const firstI = i;
                let segmentSize = inventory[i].chunkSize;
                i += 1;
                while (i < inventory.length &&
                    areSameContent(inventory[i].infos, content)) {
                    const chunkSize = inventory[i].chunkSize;
                    if (segmentSize !== undefined && chunkSize !== undefined) {
                        segmentSize += chunkSize;
                    }
                    i++;
                }
                const lastI = i - 1;
                const length = lastI - firstI;
                const lastEnd = inventory[lastI].end;
                const lastBufferedEnd = inventory[lastI].bufferedEnd;
                if (length > 0) {
                    this._inventory.splice(firstI + 1, length);
                    i -= length;
                }
                this._inventory[firstI].partiallyPushed = false;
                this._inventory[firstI].chunkSize = segmentSize;
                this._inventory[firstI].end = lastEnd;
                this._inventory[firstI].bufferedEnd = lastBufferedEnd;
                this._inventory[firstI].splitted = splitted;
                resSegments.push(this._inventory[firstI]);
            }
        }
        if (resSegments.length === 0) {
            src_log.warn("SI: Completed Segment not found", content.segment.id, content.segment.time);
        }
        else {
            this.synchronizeBuffered(newBuffered);
            for (const seg of resSegments) {
                if (seg.bufferedStart !== undefined && seg.bufferedEnd !== undefined) {
                    this._bufferedHistory.addBufferedSegment(seg.infos, { start: seg.bufferedStart,
                        end: seg.bufferedEnd });
                }
                else {
                    src_log.debug("SI: buffered range not known after sync. Skipping history.", seg.start, seg.end);
                }
            }
        }
    }
    /**
     * Returns the whole inventory.
     *
     * To get a list synchronized with what a media buffer actually has buffered
     * you might want to call `synchronizeBuffered` before calling this method.
     * @returns {Array.<Object>}
     */
    getInventory() {
        return this._inventory;
    }
    /**
     * Returns a recent history of registered operations performed and event
     * received linked to the segment given in argument.
     *
     * Not all operations and events are registered in the returned history.
     * Please check the return type for more information on what is available.
     *
     * Note that history is short-lived for memory usage and performance reasons.
     * You may not receive any information on operations that happened too long
     * ago.
     * @param {Object} context
     * @returns {Array.<Object>}
     */
    getHistoryFor(context) {
        return this._bufferedHistory.getHistoryFor(context);
    }
}
/**
 * Returns `true` if the buffered start of the given chunk looks coherent enough
 * relatively to what is announced in the Manifest.
 * @param {Object} thisSegment
 * @returns {Boolean}
 */
function bufferedStartLooksCoherent(thisSegment) {
    if (thisSegment.bufferedStart === undefined ||
        thisSegment.partiallyPushed) {
        return false;
    }
    const { start, end } = thisSegment;
    const duration = end - start;
    const { MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE, MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE } = src_config.getCurrent();
    return Math.abs(start - thisSegment.bufferedStart) <=
        MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE &&
        (thisSegment.bufferedEnd === undefined ||
            thisSegment.bufferedEnd > thisSegment.bufferedStart &&
                Math.abs(thisSegment.bufferedEnd - thisSegment.bufferedStart -
                    duration) <= Math.min(MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE, duration / 3));
}
/**
 * Returns `true` if the buffered end of the given chunk looks coherent enough
 * relatively to what is announced in the Manifest.
 * @param {Object} thisSegment
 * @returns {Boolean}
 */
function bufferedEndLooksCoherent(thisSegment) {
    if (thisSegment.bufferedEnd === undefined ||
        thisSegment.partiallyPushed) {
        return false;
    }
    const { start, end } = thisSegment;
    const duration = end - start;
    const { MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE, MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE } = src_config.getCurrent();
    return Math.abs(end - thisSegment.bufferedEnd) <=
        MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE &&
        thisSegment.bufferedStart != null &&
        thisSegment.bufferedEnd > thisSegment.bufferedStart &&
        Math.abs(thisSegment.bufferedEnd - thisSegment.bufferedStart -
            duration) <= Math.min(MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE, duration / 3);
}
/**
 * Evaluate the given buffered Chunk's buffered start from its range's start,
 * considering that this chunk is the first one in it.
 * @param {Object} firstSegmentInRange
 * @param {number} rangeStart
 * @param {Object} lastDeletedSegmentInfos
 */
function guessBufferedStartFromRangeStart(firstSegmentInRange, rangeStart, lastDeletedSegmentInfos, bufferType) {
    const { MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE } = src_config.getCurrent();
    if (firstSegmentInRange.bufferedStart !== undefined) {
        if (firstSegmentInRange.bufferedStart < rangeStart) {
            src_log.debug("SI: Segment partially GCed at the start", bufferType, firstSegmentInRange.bufferedStart, rangeStart);
            firstSegmentInRange.bufferedStart = rangeStart;
        }
        if (!firstSegmentInRange.precizeStart &&
            bufferedStartLooksCoherent(firstSegmentInRange)) {
            firstSegmentInRange.start = firstSegmentInRange.bufferedStart;
            firstSegmentInRange.precizeStart = true;
        }
    }
    else if (firstSegmentInRange.precizeStart) {
        src_log.debug("SI: buffered start is precize start", bufferType, firstSegmentInRange.start);
        firstSegmentInRange.bufferedStart = firstSegmentInRange.start;
    }
    else if (lastDeletedSegmentInfos !== null &&
        lastDeletedSegmentInfos.end > rangeStart &&
        (lastDeletedSegmentInfos.precizeEnd ||
            firstSegmentInRange.start - lastDeletedSegmentInfos.end <=
                MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE)) {
        src_log.debug("SI: buffered start is end of previous segment", bufferType, rangeStart, firstSegmentInRange.start, lastDeletedSegmentInfos.end);
        firstSegmentInRange.bufferedStart = lastDeletedSegmentInfos.end;
        if (bufferedStartLooksCoherent(firstSegmentInRange)) {
            firstSegmentInRange.start = lastDeletedSegmentInfos.end;
            firstSegmentInRange.precizeStart = true;
        }
    }
    else if (firstSegmentInRange.start - rangeStart <=
        MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE) {
        src_log.debug("SI: found true buffered start", bufferType, rangeStart, firstSegmentInRange.start);
        firstSegmentInRange.bufferedStart = rangeStart;
        if (bufferedStartLooksCoherent(firstSegmentInRange)) {
            firstSegmentInRange.start = rangeStart;
            firstSegmentInRange.precizeStart = true;
        }
    }
    else if (rangeStart < firstSegmentInRange.start) {
        src_log.debug("SI: range start too far from expected start", bufferType, rangeStart, firstSegmentInRange.start);
    }
    else {
        src_log.debug("SI: Segment appears immediately garbage collected at the start", bufferType, firstSegmentInRange.bufferedStart, rangeStart);
        firstSegmentInRange.bufferedStart = rangeStart;
    }
}
/**
 * Evaluate the given buffered Chunk's buffered end from its range's end,
 * considering that this chunk is the last one in it.
 * @param {Object} lastSegmentInRange
 * @param {number} rangeEnd
 * @param {string} bufferType
 */
function guessBufferedEndFromRangeEnd(lastSegmentInRange, rangeEnd, bufferType) {
    const { MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE } = src_config.getCurrent();
    if (lastSegmentInRange.bufferedEnd !== undefined) {
        if (lastSegmentInRange.bufferedEnd > rangeEnd) {
            src_log.debug("SI: Segment partially GCed at the end", bufferType, lastSegmentInRange.bufferedEnd, rangeEnd);
            lastSegmentInRange.bufferedEnd = rangeEnd;
        }
        if (!lastSegmentInRange.precizeEnd &&
            rangeEnd - lastSegmentInRange.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE &&
            bufferedEndLooksCoherent(lastSegmentInRange)) {
            lastSegmentInRange.precizeEnd = true;
            lastSegmentInRange.end = rangeEnd;
        }
    }
    else if (lastSegmentInRange.precizeEnd) {
        src_log.debug("SI: buffered end is precize end", bufferType, lastSegmentInRange.end);
        lastSegmentInRange.bufferedEnd = lastSegmentInRange.end;
    }
    else if (rangeEnd - lastSegmentInRange.end <=
        MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE) {
        src_log.debug("SI: found true buffered end", bufferType, rangeEnd, lastSegmentInRange.end);
        lastSegmentInRange.bufferedEnd = rangeEnd;
        if (bufferedEndLooksCoherent(lastSegmentInRange)) {
            lastSegmentInRange.end = rangeEnd;
            lastSegmentInRange.precizeEnd = true;
        }
    }
    else if (rangeEnd > lastSegmentInRange.end) {
        src_log.debug("SI: range end too far from expected end", bufferType, rangeEnd, lastSegmentInRange.end);
        lastSegmentInRange.bufferedEnd = lastSegmentInRange.end;
    }
    else {
        src_log.debug("SI: Segment appears immediately garbage collected at the end", bufferType, lastSegmentInRange.bufferedEnd, rangeEnd);
        lastSegmentInRange.bufferedEnd = rangeEnd;
    }
}
/**
 * Pretty print the inventory, to easily note which segments are where in the
 * current buffer.
 *
 * This is mostly useful when logging.
 *
 * @example
 * This function is called by giving it the inventory, such as:
 * ```js
 * prettyPrintInventory(inventory);
 * ```
 *
 * Let's consider this possible return:
 * ```
 * 0.00|A|9.00 ~ 9.00|B|45.08 ~ 282.08|B|318.08
 * [A] P: gen-dash-period-0 || R: video/5(2362822)
 * [B] P: gen-dash-period-0 || R: video/6(2470094)
 * ```
 * We have a first part, from 0 to 9 seconds, which contains segments for
 * the Representation with the id "video/5" and an associated bitrate of
 * 2362822 bits per seconds (in the Period with the id "gen-dash-period-0").
 *
 * Then from 9.00 seconds to 45.08 seconds, we have segments from another
 * Representation from the same Period (with the id "video/6" and a bitrate
 * of 2470094 bits per seconds).
 *
 * At last we have a long time between 45.08 and 282.08 with no segment followed
 * by a segment from that same Representation between 282.08 seconds and 318.08
 * seconds.
 * @param {Array.<Object>} inventory
 * @returns {string}
 */
function prettyPrintInventory(inventory) {
    const roundingError = 1 / 60;
    const encounteredReps = {};
    const letters = [];
    let lastChunk = null;
    let lastLetter = null;
    function generateNewLetter(infos) {
        const currentLetter = String.fromCharCode(letters.length + 65);
        letters.push({ letter: currentLetter,
            periodId: infos.period.id,
            representationId: infos.representation.id,
            bitrate: infos.representation.bitrate });
        return currentLetter;
    }
    let str = "";
    for (let i = 0; i < inventory.length; i++) {
        const chunk = inventory[i];
        if (chunk.bufferedStart !== undefined && chunk.bufferedEnd !== undefined) {
            const periodId = chunk.infos.period.id;
            const representationId = chunk.infos.representation.id;
            const encounteredPeriod = encounteredReps[periodId];
            let currentLetter;
            if (encounteredPeriod === undefined) {
                currentLetter = generateNewLetter(chunk.infos);
                encounteredReps[periodId] = { [representationId]: currentLetter };
            }
            else if (encounteredPeriod[representationId] === undefined) {
                currentLetter = generateNewLetter(chunk.infos);
                encounteredPeriod[representationId] = currentLetter;
            }
            else {
                currentLetter = encounteredPeriod[representationId];
            }
            if (lastChunk === null) {
                str += `${chunk.bufferedStart.toFixed(2)}|${currentLetter}|`;
            }
            else if (lastLetter === currentLetter) {
                if (lastChunk.bufferedEnd + roundingError < chunk.bufferedStart) {
                    str += `${lastChunk.bufferedEnd.toFixed(2)} ~ ` +
                        `${chunk.bufferedStart.toFixed(2)}|${currentLetter}|`;
                }
            }
            else {
                str += `${lastChunk.bufferedEnd.toFixed(2)} ~ ` +
                    `${chunk.bufferedStart.toFixed(2)}|${currentLetter}|`;
            }
            lastChunk = chunk;
            lastLetter = currentLetter;
        }
    }
    if (lastChunk !== null) {
        str += String(lastChunk.end.toFixed(2));
    }
    letters.forEach(letterInfo => {
        var _a;
        str += `\n[${letterInfo.letter}] ` +
            `P: ${letterInfo.periodId} || R: ${letterInfo.representationId}` +
            `(${(_a = letterInfo.bitrate) !== null && _a !== void 0 ? _a : "unknown bitrate"})`;
    });
    return str;
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/inventory/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const inventory = (SegmentInventory);

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/types.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class allowing to push segments and remove data to a buffer to be able
 * to decode them in the future as well as retrieving information about which
 * segments have already been pushed.
 *
 * A `SegmentBuffer` can rely on a browser's SourceBuffer as well as being
 * entirely defined in the code.
 *
 * A SegmentBuffer is associated to a given "bufferType" (e.g. "audio",
 * "video", "text") and allows to push segments as well as removing part of
 * already-pushed segments for that type.
 *
 * Because a segment can be divided into multiple chunks, one should call the
 * `endOfSegment` method once all chunks of a given segment have been pushed
 * (through the `pushChunk` method) to validate that a segment has been
 * completely pushed.
 * It is expected to push chunks from only one segment at a time before calling
 * the `endOfSegment` function for that segment. Pushing chunks from multiple
 * segments in parallel could have unexpected result depending on the underlying
 * implementation.
 * TODO reflect that in the API?
 *
 * A SegmentBuffer also maintains an "inventory", which is the current
 * list of segments contained in the underlying buffer.
 * This inventory has to be manually "synchronized" (through the
 * `synchronizeInventory` method) before being retrieved (through the
 * `getInventory` method).
 *
 * Also depending on the underlying implementation, the various operations
 * performed on a `SegmentBuffer` (push/remove/endOfSegment) can happen
 * synchronously or asynchronously.
 * In the latter case, such operations are put in a FIFO Queue.
 * You can retrieve the current queue of operations by calling the
 * `getPendingOperations` method.
 * If operations happens synchronously, this method will just return an empty
 * array.
 */
class SegmentBuffer {
    constructor() {
        // Use SegmentInventory by default for inventory purposes
        this._segmentInventory = new inventory();
    }
    /**
     * The maintained inventory can fall out of sync from garbage collection or
     * other events.
     *
     * This methods allow to manually trigger a synchronization. It should be
     * called before retrieving Segment information from it (e.g. with
     * `getInventory`).
     */
    synchronizeInventory() {
        // The default implementation just use the SegmentInventory
        this._segmentInventory.synchronizeBuffered(this.getBufferedRanges());
    }
    /**
     * Returns the currently buffered data for which the content is known with
     * the corresponding content information.
     * /!\ This data can fall out of sync with the real buffered ranges. Please
     * call `synchronizeInventory` before to make sure it is correctly
     * synchronized.
     * @returns {Array.<Object>}
     */
    getInventory() {
        // The default implementation just use the SegmentInventory
        return this._segmentInventory.getInventory();
    }
    /**
     * Returns the list of every operations that the `SegmentBuffer` is still
     * processing. From the one with the highest priority (like the one being
     * processed)
     * @returns {Array.<Object>}
     */
    getPendingOperations() {
        // Return no pending operation by default (for synchronous SegmentBuffers)
        return [];
    }
    /**
     * Returns a recent history of registered operations performed and event
     * received linked to the segment given in argument.
     *
     * Not all operations and events are registered in the returned history.
     * Please check the return type for more information on what is available.
     *
     * Note that history is short-lived for memory usage and performance reasons.
     * You may not receive any information on operations that happened too long
     * ago.
     * @param {Object} context
     * @returns {Array.<Object>}
     */
    getSegmentHistory(context) {
        return this._segmentInventory.getHistoryFor(context);
    }
}
/**
 * Enum used by a SegmentBuffer as a discriminant in its queue of
 * "operations".
 */
var SegmentBufferOperation;
(function (SegmentBufferOperation) {
    SegmentBufferOperation[SegmentBufferOperation["Push"] = 0] = "Push";
    SegmentBufferOperation[SegmentBufferOperation["Remove"] = 1] = "Remove";
    SegmentBufferOperation[SegmentBufferOperation["EndOfSegment"] = 2] = "EndOfSegment";
})(SegmentBufferOperation || (SegmentBufferOperation = {}));

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/audio_video/audio_video_segment_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */












/**
 * Allows to push and remove new segments to a SourceBuffer in a FIFO queue (not
 * doing so can lead to browser Errors) while keeping an inventory of what has
 * been pushed and what is being pushed.
 *
 * To work correctly, only a single AudioVideoSegmentBuffer per SourceBuffer
 * should be created.
 *
 * @class AudioVideoSegmentBuffer
 */
class AudioVideoSegmentBuffer extends SegmentBuffer {
    /**
     * @constructor
     * @param {string} bufferType
     * @param {string} codec
     * @param {MediaSource} mediaSource
     */
    constructor(bufferType, codec, mediaSource) {
        super();
        const sourceBuffer = mediaSource.addSourceBuffer(codec);
        this._canceller = new TaskCanceller();
        this.bufferType = bufferType;
        this._mediaSource = mediaSource;
        this._sourceBuffer = sourceBuffer;
        this._queue = [];
        this._pendingTask = null;
        this._lastInitSegment = null;
        this.codec = codec;
        const onError = this._onPendingTaskError.bind(this);
        const reCheck = this._flush.bind(this);
        // Some browsers (happened with firefox 66) sometimes "forget" to send us
        // `update` or `updateend` events.
        // In that case, we're completely unable to continue the queue here and
        // stay locked in a waiting state.
        // This interval is here to check at regular intervals if the underlying
        // SourceBuffer is currently updating.
        const { SOURCE_BUFFER_FLUSHING_INTERVAL } = src_config.getCurrent();
        const intervalId = setInterval(reCheck, SOURCE_BUFFER_FLUSHING_INTERVAL);
        this._sourceBuffer.addEventListener("error", onError);
        this._sourceBuffer.addEventListener("updateend", reCheck);
        this._canceller.signal.register(() => {
            clearInterval(intervalId);
            this._sourceBuffer.removeEventListener("error", onError);
            this._sourceBuffer.removeEventListener("updateend", reCheck);
        });
    }
    /**
     * Push a chunk of the media segment given to the attached SourceBuffer, in a
     * FIFO queue.
     *
     * Once all chunks of a single Segment have been given to `pushChunk`, you
     * should call `endOfSegment` to indicate that the whole Segment has been
     * pushed.
     *
     * Depending on the type of data appended, the pushed chunk might rely on an
     * initialization segment, given through the `data.initSegment` property.
     *
     * Such initialization segment will be first pushed to the SourceBuffer if the
     * last pushed segment was associated to another initialization segment.
     * This detection rely on the initialization segment's reference so you need
     * to avoid mutating in-place a initialization segment given to that function
     * (to avoid having two different values which have the same reference).
     *
     * If you don't need any initialization segment to push the wanted chunk, you
     * can just set `data.initSegment` to `null`.
     *
     * You can also only push an initialization segment by setting the
     * `data.chunk` argument to null.
     *
     * @param {Object} infos
     * @param {Object} cancellationSignal
     * @returns {Promise}
     */
    pushChunk(infos, cancellationSignal) {
        assertPushedDataIsBufferSource(infos);
        src_log.debug("AVSB: receiving order to push data to the SourceBuffer", this.bufferType, getLoggableSegmentId(infos.inventoryInfos));
        return this._addToQueue({ type: SegmentBufferOperation.Push,
            value: infos }, cancellationSignal);
    }
    /**
     * Remove buffered data (added to the same FIFO queue than `pushChunk`).
     * @param {number} start - start position, in seconds
     * @param {number} end - end position, in seconds
     * @param {Object} cancellationSignal
     * @returns {Promise}
     */
    removeBuffer(start, end, cancellationSignal) {
        src_log.debug("AVSB: receiving order to remove data from the SourceBuffer", this.bufferType, start, end);
        return this._addToQueue({ type: SegmentBufferOperation.Remove,
            value: { start, end } }, cancellationSignal);
    }
    /**
     * Indicate that every chunks from a Segment has been given to pushChunk so
     * far.
     * This will update our internal Segment inventory accordingly.
     * The returned Promise will resolve once the whole segment has been pushed
     * and this indication is acknowledged.
     * @param {Object} infos
     * @returns {Promise}
     */
    endOfSegment(infos, cancellationSignal) {
        src_log.debug("AVSB: receiving order for validating end of segment", this.bufferType, getLoggableSegmentId(infos));
        return this._addToQueue({ type: SegmentBufferOperation.EndOfSegment,
            value: infos }, cancellationSignal);
    }
    /**
     * Returns the currently buffered data, in a TimeRanges object.
     * @returns {TimeRanges}
     */
    getBufferedRanges() {
        return this._sourceBuffer.buffered;
    }
    /**
     * Returns the list of every operations that the `AudioVideoSegmentBuffer` is
     * still processing. From the one with the highest priority (like the one
     * being processed)
     * @returns {Array.<Object>}
     */
    getPendingOperations() {
        const parseQueuedOperation = (op) => {
            // Had to be written that way for TypeScript
            switch (op.type) {
                case SegmentBufferOperation.Push:
                    return { type: op.type, value: op.value };
                case SegmentBufferOperation.Remove:
                    return { type: op.type, value: op.value };
                case SegmentBufferOperation.EndOfSegment:
                    return { type: op.type, value: op.value };
            }
        };
        const queued = this._queue.map(parseQueuedOperation);
        return this._pendingTask === null ?
            queued :
            [parseQueuedOperation(this._pendingTask)].concat(queued);
    }
    /**
     * Dispose of the resources used by this AudioVideoSegmentBuffer.
     *
     * /!\ You won't be able to use the AudioVideoSegmentBuffer after calling this
     * function.
     * @private
     */
    dispose() {
        this._canceller.cancel();
        if (this._pendingTask !== null) {
            this._pendingTask.reject(new CancellationError());
            this._pendingTask = null;
        }
        while (this._queue.length > 0) {
            const nextElement = this._queue.shift();
            if (nextElement !== undefined) {
                nextElement.reject(new CancellationError());
            }
        }
        if (this._mediaSource.readyState === "open") {
            try {
                this._sourceBuffer.abort();
            }
            catch (e) {
                src_log.warn(`AVSB: Failed to abort a ${this.bufferType} SourceBuffer:`, e instanceof Error ? e : "");
            }
        }
    }
    /**
     * Called when an error arised that made the current task fail.
     * @param {Event} err
     */
    _onPendingTaskError(err) {
        this._lastInitSegment = null; // initialize init segment as a security
        if (this._pendingTask !== null) {
            const error = err instanceof Error ?
                err :
                new Error("An unknown error occured when doing operations " +
                    "on the SourceBuffer");
            this._pendingTask.reject(error);
        }
    }
    /**
     * When the returned observable is subscribed:
     *   1. Add your operation to the queue.
     *   2. Begin the queue if not pending.
     *
     * Cancel queued operation on unsubscription.
     * @private
     * @param {Object} operation
     * @param {Object} cancellationSignal
     * @returns {Promise}
     */
    _addToQueue(operation, cancellationSignal) {
        return new Promise((resolve, reject) => {
            if (cancellationSignal.cancellationError !== null) {
                return reject(cancellationSignal.cancellationError);
            }
            const shouldRestartQueue = this._queue.length === 0 &&
                this._pendingTask === null;
            const queueItem = object_assign({ resolve, reject }, operation);
            this._queue.push(queueItem);
            cancellationSignal.register((error) => {
                // Remove the corresponding element from the AudioVideoSegmentBuffer's
                // queue.
                // If the operation was a pending task, it should still continue to not
                // let the AudioVideoSegmentBuffer in a weird state.
                const index = this._queue.indexOf(queueItem);
                if (index >= 0) {
                    this._queue.splice(index, 1);
                }
                queueItem.resolve = utils_noop;
                queueItem.reject = utils_noop;
                reject(error);
            });
            if (shouldRestartQueue) {
                this._flush();
            }
        });
    }
    /**
     * Perform next task if one.
     * @private
     */
    _flush() {
        if (this._sourceBuffer.updating) {
            return; // still processing `this._pendingTask`
        }
        if (this._pendingTask !== null) {
            const task = this._pendingTask;
            if (task.type !== SegmentBufferOperation.Push || task.data.length === 0) {
                // If we're here, we've finished processing the task
                switch (task.type) {
                    case SegmentBufferOperation.Push:
                        if (task.inventoryData !== null) {
                            this._segmentInventory.insertChunk(task.inventoryData);
                        }
                        break;
                    case SegmentBufferOperation.EndOfSegment:
                        this._segmentInventory.completeSegment(task.value, this.getBufferedRanges());
                        break;
                    case SegmentBufferOperation.Remove:
                        this.synchronizeInventory();
                        break;
                    default:
                        assertUnreachable(task);
                }
                const { resolve } = task;
                this._pendingTask = null;
                resolve();
                this._flush(); // Go to next item in queue
                return;
            }
        }
        else { // if this._pendingTask is null, go to next item in queue
            const nextItem = this._queue.shift();
            if (nextItem === undefined) {
                return; // we have nothing left to do
            }
            else if (nextItem.type !== SegmentBufferOperation.Push) {
                this._pendingTask = nextItem;
            }
            else {
                const itemValue = nextItem.value;
                let dataToPush;
                try {
                    dataToPush = this._preparePushOperation(itemValue.data);
                }
                catch (e) {
                    this._pendingTask = object_assign({ data: [],
                        inventoryData: itemValue.inventoryInfos }, nextItem);
                    const error = e instanceof Error ?
                        e :
                        new Error("An unknown error occured when preparing a push operation");
                    this._lastInitSegment = null; // initialize init segment as a security
                    nextItem.reject(error);
                    return;
                }
                this._pendingTask = object_assign({ data: dataToPush,
                    inventoryData: itemValue.inventoryInfos }, nextItem);
            }
        }
        try {
            switch (this._pendingTask.type) {
                case SegmentBufferOperation.EndOfSegment:
                    // nothing to do, we will just acknowledge the segment.
                    src_log.debug("AVSB: Acknowledging complete segment", getLoggableSegmentId(this._pendingTask.value));
                    this._flush();
                    return;
                case SegmentBufferOperation.Push:
                    const segmentData = this._pendingTask.data.shift();
                    if (segmentData === undefined) {
                        this._flush();
                        return;
                    }
                    src_log.debug("AVSB: pushing segment", this.bufferType, getLoggableSegmentId(this._pendingTask.inventoryData));
                    this._sourceBuffer.appendBuffer(segmentData);
                    break;
                case SegmentBufferOperation.Remove:
                    const { start, end } = this._pendingTask.value;
                    src_log.debug("AVSB: removing data from SourceBuffer", this.bufferType, start, end);
                    this._sourceBuffer.remove(start, end);
                    break;
                default:
                    assertUnreachable(this._pendingTask);
            }
        }
        catch (e) {
            this._onPendingTaskError(e);
        }
    }
    /**
     * A push Operation might necessitate to mutate some `SourceBuffer` and/or
     * `AudioVideoSegmentBuffer` properties and also might need to be divided into
     * multiple segments to push (exemple: when first pushing the initialization
     * data before the segment data).
     *
     * This method allows to "prepare" that push operation so that all is left is
     * to push the returned segment data one after the other (from first to last).
     * @param {Object} data
     * @returns {Object}
     */
    _preparePushOperation(data) {
        // Push operation with both an init segment and a regular segment might
        // need to be separated into two steps
        const dataToPush = [];
        const { codec, timestampOffset, appendWindow } = data;
        let hasUpdatedSourceBufferType = false;
        if (codec !== undefined && codec !== this.codec) {
            src_log.debug("AVSB: updating codec", codec);
            hasUpdatedSourceBufferType = tryToChangeSourceBufferType(this._sourceBuffer, codec);
            if (hasUpdatedSourceBufferType) {
                this.codec = codec;
            }
            else {
                src_log.debug("AVSB: could not update codec", codec, this.codec);
            }
        }
        if (this._sourceBuffer.timestampOffset !== timestampOffset) {
            const newTimestampOffset = timestampOffset;
            src_log.debug("AVSB: updating timestampOffset", this.bufferType, this._sourceBuffer.timestampOffset, newTimestampOffset);
            this._sourceBuffer.timestampOffset = newTimestampOffset;
        }
        if (appendWindow[0] === undefined) {
            if (this._sourceBuffer.appendWindowStart > 0) {
                this._sourceBuffer.appendWindowStart = 0;
            }
        }
        else if (appendWindow[0] !== this._sourceBuffer.appendWindowStart) {
            if (appendWindow[0] >= this._sourceBuffer.appendWindowEnd) {
                this._sourceBuffer.appendWindowEnd = appendWindow[0] + 1;
            }
            this._sourceBuffer.appendWindowStart = appendWindow[0];
        }
        if (appendWindow[1] === undefined) {
            if (this._sourceBuffer.appendWindowEnd !== Infinity) {
                this._sourceBuffer.appendWindowEnd = Infinity;
            }
        }
        else if (appendWindow[1] !== this._sourceBuffer.appendWindowEnd) {
            this._sourceBuffer.appendWindowEnd = appendWindow[1];
        }
        if (data.initSegment !== null &&
            (hasUpdatedSourceBufferType || !this._isLastInitSegment(data.initSegment))) {
            // Push initialization segment before the media segment
            const segmentData = data.initSegment;
            dataToPush.push(segmentData);
            const initU8 = toUint8Array(segmentData);
            this._lastInitSegment = { data: initU8,
                hash: hashBuffer(initU8) };
        }
        if (data.chunk !== null) {
            dataToPush.push(data.chunk);
        }
        return dataToPush;
    }
    /**
     * Return `true` if the given `segmentData` is the same segment than the last
     * initialization segment pushed to the `AudioVideoSegmentBuffer`.
     * @param {BufferSource} segmentData
     * @returns {boolean}
     */
    _isLastInitSegment(segmentData) {
        if (this._lastInitSegment === null) {
            return false;
        }
        if (this._lastInitSegment.data === segmentData) {
            return true;
        }
        const oldInit = this._lastInitSegment.data;
        if (oldInit.byteLength === segmentData.byteLength) {
            const newInitU8 = toUint8Array(segmentData);
            if (hashBuffer(newInitU8) === this._lastInitSegment.hash &&
                areArraysOfNumbersEqual(oldInit, newInitU8)) {
                return true;
            }
        }
        return false;
    }
}
/**
 * Throw if the given input is not in the expected format.
 * Allows to enforce runtime type-checking as compile-time type-checking here is
 * difficult to enforce.
 * @param {Object} pushedData
 */
function assertPushedDataIsBufferSource(pushedData) {
    if (true) {
        return;
    }
    const { chunk, initSegment } = pushedData.data;
    if (typeof chunk !== "object" ||
        typeof initSegment !== "object" ||
        (chunk !== null &&
            !(chunk instanceof ArrayBuffer) &&
            !(chunk.buffer instanceof ArrayBuffer)) ||
        (initSegment !== null &&
            !(initSegment instanceof ArrayBuffer) &&
            !(initSegment.buffer instanceof ArrayBuffer))) {
        throw new Error("Invalid data given to the AudioVideoSegmentBuffer");
    }
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/audio_video/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const audio_video = (AudioVideoSegmentBuffer);

;// CONCATENATED MODULE: ./src/core/segment_buffers/segment_buffers_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




const POSSIBLE_BUFFER_TYPES = ["audio",
    "video",
    "text",
    "image"];
/**
 * Allows to easily create and dispose SegmentBuffers, which are interfaces to
 * push and remove segments.
 *
 * Only one SegmentBuffer per type is allowed at the same time:
 *
 *   - SegmentBuffers linked to a "native" media buffer (relying on a
 *     SourceBuffer: "audio" and "video" here) are reused if one is
 *     re-created.
 *
 *   - SegmentBuffers for custom types (the other types of media) are aborted
 *     each time a new one of the same type is created.
 *
 * To be able to use a SegmentBuffer linked to a native media buffer, you
 * will first need to create it, but also wait until the other one is either
 * created or explicitely disabled through the `disableSegmentBuffer` method.
 * The Promise returned by `waitForUsableBuffers` will emit when
 * that is the case.
 *
 * @class SegmentBuffersStore
 */
class SegmentBuffersStore {
    /**
     * Returns true if the type is linked to a "native" media buffer (i.e. relying
     * on a SourceBuffer object, native to the browser).
     * Native media buffers needed for the current content must all be created
     * before the content begins to be played and cannot be disposed during
     * playback.
     * @param {string} bufferType
     * @returns {Boolean}
     */
    static isNative(bufferType) {
        return shouldHaveNativeBuffer(bufferType);
    }
    /**
     * @param {HTMLMediaElement} mediaElement
     * @param {MediaSource} mediaSource
     * @constructor
     */
    constructor(mediaElement, mediaSource) {
        this._mediaElement = mediaElement;
        this._mediaSource = mediaSource;
        this._initializedSegmentBuffers = {};
        this._onNativeBufferAddedOrDisabled = [];
    }
    /**
     * Get all currently available buffer types.
     * /!\ This list can evolve at runtime depending on feature switching.
     * @returns {Array.<string>}
     */
    getBufferTypes() {
        const bufferTypes = this.getNativeBufferTypes();
        if (src_features.nativeTextTracksBuffer != null ||
            src_features.htmlTextTracksBuffer != null) {
            bufferTypes.push("text");
        }
        if (src_features.imageBuffer != null) {
            bufferTypes.push("image");
        }
        return bufferTypes;
    }
    /**
     * Get all "native" buffer types that should be created before beginning to
     * push contents.
     * @returns {Array.<string>}
     */
    getNativeBufferTypes() {
        return this._mediaElement.nodeName === "AUDIO" ? ["audio"] :
            ["video", "audio"];
    }
    /**
     * Returns the current "status" of the SegmentBuffer linked to the buffer
     * type given.
     *
     * This function will return  an object containing a key named `type` which
     * can be equal to either one of those three value:
     *
     *   - "initialized": A SegmentBuffer has been created for that type.
     *     You will in this case also have a second key, `value`, which will
     *     contain the related SegmentBuffer instance.
     *     Please note that you will need to wait until
     *     `this.waitForUsableBuffers()` has emitted before pushing segment
     *     data to a SegmentBuffer relying on a SourceBuffer.
     *
     *   - "disabled": The SegmentBuffer has been explicitely disabled for this
     *     type.
     *
     *   - "uninitialized": No action has yet been yet for that SegmentBuffer.
     *
     * @param {string} bufferType
     * @returns {Object|null}
     */
    getStatus(bufferType) {
        const initializedBuffer = this._initializedSegmentBuffers[bufferType];
        return initializedBuffer === undefined ? { type: "uninitialized" } :
            initializedBuffer === null ? { type: "disabled" } :
                { type: "initialized",
                    value: initializedBuffer };
    }
    /**
     * Native media buffers (audio and video) needed for playing the current
     * content need to all be created (by creating SegmentBuffers linked to them)
     * before any one can be used.
     *
     * This function will return a Promise resolving when any and all native
     * SourceBuffers can be used.
     *
     * From https://w3c.github.io/media-source/#methods
     *   For example, a user agent may throw a QuotaExceededError
     *   exception if the media element has reached the HAVE_METADATA
     *   readyState. This can occur if the user agent's media engine
     *   does not support adding more tracks during playback.
     * @param {Object} cancelWaitSignal
     * @return {Promise}
     */
    waitForUsableBuffers(cancelWaitSignal) {
        if (this._areNativeBuffersUsable()) {
            return Promise.resolve();
        }
        return new Promise((res, rej) => {
            const onAddedOrDisabled = () => {
                if (this._areNativeBuffersUsable()) {
                    res();
                }
            };
            this._onNativeBufferAddedOrDisabled.push(onAddedOrDisabled);
            cancelWaitSignal.register((error) => {
                const indexOf = this._onNativeBufferAddedOrDisabled.indexOf(onAddedOrDisabled);
                if (indexOf >= 0) {
                    this._onNativeBufferAddedOrDisabled.splice(indexOf, 1);
                }
                rej(error);
            });
        });
    }
    /**
     * Explicitely disable the SegmentBuffer for a given buffer type.
     * A call to this function is needed at least for unused native buffer types
     * (usually "audio" and "video"), to be able to emit through
     * `waitForUsableBuffers` when conditions are met.
     * @param {string}
     */
    disableSegmentBuffer(bufferType) {
        const currentValue = this._initializedSegmentBuffers[bufferType];
        if (currentValue === null) {
            src_log.warn(`SBS: The ${bufferType} SegmentBuffer was already disabled.`);
            return;
        }
        if (currentValue !== undefined) {
            throw new Error("Cannot disable an active SegmentBuffer.");
        }
        this._initializedSegmentBuffers[bufferType] = null;
        if (SegmentBuffersStore.isNative(bufferType)) {
            this._onNativeBufferAddedOrDisabled.forEach(cb => cb());
        }
    }
    /**
     * Creates a new SegmentBuffer associated to a type.
     * Reuse an already created one if a SegmentBuffer for the given type
     * already exists.
     *
     * Please note that you will need to wait until `this.waitForUsableBuffers()`
     * has emitted before pushing segment data to a SegmentBuffer of a native
     * type.
     * @param {string} bufferType
     * @param {string} codec
     * @param {Object|undefined} options
     * @returns {Object}
     */
    createSegmentBuffer(bufferType, codec, options = {}) {
        const memorizedSegmentBuffer = this._initializedSegmentBuffers[bufferType];
        if (shouldHaveNativeBuffer(bufferType)) {
            if (memorizedSegmentBuffer != null) {
                if (memorizedSegmentBuffer instanceof audio_video &&
                    memorizedSegmentBuffer.codec !== codec) {
                    src_log.warn("SB: Reusing native SegmentBuffer with codec", memorizedSegmentBuffer.codec, "for codec", codec);
                }
                else {
                    src_log.info("SB: Reusing native SegmentBuffer with codec", codec);
                }
                return memorizedSegmentBuffer;
            }
            src_log.info("SB: Adding native SegmentBuffer with codec", codec);
            const nativeSegmentBuffer = new audio_video(bufferType, codec, this._mediaSource);
            this._initializedSegmentBuffers[bufferType] = nativeSegmentBuffer;
            this._onNativeBufferAddedOrDisabled.forEach(cb => cb());
            return nativeSegmentBuffer;
        }
        if (memorizedSegmentBuffer != null) {
            src_log.info("SB: Reusing a previous custom SegmentBuffer for the type", bufferType);
            return memorizedSegmentBuffer;
        }
        let segmentBuffer;
        if (bufferType === "text") {
            src_log.info("SB: Creating a new text SegmentBuffer");
            if (options.textTrackMode === "html") {
                if (src_features.htmlTextTracksBuffer == null) {
                    throw new Error("HTML Text track feature not activated");
                }
                segmentBuffer = new src_features.htmlTextTracksBuffer(this._mediaElement, options.textTrackElement);
            }
            else {
                if (src_features.nativeTextTracksBuffer == null) {
                    throw new Error("Native Text track feature not activated");
                }
                segmentBuffer = new src_features.nativeTextTracksBuffer(this._mediaElement, options.hideNativeSubtitle === true);
            }
            this._initializedSegmentBuffers.text = segmentBuffer;
            return segmentBuffer;
        }
        else if (bufferType === "image") {
            if (src_features.imageBuffer == null) {
                throw new Error("Image buffer feature not activated");
            }
            src_log.info("SB: Creating a new image SegmentBuffer");
            segmentBuffer = new src_features.imageBuffer();
            this._initializedSegmentBuffers.image = segmentBuffer;
            return segmentBuffer;
        }
        src_log.error("SB: Unknown buffer type:", bufferType);
        throw new MediaError("BUFFER_TYPE_UNKNOWN", "The player wants to create a SegmentBuffer " +
            "of an unknown type.");
    }
    /**
     * Dispose of the active SegmentBuffer for the given type.
     * @param {string} bufferType
     */
    disposeSegmentBuffer(bufferType) {
        const memorizedSegmentBuffer = this._initializedSegmentBuffers[bufferType];
        if (memorizedSegmentBuffer == null) {
            src_log.warn("SB: Trying to dispose a SegmentBuffer that does not exist");
            return;
        }
        src_log.info("SB: Aborting SegmentBuffer", bufferType);
        memorizedSegmentBuffer.dispose();
        delete this._initializedSegmentBuffers[bufferType];
    }
    /**
     * Dispose of all SegmentBuffer created on this SegmentBuffersStore.
     */
    disposeAll() {
        POSSIBLE_BUFFER_TYPES.forEach((bufferType) => {
            if (this.getStatus(bufferType).type === "initialized") {
                this.disposeSegmentBuffer(bufferType);
            }
        });
    }
    /**
     * Returns `true` when we're ready to push and decode contents to
     * SourceBuffers created by SegmentBuffers of a native buffer type.
     */
    _areNativeBuffersUsable() {
        const nativeBufferTypes = this.getNativeBufferTypes();
        const hasUnitializedBuffers = nativeBufferTypes.some(sbType => this._initializedSegmentBuffers[sbType] === undefined);
        if (hasUnitializedBuffers) {
            // one is not yet initialized/disabled
            return false;
        }
        const areAllDisabled = nativeBufferTypes.every(sbType => this._initializedSegmentBuffers[sbType] === null);
        if (areAllDisabled) {
            // they all are disabled: we can't play the content
            return false;
        }
        return true;
    }
}
/**
 * Returns true if the given buffeType has a linked SourceBuffer implementation,
 * false otherwise.
 * SourceBuffers are directly added to the MediaSource.
 * @param {string} bufferType
 * @returns {Boolean}
 */
function shouldHaveNativeBuffer(bufferType) {
    return bufferType === "audio" || bufferType === "video";
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/* harmony default export */ const segment_buffers = (SegmentBuffersStore);


;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js




function exhaustMap(project, resultSelector) {
  if (resultSelector) {
    return function (source) {
      return source.pipe(exhaustMap(function (a, i) {
        return innerFrom(project(a, i)).pipe(map(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }
  return operate(function (source, subscriber) {
    var index = 0;
    var innerSub = null;
    var isComplete = false;
    source.subscribe(createOperatorSubscriber(subscriber, function (outerValue) {
      if (!innerSub) {
        innerSub = createOperatorSubscriber(subscriber, undefined, function () {
          innerSub = null;
          isComplete && subscriber.complete();
        });
        innerFrom(project(outerValue, index++)).subscribe(innerSub);
      }
    }, function () {
      isComplete = true;
      !innerSub && subscriber.complete();
    }));
  });
}
;// CONCATENATED MODULE: ./src/utils/rx-from_cancellable_promise.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Transform a Promise that can be cancelled (through the usage of a
 * `TaskCanceller`) to an Observable, while keeping the cancellation logic
 * between both in sync.
 *
 * @example
 * ```js
 * const canceller = new TaskCanceller();
 * fromCancellablePromise(
 *   canceller,
 *   () => doSomeCancellableTasks(canceller.signal)
 * ).subscribe(
 *   (i) => console.log("Emitted: ", i);
 *   (e) => console.log("Error: ", e);
 *   () => console.log("Complete.")
 * );
 * ```
 * @param {Object} canceller
 * @param {Function} fn
 * @returns {Observable}
 */
function fromCancellablePromise(canceller, fn) {
    return new Observable_Observable((obs) => {
        let isUnsubscribedFrom = false;
        let isComplete = false;
        fn().then((i) => {
            if (isUnsubscribedFrom) {
                return;
            }
            isComplete = true;
            obs.next(i);
            obs.complete();
        }, (err) => {
            isComplete = true;
            if (isUnsubscribedFrom) {
                return;
            }
            obs.error(err);
        });
        return () => {
            if (!isComplete) {
                isUnsubscribedFrom = true;
                canceller.cancel();
            }
        };
    });
}

// EXTERNAL MODULE: ./node_modules/next-tick/index.js
var next_tick = __webpack_require__(39945);
var next_tick_default = /*#__PURE__*/__webpack_require__.n(next_tick);
;// CONCATENATED MODULE: ./src/utils/rx-next-tick.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create Observable that emits and complete on the next micro-task.
 *
 * This Observable can be useful to prevent race conditions based on
 * synchronous task being performed in the wrong order.
 * By awaiting nextTickObs before performing a task, you ensure that all other
 * tasks that might have run synchronously either before or after it all already
 * ran.
 * @returns {Observable}
 */
function nextTickObs() {
    return new Observable_Observable((obs) => {
        let isFinished = false;
        next_tick_default()(() => {
            if (!isFinished) {
                obs.next();
                obs.complete();
            }
        });
        return () => {
            isFinished = true;
        };
    });
}

;// CONCATENATED MODULE: ./src/utils/sorted_list.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Creates an Array automatically sorted with the sorting function given to the
 * constructor when the add method is called.
 *
 * @example
 * ```js
 * const sortedList = new SortedList((a, b) => a.start - b.start);
 * const element1 = { start: 20 };
 * const element2 = { start: 10 };
 * const element3 = { start: 15 };
 *
 * sortedList.add(element1, element2);
 * console.log(sortedList.unwrap());
 * // -> [{ start: 10 }, { start : 20 }]
 *
 * sortedList.add(element3);
 * console.log(sortedList.unwrap());
 * // -> [{ start: 10 }, { start : 15 }, { start: 20 }]
 *
 * sortedList.removeElement(element2);
 * // -> [{ start: 10 }, { start: 15 }]
 * ```
 * @class SortedList
 */
class SortedList {
    /**
     * @param {Function} sortingFunction
     */
    constructor(sortingFunction) {
        this._array = [];
        this._sortingFn = sortingFunction;
    }
    /**
     * Add a new element to the List at the right place for the List to stay
     * sorted.
     *
     * /!\ The added Element will share the same reference than the given
     * argument, any mutation on your part can lead to an un-sorted SortedList.
     * You can still re-force the sorting to happen by calling forceSort.
     * @param {...*} elements
     */
    add(...elements) {
        elements.sort(this._sortingFn);
        let j = 0;
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            let inserted = false;
            while (!inserted && j < this._array.length) {
                if (this._sortingFn(element, this._array[j]) < 0) {
                    this._array.splice(j, 0, element);
                    inserted = true;
                }
                else {
                    j++;
                }
            }
            if (!inserted) {
                this._array.push(element);
            }
        }
    }
    /**
     * Returns the current length of the list.
     * @returns {number}
     */
    length() {
        return this._array.length;
    }
    /**
     * Returns the nth element. Throws if the index does not exist.
     *
     * /!\ The returned Element shares the same reference with what is used
     * internally, any mutation on your part can lead to an un-sorted SortedList.
     * You can still re-force the sorting to happen by calling forceSort.
     * @throws Error - Throws if the given index is negative or superior to the
     * array's length.
     * @param {number} index
     * @returns {*}
     */
    get(index) {
        if (index < 0 || index >= this._array.length) {
            throw new Error("Invalid index.");
        }
        return this._array[index];
    }
    /**
     * Find the first element corresponding to the given predicate.
     *
     * /!\ The returned element shares the same reference with what is used
     * internally, any mutation on your part can lead to an un-sorted SortedList.
     * You can still re-force the sorting to happen by calling forceSort.
     * @param {Function} fn
     * @returns {*}
     */
    findFirst(fn) {
        return arrayFind(this._array, fn);
    }
    /**
     * Returns true if the List contains the given element.
     * @param {*} element
     * @returns {Boolean}
     */
    has(element) {
        return arrayIncludes(this._array, element);
    }
    /**
     * Remove the first occurence of the given element.
     * Returns the index of the removed element. Undefined if not found.
     * @returns {number|undefined}
     */
    removeElement(element) {
        const indexOf = this._array.indexOf(element);
        if (indexOf >= 0) {
            this._array.splice(indexOf, 1);
            return indexOf;
        }
        return undefined;
    }
    /**
     * Returns the first element.
     *
     * /!\ The returned Element shares the same reference with what is used
     * internally, any mutation on your part can lead to an un-sorted SortedList.
     * You can still re-force the sorting to happen by calling forceSort.
     * @returns {*}
     */
    head() {
        return this._array[0];
    }
    /**
     * Returns the last element.
     *
     * /!\ The returned Element shares the same reference with what is used
     * internally, any mutation on your part can lead to an un-sorted SortedList.
     * You can still re-force the sorting to happen by calling forceSort.
     * @returns {*}
     */
    last() {
        return this._array[this._array.length - 1];
    }
    /**
     * Remove the first element.
     * Returns the element removed or undefined if no element were removed.
     * @returns {*}
     */
    shift() {
        return this._array.shift();
    }
    /**
     * Remove the last element.
     * Returns the element removed or undefined if no element were removed.
     * @returns {*}
     */
    pop() {
        return this._array.pop();
    }
}

;// CONCATENATED MODULE: ./src/utils/weak_map_memory.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Memoize Function results linked to an object, through a WeakMap.
 *
 * @example
 * ```js
 * // Initialize the WeakMapMemory with its logic:
 * const memory = new WeakMapMemory(arg => {
 *   console.log("side-effect");
 *   return [arg.a, arg.b];
 * });
 *
 * const obj = { a: 1, b: 2 };
 *
 * // first time obj is given: call the function, save the result and return it:
 * const arr1 = memory.get(obj);
 * // >  "side-effect"
 * // <- [1, 2]
 *
 * // nth time obj is given, returns the saved result without calling the
 * // function:
 * const arr2 = memory.get(obj);
 * // <- [1, 2]
 *
 * // both of these use the same object, so the result is also the exact same
 * // one
 * console.log(arr1 === arr2); // => true
 *
 * // /!\ with a new object however:
 * const obj2 = { a: 1, b: 2 };
 *
 * const arr3 = memory.get(obj2);
 * // >  "side-effect"
 * // <- [1, 2]
 *
 * console.log(arr1 === arr3); // => false
 * ```
 * @class WeakMapMemory
 */
// eslint-disable-next-line @typescript-eslint/ban-types
class WeakMapMemory {
    /**
     * @param {Function}
     */
    constructor(fn) {
        this._weakMap = new WeakMap();
        this._fn = fn;
    }
    /**
     * @param {Object} obj
     * @returns {*}
     */
    get(obj) {
        const fromMemory = this._weakMap.get(obj);
        if (fromMemory === undefined) {
            const newElement = this._fn(obj);
            this._weakMap.set(obj, newElement);
            return newElement;
        }
        else {
            return fromMemory;
        }
    }
    /**
     * @param {Object} obj
     */
    destroy(obj) {
        this._weakMap.delete(obj);
    }
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/garbage_collector.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Perform cleaning of the buffer according to the values set by the user
 * each time `playbackObserver` emits and each times the
 * maxBufferBehind/maxBufferAhead values change.
 *
 * Abort this operation when the `cancellationSignal` emits.
 *
 * @param {Object} opt
 * @param {Object} cancellationSignal
 * @returns {Observable}
 */
function BufferGarbageCollector({ segmentBuffer, playbackObserver, maxBufferBehind, maxBufferAhead }, cancellationSignal) {
    let lastPosition;
    playbackObserver.listen((o) => {
        var _a;
        lastPosition = (_a = o.position.pending) !== null && _a !== void 0 ? _a : o.position.last;
        clean();
    }, { includeLastObservation: true, clearSignal: cancellationSignal });
    function clean() {
        clearBuffer(segmentBuffer, lastPosition, maxBufferBehind.getValue(), maxBufferAhead.getValue(), cancellationSignal)
            .catch(e => {
            const errMsg = e instanceof Error ?
                e.message :
                "Unknown error";
            src_log.error("Could not run BufferGarbageCollector:", errMsg);
        });
    }
    maxBufferBehind.onUpdate(clean, { clearSignal: cancellationSignal });
    maxBufferAhead.onUpdate(clean, { clearSignal: cancellationSignal });
    clean();
}
/**
 * Remove buffer from the browser's memory based on the user's
 * maxBufferAhead / maxBufferBehind settings.
 *
 * Normally, the browser garbage-collect automatically old-added chunks of
 * buffer data when memory is scarce. However, you might want to control
 * the size of memory allocated. This function takes the current position
 * and a "depth" behind and ahead wanted for the buffer, in seconds.
 *
 * Anything older than the depth will be removed from the buffer.
 * @param {Object} segmentBuffer
 * @param {Number} position - The current position
 * @param {Number} maxBufferBehind
 * @param {Number} maxBufferAhead
 * @returns {Promise}
 */
async function clearBuffer(segmentBuffer, position, maxBufferBehind, maxBufferAhead, cancellationSignal) {
    if (!isFinite(maxBufferBehind) && !isFinite(maxBufferAhead)) {
        return Promise.resolve();
    }
    const cleanedupRanges = [];
    const { innerRange, outerRanges } = getInnerAndOuterTimeRanges(segmentBuffer.getBufferedRanges(), position);
    const collectBufferBehind = () => {
        if (!isFinite(maxBufferBehind)) {
            return;
        }
        // begin from the oldest
        for (let i = 0; i < outerRanges.length; i++) {
            const outerRange = outerRanges[i];
            if (position - maxBufferBehind >= outerRange.end) {
                cleanedupRanges.push(outerRange);
            }
            else if (position >= outerRange.end &&
                position - maxBufferBehind > outerRange.start &&
                position - maxBufferBehind < outerRange.end) {
                cleanedupRanges.push({ start: outerRange.start,
                    end: position - maxBufferBehind });
            }
        }
        if (innerRange != null) {
            if (position - maxBufferBehind > innerRange.start) {
                cleanedupRanges.push({ start: innerRange.start,
                    end: position - maxBufferBehind });
            }
        }
    };
    const collectBufferAhead = () => {
        if (!isFinite(maxBufferAhead)) {
            return;
        }
        // begin from the oldest
        for (let i = 0; i < outerRanges.length; i++) {
            const outerRange = outerRanges[i];
            if (position + maxBufferAhead <= outerRange.start) {
                cleanedupRanges.push(outerRange);
            }
            else if (position <= outerRange.start &&
                position + maxBufferAhead < outerRange.end &&
                position + maxBufferAhead > outerRange.start) {
                cleanedupRanges.push({ start: position + maxBufferAhead,
                    end: outerRange.end });
            }
        }
        if (innerRange != null) {
            if (position + maxBufferAhead < innerRange.end) {
                cleanedupRanges.push({ start: position + maxBufferAhead,
                    end: innerRange.end });
            }
        }
    };
    collectBufferBehind();
    collectBufferAhead();
    for (const range of cleanedupRanges) {
        if (range.start < range.end) {
            src_log.debug("GC: cleaning range from SegmentBuffer", range.start, range.end);
            if (cancellationSignal.cancellationError !== null) {
                throw cancellationSignal.cancellationError;
            }
            await segmentBuffer.removeBuffer(range.start, range.end, cancellationSignal);
        }
    }
}

;// CONCATENATED MODULE: ./src/core/stream/events_generators.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const EVENTS = {
    activePeriodChanged(period) {
        return { type: "activePeriodChanged",
            value: { period } };
    },
    adaptationChange(bufferType, adaptation, period) {
        return { type: "adaptationChange",
            value: { type: bufferType,
                adaptation,
                period } };
    },
    addedSegment(content, segment, buffered, segmentData) {
        return { type: "added-segment",
            value: { content,
                segment,
                segmentData,
                buffered } };
    },
    bitrateEstimationChange(type, bitrate) {
        return { type: "bitrateEstimationChange",
            value: { type, bitrate } };
    },
    streamComplete(bufferType) {
        return { type: "complete-stream",
            value: { type: bufferType } };
    },
    endOfStream() {
        return { type: "end-of-stream",
            value: undefined };
    },
    needsManifestRefresh() {
        return { type: "needs-manifest-refresh",
            value: undefined };
    },
    manifestMightBeOufOfSync() {
        return { type: "manifest-might-be-out-of-sync",
            value: undefined };
    },
    /**
     * @param {number} reloadAt - Position at which we should reload
     * @param {boolean} reloadOnPause - If `false`, stay on pause after reloading.
     * if `true`, automatically play once reloaded.
     * @returns {Object}
     */
    needsMediaSourceReload(reloadAt, reloadOnPause) {
        return { type: "needs-media-source-reload",
            value: { position: reloadAt,
                autoPlay: reloadOnPause } };
    },
    /**
     * @param {string} bufferType - The buffer type for which the stream cannot
     * currently load segments.
     * @param {Object} period - The Period for which the stream cannot
     * currently load segments.
     * media source reload is linked.
     * @returns {Object}
     */
    lockedStream(bufferType, period) {
        return { type: "locked-stream",
            value: { bufferType, period } };
    },
    needsBufferFlush() {
        return { type: "needs-buffer-flush", value: undefined };
    },
    needsDecipherabilityFlush(position, autoPlay, duration) {
        return { type: "needs-decipherability-flush",
            value: { position, autoPlay, duration } };
    },
    periodStreamReady(type, period, adaptation$) {
        return { type: "periodStreamReady",
            value: { type, period, adaptation$ } };
    },
    periodStreamCleared(type, period) {
        return { type: "periodStreamCleared",
            value: { type, period } };
    },
    encryptionDataEncountered(reprProtData, content) {
        return { type: "encryption-data-encountered",
            value: object_assign({ content }, reprProtData) };
    },
    representationChange(type, period, representation) {
        return { type: "representationChange",
            value: { type, period, representation } };
    },
    streamTerminating() {
        return { type: "stream-terminating",
            value: undefined };
    },
    resumeStream() {
        return { type: "resume-stream",
            value: undefined };
    },
    warning(value) {
        return { type: "warning", value };
    },
    waitingMediaSourceReload(bufferType, period, position, autoPlay) {
        return { type: "waiting-media-source-reload",
            value: { bufferType, period, position, autoPlay } };
    },
};
/* harmony default export */ const stream_events_generators = (EVENTS);

;// CONCATENATED MODULE: ./src/core/stream/reload_after_switch.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Regularly ask to reload the MediaSource on each playback observation
 * performed by the playback observer.
 *
 * If and only if the Period currently played corresponds to `Period`, applies
 * an offset to the reloaded position corresponding to `deltaPos`.
 * This can be useful for example when switching the audio/video track, where
 * you might want to give back some context if that was the currently played
 * track.
 *
 * @param {Object} period - The Period linked to the Adaptation or
 * Representation that you want to switch to.
 * @param {Observable} playbackObserver - emit playback conditions.
 * Has to emit last playback conditions immediately on subscribe.
 * @param {number} deltaPos - If the concerned Period is playing at the time
 * this function is called, we will add this value, in seconds, to the current
 * position to indicate the position we should reload at.
 * This value allows to give back context (by replaying some media data) after
 * a switch.
 * @returns {Observable}
 */
function reloadAfterSwitch(period, bufferType, playbackObserver, deltaPos) {
    // We begin by scheduling a micro-task to reduce the possibility of race
    // conditions where `reloadAfterSwitch` would be called synchronously before
    // the next observation (which may reflect very different playback conditions)
    // is actually received.
    // It can happen when `reloadAfterSwitch` is called as a side-effect of the
    // same event that triggers the playback observation to be emitted.
    return nextTickObs().pipe(mergeMap(() => playbackObserver.getReference().asObservable()), map((observation) => {
        var _a, _b;
        const currentTime = playbackObserver.getCurrentTime();
        const pos = currentTime + deltaPos;
        // Bind to Period start and end
        const reloadAt = Math.min(Math.max(period.start, pos), (_a = period.end) !== null && _a !== void 0 ? _a : Infinity);
        const autoPlay = !((_b = observation.paused.pending) !== null && _b !== void 0 ? _b : playbackObserver.getIsPaused());
        return stream_events_generators.waitingMediaSourceReload(bufferType, period, reloadAt, autoPlay);
    }));
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js







function withLatestFrom() {
  var inputs = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    inputs[_i] = arguments[_i];
  }
  var project = popResultSelector(inputs);
  return operate(function (source, subscriber) {
    var len = inputs.length;
    var otherValues = new Array(len);
    var hasValue = inputs.map(function () {
      return false;
    });
    var ready = false;
    var _loop_1 = function _loop_1(i) {
      innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {
        otherValues[i] = value;
        if (!ready && !hasValue[i]) {
          hasValue[i] = true;
          (ready = hasValue.every(identity)) && (hasValue = null);
        }
      }, noop));
    };
    for (var i = 0; i < len; i++) {
      _loop_1(i);
    }
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      if (ready) {
        var values = __spreadArray([value], __read(otherValues));
        subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
      }
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js


function takeWhile(predicate, inclusive) {
  if (inclusive === void 0) {
    inclusive = false;
  }
  return operate(function (source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      var result = predicate(value, index++);
      (result || inclusive) && subscriber.next(value);
      !result && subscriber.complete();
    }));
  });
}
;// CONCATENATED MODULE: ./src/core/stream/representation/downloading_queue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Class scheduling segment downloads for a single Representation.
 * @class DownloadingQueue
 */
class DownloadingQueue {
    /**
     * Create a new `DownloadingQueue`.
     *
     * @param {Object} content - The context of the Representation you want to
     * load segments for.
     * @param {Object} downloadQueue - Queue of segments you want to load.
     * @param {Object} segmentFetcher - Interface to facilitate the download of
     * segments.
     * @param {boolean} hasInitSegment - Declare that an initialization segment
     * will need to be downloaded.
     *
     * A `DownloadingQueue` ALWAYS wait for the initialization segment to be
     * loaded and parsed before parsing a media segment.
     *
     * In cases where no initialization segment exist, this would lead to the
     * `DownloadingQueue` waiting indefinitely for it.
     *
     * By setting that value to `false`, you anounce to the `DownloadingQueue`
     * that it should not wait for an initialization segment before parsing a
     * media segment.
     */
    constructor(content, downloadQueue, segmentFetcher, hasInitSegment) {
        this._content = content;
        this._currentObs$ = null;
        this._downloadQueue = downloadQueue;
        this._initSegmentRequest = null;
        this._mediaSegmentRequest = null;
        this._segmentFetcher = segmentFetcher;
        this._initSegmentInfoRef = createSharedReference(undefined);
        this._mediaSegmentsAwaitingInitMetadata = new Set();
        if (!hasInitSegment) {
            this._initSegmentInfoRef.setValue(null);
        }
    }
    /**
     * Returns the initialization segment currently being requested.
     * Returns `null` if no initialization segment request is pending.
     * @returns {Object | null}
     */
    getRequestedInitSegment() {
        return this._initSegmentRequest === null ? null :
            this._initSegmentRequest.segment;
    }
    /**
     * Returns the media segment currently being requested.
     * Returns `null` if no media segment request is pending.
     * @returns {Object | null}
     */
    getRequestedMediaSegment() {
        return this._mediaSegmentRequest === null ? null :
            this._mediaSegmentRequest.segment;
    }
    /**
     * Start the current downloading queue, emitting events as it loads and parses
     * initialization and media segments.
     *
     * If it was already started, returns the same - shared - Observable.
     * @returns {Observable}
     */
    start() {
        if (this._currentObs$ !== null) {
            return this._currentObs$;
        }
        const obs = defer(() => {
            const mediaQueue$ = this._downloadQueue.asObservable().pipe(filter(({ segmentQueue }) => {
                // First, the first elements of the segmentQueue might be already
                // loaded but awaiting the initialization segment to be parsed.
                // Filter those out.
                let nextSegmentToLoadIdx = 0;
                for (; nextSegmentToLoadIdx < segmentQueue.length; nextSegmentToLoadIdx++) {
                    const nextSegment = segmentQueue[nextSegmentToLoadIdx].segment;
                    if (!this._mediaSegmentsAwaitingInitMetadata.has(nextSegment.id)) {
                        break;
                    }
                }
                const currentSegmentRequest = this._mediaSegmentRequest;
                if (nextSegmentToLoadIdx >= segmentQueue.length) {
                    return currentSegmentRequest !== null;
                }
                else if (currentSegmentRequest === null) {
                    return true;
                }
                const nextItem = segmentQueue[nextSegmentToLoadIdx];
                if (currentSegmentRequest.segment.id !== nextItem.segment.id) {
                    return true;
                }
                if (currentSegmentRequest.priority !== nextItem.priority) {
                    this._segmentFetcher.updatePriority(currentSegmentRequest.request, nextItem.priority);
                }
                return false;
            }), switchMap(({ segmentQueue }) => segmentQueue.length > 0 ? this._requestMediaSegments() :
                EMPTY));
            const initSegmentPush$ = this._downloadQueue.asObservable().pipe(filter((next) => {
                const initSegmentRequest = this._initSegmentRequest;
                if (next.initSegment !== null && initSegmentRequest !== null) {
                    if (next.initSegment.priority !== initSegmentRequest.priority) {
                        this._segmentFetcher.updatePriority(initSegmentRequest.request, next.initSegment.priority);
                    }
                    return false;
                }
                else {
                    return next.initSegment === null || initSegmentRequest === null;
                }
            }), switchMap((nextQueue) => {
                if (nextQueue.initSegment === null) {
                    return EMPTY;
                }
                return this._requestInitSegment(nextQueue.initSegment);
            }));
            return merge(initSegmentPush$, mediaQueue$);
        }).pipe(share());
        this._currentObs$ = obs;
        return obs;
    }
    /**
     * Internal logic performing media segment requests.
     * @returns {Observable}
     */
    _requestMediaSegments() {
        const { segmentQueue } = this._downloadQueue.getValue();
        const currentNeededSegment = segmentQueue[0];
        /* eslint-disable-next-line @typescript-eslint/no-this-alias */
        const self = this;
        return defer(() => recursivelyRequestSegments(currentNeededSegment)).pipe(finalize(() => { this._mediaSegmentRequest = null; }));
        function recursivelyRequestSegments(startingSegment) {
            if (startingSegment === undefined) {
                return of({ type: "end-of-queue",
                    value: null });
            }
            const { segment, priority } = startingSegment;
            const context = object_assign({ segment }, self._content);
            return new Observable_Observable((obs) => {
                /** TaskCanceller linked to this Observable's lifecycle. */
                const canceller = new TaskCanceller();
                /**
                 * If `true` , the Observable has either errored, completed, or was
                 * unsubscribed from.
                 * This only conserves the Observable for the current segment's request,
                 * not the other recursively-created future ones.
                 */
                let isComplete = false;
                /**
                 * Subscription to request the following segment (as this function is
                 * recursive).
                 * `undefined` if no following segment has been requested.
                 */
                let nextSegmentSubscription;
                /**
                 * If true, we're currently waiting for the initialization segment to be
                 * parsed before parsing a received chunk.
                 *
                 * In that case, the `DownloadingQueue` has to remain careful to only
                 * send further events and complete the Observable only once the
                 * initialization segment has been parsed AND the chunk parsing has been
                 * done (this can be done very simply by listening to the same
                 * `ISharedReference`, as its callbacks are called in the same order
                 * than the one in which they are added.
                 */
                let isWaitingOnInitSegment = false;
                /** Scheduled actual segment request. */
                const request = self._segmentFetcher.createRequest(context, priority, {
                    /**
                     * Callback called when the request has to be retried.
                     * @param {Error} error
                     */
                    onRetry(error) {
                        obs.next({ type: "retry", value: { segment, error } });
                    },
                    /**
                     * Callback called when the request has to be interrupted and
                     * restarted later.
                     */
                    beforeInterrupted() {
                        src_log.info("Stream: segment request interrupted temporarly.", segment.id, segment.time);
                    },
                    /**
                     * Callback called when a decodable chunk of the segment is available.
                     * @param {Function} parse - Function allowing to parse the segment.
                     */
                    onChunk(parse) {
                        const initTimescale = self._initSegmentInfoRef.getValue();
                        if (initTimescale !== undefined) {
                            emitChunk(parse(initTimescale !== null && initTimescale !== void 0 ? initTimescale : undefined));
                        }
                        else {
                            isWaitingOnInitSegment = true;
                            // We could also technically call `waitUntilDefined` in both cases,
                            // but I found it globally clearer to segregate the two cases,
                            // especially to always have a meaningful `isWaitingOnInitSegment`
                            // boolean which is a very important variable.
                            self._initSegmentInfoRef.waitUntilDefined((actualTimescale) => {
                                emitChunk(parse(actualTimescale !== null && actualTimescale !== void 0 ? actualTimescale : undefined));
                            }, { clearSignal: canceller.signal });
                        }
                    },
                    /** Callback called after all chunks have been sent. */
                    onAllChunksReceived() {
                        if (!isWaitingOnInitSegment) {
                            obs.next({ type: "end-of-segment",
                                value: { segment } });
                        }
                        else {
                            self._mediaSegmentsAwaitingInitMetadata.add(segment.id);
                            self._initSegmentInfoRef.waitUntilDefined(() => {
                                obs.next({ type: "end-of-segment",
                                    value: { segment } });
                                self._mediaSegmentsAwaitingInitMetadata.delete(segment.id);
                                isWaitingOnInitSegment = false;
                            }, { clearSignal: canceller.signal });
                        }
                    },
                    /**
                     * Callback called right after the request ended but before the next
                     * requests are scheduled. It is used to schedule the next segment.
                     */
                    beforeEnded() {
                        self._mediaSegmentRequest = null;
                        if (isWaitingOnInitSegment) {
                            self._initSegmentInfoRef.waitUntilDefined(continueToNextSegment, { clearSignal: canceller.signal });
                        }
                        else {
                            continueToNextSegment();
                        }
                    },
                }, canceller.signal);
                request.catch((error) => {
                    if (!isComplete) {
                        isComplete = true;
                        obs.error(error);
                    }
                });
                self._mediaSegmentRequest = { segment, priority, request };
                return () => {
                    self._mediaSegmentsAwaitingInitMetadata.delete(segment.id);
                    if (nextSegmentSubscription !== undefined) {
                        nextSegmentSubscription.unsubscribe();
                    }
                    if (isComplete) {
                        return;
                    }
                    isComplete = true;
                    isWaitingOnInitSegment = false;
                    canceller.cancel();
                };
                function emitChunk(parsed) {
                    assert_assert(parsed.segmentType === "media", "Should have loaded a media segment.");
                    obs.next(object_assign({}, parsed, { type: "parsed-media",
                        segment }));
                }
                function continueToNextSegment() {
                    const lastQueue = self._downloadQueue.getValue().segmentQueue;
                    if (lastQueue.length === 0) {
                        obs.next({ type: "end-of-queue",
                            value: null });
                        isComplete = true;
                        obs.complete();
                        return;
                    }
                    else if (lastQueue[0].segment.id === segment.id) {
                        lastQueue.shift();
                    }
                    isComplete = true;
                    nextSegmentSubscription = recursivelyRequestSegments(lastQueue[0])
                        .subscribe(obs);
                }
            });
        }
    }
    /**
     * Internal logic performing initialization segment requests.
     * @param {Object} queuedInitSegment
     * @returns {Observable}
     */
    _requestInitSegment(queuedInitSegment) {
        if (queuedInitSegment === null) {
            this._initSegmentRequest = null;
            return EMPTY;
        }
        /* eslint-disable-next-line @typescript-eslint/no-this-alias */
        const self = this;
        return new Observable_Observable((obs) => {
            /** TaskCanceller linked to this Observable's lifecycle. */
            const canceller = new TaskCanceller();
            const { segment, priority } = queuedInitSegment;
            const context = object_assign({ segment }, this._content);
            /**
             * If `true` , the Observable has either errored, completed, or was
             * unsubscribed from.
             */
            let isComplete = false;
            const request = this._segmentFetcher.createRequest(context, priority, {
                onRetry(err) {
                    obs.next({ type: "retry",
                        value: { segment, error: err } });
                },
                beforeInterrupted() {
                    src_log.info("Stream: init segment request interrupted temporarly.", segment.id);
                },
                beforeEnded() {
                    self._initSegmentRequest = null;
                    isComplete = true;
                    obs.complete();
                },
                onChunk(parse) {
                    var _a;
                    const parsed = parse(undefined);
                    assert_assert(parsed.segmentType === "init", "Should have loaded an init segment.");
                    obs.next(object_assign({}, parsed, { type: "parsed-init",
                        segment }));
                    if (parsed.segmentType === "init") {
                        self._initSegmentInfoRef.setValue((_a = parsed.initTimescale) !== null && _a !== void 0 ? _a : null);
                    }
                },
                onAllChunksReceived() {
                    obs.next({ type: "end-of-segment",
                        value: { segment } });
                },
            }, canceller.signal);
            request.catch((error) => {
                if (!isComplete) {
                    isComplete = true;
                    obs.error(error);
                }
            });
            this._initSegmentRequest = { segment, priority, request };
            return () => {
                this._initSegmentRequest = null;
                if (isComplete) {
                    return;
                }
                isComplete = true;
                canceller.cancel();
            };
        });
    }
}

;// CONCATENATED MODULE: ./src/core/stream/representation/check_for_discontinuity.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check if there is a soon-to-be-encountered discontinuity in the buffer that
 * won't be filled by any future segment.
 * This function will only check discontinuities for the given `checkedRange`.
 *
 * @param {Object} content - The content we are currently loading.
 * @param {Object} checkedRange - The time range that will be checked for
 * discontinuities.
 * Both `nextSegmentStart` and `bufferedSegments` arguments can only refer to
 * that range.
 * @param {number|null} nextSegmentStart - The start time in seconds of the next
 * not-yet-pushed segment that can be pushed, in the limits of `checkedRange`.
 * This includes segments which have not been loaded or pushed yet, but also
 * segments which might be re-downloaded because currently incomplete in the
 * buffer, the point being to know what is the earliest time in the buffer where
 * a segment might be pushed in the future.
 * `null` if no segment in `checkedRange` will be pushed under current buffer's
 * conditions.
 * @param {boolean} hasFinishedLoading - if `true`, all segments for the current
 * Period have been loaded and none will be loaded in the future under the
 * current buffer's state.
 * @param {Array.<Object>} bufferedSegments - Information about every segments
 * currently in the buffer, in chronological order.
 * Only segments overlapping with the given `checkedRange` will be looked at,
 * though the array given can be larger.
 */
function checkForDiscontinuity(content, checkedRange, nextSegmentStart, hasFinishedLoading, bufferedSegments) {
    const { period, adaptation, representation } = content;
    // `bufferedSegments` might also contains segments which are before
    // `checkedRange`.
    // Here we want the first one that goes over `checkedRange.start`, to  see
    // if there's a discontinuity at the beginning in the buffer
    const nextBufferedInRangeIdx = getIndexOfFirstChunkInRange(bufferedSegments, checkedRange);
    if (nextBufferedInRangeIdx === null) {
        // There's no segment currently buffered for the current range.
        if (nextSegmentStart === null) { // No segment to load in that range
            // Check if we are in a discontinuity at the end of the current Period
            if (hasFinishedLoading &&
                period.end !== undefined &&
                checkedRange.end >= period.end) {
                return { start: undefined, end: null }; // discontinuity to Period's end
            }
            // Check that there is a discontinuity announced in the Manifest there
            const discontinuityEnd = representation.index
                .checkDiscontinuity(checkedRange.start);
            if (discontinuityEnd !== null) {
                return { start: undefined,
                    end: discontinuityEnd };
            }
        }
        return null;
    }
    const nextBufferedSegment = bufferedSegments[nextBufferedInRangeIdx];
    // Check if there is a hole that won't be filled before `nextSegmentStart`
    if (
    // Next buffered segment starts after the start of the current range
    nextBufferedSegment.bufferedStart !== undefined &&
        nextBufferedSegment.bufferedStart > checkedRange.start &&
        // and no segment will fill in that hole
        (nextSegmentStart === null ||
            nextBufferedSegment.infos.segment.end <= nextSegmentStart)) {
        const discontinuityEnd = nextBufferedSegment.bufferedStart;
        if (!hasFinishedLoading &&
            representation.index.awaitSegmentBetween(checkedRange.start, discontinuityEnd) !== false) {
            return null;
        }
        src_log.debug("RS: current discontinuity encountered", adaptation.type, nextBufferedSegment.bufferedStart);
        return { start: undefined,
            end: discontinuityEnd };
    }
    // Check if there's a discontinuity BETWEEN segments of the current range
    const nextHoleIdx = getIndexOfFirstDiscontinuityBetweenChunks(bufferedSegments, checkedRange, nextBufferedInRangeIdx + 1);
    // If there was a hole between two consecutives segments, and if this hole
    // comes before the next segment to load, there is a discontinuity (that hole!)
    if (nextHoleIdx !== null) {
        const segmentInfoBeforeHole = bufferedSegments[nextHoleIdx - 1];
        const segmentInfoAfterHole = bufferedSegments[nextHoleIdx];
        if (nextSegmentStart === null ||
            segmentInfoAfterHole.infos.segment.end <= nextSegmentStart) {
            if (!hasFinishedLoading && representation.index
                .awaitSegmentBetween(segmentInfoBeforeHole.infos.segment.end, segmentInfoAfterHole.infos.segment.time) !== false) {
                return null;
            }
            const start = segmentInfoBeforeHole.bufferedEnd;
            const end = segmentInfoAfterHole.bufferedStart;
            src_log.debug("RS: future discontinuity encountered", adaptation.type, start, end);
            return { start, end };
        }
    }
    if (nextSegmentStart === null) {
        // If no hole between segments and no segment to load, check for a
        // discontinuity at the end of the Period
        if (hasFinishedLoading && period.end !== undefined) { // Period is finished
            if (checkedRange.end < period.end) { // We've not reached the Period's end yet
                return null;
            }
            // Check if the last buffered segment ends before this Period's end
            // In which case there is a discontinuity between those
            const lastBufferedInPeriodIdx = getIndexOfLastChunkInPeriod(bufferedSegments, period.end);
            if (lastBufferedInPeriodIdx !== null) {
                const lastSegment = bufferedSegments[lastBufferedInPeriodIdx];
                if (lastSegment.bufferedEnd !== undefined &&
                    lastSegment.bufferedEnd < period.end) {
                    src_log.debug("RS: discontinuity encountered at the end of the current period", adaptation.type, lastSegment.bufferedEnd, period.end);
                    return { start: lastSegment.bufferedEnd,
                        end: null };
                }
            }
        }
        // At last, check if we don't have a discontinuity at the end of the current
        // range, announced in the Manifest, that is too big to be detected through
        // the previous checks.
        if (period.end !== undefined && checkedRange.end >= period.end) {
            return null; // The previous checks should have taken care of those
        }
        for (let bufIdx = bufferedSegments.length - 1; bufIdx >= 0; bufIdx--) {
            const bufSeg = bufferedSegments[bufIdx];
            if (bufSeg.bufferedStart === undefined) {
                break;
            }
            if (bufSeg.bufferedStart < checkedRange.end) {
                if (bufSeg.bufferedEnd !== undefined && bufSeg.bufferedEnd < checkedRange.end) {
                    const discontinuityEnd = representation.index
                        .checkDiscontinuity(checkedRange.end);
                    if (discontinuityEnd !== null) {
                        return { start: bufSeg.bufferedEnd,
                            end: discontinuityEnd };
                    }
                }
                return null;
            }
        }
    }
    return null;
}
/**
 * Returns the index of the first element in `bufferedChunks` that is part of
 * `range` (starts before it ends and ends after it starts).
 *
 * Returns `null` if no element is found in that range or if we cannot know the
 * index of the first element in it.
 * @param {Array.<Object>} bufferedChunks
 * @param {Object} range
 * @returns {number|null}
 */
function getIndexOfFirstChunkInRange(bufferedChunks, range) {
    for (let bufIdx = 0; bufIdx < bufferedChunks.length; bufIdx++) {
        const bufSeg = bufferedChunks[bufIdx];
        if (bufSeg.bufferedStart === undefined ||
            bufSeg.bufferedEnd === undefined ||
            bufSeg.bufferedStart >= range.end) {
            return null;
        }
        if (bufSeg.bufferedEnd > range.start) {
            return bufIdx;
        }
    }
    return null;
}
/**
 * Returns the index of the first element in `bufferedChunks` which is not
 * immediately consecutive to the one before it.
 *
 * `startFromIndex` is the index of the first segment that will be checked with
 * the element coming before it. As such, it has to be superior to 0.
 *
 * If the element at `startFromIndex` comes immediately after the one before it,
 * the element at `startFromIndex + 1` will be checked instead and so on until a
 * segment completely out of `checkedRange` (which starts after it) is detected.
 *
 * If no hole between elements is found, `null` is returned.
 * @param {Array.<Object>} bufferedChunks
 * @param {Object} range
 * @param {number} startFromIndex
 * @returns {number|null}
 */
function getIndexOfFirstDiscontinuityBetweenChunks(bufferedChunks, range, startFromIndex) {
    if (startFromIndex <= 0) {
        src_log.error("RS: Asked to check a discontinuity before the first chunk.");
        return null;
    }
    for (let bufIdx = startFromIndex; bufIdx < bufferedChunks.length; bufIdx++) {
        const currSegment = bufferedChunks[bufIdx];
        const prevSegment = bufferedChunks[bufIdx - 1];
        // Exit as soon we miss information or when we go further than `checkedRange`
        if (currSegment.bufferedStart === undefined ||
            prevSegment.bufferedEnd === undefined ||
            currSegment.bufferedStart >= range.end) {
            return null;
        }
        // If there is a hole between two consecutive buffered segment
        if (currSegment.bufferedStart - prevSegment.bufferedEnd > 0) {
            return bufIdx;
        }
    }
    return null;
}
/**
 * Returns the index of the last element in `bufferedChunks` that is part of
 * `range` (starts before it ends and ends after it starts).
 *
 * Returns `null` if no element is found in that range or if we cannot know the
 * index of the last element in it.
 * @param {Array.<Object>} bufferedChunks
 * @param {number} periodEnd
 * @returns {number|null}
 */
function getIndexOfLastChunkInPeriod(bufferedChunks, periodEnd) {
    for (let bufIdx = bufferedChunks.length - 1; bufIdx >= 0; bufIdx--) {
        const bufSeg = bufferedChunks[bufIdx];
        if (bufSeg.bufferedStart === undefined) {
            return null;
        }
        if (bufSeg.bufferedStart < periodEnd) {
            return bufIdx;
        }
    }
    return null;
}

;// CONCATENATED MODULE: ./src/core/stream/representation/get_needed_segments.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line max-len




/**
 * Return the list of segments that can currently be downloaded to fill holes
 * in the buffer in the given range, including already-pushed segments currently
 * incomplete in the buffer.
 * This list might also include already-loaded segments in a higher bitrate,
 * according to the given configuration.
 * Excludes segment that are already being pushed.
 * @param {Object} args
 * @returns {Array.<Object>}
 */
function getNeededSegments({ bufferedSegments, content, currentPlaybackTime, fastSwitchThreshold, getBufferedHistory, neededRange, segmentsBeingPushed, maxBufferSize, }) {
    const { adaptation, representation } = content;
    let availableBufferSize = getAvailableBufferSize(bufferedSegments, segmentsBeingPushed, maxBufferSize);
    const availableSegmentsForRange = representation.index
        .getSegments(neededRange.start, neededRange.end - neededRange.start);
    // Remove from `bufferedSegments` any segments we would prefer to replace:
    //   - segments in the wrong track / bad quality
    //   - garbage-collected segments
    const segmentsToKeep = bufferedSegments
        .filter((bufferedSegment) => !shouldContentBeReplaced(bufferedSegment.infos, content, currentPlaybackTime, fastSwitchThreshold))
        .filter((currentSeg, i, consideredSegments) => {
        const prevSeg = i === 0 ? null :
            consideredSegments[i - 1];
        const nextSeg = i >= consideredSegments.length - 1 ? null :
            consideredSegments[i + 1];
        let lazySegmentHistory = null;
        if (doesStartSeemGarbageCollected(currentSeg, prevSeg, neededRange.start)) {
            lazySegmentHistory = getBufferedHistory(currentSeg.infos);
            if (shouldReloadSegmentGCedAtTheStart(lazySegmentHistory, currentSeg.bufferedStart)) {
                return false;
            }
            src_log.debug("Stream: skipping segment gc-ed at the start", currentSeg.start, currentSeg.bufferedStart);
        }
        if (doesEndSeemGarbageCollected(currentSeg, nextSeg, neededRange.end)) {
            lazySegmentHistory = lazySegmentHistory !== null && lazySegmentHistory !== void 0 ? lazySegmentHistory : getBufferedHistory(currentSeg.infos);
            if (shouldReloadSegmentGCedAtTheEnd(lazySegmentHistory, currentSeg.bufferedEnd)) {
                return false;
            }
            src_log.debug("Stream: skipping segment gc-ed at the end", currentSeg.end, currentSeg.bufferedEnd);
        }
        return true;
    });
    const { MINIMUM_SEGMENT_SIZE, MIN_BUFFER_AHEAD } = src_config.getCurrent();
    let shouldStopLoadingSegments = false;
    /**
     * Epsilon compensating for rounding errors when comparing the start and end
     * time of multiple segments.
     */
    const ROUNDING_ERROR = Math.min(1 / 60, MINIMUM_SEGMENT_SIZE);
    let isBufferFull = false;
    const segmentsOnHold = [];
    const segmentsToLoad = availableSegmentsForRange.filter(segment => {
        const contentObject = object_assign({ segment }, content);
        // First, check that the segment is not already being pushed
        if (segmentsBeingPushed.length > 0) {
            const isAlreadyBeingPushed = segmentsBeingPushed
                .some((pendingSegment) => areSameContent(contentObject, pendingSegment));
            if (isAlreadyBeingPushed) {
                return false;
            }
        }
        const { duration, time, end } = segment;
        if (segment.isInit) {
            return true; // never skip initialization segments
        }
        if (shouldStopLoadingSegments) {
            segmentsOnHold.push(segment);
            return false;
        }
        if (segment.complete && duration < MINIMUM_SEGMENT_SIZE) {
            return false; // too small, don't download
        }
        // Check if the same segment from another Representation is not already
        // being pushed.
        if (segmentsBeingPushed.length > 0) {
            const waitForPushedSegment = segmentsBeingPushed.some((pendingSegment) => {
                if (pendingSegment.period.id !== content.period.id ||
                    pendingSegment.adaptation.id !== content.adaptation.id) {
                    return false;
                }
                const { segment: oldSegment } = pendingSegment;
                if ((oldSegment.time - ROUNDING_ERROR) > time) {
                    return false;
                }
                if ((oldSegment.end + ROUNDING_ERROR) < end) {
                    return false;
                }
                return !shouldContentBeReplaced(pendingSegment, contentObject, currentPlaybackTime, fastSwitchThreshold);
            });
            if (waitForPushedSegment) {
                return false;
            }
        }
        // check if the segment is already downloaded
        for (let i = 0; i < segmentsToKeep.length; i++) {
            const completeSeg = segmentsToKeep[i];
            const areFromSamePeriod = completeSeg.infos.period.id === content.period.id;
            // Check if content are from same period, as there can't be overlapping
            // periods, we should consider a segment as already downloaded if
            // it is from same period (but can be from different adaptation or
            // representation)
            if (areFromSamePeriod) {
                const completeSegInfos = completeSeg.infos.segment;
                if (time - completeSegInfos.time > -ROUNDING_ERROR &&
                    completeSegInfos.end - end > -ROUNDING_ERROR) {
                    return false; // already downloaded
                }
            }
        }
        const estimatedSegmentSize = (duration * content.representation.bitrate); // in bits
        if (availableBufferSize - estimatedSegmentSize < 0) {
            isBufferFull = true;
            if (time > neededRange.start + MIN_BUFFER_AHEAD) {
                shouldStopLoadingSegments = true;
                segmentsOnHold.push(segment);
                return false;
            }
        }
        // check if the browser is not just garbage collecting it
        const segmentHistory = getBufferedHistory(contentObject);
        if (segmentHistory.length > 1) {
            const lastTimeItWasPushed = segmentHistory[segmentHistory.length - 1];
            const beforeLastTimeItWasPushed = segmentHistory[segmentHistory.length - 2];
            if (lastTimeItWasPushed.buffered === null &&
                beforeLastTimeItWasPushed.buffered === null) {
                src_log.warn("Stream: Segment GCed multiple times in a row, ignoring it.", "If this happens a lot and lead to unpleasant experience, please " +
                    " check your device's available memory. If it's low when this message " +
                    "is emitted, you might want to update the RxPlayer's settings (" +
                    "`maxBufferAhead`, `maxVideoBufferSize` etc.) so less memory is used " +
                    "by regular media data buffering." +
                    adaptation.type, representation.id, segment.time);
                return false;
            }
        }
        // check if there is an hole in place of the segment currently
        for (let i = 0; i < segmentsToKeep.length; i++) {
            const completeSeg = segmentsToKeep[i];
            // For the first already-loaded segment, take the first one ending after
            // this one' s start
            if ((completeSeg.end + ROUNDING_ERROR) > time) {
                const shouldLoad = completeSeg.start > time + ROUNDING_ERROR ||
                    getLastContiguousSegment(segmentsToKeep, i).end <
                        end - ROUNDING_ERROR;
                if (shouldLoad) {
                    availableBufferSize -= estimatedSegmentSize;
                }
                return shouldLoad;
            }
        }
        availableBufferSize -= estimatedSegmentSize;
        return true;
    });
    return { segmentsToLoad, segmentsOnHold, isBufferFull };
}
/**
 * Compute the estimated available buffer size in memory in kilobytes
 * @param bufferedSegments
 * @param segmentsBeingPushed
 * @param maxVideoBufferSize
 * @returns availableBufferSize in bits
 */
function getAvailableBufferSize(bufferedSegments, segmentsBeingPushed, maxVideoBufferSize) {
    let availableBufferSize = maxVideoBufferSize * 8000; // in bits
    availableBufferSize -= segmentsBeingPushed.reduce((size, segment) => {
        const { bitrate } = segment.representation;
        // Not taking into account the fact that the segment
        // can still be generated and the duration not fully exact
        const { duration } = segment.segment;
        return size + (bitrate * duration);
    }, 0);
    return bufferedSegments.reduce((size, chunk) => {
        if (chunk.chunkSize !== undefined) {
            return size - (chunk.chunkSize * 8); // in bits
        }
        else {
            return size;
        }
    }, availableBufferSize);
}
/**
 * From the given array of buffered chunks (`bufferedSegments`) returns the last
 * buffered chunk contiguous with the one at the `startIndex` index given.
 * @param {Array.<Object>}
 * @param {number} startIndex
 * @returns {Object}
 */
function getLastContiguousSegment(bufferedSegments, startIndex) {
    let j = startIndex + 1;
    const { MINIMUM_SEGMENT_SIZE } = src_config.getCurrent();
    /**
     * Epsilon compensating for rounding errors when comparing the start and end
     * time of multiple segments.
     */
    const ROUNDING_ERROR = Math.min(1 / 60, MINIMUM_SEGMENT_SIZE);
    // go through all contiguous segments and take the last one
    while (j < bufferedSegments.length - 1 &&
        (bufferedSegments[j - 1].end + ROUNDING_ERROR) >
            bufferedSegments[j].start) {
        j++;
    }
    j--; // index of last contiguous segment
    return bufferedSegments[j];
}
/**
 * Returns `true` if segments linked to the given `oldContent` currently present
 * in the buffer should be replaced by segments coming from `currentContent`.
 * @param {Object} oldContent
 * @param {Object} currentContent
 * @param {number} currentPlaybackTime
 * @param {number} [fastSwitchThreshold]
 * @returns {boolean}
 */
function shouldContentBeReplaced(oldContent, currentContent, currentPlaybackTime, fastSwitchThreshold) {
    const { CONTENT_REPLACEMENT_PADDING } = src_config.getCurrent();
    if (oldContent.period.id !== currentContent.period.id) {
        return false; // keep segments from another Period by default.
    }
    const { segment } = oldContent;
    if (segment.time < (currentPlaybackTime + CONTENT_REPLACEMENT_PADDING)) {
        return false;
    }
    if (oldContent.adaptation.id !== currentContent.adaptation.id) {
        return true; // replace segments from another Adaptation
    }
    return canFastSwitch(oldContent.representation, currentContent.representation, fastSwitchThreshold);
}
/**
 * Returns `true` if segments from the new Representation can replace
 * previously-loaded segments from the old Representation given.
 *
 * This behavior is called "fast-switching".
 * @param {Object} oldSegmentRepresentation
 * @param {Object} newSegmentRepresentation
 * @param {number|undefined} fastSwitchThreshold
 * @returns {boolean}
 */
function canFastSwitch(oldSegmentRepresentation, newSegmentRepresentation, fastSwitchThreshold) {
    const oldContentBitrate = oldSegmentRepresentation.bitrate;
    const { BITRATE_REBUFFERING_RATIO } = src_config.getCurrent();
    if (fastSwitchThreshold === undefined) {
        // only re-load comparatively-poor bitrates for the same Adaptation.
        const bitrateCeil = oldContentBitrate * BITRATE_REBUFFERING_RATIO;
        return newSegmentRepresentation.bitrate > bitrateCeil;
    }
    return oldContentBitrate < fastSwitchThreshold &&
        newSegmentRepresentation.bitrate > oldContentBitrate;
}
/**
 * From buffered segment information, return `true` if the given `currentSeg`
 * might have been garbage collected at the start.
 * Return `false` if the segment is complete at least from `maximumStartTime`.
 * @param {Object} currentSeg - The segment information for the segment in
 * question.
 * @param {Object|null} prevSeg - The segment information for the previous
 * buffered segment, if one (`null` if none).
 * @param {number} maximumStartTime - Only consider the data after that time.
 * If `currentSeg` has only been garbage collected for some data which is before
 * that time, we will return `false`.
 */
function doesStartSeemGarbageCollected(currentSeg, prevSeg, maximumStartTime) {
    const { MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT } = src_config.getCurrent();
    if (currentSeg.bufferedStart === undefined) {
        src_log.warn("Stream: Start of a segment unknown. " +
            "Assuming it is garbage collected by default.", currentSeg.start);
        return true;
    }
    if (prevSeg !== null && prevSeg.bufferedEnd !== undefined &&
        (currentSeg.bufferedStart - prevSeg.bufferedEnd < 0.1)) {
        return false;
    }
    if (maximumStartTime < currentSeg.bufferedStart &&
        currentSeg.bufferedStart - currentSeg.start >
            MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT) {
        src_log.info("Stream: The start of the wanted segment has been garbage collected", currentSeg.start, currentSeg.bufferedStart);
        return true;
    }
    return false;
}
/**
 * From buffered segment information, return `true` if the given `currentSeg`
 * might have been garbage collected at the end.
 * Return `false` if the segment is complete at least until `minimumEndTime`.
 * @param {Object} currentSeg - The segment information for the segment in
 * question.
 * @param {Object|null} nextSeg - The segment information for the next buffered
 * segment, if one (`null` if none).
 * @param {number} minimumEndTime - Only consider the data before that time.
 * If `currentSeg` has only been garbage collected for some data which is after
 * that time, we will return `false`.
 */
function doesEndSeemGarbageCollected(currentSeg, nextSeg, minimumEndTime) {
    const { MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT } = src_config.getCurrent();
    if (currentSeg.bufferedEnd === undefined) {
        src_log.warn("Stream: End of a segment unknown. " +
            "Assuming it is garbage collected by default.", currentSeg.end);
        return true;
    }
    if (nextSeg !== null && nextSeg.bufferedStart !== undefined &&
        (nextSeg.bufferedStart - currentSeg.bufferedEnd < 0.1)) {
        return false;
    }
    if (minimumEndTime > currentSeg.bufferedEnd &&
        currentSeg.end - currentSeg.bufferedEnd > MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT) {
        src_log.info("Stream: The end of the wanted segment has been garbage collected", currentSeg.start, currentSeg.bufferedStart);
        return true;
    }
    return false;
}
/**
 * Returns `true` if a segment that has been garbage-collected at the start
 * might profit from being re-loaded.
 *
 * Returns `false` if we have a high chance of staying in the same situation
 * after re-loading the segment.
 *
 * This function takes in argument the entries of a SegmentBuffer's history
 * related to the corresponding segment and check if the segment appeared
 * garbage-collected at the start directly after the last few times it was
 * pushed, indicating that the issue might be sourced at a browser issue instead
 * of classical garbage collection.
 *
 * @param {Array.<Object>} segmentEntries
 * @param {number|undefined} currentBufferedStart
 * @returns {boolean}
 */
function shouldReloadSegmentGCedAtTheStart(segmentEntries, currentBufferedStart) {
    var _a, _b;
    if (segmentEntries.length < 2) {
        return true;
    }
    const lastEntry = segmentEntries[segmentEntries.length - 1];
    const lastBufferedStart = (_a = lastEntry.buffered) === null || _a === void 0 ? void 0 : _a.start;
    // If the current segment's buffered start is much higher than what it
    // initially was when we pushed it, the segment has a very high chance of
    // having been truly garbage-collected.
    if (currentBufferedStart !== undefined &&
        lastBufferedStart !== undefined &&
        currentBufferedStart - lastBufferedStart > 0.05) {
        return true;
    }
    const prevEntry = segmentEntries[segmentEntries.length - 2];
    const prevBufferedStart = (_b = prevEntry.buffered) === null || _b === void 0 ? void 0 : _b.start;
    if (prevBufferedStart === undefined || lastBufferedStart === undefined) {
        return true;
    }
    // Compare `bufferedStart` from the last time this segment was pushed
    // (`entry.bufferedStart`) to the previous time it was pushed
    // (`prevSegEntry.bufferedStart`).
    //
    // If in both cases, we notice that their initial `bufferedStart` are close,
    // it means that in recent history the same segment has been accused to be
    // garbage collected two times at roughly the same positions just after being
    // pushed.
    // This is very unlikely and might be linked to either a content or browser
    // issue. In that case, don't try to reload.
    return Math.abs(prevBufferedStart - lastBufferedStart) > 0.01;
}
/**
 * Returns `true` if a segment that has been garbage-collected at the end
 * might profit from being re-loaded.
 *
 * Returns `false` if we have a high chance of staying in the same situation
 * after re-loading the segment.
 *
 * This function takes in argument the entries of a SegmentBuffer's history
 * related to the corresponding segment and check if the segment appeared
 * garbage-collected at the end directly after the last few times it was
 * pushed, indicating that the issue might be sourced at a browser issue instead
 * of classical garbage collection.
 *
 * @param {Array.<Object>} segmentEntries
 * @param {number|undefined} currentBufferedEnd
 * @returns {boolean}
 */
function shouldReloadSegmentGCedAtTheEnd(segmentEntries, currentBufferedEnd) {
    var _a, _b;
    if (segmentEntries.length < 2) {
        return true;
    }
    const lastEntry = segmentEntries[segmentEntries.length - 1];
    const lastBufferedEnd = (_a = lastEntry.buffered) === null || _a === void 0 ? void 0 : _a.end;
    // If the current segment's buffered end is much lower than what it
    // initially was when we pushed it, the segment has a very high chance of
    // having been truly garbage-collected.
    if (currentBufferedEnd !== undefined &&
        lastBufferedEnd !== undefined &&
        lastBufferedEnd - currentBufferedEnd > 0.05) {
        return true;
    }
    const prevEntry = segmentEntries[segmentEntries.length - 2];
    const prevBufferedEnd = (_b = prevEntry.buffered) === null || _b === void 0 ? void 0 : _b.end;
    if (prevBufferedEnd === undefined || lastBufferedEnd === undefined) {
        return true;
    }
    // Compare `bufferedEnd` from the last time this segment was pushed
    // (`entry.bufferedEnd`) to the previous time it was pushed
    // (`prevSegEntry.bufferedEnd`).
    //
    // If in both cases, we notice that their initial `bufferedEnd` are close,
    // it means that in recent history the same segment has been accused to be
    // garbage collected two times at roughly the same positions just after being
    // pushed.
    // This is very unlikely and might be linked to either a content or browser
    // issue. In that case, don't try to reload.
    return Math.abs(prevBufferedEnd - lastBufferedEnd) > 0.01;
}

;// CONCATENATED MODULE: ./src/core/stream/representation/get_segment_priority.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Calculate the priority number for a given segment start time, in function of
 * the distance with the wanted starting timestamp.
 *
 * The lower is this number, the higher should be the priority of the request.
 *
 * Note that a `segmentTime` given behind the current time will always have the
 * highest priority.
 * @param {number} segmentTime
 * @param {Object} wantedStartTimestamp
 * @returns {number}
 */
function getSegmentPriority(segmentTime, wantedStartTimestamp) {
    const distance = segmentTime - wantedStartTimestamp;
    const { SEGMENT_PRIORITIES_STEPS } = src_config.getCurrent();
    for (let priority = 0; priority < SEGMENT_PRIORITIES_STEPS.length; priority++) {
        if (distance < SEGMENT_PRIORITIES_STEPS[priority]) {
            return priority;
        }
    }
    return SEGMENT_PRIORITIES_STEPS.length;
}

;// CONCATENATED MODULE: ./src/core/stream/representation/get_buffer_status.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Checks on the current buffered data for the given type and Period
 * and returns what should be done to fill the buffer according to the buffer
 * goal, the Representation chosen, etc.
 * Also emits discontinuities if found, which are parts of the buffer that won't
 * be filled by any segment, even in the future.
 *
 * @param {Object} content
 * @param {number} initialWantedTime
 * @param {Object} playbackObserver
 * @param {number|undefined} fastSwitchThreshold
 * @param {number} bufferGoal
 * @param {number} maxBufferSize
 * @param {Object} segmentBuffer
 * @returns {Object}
 */
function getBufferStatus(content, initialWantedTime, playbackObserver, fastSwitchThreshold, bufferGoal, maxBufferSize, segmentBuffer) {
    segmentBuffer.synchronizeInventory();
    const { representation } = content;
    const askedStart = playbackObserver.getIsPaused() ||
        playbackObserver.getPlaybackRate() <= 0 ?
        initialWantedTime - 0.1 :
        initialWantedTime;
    const neededRange = getRangeOfNeededSegments(content, askedStart, bufferGoal);
    const shouldRefreshManifest = representation.index.shouldRefresh(neededRange.start, neededRange.end);
    /**
     * Every segment awaiting an "EndOfSegment" operation, which indicates that a
     * completely-loaded segment is still being pushed to the SegmentBuffer.
     */
    const segmentsBeingPushed = segmentBuffer.getPendingOperations()
        .filter((operation) => operation.type === SegmentBufferOperation.EndOfSegment).map(operation => operation.value);
    /** Data on every segments buffered around `neededRange`. */
    const bufferedSegments = getPlayableBufferedSegments({ start: Math.max(neededRange.start - 0.5, 0),
        end: neededRange.end + 0.5 }, segmentBuffer.getInventory());
    const currentPlaybackTime = playbackObserver.getCurrentTime();
    /** Callback allowing to retrieve a segment's history in the buffer. */
    const getBufferedHistory = segmentBuffer.getSegmentHistory.bind(segmentBuffer);
    /** List of segments we will need to download. */
    const { segmentsToLoad, segmentsOnHold, isBufferFull } = getNeededSegments({ content,
        bufferedSegments,
        currentPlaybackTime,
        fastSwitchThreshold,
        getBufferedHistory,
        neededRange,
        segmentsBeingPushed,
        maxBufferSize });
    const prioritizedNeededSegments = segmentsToLoad.map((segment) => ({
        priority: getSegmentPriority(segment.time, askedStart),
        segment,
    }));
    /**
     * `true` if the current `RepresentationStream` has loaded all the
     * needed segments for this Representation until the end of the Period.
     */
    const hasFinishedLoading = representation.index.isInitialized() &&
        representation.index.isFinished() &&
        neededRange.hasReachedPeriodEnd &&
        prioritizedNeededSegments.length === 0 &&
        segmentsOnHold.length === 0;
    /**
     * Start time in seconds of the next available not-yet pushed segment.
     * `null` if no segment is wanted for the current wanted range.
     */
    let nextSegmentStart = null;
    if (segmentsBeingPushed.length > 0) {
        nextSegmentStart = Math.min(...segmentsBeingPushed.map(info => info.segment.time));
    }
    if (segmentsOnHold.length > 0) {
        nextSegmentStart = nextSegmentStart !== null ?
            Math.min(nextSegmentStart, segmentsOnHold[0].time) :
            segmentsOnHold[0].time;
    }
    if (prioritizedNeededSegments.length > 0) {
        nextSegmentStart = nextSegmentStart !== null ?
            Math.min(nextSegmentStart, prioritizedNeededSegments[0].segment.time) :
            prioritizedNeededSegments[0].segment.time;
    }
    const imminentDiscontinuity = checkForDiscontinuity(content, neededRange, nextSegmentStart, hasFinishedLoading, bufferedSegments);
    return { imminentDiscontinuity,
        hasFinishedLoading,
        neededSegments: prioritizedNeededSegments,
        isBufferFull,
        shouldRefreshManifest };
}
/**
 * Returns both the time range of segments that should be loaded (from a
 * starting position to an ending position) and whether the end of the Period is
 * reached by that range.
 * @param {Object} content
 * @param {number} initialWantedTime
 * @param {number} bufferGoal
 * @returns {Object}
 */
function getRangeOfNeededSegments(content, initialWantedTime, bufferGoal) {
    var _a;
    let wantedStartPosition;
    const { manifest, period, representation } = content;
    const lastIndexPosition = representation.index.getLastAvailablePosition();
    const representationIndex = representation.index;
    // There is an exception for when the current initially wanted time is already
    // after the last position with segments AND when we're playing the absolute
    // last Period in the Manifest.
    // In that case, we want to actually request at least the last segment to
    // avoid ending the last Period - and by extension the content - with a
    // segment which isn't the last one.
    if (!isNullOrUndefined(lastIndexPosition) &&
        initialWantedTime >= lastIndexPosition &&
        representationIndex.isInitialized() &&
        representationIndex.isFinished() &&
        isPeriodTheCurrentAndLastOne(manifest, period, initialWantedTime)) {
        wantedStartPosition = lastIndexPosition - 1;
    }
    else {
        wantedStartPosition = initialWantedTime - 0.1;
    }
    const wantedEndPosition = wantedStartPosition + bufferGoal;
    let hasReachedPeriodEnd;
    if (!representation.index.isInitialized() ||
        !representation.index.isFinished() ||
        period.end === undefined) {
        hasReachedPeriodEnd = false;
    }
    else if (lastIndexPosition === undefined) {
        // We do not know the end of this index.
        hasReachedPeriodEnd = wantedEndPosition >= period.end;
    }
    else if (lastIndexPosition === null) {
        // There is no available segment in the index currently.
        hasReachedPeriodEnd = true;
    }
    else {
        // We have a declared end. Check that our range went until the last
        // position available in the index. If that's the case and we're left
        // with no segments after filtering them, it means we already have
        // downloaded the last segments and have nothing left to do: full.
        hasReachedPeriodEnd = wantedEndPosition >= lastIndexPosition;
    }
    return { start: Math.max(wantedStartPosition, period.start),
        end: Math.min(wantedEndPosition, (_a = period.end) !== null && _a !== void 0 ? _a : Infinity),
        hasReachedPeriodEnd };
}
/**
 * Returns `true` if the given Period is both:
 *   - the one being played (the current position is known from `time`)
 *   - the absolute last one in the Manifest (that is, there will never be a
 *     Period after it).
 * @param {Object} manifest
 * @param {Object} period
 * @param {number} time
 * @returns {boolean}
 */
function isPeriodTheCurrentAndLastOne(manifest, period, time) {
    var _a;
    return period.containsTime(time) &&
        manifest.isLastPeriodKnown &&
        period.id === ((_a = manifest.periods[manifest.periods.length - 1]) === null || _a === void 0 ? void 0 : _a.id);
}
/**
 * From the given SegmentInventory, filters the "playable" (in a supported codec
 * and not known to be undecipherable) buffered Segment Objects which overlap
 * with the given range.
 * @param {Object} neededRange
 * @param {Array.<Object>} segmentInventory
 * @returns {Array.<Object>}
 */
function getPlayableBufferedSegments(neededRange, segmentInventory) {
    const { MINIMUM_SEGMENT_SIZE } = src_config.getCurrent();
    const segmentRoundingError = Math.max(1 / 60, MINIMUM_SEGMENT_SIZE);
    const minEnd = neededRange.start + segmentRoundingError;
    const maxStart = neededRange.end - segmentRoundingError;
    const overlappingChunks = [];
    for (let i = segmentInventory.length - 1; i >= 0; i--) {
        const eltInventory = segmentInventory[i];
        const { representation } = eltInventory.infos;
        if (!eltInventory.partiallyPushed &&
            representation.decipherable !== false &&
            representation.isSupported) {
            const inventorySegment = eltInventory.infos.segment;
            const eltInventoryStart = inventorySegment.time /
                inventorySegment.timescale;
            const eltInventoryEnd = !inventorySegment.complete ?
                eltInventory.end :
                eltInventoryStart + inventorySegment.duration / inventorySegment.timescale;
            if ((eltInventoryEnd > minEnd && eltInventoryStart < maxStart) ||
                (eltInventory.end > minEnd && eltInventory.start < maxStart)) {
                overlappingChunks.unshift(eltInventory);
            }
        }
    }
    return overlappingChunks;
}

;// CONCATENATED MODULE: ./src/core/stream/representation/force_garbage_collection.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Run the garbage collector.
 *
 * Try to clean up buffered ranges from a low gcGap at first.
 * If it does not succeed to clean up space, use a higher gcCap.
 *
 * @param {number} currentPosition
 * @param {Object} bufferingQueue
 * @param {Object} cancellationSignal
 * @returns {Promise}
 */
async function forceGarbageCollection(currentPosition, bufferingQueue, cancellationSignal) {
    const GC_GAP_CALM = src_config.getCurrent().BUFFER_GC_GAPS.CALM;
    const GC_GAP_BEEFY = src_config.getCurrent().BUFFER_GC_GAPS.BEEFY;
    src_log.warn("Stream: Running garbage collector");
    const buffered = bufferingQueue.getBufferedRanges();
    let cleanedupRanges = selectGCedRanges(currentPosition, buffered, GC_GAP_CALM);
    // more aggressive GC if we could not find any range to clean
    if (cleanedupRanges.length === 0) {
        cleanedupRanges = selectGCedRanges(currentPosition, buffered, GC_GAP_BEEFY);
    }
    if (src_log.hasLevel("DEBUG")) {
        src_log.debug("Stream: GC cleaning", cleanedupRanges.map(({ start, end }) => `start: ${start} - end ${end}`)
            .join(", "));
    }
    for (const range of cleanedupRanges) {
        const { start, end } = range;
        if (start < end) {
            await bufferingQueue.removeBuffer(start, end, cancellationSignal);
        }
    }
}
/**
 * Buffer garbage collector algorithm.
 *
 * Tries to free up some part of the ranges that are distant from the current
 * playing time.
 * See: https://w3c.github.io/media-source/#sourcebuffer-prepare-append
 *
 * @param {Number} position
 * @param {TimeRanges} buffered - current buffered ranges
 * @param {Number} gcGap - delta gap from current timestamp from which we
 * should consider cleaning up.
 * @returns {Array.<Object>} - Ranges selected for clean up
 */
function selectGCedRanges(position, buffered, gcGap) {
    const { innerRange, outerRanges } = getInnerAndOuterTimeRanges(buffered, position);
    const cleanedupRanges = [];
    // start by trying to remove all ranges that do not contain the
    // current time and respect the gcGap
    for (let i = 0; i < outerRanges.length; i++) {
        const outerRange = outerRanges[i];
        if ((position - gcGap > outerRange.end) || (position + gcGap < outerRange.start)) {
            cleanedupRanges.push(outerRange);
        }
    }
    // try to clean up some space in the current range
    if (innerRange !== null) {
        if (src_log.hasLevel("DEBUG")) {
            src_log.debug("Stream: GC removing part of inner range", cleanedupRanges.map(({ start, end }) => `start: ${start} - end ${end}`)
                .join(", "));
        }
        if (position - gcGap > innerRange.start) {
            cleanedupRanges.push({ start: innerRange.start,
                end: position - gcGap });
        }
        if (position + gcGap < innerRange.end) {
            cleanedupRanges.push({ start: position + gcGap,
                end: innerRange.end });
        }
    }
    return cleanedupRanges;
}

;// CONCATENATED MODULE: ./src/core/stream/representation/append_segment_to_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file allows any Stream to push data to a SegmentBuffer.
 */


/**
 * Append a segment to the given segmentBuffer.
 * If it leads to a QuotaExceededError, try to run our custom range
 * _garbage collector_ then retry.
 * @param {Observable} playbackObserver
 * @param {Object} segmentBuffer
 * @param {Object} dataInfos
 * @param {Object} cancellationSignal
 * @returns {Promise}
 */
async function appendSegmentToBuffer(playbackObserver, segmentBuffer, dataInfos, cancellationSignal) {
    var _a;
    try {
        await segmentBuffer.pushChunk(dataInfos, cancellationSignal);
    }
    catch (appendError) {
        if (!(appendError instanceof Error) || appendError.name !== "QuotaExceededError") {
            const reason = appendError instanceof Error ?
                appendError.toString() :
                "An unknown error happened when pushing content";
            throw new MediaError("BUFFER_APPEND_ERROR", reason);
        }
        const { position } = playbackObserver.getReference().getValue();
        const currentPos = (_a = position.pending) !== null && _a !== void 0 ? _a : position.last;
        try {
            await forceGarbageCollection(currentPos, segmentBuffer, cancellationSignal);
            await segmentBuffer.pushChunk(dataInfos, cancellationSignal);
        }
        catch (err2) {
            const reason = err2 instanceof Error ? err2.toString() :
                "Could not clean the buffer";
            throw new MediaError("BUFFER_FULL_ERROR", reason);
        }
    }
}

;// CONCATENATED MODULE: ./src/core/stream/representation/push_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Push the initialization segment to the SegmentBuffer.
 * The Observable returned:
 *   - emit an event once the segment has been pushed.
 *   - throws on Error.
 * @param {Object} args
 * @returns {Observable}
 */
function pushInitSegment({ playbackObserver, content, segment, segmentData, segmentBuffer }) {
    return defer(() => {
        if (segmentData === null) {
            return EMPTY;
        }
        const codec = content.representation.getMimeTypeString();
        const data = { initSegment: segmentData,
            chunk: null,
            timestampOffset: 0,
            appendWindow: [undefined, undefined],
            codec };
        const canceller = new TaskCanceller();
        return fromCancellablePromise(canceller, () => appendSegmentToBuffer(playbackObserver, segmentBuffer, { data, inventoryInfos: null }, canceller.signal))
            .pipe(map(() => {
            const buffered = segmentBuffer.getBufferedRanges();
            return stream_events_generators.addedSegment(content, segment, buffered, segmentData);
        }));
    });
}

;// CONCATENATED MODULE: ./src/core/stream/representation/push_media_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Push a given media segment (non-init segment) to a SegmentBuffer.
 * The Observable returned:
 *   - emit an event once the segment has been pushed.
 *   - throws on Error.
 * @param {Object} args
 * @returns {Observable}
 */
function pushMediaSegment({ playbackObserver, content, initSegmentData, parsedSegment, segment, segmentBuffer }) {
    return defer(() => {
        var _a, _b;
        if (parsedSegment.chunkData === null) {
            return EMPTY;
        }
        const { chunkData, chunkInfos, chunkOffset, chunkSize, appendWindow } = parsedSegment;
        const codec = content.representation.getMimeTypeString();
        const { APPEND_WINDOW_SECURITIES } = src_config.getCurrent();
        // Cutting exactly at the start or end of the appendWindow can lead to
        // cases of infinite rebuffering due to how browser handle such windows.
        // To work-around that, we add a small offset before and after those.
        const safeAppendWindow = [
            appendWindow[0] !== undefined ?
                Math.max(0, appendWindow[0] - APPEND_WINDOW_SECURITIES.START) :
                undefined,
            appendWindow[1] !== undefined ?
                appendWindow[1] + APPEND_WINDOW_SECURITIES.END :
                undefined,
        ];
        const data = { initSegment: initSegmentData,
            chunk: chunkData,
            timestampOffset: chunkOffset,
            appendWindow: safeAppendWindow,
            codec };
        let estimatedStart = (_a = chunkInfos === null || chunkInfos === void 0 ? void 0 : chunkInfos.time) !== null && _a !== void 0 ? _a : segment.time;
        const estimatedDuration = (_b = chunkInfos === null || chunkInfos === void 0 ? void 0 : chunkInfos.duration) !== null && _b !== void 0 ? _b : segment.duration;
        let estimatedEnd = estimatedStart + estimatedDuration;
        if (safeAppendWindow[0] !== undefined) {
            estimatedStart = Math.max(estimatedStart, safeAppendWindow[0]);
        }
        if (safeAppendWindow[1] !== undefined) {
            estimatedEnd = Math.min(estimatedEnd, safeAppendWindow[1]);
        }
        const inventoryInfos = object_assign({ segment,
            chunkSize,
            start: estimatedStart,
            end: estimatedEnd }, content);
        const canceller = new TaskCanceller();
        return fromCancellablePromise(canceller, () => appendSegmentToBuffer(playbackObserver, segmentBuffer, { data, inventoryInfos }, canceller.signal))
            .pipe(map(() => {
            const buffered = segmentBuffer.getBufferedRanges();
            return stream_events_generators.addedSegment(content, segment, buffered, chunkData);
        }));
    });
}

;// CONCATENATED MODULE: ./src/core/stream/representation/representation_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file allows to create RepresentationStreams.
 *
 * A RepresentationStream downloads and push segment for a single
 * Representation (e.g. a single video stream of a given quality).
 * It chooses which segments should be downloaded according to the current
 * position and what is currently buffered.
 */















/**
 * Build up buffer for a single Representation.
 *
 * Download and push segments linked to the given Representation according
 * to what is already in the SegmentBuffer and where the playback currently is.
 *
 * Multiple RepresentationStream observables can run on the same SegmentBuffer.
 * This allows for example smooth transitions between multiple periods.
 *
 * @param {Object} args
 * @returns {Observable}
 */
function RepresentationStream({ content, options, playbackObserver, segmentBuffer, segmentFetcher, terminate$, }) {
    const { period, adaptation, representation } = content;
    const { bufferGoal$, maxBufferSize$, drmSystemId, fastSwitchThreshold$ } = options;
    const bufferType = adaptation.type;
    /** Saved initialization segment state for this representation. */
    const initSegmentState = {
        segment: representation.index.getInitSegment(),
        segmentData: null,
        isLoaded: false,
    };
    /** Allows to manually re-check which segments are needed. */
    const reCheckNeededSegments$ = new Subject();
    /** Emit the last scheduled downloading queue for segments. */
    const lastSegmentQueue = createSharedReference({
        initSegment: null,
        segmentQueue: [],
    });
    const hasInitSegment = initSegmentState.segment !== null;
    /** Will load every segments in `lastSegmentQueue` */
    const downloadingQueue = new DownloadingQueue(content, lastSegmentQueue, segmentFetcher, hasInitSegment);
    if (!hasInitSegment) {
        initSegmentState.segmentData = null;
        initSegmentState.isLoaded = true;
    }
    /**
     * `true` if the event notifying about encryption data has already been
     * constructed.
     * Allows to avoid sending multiple times protection events.
     */
    let hasSentEncryptionData = false;
    let encryptionEvent$ = EMPTY;
    // If the DRM system id is already known, and if we already have encryption data
    // for it, we may not need to wait until the initialization segment is loaded to
    // signal required protection data, thus performing License negotiations sooner
    if (drmSystemId !== undefined) {
        const encryptionData = representation.getEncryptionData(drmSystemId);
        // If some key ids are not known yet, it may be safer to wait for this initialization
        // segment to be loaded first
        if (encryptionData.length > 0 && encryptionData.every(e => e.keyIds !== undefined)) {
            encryptionEvent$ = of(...encryptionData.map(d => stream_events_generators.encryptionDataEncountered(d, content)));
            hasSentEncryptionData = true;
        }
    }
    /** Observable loading and pushing segments scheduled through `lastSegmentQueue`. */
    const queue$ = downloadingQueue.start()
        .pipe(mergeMap(onQueueEvent));
    /** Observable emitting the stream "status" and filling `lastSegmentQueue`. */
    const status$ = combineLatest([
        playbackObserver.getReference().asObservable(),
        bufferGoal$,
        maxBufferSize$,
        terminate$.pipe(take(1), startWith(null)),
        reCheckNeededSegments$.pipe(startWith(undefined)),
    ]).pipe(withLatestFrom(fastSwitchThreshold$), mergeMap(function ([[observation, bufferGoal, maxBufferSize, terminate], fastSwitchThreshold]) {
        var _a, _b;
        const initialWantedTime = (_a = observation.position.pending) !== null && _a !== void 0 ? _a : observation.position.last;
        const status = getBufferStatus(content, initialWantedTime, playbackObserver, fastSwitchThreshold, bufferGoal, maxBufferSize, segmentBuffer);
        const { neededSegments } = status;
        let neededInitSegment = null;
        // Add initialization segment if required
        if (!representation.index.isInitialized()) {
            if (initSegmentState.segment === null) {
                src_log.warn("Stream: Uninitialized index without an initialization segment");
            }
            else if (initSegmentState.isLoaded) {
                src_log.warn("Stream: Uninitialized index with an already loaded " +
                    "initialization segment");
            }
            else {
                const wantedStart = (_b = observation.position.pending) !== null && _b !== void 0 ? _b : observation.position.last;
                neededInitSegment = { segment: initSegmentState.segment,
                    priority: getSegmentPriority(period.start, wantedStart) };
            }
        }
        else if (neededSegments.length > 0 &&
            !initSegmentState.isLoaded &&
            initSegmentState.segment !== null) {
            const initSegmentPriority = neededSegments[0].priority;
            neededInitSegment = { segment: initSegmentState.segment,
                priority: initSegmentPriority };
        }
        if (terminate === null) {
            lastSegmentQueue.setValue({ initSegment: neededInitSegment,
                segmentQueue: neededSegments });
        }
        else if (terminate.urgent) {
            src_log.debug("Stream: Urgent switch, terminate now.", bufferType);
            lastSegmentQueue.setValue({ initSegment: null, segmentQueue: [] });
            lastSegmentQueue.finish();
            return of(stream_events_generators.streamTerminating());
        }
        else {
            // Non-urgent termination wanted:
            // End the download of the current media segment if pending and
            // terminate once either that request is finished or another segment
            // is wanted instead, whichever comes first.
            const mostNeededSegment = neededSegments[0];
            const initSegmentRequest = downloadingQueue.getRequestedInitSegment();
            const currentSegmentRequest = downloadingQueue.getRequestedMediaSegment();
            const nextQueue = currentSegmentRequest === null ||
                mostNeededSegment === undefined ||
                currentSegmentRequest.id !== mostNeededSegment.segment.id ?
                [] :
                [mostNeededSegment];
            const nextInit = initSegmentRequest === null ? null :
                neededInitSegment;
            lastSegmentQueue.setValue({ initSegment: nextInit,
                segmentQueue: nextQueue });
            if (nextQueue.length === 0 && nextInit === null) {
                src_log.debug("Stream: No request left, terminate", bufferType);
                lastSegmentQueue.finish();
                return of(stream_events_generators.streamTerminating());
            }
        }
        const bufferStatusEvt = of({ type: "stream-status",
            value: { period,
                position: observation.position.last,
                bufferType,
                imminentDiscontinuity: status.imminentDiscontinuity,
                hasFinishedLoading: status.hasFinishedLoading,
                neededSegments: status.neededSegments } });
        let bufferRemoval = EMPTY;
        const { UPTO_CURRENT_POSITION_CLEANUP } = src_config.getCurrent();
        if (status.isBufferFull) {
            const gcedPosition = Math.max(0, initialWantedTime - UPTO_CURRENT_POSITION_CLEANUP);
            if (gcedPosition > 0) {
                const removalCanceller = new TaskCanceller();
                bufferRemoval = fromCancellablePromise(removalCanceller, () => segmentBuffer.removeBuffer(0, gcedPosition, removalCanceller.signal)
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                ).pipe(ignoreElements());
            }
        }
        return status.shouldRefreshManifest ?
            concat_concat(of(stream_events_generators.needsManifestRefresh()), bufferStatusEvt, bufferRemoval) :
            concat_concat(bufferStatusEvt, bufferRemoval);
    }), takeWhile((e) => e.type !== "stream-terminating", true));
    return merge(status$, queue$, encryptionEvent$).pipe(share());
    /**
     * React to event from the `DownloadingQueue`.
     * @param {Object} evt
     * @returns {Observable}
     */
    function onQueueEvent(evt) {
        switch (evt.type) {
            case "retry":
                return concat_concat(of({ type: "warning", value: evt.value.error }), defer(() => {
                    const retriedSegment = evt.value.segment;
                    const { index } = representation;
                    if (index.isSegmentStillAvailable(retriedSegment) === false) {
                        reCheckNeededSegments$.next();
                    }
                    else if (index.canBeOutOfSyncError(evt.value.error, retriedSegment)) {
                        return of(stream_events_generators.manifestMightBeOufOfSync());
                    }
                    return EMPTY; // else, ignore.
                }));
            case "parsed-init":
            case "parsed-media":
                return onParsedChunk(evt);
            case "end-of-segment": {
                const { segment } = evt.value;
                const endOfSegmentCanceller = new TaskCanceller();
                return fromCancellablePromise(endOfSegmentCanceller, () => segmentBuffer.endOfSegment(object_assign({ segment }, content), endOfSegmentCanceller.signal))
                    // NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
                    // first type parameter as `any` instead of the perfectly fine `unknown`,
                    // leading to linter issues, as it forbids the usage of `any`.
                    // This is why we're disabling the eslint rule.
                    /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
                    .pipe(ignoreElements());
            }
            case "end-of-queue":
                reCheckNeededSegments$.next();
                return EMPTY;
            default:
                assertUnreachable(evt);
        }
    }
    /**
     * Process a chunk that has just been parsed by pushing it to the
     * SegmentBuffer and emitting the right events.
     * @param {Object} evt
     * @returns {Observable}
     */
    function onParsedChunk(evt) {
        if (evt.segmentType === "init") {
            next_tick_default()(() => {
                reCheckNeededSegments$.next();
            });
            initSegmentState.segmentData = evt.initializationData;
            initSegmentState.isLoaded = true;
            // Now that the initialization segment has been parsed - which may have
            // included encryption information - take care of the encryption event
            // if not already done.
            const allEncryptionData = representation.getAllEncryptionData();
            const initEncEvt$ = !hasSentEncryptionData &&
                allEncryptionData.length > 0 ?
                of(...allEncryptionData.map(p => stream_events_generators.encryptionDataEncountered(p, content))) :
                EMPTY;
            const pushEvent$ = pushInitSegment({ playbackObserver,
                content,
                segment: evt.segment,
                segmentData: evt.initializationData,
                segmentBuffer });
            return merge(initEncEvt$, pushEvent$);
        }
        else {
            const { inbandEvents, needsManifestRefresh, protectionDataUpdate } = evt;
            // TODO better handle use cases like key rotation by not always grouping
            // every protection data together? To check.
            const segmentEncryptionEvent$ = protectionDataUpdate &&
                !hasSentEncryptionData ?
                of(...representation.getAllEncryptionData().map(p => stream_events_generators.encryptionDataEncountered(p, content))) :
                EMPTY;
            const manifestRefresh$ = needsManifestRefresh === true ?
                of(stream_events_generators.needsManifestRefresh()) :
                EMPTY;
            const inbandEvents$ = inbandEvents !== undefined &&
                inbandEvents.length > 0 ?
                of({ type: "inband-events",
                    value: inbandEvents }) :
                EMPTY;
            const initSegmentData = initSegmentState.segmentData;
            const pushMediaSegment$ = pushMediaSegment({ playbackObserver,
                content,
                initSegmentData,
                parsedSegment: evt,
                segment: evt.segment,
                segmentBuffer });
            return concat_concat(segmentEncryptionEvent$, manifestRefresh$, inbandEvents$, pushMediaSegment$);
        }
    }
}

;// CONCATENATED MODULE: ./src/core/stream/representation/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const stream_representation = (RepresentationStream);

;// CONCATENATED MODULE: ./src/core/stream/adaptation/create_representation_estimator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Produce estimates to know which Representation should be played.
 * @param {Object} content - The Manifest, Period and Adaptation wanted.
 * @param {Object} representationEstimator - `IRepresentationEstimator` which
 * will produce Representation estimates.
 * @param {Object} currentRepresentation - Reference emitting the
 * currently-loaded Representation.
 * @param {Object} playbackObserver - Allows to observe the current playback
 * conditions.
 * @param {Function} onFatalError - Callback called when a fatal error was
 * thrown. Once this callback is called, no estimate will be produced.
 * @param {Object} cancellationSignal - `CancellationSignal` allowing to abort
 * the production of estimates (and clean-up all linked resources).
 * @returns {Object} - Returns an object with the following properties:
 *   - `estimateRef`: Reference emitting the last estimate
 *   - `abrCallbacks`: Callbacks allowing to report back network and playback
 *     activities to improve the estimates given.
 */
function getRepresentationEstimate(content, representationEstimator, currentRepresentation, playbackObserver, onFatalError, cancellationSignal) {
    const { manifest, adaptation } = content;
    const representations = createSharedReference([]);
    updateRepresentationsReference();
    manifest.addEventListener("decipherabilityUpdate", updateRepresentationsReference);
    const unregisterCleanUp = cancellationSignal.register(cleanUp);
    const { estimates: estimateRef, callbacks: abrCallbacks } = representationEstimator(content, currentRepresentation, representations, playbackObserver, cancellationSignal);
    return { abrCallbacks, estimateRef };
    function updateRepresentationsReference() {
        /** Representations for which a `RepresentationStream` can be created. */
        const newRepr = adaptation.getPlayableRepresentations();
        if (newRepr.length === 0) {
            const noRepErr = new MediaError("NO_PLAYABLE_REPRESENTATION", "No Representation in the chosen " +
                adaptation.type + " Adaptation can be played");
            cleanUp();
            onFatalError(noRepErr);
            return;
        }
        const prevRepr = representations.getValue();
        if (prevRepr.length === newRepr.length) {
            if (prevRepr.every((r, idx) => r.id === newRepr[idx].id)) {
                return;
            }
        }
        representations.setValue(newRepr);
    }
    /** Clean-up all resources taken here. */
    function cleanUp() {
        manifest.removeEventListener("decipherabilityUpdate", updateRepresentationsReference);
        representations.finish();
        // check to protect against the case where it is not yet defined.
        if (typeof unregisterCleanUp !== "undefined") {
            unregisterCleanUp();
        }
    }
}

;// CONCATENATED MODULE: ./src/core/stream/adaptation/adaptation_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file allows to create `AdaptationStream`s.
 *
 * An `AdaptationStream` downloads and push segment for a single Adaptation
 * (e.g.  a single audio, video or text track).
 * It chooses which Representation to download mainly thanks to the
 * IRepresentationEstimator, and orchestrates a RepresentationStream,
 * which will download and push segments corresponding to a chosen
 * Representation.
 */











/**
 * Create new AdaptationStream Observable, which task will be to download the
 * media data for a given Adaptation (i.e. "track").
 *
 * It will rely on the IRepresentationEstimator to choose at any time the
 * best Representation for this Adaptation and then run the logic to download
 * and push the corresponding segments in the SegmentBuffer.
 *
 * After being subscribed to, it will start running and will emit various events
 * to report its current status.
 *
 * @param {Object} args
 * @returns {Observable}
 */
function AdaptationStream({ playbackObserver, content, options, representationEstimator, segmentBuffer, segmentFetcherCreator, wantedBufferAhead, maxVideoBufferSize, }) {
    const directManualBitrateSwitching = options.manualBitrateSwitchingMode === "direct";
    const { manifest, period, adaptation } = content;
    /**
     * The buffer goal ratio base itself on the value given by `wantedBufferAhead`
     * to determine a more dynamic buffer goal for a given Representation.
     *
     * It can help in cases such as : the current browser has issues with
     * buffering and tells us that we should try to bufferize less data :
     * https://developers.google.com/web/updates/2017/10/quotaexceedederror
     */
    const bufferGoalRatioMap = {};
    const currentRepresentation = createSharedReference(null);
    /** Errors when the adaptive logic fails with an error. */
    const abrErrorSubject = new Subject();
    const adaptiveCanceller = new TaskCanceller();
    const { estimateRef, abrCallbacks } = getRepresentationEstimate(content, representationEstimator, currentRepresentation, playbackObserver, (err) => { abrErrorSubject.error(err); }, adaptiveCanceller.signal);
    /** Allows the `RepresentationStream` to easily fetch media segments. */
    const segmentFetcher = segmentFetcherCreator
        .createSegmentFetcher(adaptation.type, 
    /* eslint-disable @typescript-eslint/unbound-method */
    { onRequestBegin: abrCallbacks.requestBegin,
        onRequestEnd: abrCallbacks.requestEnd,
        onProgress: abrCallbacks.requestProgress,
        onMetrics: abrCallbacks.metrics });
    /* eslint-enable @typescript-eslint/unbound-method */
    /**
     * Stores the last estimate emitted through the `abrEstimate$` Observable,
     * starting with `null`.
     * This allows to easily rely on that value in inner Observables which might also
     * need the last already-considered value.
     */
    const lastEstimate = createSharedReference(null);
    /** Emits abr estimates on Subscription. */
    const abrEstimate$ = estimateRef.asObservable().pipe(tap((estimate) => { lastEstimate.setValue(estimate); }), deferSubscriptions(), share());
    /** Emit at each bitrate estimate done by the IRepresentationEstimator. */
    const bitrateEstimate$ = abrEstimate$.pipe(filter(({ bitrate }) => bitrate != null), distinctUntilChanged((old, current) => old.bitrate === current.bitrate), map(({ bitrate }) => {
        src_log.debug(`Stream: new ${adaptation.type} bitrate estimate`, bitrate);
        return stream_events_generators.bitrateEstimationChange(adaptation.type, bitrate);
    }));
    /** Recursively create `RepresentationStream`s according to the last estimate. */
    const representationStreams$ = abrEstimate$
        .pipe(exhaustMap((estimate, i) => {
        return recursivelyCreateRepresentationStreams(estimate, i === 0);
    }));
    return merge(abrErrorSubject, representationStreams$, bitrateEstimate$, 
    // Cancel adaptive logic on unsubscription
    new Observable_Observable(() => () => adaptiveCanceller.cancel()));
    /**
     * Create `RepresentationStream`s starting with the Representation indicated in
     * `fromEstimate` argument.
     * Each time a new estimate is made, this function will create a new
     * `RepresentationStream` corresponding to that new estimate.
     * @param {Object} fromEstimate - The first estimate we should start with
     * @param {boolean} isFirstEstimate - Whether this is the first time we're
     * creating a RepresentationStream in the corresponding `AdaptationStream`.
     * This is important because manual quality switches might need a full reload
     * of the MediaSource _except_ if we are talking about the first quality chosen.
     * @returns {Observable}
     */
    function recursivelyCreateRepresentationStreams(fromEstimate, isFirstEstimate) {
        const { representation } = fromEstimate;
        // A manual bitrate switch might need an immediate feedback.
        // To do that properly, we need to reload the MediaSource
        if (directManualBitrateSwitching &&
            fromEstimate.manual &&
            !isFirstEstimate) {
            const { DELTA_POSITION_AFTER_RELOAD } = src_config.getCurrent();
            return reloadAfterSwitch(period, adaptation.type, playbackObserver, DELTA_POSITION_AFTER_RELOAD.bitrateSwitch);
        }
        /**
         * Emit when the current RepresentationStream should be terminated to make
         * place for a new one (e.g. when switching quality).
         */
        const terminateCurrentStream$ = lastEstimate.asObservable().pipe(filter((newEstimate) => newEstimate === null ||
            newEstimate.representation.id !== representation.id ||
            (newEstimate.manual && !fromEstimate.manual)), take(1), map((newEstimate) => {
            if (newEstimate === null) {
                src_log.info("Stream: urgent Representation termination", adaptation.type);
                return ({ urgent: true });
            }
            if (newEstimate.urgent) {
                src_log.info("Stream: urgent Representation switch", adaptation.type);
                return ({ urgent: true });
            }
            else {
                src_log.info("Stream: slow Representation switch", adaptation.type);
                return ({ urgent: false });
            }
        }));
        /**
         * "Fast-switching" is a behavior allowing to replace low-quality segments
         * (i.e. with a low bitrate) with higher-quality segments (higher bitrate) in
         * the buffer.
         * This threshold defines a bitrate from which "fast-switching" is disabled.
         * For example with a fastSwitchThreshold set to `100`, segments with a
         * bitrate of `90` can be replaced. But segments with a bitrate of `100`
         * onward won't be replaced by higher quality segments.
         * Set to `undefined` to indicate that there's no threshold (anything can be
         * replaced by higher-quality segments).
         */
        const fastSwitchThreshold$ = !options.enableFastSwitching ?
            of(0) : // Do not fast-switch anything
            lastEstimate.asObservable().pipe(map((estimate) => estimate === null ? undefined :
                estimate.knownStableBitrate), distinctUntilChanged());
        const representationChange$ = of(stream_events_generators.representationChange(adaptation.type, period, representation));
        return concat_concat(representationChange$, createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$)).pipe(tap((evt) => {
            if (evt.type === "added-segment") {
                abrCallbacks.addedSegment(evt.value);
            }
            if (evt.type === "representationChange") {
                currentRepresentation.setValue(evt.value.representation);
            }
        }), mergeMap((evt) => {
            if (evt.type === "stream-terminating") {
                const estimate = lastEstimate.getValue();
                if (estimate === null) {
                    return EMPTY;
                }
                return recursivelyCreateRepresentationStreams(estimate, false);
            }
            return of(evt);
        }));
    }
    /**
     * Create and returns a new RepresentationStream Observable, linked to the
     * given Representation.
     * @param {Representation} representation
     * @returns {Observable}
     */
    function createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$) {
        return defer(() => {
            const oldBufferGoalRatio = bufferGoalRatioMap[representation.id];
            const bufferGoalRatio = oldBufferGoalRatio != null ? oldBufferGoalRatio :
                1;
            bufferGoalRatioMap[representation.id] = bufferGoalRatio;
            const bufferGoal$ = wantedBufferAhead.asObservable().pipe(map((wba) => wba * bufferGoalRatio));
            // eslint-disable-next-line max-len
            const maxBufferSize$ = adaptation.type === "video" ? maxVideoBufferSize.asObservable() :
                of(Infinity);
            src_log.info("Stream: changing representation", adaptation.type, representation.id, representation.bitrate);
            return stream_representation({ playbackObserver,
                content: { representation,
                    adaptation,
                    period,
                    manifest },
                segmentBuffer,
                segmentFetcher,
                terminate$: terminateCurrentStream$,
                options: { bufferGoal$,
                    maxBufferSize$,
                    drmSystemId: options.drmSystemId,
                    fastSwitchThreshold$ } })
                .pipe(catchError((err) => {
                const formattedError = formatError(err, {
                    defaultCode: "NONE",
                    defaultReason: "Unknown `RepresentationStream` error",
                });
                if (formattedError.code === "BUFFER_FULL_ERROR") {
                    const wba = wantedBufferAhead.getValue();
                    const lastBufferGoalRatio = bufferGoalRatio;
                    if (lastBufferGoalRatio <= 0.25 || wba * lastBufferGoalRatio <= 2) {
                        throw formattedError;
                    }
                    bufferGoalRatioMap[representation.id] = lastBufferGoalRatio - 0.25;
                    return createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$);
                }
                throw formattedError;
            }));
        });
    }
}

;// CONCATENATED MODULE: ./src/core/stream/adaptation/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const stream_adaptation = (AdaptationStream);

;// CONCATENATED MODULE: ./src/core/stream/period/create_empty_adaptation_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Create empty AdaptationStream Observable, linked to a Period.
 *
 * This observable will never download any segment and just emit a "full"
 * event when reaching the end.
 * @param {Observable} playbackObserver
 * @param {Object} wantedBufferAhead
 * @param {string} bufferType
 * @param {Object} content
 * @returns {Observable}
 */
function createEmptyAdaptationStream(playbackObserver, wantedBufferAhead, bufferType, content) {
    const { period } = content;
    let hasFinishedLoading = false;
    const wantedBufferAhead$ = wantedBufferAhead.asObservable();
    const observation$ = playbackObserver.getReference().asObservable();
    return combineLatest([observation$,
        wantedBufferAhead$]).pipe(mergeMap(([observation, wba]) => {
        const position = observation.position.last;
        if (period.end !== undefined && position + wba >= period.end) {
            src_log.debug("Stream: full \"empty\" AdaptationStream", bufferType);
            hasFinishedLoading = true;
        }
        return of({ type: "stream-status",
            value: { period,
                bufferType,
                position,
                imminentDiscontinuity: null,
                hasFinishedLoading,
                neededSegments: [],
                shouldRefreshManifest: false } });
    }));
}

;// CONCATENATED MODULE: ./src/utils/are_codecs_compatible.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This function is a shortcut that helps differentiate two codecs
 * of the form "audio/mp4;codecs=\"av1.40.2\"".
 *
 * @param codecA
 * @param codecB
 * @returns A boolean that tell whether or not those two codecs provided are even.
 */
function areCodecsCompatible(a, b) {
    const [mimeTypeA, ...propsA] = a.split(";");
    const [mimeTypeB, ...propsB] = b.split(";");
    if (mimeTypeA !== mimeTypeB) {
        return false;
    }
    const codecsA = arrayFind(propsA, (prop) => startsWith(prop, "codecs="));
    const codecsB = arrayFind(propsB, (prop) => startsWith(prop, "codecs="));
    if (codecsA === undefined || codecsB === undefined) {
        return false;
    }
    const codecA = codecsA.substring(7);
    const codecB = codecsB.substring(7);
    if (codecA.split(".")[0] !== codecB.split(".")[0]) {
        return false;
    }
    return true;
}
/* harmony default export */ const are_codecs_compatible = (areCodecsCompatible);

;// CONCATENATED MODULE: ./src/core/stream/period/get_adaptation_switch_strategy.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Find out what to do when switching Adaptation, based on the current
 * situation.
 * @param {Object} segmentBuffer
 * @param {Object} period
 * @param {Object} adaptation
 * @param {Object} playbackInfo
 * @returns {Object}
 */
function getAdaptationSwitchStrategy(segmentBuffer, period, adaptation, playbackInfo, options) {
    if (segmentBuffer.codec !== undefined &&
        options.onCodecSwitch === "reload" &&
        !hasCompatibleCodec(adaptation, segmentBuffer.codec)) {
        return { type: "needs-reload", value: undefined };
    }
    const buffered = segmentBuffer.getBufferedRanges();
    if (buffered.length === 0) {
        return { type: "continue", value: undefined };
    }
    const bufferedRanges = convertToRanges(buffered);
    const start = period.start;
    const end = period.end == null ? Infinity :
        period.end;
    const intersection = keepRangeIntersection(bufferedRanges, [{ start, end }]);
    if (intersection.length === 0) {
        return { type: "continue", value: undefined };
    }
    segmentBuffer.synchronizeInventory();
    const inventory = segmentBuffer.getInventory();
    // Continue if we have no other Adaptation buffered in the current Period
    if (!inventory.some(buf => buf.infos.period.id === period.id &&
        buf.infos.adaptation.id !== adaptation.id)) {
        return { type: "continue", value: undefined };
    }
    /** Data already in the right Adaptation */
    const adaptationInBuffer = getBufferedRangesFromAdaptation(inventory, period, adaptation);
    /**
     * Data different from the wanted Adaptation in the Period's range.
     * /!\ Could contain some data at the end of the previous Period or at the
     * beginning of the next one.
     */
    const unwantedRange = excludeFromRanges(intersection, adaptationInBuffer);
    if (unwantedRange.length === 0) {
        return { type: "continue", value: undefined };
    }
    const { currentTime } = playbackInfo;
    const { audioTrackSwitchingMode } = options;
    const hasReloadSwitchingMode = adaptation.type === "video" ||
        (adaptation.type === "audio" && audioTrackSwitchingMode === "reload");
    if (hasReloadSwitchingMode &&
        // We're playing the current Period
        isTimeInRange({ start, end }, currentTime) &&
        // There is data for the current position or the codecs are differents
        (playbackInfo.readyState > 1 || !adaptation.getPlayableRepresentations()
            .some(rep => { var _a; return are_codecs_compatible(rep.getMimeTypeString(), (_a = segmentBuffer.codec) !== null && _a !== void 0 ? _a : ""); })) &&
        // We're not playing the current wanted video Adaptation
        !isTimeInRanges(adaptationInBuffer, currentTime)) {
        return { type: "needs-reload", value: undefined };
    }
    // From here, clean-up data from the previous Adaptation, if one
    const shouldFlush = adaptation.type === "audio" &&
        audioTrackSwitchingMode === "direct";
    const rangesToExclude = [];
    // First, we don't want to accidentally remove some segments from the previous
    // Period (which overlap a little with this one)
    /** Last segment before one for the current period. */
    const lastSegmentBefore = getLastSegmentBeforePeriod(inventory, period);
    if (lastSegmentBefore !== null &&
        (lastSegmentBefore.bufferedEnd === undefined ||
            period.start - lastSegmentBefore.bufferedEnd < 1)) // Close to Period's start
     {
        // Exclude data close to the period's start to avoid cleaning
        // to much
        rangesToExclude.push({ start: 0,
            end: period.start + 1 });
    }
    // Next, exclude data around current position to avoid decoding issues
    const bufferType = adaptation.type;
    const { ADAPTATION_SWITCH_BUFFER_PADDINGS } = src_config.getCurrent();
    /** Ranges that won't be cleaned from the current buffer. */
    let paddingBefore = ADAPTATION_SWITCH_BUFFER_PADDINGS[bufferType].before;
    if (paddingBefore == null) {
        paddingBefore = 0;
    }
    let paddingAfter = ADAPTATION_SWITCH_BUFFER_PADDINGS[bufferType].after;
    if (paddingAfter == null) {
        paddingAfter = 0;
    }
    if (!shouldFlush) {
        rangesToExclude.push({ start: currentTime - paddingBefore,
            end: currentTime + paddingAfter });
    }
    // Now remove possible small range from the end if there is a segment from the
    // next Period
    if (period.end !== undefined) {
        /** first segment after for the current period. */
        const firstSegmentAfter = getFirstSegmentAfterPeriod(inventory, period);
        if (firstSegmentAfter !== null &&
            (firstSegmentAfter.bufferedStart === undefined ||
                (firstSegmentAfter.bufferedStart - period.end) < 1)) // Close to Period's end
         {
            rangesToExclude.push({ start: period.end - 1,
                end: Number.MAX_VALUE });
        }
    }
    const toRemove = excludeFromRanges(unwantedRange, rangesToExclude);
    if (toRemove.length === 0) {
        return { type: "continue", value: undefined };
    }
    return shouldFlush ? { type: "flush-buffer", value: toRemove } :
        { type: "clean-buffer", value: toRemove };
}
/**
 * Returns `true` if at least one codec of the Representations in the given
 * Adaptation has a codec compatible with the given SegmentBuffer's codec.
 * @param {Object} adaptation
 * @param {string} segmentBufferCodec
 * @returns {boolean}
 */
function hasCompatibleCodec(adaptation, segmentBufferCodec) {
    return adaptation.getPlayableRepresentations().some(rep => are_codecs_compatible(rep.getMimeTypeString(), segmentBufferCodec));
}
/**
 * Returns buffered ranges of what we know correspond to the given `adaptation`
 * in the SegmentBuffer.
 * @param {Object} segmentBuffer
 * @param {Object} period
 * @param {Object} adaptation
 * @returns {Array.<Object>}
 */
function getBufferedRangesFromAdaptation(inventory, period, adaptation) {
    return inventory.reduce((acc, chunk) => {
        if (chunk.infos.period.id !== period.id ||
            chunk.infos.adaptation.id !== adaptation.id) {
            return acc;
        }
        const { bufferedStart, bufferedEnd } = chunk;
        if (bufferedStart === undefined || bufferedEnd === undefined) {
            return acc;
        }
        acc.push({ start: bufferedStart, end: bufferedEnd });
        return acc;
    }, []);
}
/**
 * Returns the last segment in the `inventory` which is linked to a Period
 * before `period`.
 * @param {Array.<Object>} inventory
 * @param {Object} period
 * @returns {Object|null}
 */
function getLastSegmentBeforePeriod(inventory, period) {
    for (let i = 0; i < inventory.length; i++) {
        if (inventory[i].infos.period.start >= period.start) {
            if (i > 0) {
                return inventory[i - 1];
            }
            return null;
        }
    }
    return inventory.length > 0 ? inventory[inventory.length - 1] :
        null;
}
/**
 * Returns the first segment in the `inventory` which is linked to a Period
 * after `period`.
 * @param {Array.<Object>} inventory
 * @param {Object} period
 * @returns {Object|null}
 */
function getFirstSegmentAfterPeriod(inventory, period) {
    for (let i = 0; i < inventory.length; i++) {
        if (inventory[i].infos.period.start > period.start) {
            return inventory[i];
        }
    }
    return null;
}

;// CONCATENATED MODULE: ./src/core/stream/period/period_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */















/**
 * Create single PeriodStream Observable:
 *   - Lazily create (or reuse) a SegmentBuffer for the given type.
 *   - Create a Stream linked to an Adaptation each time it changes, to
 *     download and append the corresponding segments to the SegmentBuffer.
 *   - Announce when the Stream is full or is awaiting new Segments through
 *     events
 * @param {Object} args
 * @returns {Observable}
 */
function PeriodStream({ bufferType, content, garbageCollectors, playbackObserver, representationEstimator, segmentFetcherCreator, segmentBuffersStore, options, wantedBufferAhead, maxVideoBufferSize, }) {
    const { period } = content;
    // Emits the chosen Adaptation for the current type.
    // `null` when no Adaptation is chosen (e.g. no subtitles)
    const adaptation$ = new ReplaySubject(1);
    return adaptation$.pipe(switchMap((adaptation, switchNb) => {
        /**
         * If this is not the first Adaptation choice, we might want to apply a
         * delta to the current position so we can re-play back some media in the
         * new Adaptation to give some context back.
         * This value contains this relative position, in seconds.
         * @see reloadAfterSwitch
         */
        const { DELTA_POSITION_AFTER_RELOAD } = src_config.getCurrent();
        const relativePosAfterSwitch = switchNb === 0 ? 0 :
            bufferType === "audio" ? DELTA_POSITION_AFTER_RELOAD.trackSwitch.audio :
                bufferType === "video" ? DELTA_POSITION_AFTER_RELOAD.trackSwitch.video :
                    DELTA_POSITION_AFTER_RELOAD.trackSwitch.other;
        if (adaptation === null) { // Current type is disabled for that Period
            src_log.info(`Stream: Set no ${bufferType} Adaptation. P:`, period.start);
            const segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
            let cleanBuffer$;
            if (segmentBufferStatus.type === "initialized") {
                src_log.info(`Stream: Clearing previous ${bufferType} SegmentBuffer`);
                if (segment_buffers.isNative(bufferType)) {
                    return reloadAfterSwitch(period, bufferType, playbackObserver, 0);
                }
                const canceller = new TaskCanceller();
                cleanBuffer$ = fromCancellablePromise(canceller, () => {
                    if (period.end === undefined) {
                        return segmentBufferStatus.value.removeBuffer(period.start, Infinity, canceller.signal);
                    }
                    else if (period.end <= period.start) {
                        return Promise.resolve();
                    }
                    else {
                        return segmentBufferStatus.value.removeBuffer(period.start, period.end, canceller.signal);
                    }
                });
            }
            else {
                if (segmentBufferStatus.type === "uninitialized") {
                    segmentBuffersStore.disableSegmentBuffer(bufferType);
                }
                cleanBuffer$ = of(null);
            }
            return concat_concat(cleanBuffer$.pipe(map(() => stream_events_generators.adaptationChange(bufferType, null, period))), createEmptyAdaptationStream(playbackObserver, wantedBufferAhead, bufferType, { period }));
        }
        if (segment_buffers.isNative(bufferType) &&
            segmentBuffersStore.getStatus(bufferType).type === "disabled") {
            return reloadAfterSwitch(period, bufferType, playbackObserver, relativePosAfterSwitch);
        }
        src_log.info(`Stream: Updating ${bufferType} adaptation`, `A: ${adaptation.id}`, `P: ${period.start}`);
        const newStream$ = defer(() => {
            const readyState = playbackObserver.getReadyState();
            const segmentBuffer = createOrReuseSegmentBuffer(segmentBuffersStore, bufferType, adaptation, options);
            const playbackInfos = { currentTime: playbackObserver.getCurrentTime(),
                readyState };
            const strategy = getAdaptationSwitchStrategy(segmentBuffer, period, adaptation, playbackInfos, options);
            if (strategy.type === "needs-reload") {
                return reloadAfterSwitch(period, bufferType, playbackObserver, relativePosAfterSwitch);
            }
            const needsBufferFlush$ = strategy.type === "flush-buffer"
                ? of(stream_events_generators.needsBufferFlush())
                : EMPTY;
            const cleanBuffer$ = strategy.type === "clean-buffer" || strategy.type === "flush-buffer" ?
                concat_concat(...strategy.value.map(({ start, end }) => {
                    const canceller = new TaskCanceller();
                    return fromCancellablePromise(canceller, () => segmentBuffer.removeBuffer(start, end, canceller.signal));
                })
                // NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
                // first type parameter as `any` instead of the perfectly fine `unknown`,
                // leading to linter issues, as it forbids the usage of `any`.
                // This is why we're disabling the eslint rule.
                /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
                ).pipe(ignoreElements()) : EMPTY;
            const bufferGarbageCollector$ = garbageCollectors.get(segmentBuffer);
            const adaptationStream$ = createAdaptationStream(adaptation, segmentBuffer);
            const cancelWait = new TaskCanceller();
            return fromCancellablePromise(cancelWait, () => segmentBuffersStore.waitForUsableBuffers(cancelWait.signal)).pipe(mergeMap(() => concat_concat(cleanBuffer$, needsBufferFlush$, merge(adaptationStream$, bufferGarbageCollector$))));
        });
        return concat_concat(of(stream_events_generators.adaptationChange(bufferType, adaptation, period)), newStream$);
    }), startWith(stream_events_generators.periodStreamReady(bufferType, period, adaptation$)));
    /**
     * @param {Object} adaptation
     * @param {Object} segmentBuffer
     * @returns {Observable}
     */
    function createAdaptationStream(adaptation, segmentBuffer) {
        const { manifest } = content;
        const adaptationPlaybackObserver = createAdaptationStreamPlaybackObserver(playbackObserver, segmentBuffer);
        return stream_adaptation({ content: { manifest, period, adaptation },
            options,
            playbackObserver: adaptationPlaybackObserver,
            representationEstimator,
            segmentBuffer,
            segmentFetcherCreator,
            wantedBufferAhead,
            maxVideoBufferSize }).pipe(catchError((error) => {
            // Stream linked to a non-native media buffer should not impact the
            // stability of the player. ie: if a text buffer sends an error, we want
            // to continue playing without any subtitles
            if (!segment_buffers.isNative(bufferType)) {
                src_log.error(`Stream: ${bufferType} Stream crashed. Aborting it.`, error instanceof Error ? error : "");
                segmentBuffersStore.disposeSegmentBuffer(bufferType);
                const formattedError = formatError(error, {
                    defaultCode: "NONE",
                    defaultReason: "Unknown `AdaptationStream` error",
                });
                return concat_concat(of(stream_events_generators.warning(formattedError)), createEmptyAdaptationStream(playbackObserver, wantedBufferAhead, bufferType, { period }));
            }
            src_log.error(`Stream: ${bufferType} Stream crashed. Stopping playback.`, error instanceof Error ? error : "");
            throw error;
        }));
    }
}
/**
 * @param {string} bufferType
 * @param {Object} adaptation
 * @returns {Object}
 */
function createOrReuseSegmentBuffer(segmentBuffersStore, bufferType, adaptation, options) {
    const segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
    if (segmentBufferStatus.type === "initialized") {
        src_log.info("Stream: Reusing a previous SegmentBuffer for the type", bufferType);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return segmentBufferStatus.value;
    }
    const codec = getFirstDeclaredMimeType(adaptation);
    const sbOptions = bufferType === "text" ? options.textTrackOptions : undefined;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return segmentBuffersStore.createSegmentBuffer(bufferType, codec, sbOptions);
}
/**
 * Get mime-type string of the first representation declared in the given
 * adaptation.
 * @param {Adaptation} adaptation
 * @returns {string}
 */
function getFirstDeclaredMimeType(adaptation) {
    const representations = adaptation.getPlayableRepresentations();
    if (representations.length === 0) {
        const noRepErr = new MediaError("NO_PLAYABLE_REPRESENTATION", "No Representation in the chosen " +
            adaptation.type + " Adaptation can be played");
        throw noRepErr;
    }
    return representations[0].getMimeTypeString();
}
/**
 * Create AdaptationStream's version of a playback observer.
 * @param {Object} initialPlaybackObserver
 * @param {Object} segmentBuffer
 * @returns {Object}
 */
function createAdaptationStreamPlaybackObserver(initialPlaybackObserver, segmentBuffer) {
    return initialPlaybackObserver.deriveReadOnlyObserver(function transform(observationRef, cancellationSignal) {
        const newRef = createSharedReference(constructAdaptationStreamPlaybackObservation());
        observationRef.onUpdate(emitAdaptationStreamPlaybackObservation, {
            clearSignal: cancellationSignal,
            emitCurrentValue: false,
        });
        cancellationSignal.register(() => {
            newRef.finish();
        });
        return newRef;
        function constructAdaptationStreamPlaybackObservation() {
            const baseObservation = observationRef.getValue();
            const buffered = segmentBuffer.getBufferedRanges();
            const bufferGap = getLeftSizeOfRange(buffered, baseObservation.position.last);
            return object_assign({}, baseObservation, { bufferGap });
        }
        function emitAdaptationStreamPlaybackObservation() {
            newRef.setValue(constructAdaptationStreamPlaybackObservation());
        }
    });
}

;// CONCATENATED MODULE: ./src/core/stream/period/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const period = (PeriodStream);

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function (source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function () {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scan.js


function scan(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}
;// CONCATENATED MODULE: ./src/core/stream/orchestrator/active_period_emitter.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Emit the active Period each times it changes.
 *
 * The active Period is the first Period (in chronological order) which has
 * a RepresentationStream associated for every defined BUFFER_TYPES.
 *
 * Emit null if no Period can be considered active currently.
 *
 * @example
 * For 4 BUFFER_TYPES: "AUDIO", "VIDEO", "TEXT" and "IMAGE":
 * ```
 *                     +-------------+
 *         Period 1    | Period 2    | Period 3
 * AUDIO   |=========| | |===      | |
 * VIDEO               | |=====    | |
 * TEXT    |(NO TEXT)| | |(NO TEXT)| | |====    |
 * IMAGE   |=========| | |=        | |
 *                     +-------------+
 *
 * The active Period here is Period 2 as Period 1 has no video
 * RepresentationStream.
 *
 * If we are missing a or multiple PeriodStreams in the first chronological
 * Period, like that is the case here, it generally means that we are
 * currently switching between Periods.
 *
 * For here we are surely switching from Period 1 to Period 2 beginning by the
 * video PeriodStream. As every PeriodStream is ready for Period 2, we can
 * already inform that it is the current Period.
 * ```
 *
 * @param {Array.<Observable>} buffers$
 * @returns {Observable}
 */
function ActivePeriodEmitter(buffers$) {
    const numberOfStreams = buffers$.length;
    return merge(...buffers$).pipe(
    // not needed to filter, this is an optim
    filter(({ type }) => type === "periodStreamCleared" ||
        type === "adaptationChange" ||
        type === "representationChange"), scan((acc, evt) => {
        switch (evt.type) {
            case "periodStreamCleared":
                {
                    const { period, type } = evt.value;
                    const currentInfos = acc[period.id];
                    if (currentInfos !== undefined && currentInfos.buffers.has(type)) {
                        currentInfos.buffers.delete(type);
                        if (currentInfos.buffers.size === 0) {
                            delete acc[period.id];
                        }
                    }
                }
                break;
            case "adaptationChange": {
                // For Adaptations that are not null, we will receive a
                // `representationChange` event. We can thus skip this event and only
                // listen to the latter.
                if (evt.value.adaptation !== null) {
                    return acc;
                }
            }
            // /!\ fallthrough done on purpose
            // Note that we fall-through only when the Adaptation sent through the
            // `adaptationChange` event is `null`. This is because in those cases,
            // we won't receive any "representationChange" event. We however still
            // need to register that Period as active for the current type.
            // eslint-disable-next-line no-fallthrough
            case "representationChange":
                {
                    const { period, type } = evt.value;
                    const currentInfos = acc[period.id];
                    if (currentInfos === undefined) {
                        const bufferSet = new Set();
                        bufferSet.add(type);
                        acc[period.id] = { period, buffers: bufferSet };
                    }
                    else if (!currentInfos.buffers.has(type)) {
                        currentInfos.buffers.add(type);
                    }
                }
                break;
        }
        return acc;
    }, {}), map((list) => {
        const activePeriodIDs = Object.keys(list);
        const completePeriods = [];
        for (let i = 0; i < activePeriodIDs.length; i++) {
            const periodInfos = list[activePeriodIDs[i]];
            if (periodInfos !== undefined && periodInfos.buffers.size === numberOfStreams) {
                completePeriods.push(periodInfos.period);
            }
        }
        return completePeriods.reduce((acc, period) => {
            if (acc === null) {
                return period;
            }
            return period.start < acc.start ? period :
                acc;
        }, null);
    }), distinctUntilChanged((a, b) => {
        return a === null && b === null ||
            a !== null && b !== null && a.id === b.id;
    }));
}

;// CONCATENATED MODULE: ./src/core/stream/orchestrator/are_streams_complete.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns an Observable which emits ``true`` when all PeriodStreams given are
 * _complete_.
 * Returns false otherwise.
 *
 * A PeriodStream for a given type is considered _complete_ when both of these
 * conditions are true:
 *   - it is the last PeriodStream in the content for the given type
 *   - it has finished downloading segments (it is _full_)
 *
 * Simply put a _complete_ PeriodStream for a given type means that every
 * segments needed for this Stream have been downloaded.
 *
 * When the Observable returned here emits, every Stream are finished.
 * @param {...Observable} streams
 * @returns {Observable}
 */
function areStreamsComplete(...streams) {
    /**
     * Array of Observables linked to the Array of Streams which emit:
     *   - true when the corresponding Stream is considered _complete_.
     *   - false when the corresponding Stream is considered _active_.
     * @type {Array.<Observable>}
     */
    const isCompleteArray = streams
        .map((stream) => {
        return stream.pipe(filter((evt) => {
            return evt.type === "complete-stream" ||
                (evt.type === "stream-status" && !evt.value.hasFinishedLoading);
        }), map((evt) => evt.type === "complete-stream"), startWith(false), distinctUntilChanged());
    });
    return combineLatest(isCompleteArray).pipe(map((areComplete) => areComplete.every((isComplete) => isComplete)), distinctUntilChanged());
}

;// CONCATENATED MODULE: ./src/core/stream/orchestrator/get_time_ranges_for_content.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the buffered ranges which hold the given content.
 * Returns the whole buffered ranges if some of it is unknown.
 * @param {Object} segmentBuffer
 * @param {Array.<Object>} contents
 * @returns {Array.<Object>}
 */
function getTimeRangesForContent(segmentBuffer, contents) {
    if (contents.length === 0) {
        return [];
    }
    segmentBuffer.synchronizeInventory();
    const accumulator = [];
    const inventory = segmentBuffer.getInventory();
    for (let i = 0; i < inventory.length; i++) {
        const chunk = inventory[i];
        const hasContent = contents.some(content => {
            return chunk.infos.period.id === content.period.id &&
                chunk.infos.adaptation.id === content.adaptation.id &&
                chunk.infos.representation.id === content.representation.id;
        });
        if (hasContent) {
            const { bufferedStart, bufferedEnd } = chunk;
            if (bufferedStart === undefined || bufferedEnd === undefined) {
                src_log.warn("SO: No buffered start or end found from a segment.");
                const buffered = segmentBuffer.getBufferedRanges();
                const len = buffered.length;
                if (len === 0) {
                    return [];
                }
                return [{ start: buffered.start(0), end: buffered.end(len - 1) }];
            }
            const previousLastElement = accumulator[accumulator.length - 1];
            if (previousLastElement !== undefined &&
                previousLastElement.end === bufferedStart) {
                previousLastElement.end = bufferedEnd;
            }
            else {
                accumulator.push({ start: bufferedStart, end: bufferedEnd });
            }
        }
    }
    return accumulator;
}

;// CONCATENATED MODULE: ./src/core/stream/orchestrator/stream_orchestrator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



















/**
 * Create and manage the various Stream Observables needed for the content to
 * play:
 *
 *   - Create or dispose SegmentBuffers depending on the chosen Adaptations.
 *
 *   - Push the right segments to those SegmentBuffers depending on the user's
 *     preferences, the current position, the bandwidth, the decryption
 *     conditions...
 *
 *   - Concatenate Streams for adaptation from separate Periods at the right
 *     time, to allow smooth transitions between periods.
 *
 *   - Emit various events to notify of its health and issues
 *
 * @param {Object} content
 * @param {Observable} playbackObserver - Emit position information
 * @param {Object} representationEstimator - Emit bitrate estimates and best
 * Representation to play.
 * @param {Object} segmentBuffersStore - Will be used to lazily create
 * SegmentBuffer instances associated with the current content.
 * @param {Object} segmentFetcherCreator - Allow to download segments.
 * @param {Object} options
 * @returns {Observable}
 */
function StreamOrchestrator(content, playbackObserver, representationEstimator, segmentBuffersStore, segmentFetcherCreator, options) {
    const { manifest, initialPeriod } = content;
    const { maxBufferAhead, maxBufferBehind, wantedBufferAhead, maxVideoBufferSize } = options;
    const { MAXIMUM_MAX_BUFFER_AHEAD, MAXIMUM_MAX_BUFFER_BEHIND } = src_config.getCurrent();
    // Keep track of a unique BufferGarbageCollector created per
    // SegmentBuffer.
    const garbageCollectors = new WeakMapMemory((segmentBuffer) => {
        const { bufferType } = segmentBuffer;
        const defaultMaxBehind = MAXIMUM_MAX_BUFFER_BEHIND[bufferType] != null ?
            MAXIMUM_MAX_BUFFER_BEHIND[bufferType] :
            Infinity;
        const defaultMaxAhead = MAXIMUM_MAX_BUFFER_AHEAD[bufferType] != null ?
            MAXIMUM_MAX_BUFFER_AHEAD[bufferType] :
            Infinity;
        return new Observable_Observable(() => {
            const canceller = new TaskCanceller();
            BufferGarbageCollector({ segmentBuffer,
                playbackObserver,
                maxBufferBehind: createMappedReference(maxBufferBehind, (val) => Math.min(val, defaultMaxBehind), canceller.signal),
                maxBufferAhead: createMappedReference(maxBufferAhead, (val) => Math.min(val, defaultMaxAhead), canceller.signal) }, canceller.signal);
            return () => { canceller.cancel(); };
        });
    });
    // Every PeriodStreams for every possible types
    const streamsArray = segmentBuffersStore.getBufferTypes().map((bufferType) => {
        return manageEveryStreams(bufferType, initialPeriod)
            .pipe(deferSubscriptions(), share());
    });
    // Emits the activePeriodChanged events every time the active Period changes.
    const activePeriodChanged$ = ActivePeriodEmitter(streamsArray).pipe(filter((period) => period !== null), map(period => {
        src_log.info("Stream: New active period", period.start);
        return stream_events_generators.activePeriodChanged(period);
    }));
    const isLastPeriodKnown$ = event_emitter_fromEvent(manifest, "manifestUpdate").pipe(map(() => manifest.isLastPeriodKnown), startWith(manifest.isLastPeriodKnown), distinctUntilChanged());
    // Emits an "end-of-stream" event once every PeriodStream are complete.
    // Emits a 'resume-stream" when it's not
    const endOfStream$ = combineLatest([areStreamsComplete(...streamsArray),
        isLastPeriodKnown$])
        .pipe(map(([areComplete, isLastPeriodKnown]) => areComplete && isLastPeriodKnown), distinctUntilChanged(), map((emitEndOfStream) => emitEndOfStream ? stream_events_generators.endOfStream() : stream_events_generators.resumeStream()));
    return merge(...streamsArray, activePeriodChanged$, endOfStream$);
    /**
     * Manage creation and removal of Streams for every Periods for a given type.
     *
     * Works by creating consecutive Streams through the
     * `manageConsecutivePeriodStreams` function, and restarting it when the
     * current position goes out of the bounds of these Streams.
     * @param {string} bufferType - e.g. "audio" or "video"
     * @param {Period} basePeriod - Initial Period downloaded.
     * @returns {Observable}
     */
    function manageEveryStreams(bufferType, basePeriod) {
        // Each Period for which there is currently a Stream, chronologically
        const periodList = new SortedList((a, b) => a.start - b.start);
        const destroyStreams$ = new Subject();
        // When set to `true`, all the currently active PeriodStream will be destroyed
        // and re-created from the new current position if we detect it to be out of
        // their bounds.
        // This is set to false when we're in the process of creating the first
        // PeriodStream, to avoid interferences while no PeriodStream is available.
        let enableOutOfBoundsCheck = false;
        /**
         * @param {Object} period
         * @returns {Observable}
         */
        function launchConsecutiveStreamsForPeriod(period) {
            return manageConsecutivePeriodStreams(bufferType, period, destroyStreams$).pipe(map((message) => {
                switch (message.type) {
                    case "waiting-media-source-reload":
                        // Only reload the MediaSource when the more immediately required
                        // Period is the one asking for it
                        const firstPeriod = periodList.head();
                        if (firstPeriod === undefined ||
                            firstPeriod.id !== message.value.period.id) {
                            return stream_events_generators.lockedStream(message.value.bufferType, message.value.period);
                        }
                        else {
                            const { position, autoPlay } = message.value;
                            return stream_events_generators.needsMediaSourceReload(position, autoPlay);
                        }
                    case "periodStreamReady":
                        enableOutOfBoundsCheck = true;
                        periodList.add(message.value.period);
                        break;
                    case "periodStreamCleared":
                        periodList.removeElement(message.value.period);
                        break;
                }
                return message;
            }), share());
        }
        /**
         * Returns true if the given time is either:
         *   - less than the start of the chronologically first Period
         *   - more than the end of the chronologically last Period
         * @param {number} time
         * @returns {boolean}
         */
        function isOutOfPeriodList(time) {
            const head = periodList.head();
            const last = periodList.last();
            if (head == null || last == null) { // if no period
                return true;
            }
            return head.start > time ||
                (last.end == null ? Infinity :
                    last.end) < time;
        }
        // Restart the current Stream when the wanted time is in another period
        // than the ones already considered
        const observation$ = playbackObserver.getReference().asObservable();
        const restartStreamsWhenOutOfBounds$ = observation$.pipe(filterMap(({ position }) => {
            var _a, _b;
            const time = (_a = position.pending) !== null && _a !== void 0 ? _a : position.last;
            if (!enableOutOfBoundsCheck || !isOutOfPeriodList(time)) {
                return null;
            }
            const nextPeriod = (_b = manifest.getPeriodForTime(time)) !== null && _b !== void 0 ? _b : manifest.getNextPeriod(time);
            if (nextPeriod === undefined) {
                return null;
            }
            src_log.info("SO: Current position out of the bounds of the active periods," +
                "re-creating Streams.", bufferType, time);
            enableOutOfBoundsCheck = false;
            destroyStreams$.next();
            return nextPeriod;
        }, null), mergeMap((newInitialPeriod) => {
            if (newInitialPeriod == null) {
                throw new MediaError("MEDIA_TIME_NOT_FOUND", "The wanted position is not found in the Manifest.");
            }
            return launchConsecutiveStreamsForPeriod(newInitialPeriod);
        }));
        const handleDecipherabilityUpdate$ = event_emitter_fromEvent(manifest, "decipherabilityUpdate")
            .pipe(mergeMap(onDecipherabilityUpdates));
        return merge(restartStreamsWhenOutOfBounds$, handleDecipherabilityUpdate$, launchConsecutiveStreamsForPeriod(basePeriod));
        function onDecipherabilityUpdates(updates) {
            const segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
            const ofCurrentType = updates
                .filter(update => update.adaptation.type === bufferType);
            if (ofCurrentType.length === 0 || segmentBufferStatus.type !== "initialized") {
                return EMPTY; // no need to stop the current Streams.
            }
            const segmentBuffer = segmentBufferStatus.value;
            const resettedContent = ofCurrentType.filter(update => update.representation.decipherable === undefined);
            const undecipherableContent = ofCurrentType.filter(update => update.representation.decipherable === false);
            /**
             * Time ranges now containing undecipherable content.
             * Those should first be removed and, depending on the platform, may
             * need Supplementary actions as playback issues may remain even after
             * removal.
             */
            const undecipherableRanges = getTimeRangesForContent(segmentBuffer, undecipherableContent);
            /**
             * Time ranges now containing content whose decipherability status came
             * back to being unknown.
             * To simplify its handling, those are just removed from the buffer.
             * Less considerations have to be taken than for the `undecipherableRanges`.
             */
            const rangesToRemove = getTimeRangesForContent(segmentBuffer, resettedContent);
            // First close all Stream currently active so they don't continue to
            // load and push segments.
            enableOutOfBoundsCheck = false;
            destroyStreams$.next();
            /** Remove from the `SegmentBuffer` all the concerned time ranges. */
            const cleanOperations = [...undecipherableRanges, ...rangesToRemove]
                .map(({ start, end }) => {
                if (start >= end) {
                    return EMPTY;
                }
                const canceller = new TaskCanceller();
                return fromCancellablePromise(canceller, () => {
                    return segmentBuffer.removeBuffer(start, end, canceller.signal);
                }).pipe(ignoreElements());
            });
            return concat_concat(...cleanOperations, 
            // Schedule micro task before checking the last playback observation
            // to reduce the risk of race conditions where the next observation
            // was going to be emitted synchronously.
            nextTickObs().pipe(ignoreElements()), playbackObserver.getReference().asObservable().pipe(take(1), mergeMap((observation) => {
                var _a;
                const restartStream$ = defer(() => {
                    var _a;
                    const lastPosition = (_a = observation.position.pending) !== null && _a !== void 0 ? _a : observation.position.last;
                    const newInitialPeriod = manifest.getPeriodForTime(lastPosition);
                    if (newInitialPeriod == null) {
                        throw new MediaError("MEDIA_TIME_NOT_FOUND", "The wanted position is not found in the Manifest.");
                    }
                    return launchConsecutiveStreamsForPeriod(newInitialPeriod);
                });
                if (needsFlushingAfterClean(observation, undecipherableRanges)) {
                    const shouldAutoPlay = !((_a = observation.paused.pending) !== null && _a !== void 0 ? _a : playbackObserver.getIsPaused());
                    return concat_concat(of(stream_events_generators.needsDecipherabilityFlush(observation.position.last, shouldAutoPlay, observation.duration)), restartStream$);
                }
                else if (needsFlushingAfterClean(observation, rangesToRemove)) {
                    return concat_concat(of(stream_events_generators.needsBufferFlush()), restartStream$);
                }
                return restartStream$;
            })));
        }
    }
    /**
     * Create lazily consecutive PeriodStreams:
     *
     * It first creates the PeriodStream for `basePeriod` and - once it becomes
     * full - automatically creates the next chronological one.
     * This process repeats until the PeriodStream linked to the last Period is
     * full.
     *
     * If an "old" PeriodStream becomes active again, it destroys all PeriodStream
     * coming after it (from the last chronological one to the first).
     *
     * To clean-up PeriodStreams, each one of them are also automatically
     * destroyed once the current position is superior or equal to the end of
     * the concerned Period.
     *
     * A "periodStreamReady" event is sent each times a new PeriodStream is
     * created. The first one (for `basePeriod`) should be sent synchronously on
     * subscription.
     *
     * A "periodStreamCleared" event is sent each times a PeriodStream is
     * destroyed.
     * @param {string} bufferType - e.g. "audio" or "video"
     * @param {Period} basePeriod - Initial Period downloaded.
     * @param {Observable} destroy$ - Emit when/if all created Streams from this
     * point should be destroyed.
     * @returns {Observable}
     */
    function manageConsecutivePeriodStreams(bufferType, basePeriod, destroy$) {
        src_log.info("SO: Creating new Stream for", bufferType, basePeriod.start);
        // Emits the Period of the next Period Stream when it can be created.
        const createNextPeriodStream$ = new Subject();
        // Emits when the Streams for the next Periods should be destroyed, if
        // created.
        const destroyNextStreams$ = new Subject();
        // Emits when the current position goes over the end of the current Stream.
        const endOfCurrentStream$ = playbackObserver.getReference().asObservable()
            .pipe(filter(({ position }) => {
            var _a;
            return basePeriod.end != null &&
                ((_a = position.pending) !== null && _a !== void 0 ? _a : position.last) >= basePeriod.end;
        }));
        // Create Period Stream for the next Period.
        const nextPeriodStream$ = createNextPeriodStream$
            .pipe(exhaustMap((nextPeriod) => manageConsecutivePeriodStreams(bufferType, nextPeriod, destroyNextStreams$)));
        // Allows to destroy each created Stream, from the newest to the oldest,
        // once destroy$ emits.
        const destroyAll$ = destroy$.pipe(take(1), tap(() => {
            // first complete createNextStream$ to allow completion of the
            // nextPeriodStream$ observable once every further Streams have been
            // cleared.
            createNextPeriodStream$.complete();
            // emit destruction signal to the next Stream first
            destroyNextStreams$.next();
            destroyNextStreams$.complete(); // we do not need it anymore
        }), share() // share side-effects
        );
        // Will emit when the current Stream should be destroyed.
        const killCurrentStream$ = merge(endOfCurrentStream$, destroyAll$);
        const periodStream$ = period({ bufferType,
            content: { manifest, period: basePeriod },
            garbageCollectors,
            maxVideoBufferSize,
            segmentFetcherCreator,
            segmentBuffersStore,
            options,
            playbackObserver,
            representationEstimator,
            wantedBufferAhead }).pipe(mergeMap((evt) => {
            if (evt.type === "stream-status") {
                if (evt.value.hasFinishedLoading) {
                    const nextPeriod = manifest.getPeriodAfter(basePeriod);
                    if (nextPeriod === null) {
                        return concat_concat(of(evt), of(stream_events_generators.streamComplete(bufferType)));
                    }
                    // current Stream is full, create the next one if not
                    createNextPeriodStream$.next(nextPeriod);
                }
                else {
                    // current Stream is active, destroy next Stream if created
                    destroyNextStreams$.next();
                }
            }
            return of(evt);
        }), share());
        // Stream for the current Period.
        const currentStream$ = concat_concat(periodStream$.pipe(takeUntil(killCurrentStream$)), of(stream_events_generators.periodStreamCleared(bufferType, basePeriod))
            .pipe(tap(() => {
            src_log.info("SO: Destroying Stream for", bufferType, basePeriod.start);
        })));
        return merge(currentStream$, nextPeriodStream$, destroyAll$.pipe(ignoreElements()));
    }
}
/**
 * Returns `true` if low-level buffers have to be "flushed" after the given
 * `cleanedRanges` time ranges have been removed from an audio or video
 * SourceBuffer, to prevent playback issues.
 * @param {Object} observation
 * @param {Array.<Object>} cleanedRanges
 * @returns {boolean}
 */
function needsFlushingAfterClean(observation, cleanedRanges) {
    if (cleanedRanges.length === 0) {
        return false;
    }
    const curPos = observation.position.last;
    // Based on the playback direction, we just check whether we may encounter
    // the corresponding ranges, without seeking or re-switching playback
    // direction which is expected to lead to a low-level flush anyway.
    // There's a 5 seconds security, just to be sure.
    return observation.speed >= 0 ?
        cleanedRanges[cleanedRanges.length - 1].end >= curPos - 5 :
        cleanedRanges[0].start <= curPos + 5;
}

;// CONCATENATED MODULE: ./src/core/stream/orchestrator/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const orchestrator = (StreamOrchestrator);

;// CONCATENATED MODULE: ./src/core/stream/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const stream = (orchestrator);

;// CONCATENATED MODULE: ./src/core/init/content_time_boundaries_observer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







// NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
// first type parameter as `any` instead of the perfectly fine `unknown`,
// leading to linter issues, as it forbids the usage of `any`.
// This is why we're disabling the eslint rule.
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/**
 * Observes the position and Adaptations being played and deduce various events
 * related to the available time boundaries:
 *  - Emit when the theoretical duration of the content becomes known or when it
 *    changes.
 *  - Emit warnings when the duration goes out of what is currently
 *    theoretically playable.
 *
 * @param {Object} manifest
 * @param {Object} lastAdaptationChange
 * @param {Object} playbackObserver
 * @returns {Observable}
 */
function ContentTimeBoundariesObserver(manifest, lastAdaptationChange, playbackObserver) {
    /**
     * Allows to calculate the minimum and maximum playable position on the
     * whole content.
     */
    const maximumPositionCalculator = new MaximumPositionCalculator(manifest);
    // trigger warnings when the wanted time is before or after the manifest's
    // segments
    const outOfManifest$ = playbackObserver.getReference().asObservable().pipe(filterMap(({ position }) => {
        var _a;
        const wantedPosition = (_a = position.pending) !== null && _a !== void 0 ? _a : position.last;
        if (wantedPosition < manifest.getMinimumSafePosition()) {
            const warning = new MediaError("MEDIA_TIME_BEFORE_MANIFEST", "The current position is behind the " +
                "earliest time announced in the Manifest.");
            return events_generators.warning(warning);
        }
        else if (wantedPosition > maximumPositionCalculator.getMaximumAvailablePosition()) {
            const warning = new MediaError("MEDIA_TIME_AFTER_MANIFEST", "The current position is after the latest " +
                "time announced in the Manifest.");
            return events_generators.warning(warning);
        }
        return null;
    }, null));
    /**
     * Contains the content duration according to the last audio and video
     * Adaptation chosen for the last Period.
     * `undefined` if unknown yet.
     */
    const contentDuration = createSharedReference(undefined);
    const updateDurationOnManifestUpdate$ = event_emitter_fromEvent(manifest, "manifestUpdate").pipe(startWith(null), tap(() => {
        const duration = manifest.isDynamic ?
            maximumPositionCalculator.getEndingPosition() :
            maximumPositionCalculator.getMaximumAvailablePosition();
        contentDuration.setValue(duration);
    }), ignoreElements());
    const updateDurationAndTimeBoundsOnTrackChange$ = lastAdaptationChange
        .asObservable().pipe(tap((message) => {
        if (message === null || !manifest.isLastPeriodKnown) {
            return;
        }
        const lastPeriod = manifest.periods[manifest.periods.length - 1];
        if (message.value.period.id === (lastPeriod === null || lastPeriod === void 0 ? void 0 : lastPeriod.id)) {
            if (message.value.type === "audio" || message.value.type === "video") {
                if (message.value.type === "audio") {
                    maximumPositionCalculator
                        .updateLastAudioAdaptation(message.value.adaptation);
                }
                else {
                    maximumPositionCalculator
                        .updateLastVideoAdaptation(message.value.adaptation);
                }
                const newDuration = manifest.isDynamic ?
                    maximumPositionCalculator.getMaximumAvailablePosition() :
                    maximumPositionCalculator.getEndingPosition();
                contentDuration.setValue(newDuration);
            }
        }
    }), ignoreElements());
    return merge(updateDurationOnManifestUpdate$, updateDurationAndTimeBoundsOnTrackChange$, outOfManifest$, contentDuration.asObservable().pipe(skipWhile((val) => val === undefined), distinctUntilChanged(), map(value => ({ type: "contentDurationUpdate", value }))));
}
/**
 * Calculate the last position from the last chosen audio and video Adaptations
 * for the last Period (or a default one, if no Adaptations has been chosen).
 * @class MaximumPositionCalculator
 */
class MaximumPositionCalculator {
    /**
     * @param {Object} manifest
     */
    constructor(manifest) {
        this._manifest = manifest;
        this._lastAudioAdaptation = undefined;
        this._lastVideoAdaptation = undefined;
    }
    /**
     * Update the last known audio Adaptation for the last Period.
     * If no Adaptation has been set, it should be set to `null`.
     *
     * Allows to calculate the maximum position more precizely in
     * `getMaximumAvailablePosition` and `getEndingPosition`.
     * @param {Object|null} adaptation
     */
    updateLastAudioAdaptation(adaptation) {
        this._lastAudioAdaptation = adaptation;
    }
    /**
     * Update the last known video Adaptation for the last Period.
     * If no Adaptation has been set, it should be set to `null`.
     *
     * Allows to calculate the maximum position more precizely in
     * `getMaximumAvailablePosition` and `getEndingPosition`.
     * @param {Object|null} adaptation
     */
    updateLastVideoAdaptation(adaptation) {
        this._lastVideoAdaptation = adaptation;
    }
    /**
     * Returns an estimate of the maximum position currently reachable (i.e.
     * segments are available) under the current circumstances.
     * @returns {number}
     */
    getMaximumAvailablePosition() {
        var _a;
        if (this._manifest.isDynamic) {
            return (_a = this._manifest.getLivePosition()) !== null && _a !== void 0 ? _a : this._manifest.getMaximumSafePosition();
        }
        if (this._lastVideoAdaptation === undefined ||
            this._lastAudioAdaptation === undefined) {
            return this._manifest.getMaximumSafePosition();
        }
        else if (this._lastAudioAdaptation === null) {
            if (this._lastVideoAdaptation === null) {
                return this._manifest.getMaximumSafePosition();
            }
            else {
                const lastVideoPosition = getLastAvailablePositionFromAdaptation(this._lastVideoAdaptation);
                if (typeof lastVideoPosition !== "number") {
                    return this._manifest.getMaximumSafePosition();
                }
                return lastVideoPosition;
            }
        }
        else if (this._lastVideoAdaptation === null) {
            const lastAudioPosition = getLastAvailablePositionFromAdaptation(this._lastAudioAdaptation);
            if (typeof lastAudioPosition !== "number") {
                return this._manifest.getMaximumSafePosition();
            }
            return lastAudioPosition;
        }
        else {
            const lastAudioPosition = getLastAvailablePositionFromAdaptation(this._lastAudioAdaptation);
            const lastVideoPosition = getLastAvailablePositionFromAdaptation(this._lastVideoAdaptation);
            if (typeof lastAudioPosition !== "number" ||
                typeof lastVideoPosition !== "number") {
                return this._manifest.getMaximumSafePosition();
            }
            else {
                return Math.min(lastAudioPosition, lastVideoPosition);
            }
        }
    }
    /**
     * Returns an estimate of the actual ending position once
     * the full content is available.
     * Returns `undefined` if that could not be determined, for various reasons.
     * @returns {number|undefined}
     */
    getEndingPosition() {
        var _a, _b;
        if (!this._manifest.isDynamic) {
            return this.getMaximumAvailablePosition();
        }
        if (this._lastVideoAdaptation === undefined ||
            this._lastAudioAdaptation === undefined) {
            return undefined;
        }
        else if (this._lastAudioAdaptation === null) {
            if (this._lastVideoAdaptation === null) {
                return undefined;
            }
            else {
                return (_a = getEndingPositionFromAdaptation(this._lastVideoAdaptation)) !== null && _a !== void 0 ? _a : undefined;
            }
        }
        else if (this._lastVideoAdaptation === null) {
            return (_b = getEndingPositionFromAdaptation(this._lastAudioAdaptation)) !== null && _b !== void 0 ? _b : undefined;
        }
        else {
            const lastAudioPosition = getEndingPositionFromAdaptation(this._lastAudioAdaptation);
            const lastVideoPosition = getEndingPositionFromAdaptation(this._lastVideoAdaptation);
            if (typeof lastAudioPosition !== "number" ||
                typeof lastVideoPosition !== "number") {
                return undefined;
            }
            else {
                return Math.min(lastAudioPosition, lastVideoPosition);
            }
        }
    }
}
/**
 * Returns last currently available position from the Adaptation given.
 * `undefined` if a time could not be found.
 * `null` if the Adaptation has no segments (it could be that it didn't started or
 * that it already finished for example).
 *
 * We consider the earliest last available position from every Representation
 * in the given Adaptation.
 * @param {Object} adaptation
 * @returns {Number|undefined|null}
 */
function getLastAvailablePositionFromAdaptation(adaptation) {
    const { representations } = adaptation;
    let min = null;
    /**
     * Some Manifest parsers use the exact same `IRepresentationIndex` reference
     * for each Representation of a given Adaptation, because in the actual source
     * Manifest file, indexing data is often defined at Adaptation-level.
     * This variable allows to optimize the logic here when this is the case.
     */
    let lastIndex;
    for (let i = 0; i < representations.length; i++) {
        if (representations[i].index !== lastIndex) {
            lastIndex = representations[i].index;
            const lastPosition = representations[i].index.getLastAvailablePosition();
            if (lastPosition === undefined) { // we cannot tell
                return undefined;
            }
            if (lastPosition !== null) {
                min = isNullOrUndefined(min) ? lastPosition :
                    Math.min(min, lastPosition);
            }
        }
    }
    return min;
}
/**
 * Returns ending time from the Adaptation given, once all its segments are
 * available.
 * `undefined` if a time could not be found.
 * `null` if the Adaptation has no segments (it could be that it already
 * finished for example).
 *
 * We consider the earliest ending time from every Representation in the given
 * Adaptation.
 * @param {Object} adaptation
 * @returns {Number|undefined|null}
 */
function getEndingPositionFromAdaptation(adaptation) {
    const { representations } = adaptation;
    let min = null;
    /**
     * Some Manifest parsers use the exact same `IRepresentationIndex` reference
     * for each Representation of a given Adaptation, because in the actual source
     * Manifest file, indexing data is often defined at Adaptation-level.
     * This variable allows to optimize the logic here when this is the case.
     */
    let lastIndex;
    for (let i = 0; i < representations.length; i++) {
        if (representations[i].index !== lastIndex) {
            lastIndex = representations[i].index;
            const lastPosition = representations[i].index.getEnd();
            if (lastPosition === undefined) { // we cannot tell
                return undefined;
            }
            if (lastPosition !== null) {
                min = isNullOrUndefined(min) ? lastPosition :
                    Math.min(min, lastPosition);
            }
        }
    }
    return min;
}

;// CONCATENATED MODULE: ./src/core/init/create_stream_playback_observer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Create PlaybackObserver for the `Stream` part of the code.
 * @param {Object} manifest
 * @param {Object} playbackObserver
 * @param {Object} args
 * @returns {Object}
 */
function createStreamPlaybackObserver(manifest, playbackObserver, { autoPlay, initialPlayPerformed, initialSeekPerformed, speed, startTime }) {
    return playbackObserver.deriveReadOnlyObserver(function transform(observationRef, cancellationSignal) {
        const newRef = createSharedReference(constructStreamPlaybackObservation());
        speed.onUpdate(emitStreamPlaybackObservation, {
            clearSignal: cancellationSignal,
            emitCurrentValue: false,
        });
        observationRef.onUpdate(emitStreamPlaybackObservation, {
            clearSignal: cancellationSignal,
            emitCurrentValue: false,
        });
        cancellationSignal.register(() => {
            newRef.finish();
        });
        return newRef;
        function constructStreamPlaybackObservation() {
            const observation = observationRef.getValue();
            const lastSpeed = speed.getValue();
            let pendingPosition;
            if (!initialSeekPerformed.getValue()) {
                pendingPosition = startTime;
            }
            else if (!manifest.isDynamic || manifest.isLastPeriodKnown) {
                // HACK: When the position is actually further than the maximum
                // position for a finished content, we actually want to be loading
                // the last segment before ending.
                // For now, this behavior is implicitely forced by making as if we
                // want to seek one second before the period's end (despite never
                // doing it).
                const lastPeriod = manifest.periods[manifest.periods.length - 1];
                if (lastPeriod !== undefined &&
                    lastPeriod.end !== undefined &&
                    observation.position > lastPeriod.end) {
                    pendingPosition = lastPeriod.end - 1;
                }
            }
            return {
                // TODO more exact according to the current Adaptation chosen?
                maximumPosition: manifest.getMaximumSafePosition(),
                position: {
                    last: observation.position,
                    pending: pendingPosition,
                },
                duration: observation.duration,
                paused: {
                    last: observation.paused,
                    pending: initialPlayPerformed.getValue() ? undefined :
                        !autoPlay === observation.paused ? undefined :
                            !autoPlay,
                },
                readyState: observation.readyState,
                speed: lastSpeed,
            };
        }
        function emitStreamPlaybackObservation() {
            newRef.setValue(constructStreamPlaybackObservation());
        }
    });
}

;// CONCATENATED MODULE: ./src/compat/should_wait_for_data_before_loaded.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * On some browsers, the ready state might never go above `1` when autoplay is
 * blocked. On these cases, for now, we just advertise the content as "loaded".
 * We might go into BUFFERING just after that state, but that's a small price to
 * pay.
 * @param {Boolean} isDirectfile
 * @returns {Boolean}
 */
function shouldWaitForDataBeforeLoaded(isDirectfile, mustPlayInline) {
    if (isDirectfile && isSafariMobile) {
        return mustPlayInline;
    }
    return true;
}

;// CONCATENATED MODULE: ./src/compat/should_validate_metadata.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the metadata received after a "loadedmetadata" event has
 * to be validated in the current browser (which means that we do not trust
 * this event on these browsers).
 * @returns {boolean}
 */
function shouldValidateMetadata() {
    return isSamsungBrowser;
}

;// CONCATENATED MODULE: ./src/core/init/emit_loaded_event.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Emit a `ILoadedEvent` once the content can be considered as loaded.
 * @param {Observable} observation$
 * @param {HTMLMediaElement} mediaElement
 * @param {Object|null} segmentBuffersStore
 * @param {boolean} isDirectfile - `true` if this is a directfile content
 * @returns {Observable}
 */
function emitLoadedEvent(observation$, mediaElement, segmentBuffersStore, isDirectfile) {
    return observation$.pipe(filterMap((observation) => {
        if (observation.rebuffering !== null ||
            observation.freezing !== null ||
            observation.readyState === 0) {
            return null;
        }
        if (!shouldWaitForDataBeforeLoaded(isDirectfile, mediaElement.hasAttribute("playsinline"))) {
            return mediaElement.duration > 0 ? events_generators.loaded(segmentBuffersStore) :
                null;
        }
        if (observation.readyState >= 3 && observation.currentRange !== null) {
            if (!shouldValidateMetadata() || mediaElement.duration > 0) {
                return events_generators.loaded(segmentBuffersStore);
            }
            return null;
        }
        return null;
    }, null), take(1));
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var argsOrArgArray_isArray = Array.isArray;
function argsOrArgArray(args) {
  return args.length === 1 && argsOrArgArray_isArray(args[0]) ? args[0] : args;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/race.js




function race() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  sources = argsOrArgArray(sources);
  return sources.length === 1 ? innerFrom(sources[0]) : new Observable_Observable(raceInit(sources));
}
function raceInit(sources) {
  return function (subscriber) {
    var subscriptions = [];
    var _loop_1 = function _loop_1(i) {
      subscriptions.push(innerFrom(sources[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {
        if (subscriptions) {
          for (var s = 0; s < subscriptions.length; s++) {
            s !== i && subscriptions[s].unsubscribe();
          }
          subscriptions = null;
        }
        subscriber.next(value);
      })));
    };
    for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
      _loop_1(i);
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/takeLast.js




function takeLast(count) {
  return count <= 0 ? function () {
    return EMPTY;
  } : operate(function (source, subscriber) {
    var buffer = [];
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, function () {
      var e_1, _a;
      try {
        for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
          var value = buffer_1_1.value;
          subscriber.next(value);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1["return"])) _a.call(buffer_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      subscriber.complete();
    }, undefined, function () {
      buffer = null;
    }));
  });
}
;// CONCATENATED MODULE: ./src/core/init/end_of_stream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const { onRemoveSourceBuffers$: end_of_stream_onRemoveSourceBuffers$, onSourceOpen$: end_of_stream_onSourceOpen$, onUpdate$: end_of_stream_onUpdate$ } = event_listeners_namespaceObject;
/**
 * Get "updating" SourceBuffers from a SourceBufferList.
 * @param {SourceBufferList} sourceBuffers
 * @returns {Array.<SourceBuffer>}
 */
function getUpdatingSourceBuffers(sourceBuffers) {
    const updatingSourceBuffers = [];
    for (let i = 0; i < sourceBuffers.length; i++) {
        const SourceBuffer = sourceBuffers[i];
        if (SourceBuffer.updating) {
            updatingSourceBuffers.push(SourceBuffer);
        }
    }
    return updatingSourceBuffers;
}
/**
 * Trigger the `endOfStream` method of a MediaSource.
 *
 * If the MediaSource is ended/closed, do not call this method.
 * If SourceBuffers are updating, wait for them to be updated before closing
 * it.
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */
function triggerEndOfStream(mediaSource) {
    return defer(() => {
        src_log.debug("Init: Trying to call endOfStream");
        if (mediaSource.readyState !== "open") {
            src_log.debug("Init: MediaSource not open, cancel endOfStream");
            return of(null);
        }
        const { sourceBuffers } = mediaSource;
        const updatingSourceBuffers = getUpdatingSourceBuffers(sourceBuffers);
        if (updatingSourceBuffers.length === 0) {
            src_log.info("Init: Triggering end of stream");
            mediaSource.endOfStream();
            return of(null);
        }
        src_log.debug("Init: Waiting SourceBuffers to be updated before calling endOfStream.");
        const updatedSourceBuffers$ = updatingSourceBuffers
            .map((sourceBuffer) => end_of_stream_onUpdate$(sourceBuffer).pipe(take(1)));
        return race(merge(...updatedSourceBuffers$).pipe(takeLast(1)), end_of_stream_onRemoveSourceBuffers$(sourceBuffers).pipe(take(1))).pipe(mergeMap(() => {
            return triggerEndOfStream(mediaSource);
        }));
    });
}
/**
 * Trigger the `endOfStream` method of a MediaSource each times it opens.
 * @see triggerEndOfStream
 * @param {MediaSource} mediaSource
 * @returns {Observable}
 */
function maintainEndOfStream(mediaSource) {
    return end_of_stream_onSourceOpen$(mediaSource).pipe(startWith(null), switchMap(() => triggerEndOfStream(mediaSource)));
}

;// CONCATENATED MODULE: ./src/compat/play.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Call play on the media element on subscription and return the response as an
 * observable.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function play(mediaElement) {
    return defer(() => 
    // mediaElement.play is not always a Promise. In the improbable case it
    // throws, I prefer still to catch to return the error wrapped in an
    // Observable
    tryCatch(() => cast_to_observable(mediaElement.play()), undefined));
}

;// CONCATENATED MODULE: ./src/compat/when_loaded_metadata.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Returns an observable emitting a single time, as soon as a seek is possible
 * (the metadata are loaded).
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function whenLoadedMetadata$(mediaElement) {
    if (mediaElement.readyState >= READY_STATES.HAVE_METADATA) {
        return of(null);
    }
    else {
        return onLoadedMetadata$(mediaElement)
            .pipe(take(1));
    }
}

;// CONCATENATED MODULE: ./src/core/init/initial_seek_and_play.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Emit once as soon as the playback observation announces that the content can
 * begin to be played by calling the `play` method.
 *
 * This depends on browser-defined criteria (e.g. the readyState status) as well
 * as RxPlayer-defined ones (e.g.) not rebuffering.
 *
 * @param {Observable} observation$
 * @returns {Observable.<undefined>}
 */
function waitUntilPlayable(observation$) {
    return observation$.pipe(filter(({ seeking, rebuffering, readyState }) => !seeking &&
        rebuffering === null &&
        readyState >= 1), take(1), map(() => undefined));
}
/**
 * Try to play content then handle autoplay errors.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function autoPlay(mediaElement) {
    return play(mediaElement).pipe(map(() => "autoplay"), catchError((error) => {
        if (error instanceof Error && error.name === "NotAllowedError") {
            // auto-play was probably prevented.
            src_log.warn("Init: Media element can't play." +
                " It may be due to browser auto-play policies.");
            return of("autoplay-blocked");
        }
        else {
            throw error;
        }
    }));
}
/**
 * Creates an Observable allowing to seek at the initially wanted position and
 * to play if autoPlay is wanted.
 * @param {Object} args
 * @returns {Object}
 */
function initialSeekAndPlay({ mediaElement, playbackObserver, startTime, mustAutoPlay }) {
    const initialSeekPerformed = createSharedReference(false);
    const initialPlayPerformed = createSharedReference(false);
    const seek$ = whenLoadedMetadata$(mediaElement).pipe(take(1), tap(() => {
        const initialTime = typeof startTime === "function" ? startTime() :
            startTime;
        src_log.info("Init: Set initial time", initialTime);
        playbackObserver.setCurrentTime(initialTime);
        initialSeekPerformed.setValue(true);
        initialSeekPerformed.finish();
    }), shareReplay({ refCount: true }));
    const seekAndPlay$ = seek$.pipe(mergeMap(() => {
        if (!shouldValidateMetadata() || mediaElement.duration > 0) {
            return waitUntilPlayable(playbackObserver.getReference().asObservable());
        }
        else {
            const error = new MediaError("MEDIA_ERR_NOT_LOADED_METADATA", "Cannot load automatically: your browser " +
                "falsely announced having loaded the content.");
            return waitUntilPlayable(playbackObserver.getReference().asObservable())
                .pipe(startWith(events_generators.warning(error)));
        }
    }), mergeMap((evt) => {
        if (evt !== undefined) {
            return of(evt);
        }
        src_log.info("Init: Can begin to play content");
        if (!mustAutoPlay) {
            if (mediaElement.autoplay) {
                src_log.warn("Init: autoplay is enabled on HTML media element. " +
                    "Media will play as soon as possible.");
            }
            initialPlayPerformed.setValue(true);
            initialPlayPerformed.finish();
            return of({ type: "skipped" });
        }
        return autoPlay(mediaElement).pipe(mergeMap((autoplayEvt) => {
            initialPlayPerformed.setValue(true);
            initialPlayPerformed.finish();
            if (autoplayEvt === "autoplay") {
                return of({ type: "autoplay" });
            }
            else {
                const error = new MediaError("MEDIA_ERR_BLOCKED_AUTOPLAY", "Cannot trigger auto-play automatically: " +
                    "your browser does not allow it.");
                return concat_concat(of(events_generators.warning(error)), of({ type: "autoplay-blocked" }));
            }
        }));
    }), shareReplay({ refCount: true }));
    return { seekAndPlay$, initialPlayPerformed, initialSeekPerformed };
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/interval.js


function interval(period, scheduler) {
  if (period === void 0) {
    period = 0;
  }
  if (scheduler === void 0) {
    scheduler = asyncScheduler;
  }
  if (period < 0) {
    period = 0;
  }
  return timer(period, period, scheduler);
}
;// CONCATENATED MODULE: ./src/core/init/media_duration_updater.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/** Number of seconds in a regular year. */
const YEAR_IN_SECONDS = 365 * 24 * 3600;
/**
 * Keep the MediaSource's duration up-to-date with what is being played.
 * @class MediaDurationUpdater
 */
class MediaDurationUpdater {
    /**
     * Create a new `MediaDurationUpdater` that will keep the given MediaSource's
     * duration as soon as possible.
     * This duration will be updated until the `stop` method is called.
     * @param {Object} manifest - The Manifest currently played.
     * For another content, you will have to create another `MediaDurationUpdater`.
     * @param {MediaSource} mediaSource - The MediaSource on which the content is
     * pushed.
     */
    constructor(manifest, mediaSource) {
        this._lastKnownDuration = createSharedReference(undefined);
        this._subscription = isMediaSourceOpened$(mediaSource).pipe(switchMap((canUpdate) => canUpdate ? combineLatest([this._lastKnownDuration.asObservable(),
            event_emitter_fromEvent(manifest, "manifestUpdate")
                .pipe(startWith(null))]) :
            EMPTY), switchMap(([lastKnownDuration]) => areSourceBuffersUpdating$(mediaSource.sourceBuffers).pipe(switchMap((areSBUpdating) => {
            return areSBUpdating ? EMPTY :
                recursivelyTryUpdatingDuration();
            function recursivelyTryUpdatingDuration() {
                const res = setMediaSourceDuration(mediaSource, manifest, lastKnownDuration);
                if (res === "success" /* MediaSourceDurationUpdateStatus.Success */) {
                    return EMPTY;
                }
                return timer(2000)
                    .pipe(mergeMap(() => recursivelyTryUpdatingDuration()));
            }
        })))).subscribe();
    }
    /**
     * By default, the `MediaDurationUpdater` only set a safe estimate for the
     * MediaSource's duration.
     * A more precize duration can be set by communicating to it a more precize
     * media duration through `updateKnownDuration`.
     * If the duration becomes unknown, `undefined` can be given to it so the
     * `MediaDurationUpdater` goes back to a safe estimate.
     * @param {number | undefined} newDuration
     */
    updateKnownDuration(newDuration) {
        this._lastKnownDuration.setValue(newDuration);
    }
    /**
     * Stop the `MediaDurationUpdater` from updating and free its resources.
     * Once stopped, it is not possible to start it again, beside creating another
     * `MediaDurationUpdater`.
     */
    stop() {
        this._subscription.unsubscribe();
    }
}
/**
 * Checks that duration can be updated on the MediaSource, and then
 * sets it.
 *
 * Returns either:
 *   - the new duration it has been updated to if it has
 *   - `null` if it hasn'nt been updated
 *
 * @param {MediaSource} mediaSource
 * @param {Object} manifest
 * @returns {string}
 */
function setMediaSourceDuration(mediaSource, manifest, knownDuration) {
    var _a;
    let newDuration = knownDuration;
    if (newDuration === undefined) {
        if (manifest.isDynamic) {
            const maxPotentialPos = (_a = manifest.getLivePosition()) !== null && _a !== void 0 ? _a : manifest.getMaximumSafePosition();
            // Some targets poorly support setting a very high number for durations.
            // Yet, in dynamic contents, we would prefer setting a value as high as possible
            // to still be able to seek anywhere we want to (even ahead of the Manifest if
            // we want to). As such, we put it at a safe default value of 2^32 excepted
            // when the maximum position is already relatively close to that value, where
            // we authorize exceptionally going over it.
            newDuration = Math.max(Math.pow(2, 32), maxPotentialPos + YEAR_IN_SECONDS);
        }
        else {
            newDuration = manifest.getMaximumSafePosition();
        }
    }
    let maxBufferedEnd = 0;
    for (let i = 0; i < mediaSource.sourceBuffers.length; i++) {
        const sourceBuffer = mediaSource.sourceBuffers[i];
        const sbBufferedLen = sourceBuffer.buffered.length;
        if (sbBufferedLen > 0) {
            maxBufferedEnd = Math.max(sourceBuffer.buffered.end(sbBufferedLen - 1));
        }
    }
    if (newDuration === mediaSource.duration) {
        return "success" /* MediaSourceDurationUpdateStatus.Success */;
    }
    else if (maxBufferedEnd > newDuration) {
        // We already buffered further than the duration we want to set.
        // Keep the duration that was set at that time as a security.
        if (maxBufferedEnd < mediaSource.duration) {
            try {
                src_log.info("Init: Updating duration to what is currently buffered", maxBufferedEnd);
                mediaSource.duration = newDuration;
            }
            catch (err) {
                src_log.warn("Duration Updater: Can't update duration on the MediaSource.", err instanceof Error ? err : "");
                return "failed" /* MediaSourceDurationUpdateStatus.Failed */;
            }
        }
        return "partial" /* MediaSourceDurationUpdateStatus.Partial */;
    }
    else {
        const oldDuration = mediaSource.duration;
        try {
            src_log.info("Init: Updating duration", newDuration);
            mediaSource.duration = newDuration;
        }
        catch (err) {
            src_log.warn("Duration Updater: Can't update duration on the MediaSource.", err instanceof Error ? err : "");
            return "failed" /* MediaSourceDurationUpdateStatus.Failed */;
        }
        const deltaToExpected = Math.abs(mediaSource.duration - newDuration);
        if (deltaToExpected >= 0.1) {
            const deltaToBefore = Math.abs(mediaSource.duration - oldDuration);
            return deltaToExpected < deltaToBefore ? "partial" /* MediaSourceDurationUpdateStatus.Partial */ :
                "failed" /* MediaSourceDurationUpdateStatus.Failed */;
        }
        return "success" /* MediaSourceDurationUpdateStatus.Success */;
    }
}
/**
 * Returns an Observable which will emit only when all the SourceBuffers ended
 * all pending updates.
 * @param {SourceBufferList} sourceBuffers
 * @returns {Observable}
 */
function areSourceBuffersUpdating$(sourceBuffers) {
    if (sourceBuffers.length === 0) {
        return of(false);
    }
    const sourceBufferUpdatingStatuses = [];
    for (let i = 0; i < sourceBuffers.length; i++) {
        const sourceBuffer = sourceBuffers[i];
        sourceBufferUpdatingStatuses.push(merge(fromEvent(sourceBuffer, "updatestart").pipe(map(() => true)), fromEvent(sourceBuffer, "update").pipe(map(() => false)), interval(500).pipe(map(() => sourceBuffer.updating))).pipe(startWith(sourceBuffer.updating), distinctUntilChanged()));
    }
    return combineLatest(sourceBufferUpdatingStatuses).pipe(map((areUpdating) => {
        return areUpdating.some((isUpdating) => isUpdating);
    }), distinctUntilChanged());
}
/**
 * Emit a boolean that tells if the media source is opened or not.
 * @param {MediaSource} mediaSource
 * @returns {Object}
 */
function isMediaSourceOpened$(mediaSource) {
    return merge(onSourceOpen$(mediaSource).pipe(map(() => true)), onSourceEnded$(mediaSource).pipe(map(() => false)), onSourceClose$(mediaSource).pipe(map(() => false))).pipe(startWith(mediaSource.readyState === "open"), distinctUntilChanged());
}

;// CONCATENATED MODULE: ./src/compat/is_seeking_approximate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * On some devices (right now only seen on Tizen), seeking through the
 * `currentTime` property can lead to the browser re-seeking once the
 * segments have been loaded to improve seeking performances (for
 * example, by seeking right to an intra video frame).
 *
 * This can lead to conflicts with the RxPlayer code.
 *
 * This boolean is only `true` on the devices where this behavior has been
 * observed.
 */
const isSeekingApproximate = isTizen;
/* harmony default export */ const is_seeking_approximate = (isSeekingApproximate);

;// CONCATENATED MODULE: ./src/core/init/rebuffering_controller.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Work-around rounding errors with floating points by setting an acceptable,
 * very short, deviation when checking equalities.
 */
const rebuffering_controller_EPSILON = 1 / 60;
/**
 * Monitor playback, trying to avoid stalling situation.
 * If stopping the player to build buffer is needed, temporarily set the
 * playback rate (i.e. speed) at `0` until enough buffer is available again.
 *
 * Emit "stalled" then "unstalled" respectively when an unavoidable stall is
 * encountered and exited.
 * @param {object} playbackObserver - emit the current playback conditions.
 * @param {Object} manifest - The Manifest of the currently-played content.
 * @param {Object} speed - The last speed set by the user
 * @param {Observable} lockedStream$ - Emit information on currently "locked"
 * streams.
 * @param {Observable} discontinuityUpdate$ - Observable emitting encountered
 * discontinuities for loaded Period and buffer types.
 * @returns {Observable}
 */
function RebufferingController(playbackObserver, manifest, speed, lockedStream$, discontinuityUpdate$) {
    const initialDiscontinuitiesStore = [];
    /**
     * Emit every known audio and video buffer discontinuities in chronological
     * order (first ordered by Period's start, then by bufferType in any order.
     */
    const discontinuitiesStore$ = discontinuityUpdate$.pipe(withLatestFrom(playbackObserver.getReference().asObservable()), scan((discontinuitiesStore, [evt, observation]) => updateDiscontinuitiesStore(discontinuitiesStore, evt, observation), initialDiscontinuitiesStore));
    /**
     * On some devices (right now only seen on Tizen), seeking through the
     * `currentTime` property can lead to the browser re-seeking once the
     * segments have been loaded to improve seeking performances (for
     * example, by seeking right to an intra video frame).
     * In that case, we risk being in a conflict with that behavior: if for
     * example we encounter a small discontinuity at the position the browser
     * seeks to, we will seek over it, the browser would seek back and so on.
     *
     * This variable allows to store the last known position we were seeking to
     * so we can detect when the browser seeked back (to avoid performing another
     * seek after that). When browsers seek back to a position behind a
     * discontinuity, they are usually able to skip them without our help.
     */
    let lastSeekingPosition = null;
    /**
     * In some conditions (see `lastSeekingPosition`), we might want to not
     * automatically seek over discontinuities because the browser might do it
     * itself instead.
     * In that case, we still want to perform the seek ourselves if the browser
     * doesn't do it after sufficient time.
     * This variable allows to store the timestamp at which a discontinuity began
     * to be ignored.
     */
    let ignoredStallTimeStamp = null;
    let prevFreezingState;
    /**
     * If we're rebuffering waiting on data of a "locked stream", seek into the
     * Period handled by that stream to unlock the situation.
     */
    const unlock$ = lockedStream$.pipe(withLatestFrom(playbackObserver.getReference().asObservable()), tap(([lockedStreamEvt, observation]) => {
        var _a;
        if (!observation.rebuffering ||
            observation.paused ||
            speed.getValue() <= 0 || (lockedStreamEvt.bufferType !== "audio" &&
            lockedStreamEvt.bufferType !== "video")) {
            return;
        }
        const currPos = observation.position;
        const rebufferingPos = (_a = observation.rebuffering.position) !== null && _a !== void 0 ? _a : currPos;
        const lockedPeriodStart = lockedStreamEvt.period.start;
        if (currPos < lockedPeriodStart &&
            Math.abs(rebufferingPos - lockedPeriodStart) < 1) {
            src_log.warn("Init: rebuffering because of a future locked stream.\n" +
                "Trying to unlock by seeking to the next Period");
            playbackObserver.setCurrentTime(lockedPeriodStart + 0.001);
        }
    }), 
    // NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
    // first type parameter as `any` instead of the perfectly fine `unknown`,
    // leading to linter issues, as it forbids the usage of `any`.
    // This is why we're disabling the eslint rule.
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
    ignoreElements());
    const playbackRateUpdater = new PlaybackRateUpdater(playbackObserver, speed);
    const stall$ = playbackObserver.getReference().asObservable().pipe(withLatestFrom(discontinuitiesStore$), map(([observation, discontinuitiesStore]) => {
        var _a;
        const { buffered, position, readyState, rebuffering, freezing } = observation;
        const { BUFFER_DISCONTINUITY_THRESHOLD, FORCE_DISCONTINUITY_SEEK_DELAY, FREEZING_STALLED_DELAY, UNFREEZING_SEEK_DELAY, UNFREEZING_DELTA_POSITION } = src_config.getCurrent();
        if (!observation.seeking &&
            is_seeking_approximate &&
            ignoredStallTimeStamp === null &&
            lastSeekingPosition !== null &&
            observation.position < lastSeekingPosition) {
            src_log.debug("Init: the device appeared to have seeked back by itself.");
            const now = performance.now();
            ignoredStallTimeStamp = now;
        }
        lastSeekingPosition = observation.seeking ?
            Math.max((_a = observation.pendingInternalSeek) !== null && _a !== void 0 ? _a : 0, observation.position) :
            null;
        if (freezing !== null) {
            const now = performance.now();
            const referenceTimestamp = prevFreezingState === null ?
                freezing.timestamp :
                prevFreezingState.attemptTimestamp;
            if (now - referenceTimestamp > UNFREEZING_SEEK_DELAY) {
                src_log.warn("Init: trying to seek to un-freeze player");
                playbackObserver.setCurrentTime(playbackObserver.getCurrentTime() + UNFREEZING_DELTA_POSITION);
                prevFreezingState = { attemptTimestamp: now };
            }
            if (now - freezing.timestamp > FREEZING_STALLED_DELAY) {
                if (rebuffering === null || ignoredStallTimeStamp !== null) {
                    playbackRateUpdater.stopRebuffering();
                }
                else {
                    playbackRateUpdater.startRebuffering();
                }
                return { type: "stalled",
                    value: "freezing" };
            }
        }
        else {
            prevFreezingState = null;
        }
        if (rebuffering === null) {
            playbackRateUpdater.stopRebuffering();
            if (readyState === 1) {
                // With a readyState set to 1, we should still not be able to play:
                // Return that we're stalled
                let reason;
                if (observation.seeking) {
                    reason = observation.pendingInternalSeek !== null ? "internal-seek" :
                        "seeking";
                }
                else {
                    reason = "not-ready";
                }
                return { type: "stalled",
                    value: reason };
            }
            return { type: "unstalled",
                value: null };
        }
        // We want to separate a stall situation when a seek is due to a seek done
        // internally by the player to when its due to a regular user seek.
        const stalledReason = rebuffering.reason === "seeking" &&
            observation.pendingInternalSeek !== null ?
            "internal-seek" :
            rebuffering.reason;
        if (ignoredStallTimeStamp !== null) {
            const now = performance.now();
            if (now - ignoredStallTimeStamp < FORCE_DISCONTINUITY_SEEK_DELAY) {
                playbackRateUpdater.stopRebuffering();
                src_log.debug("Init: letting the device get out of a stall by itself");
                return { type: "stalled",
                    value: stalledReason };
            }
            else {
                src_log.warn("Init: ignored stall for too long, checking discontinuity", now - ignoredStallTimeStamp);
            }
        }
        ignoredStallTimeStamp = null;
        playbackRateUpdater.startRebuffering();
        if (manifest === null) {
            return { type: "stalled",
                value: stalledReason };
        }
        /** Position at which data is awaited. */
        const { position: stalledPosition } = rebuffering;
        if (stalledPosition !== null &&
            stalledPosition !== undefined &&
            speed.getValue() > 0) {
            const skippableDiscontinuity = findSeekableDiscontinuity(discontinuitiesStore, manifest, stalledPosition);
            if (skippableDiscontinuity !== null) {
                const realSeekTime = skippableDiscontinuity + 0.001;
                if (realSeekTime <= playbackObserver.getCurrentTime()) {
                    src_log.info("Init: position to seek already reached, no seeking", playbackObserver.getCurrentTime(), realSeekTime);
                }
                else {
                    src_log.warn("SA: skippable discontinuity found in the stream", position, realSeekTime);
                    playbackObserver.setCurrentTime(realSeekTime);
                    return stream_events_generators.warning(generateDiscontinuityError(stalledPosition, realSeekTime));
                }
            }
        }
        const freezePosition = stalledPosition !== null && stalledPosition !== void 0 ? stalledPosition : position;
        // Is it a very short discontinuity in buffer ? -> Seek at the beginning of the
        //                                                 next range
        //
        // Discontinuity check in case we are close a buffered range but still
        // calculate a stalled state. This is useful for some
        // implementation that might drop an injected segment, or in
        // case of small discontinuity in the content.
        const nextBufferRangeGap = getNextRangeGap(buffered, freezePosition);
        if (speed.getValue() > 0 &&
            nextBufferRangeGap < BUFFER_DISCONTINUITY_THRESHOLD) {
            const seekTo = (freezePosition + nextBufferRangeGap + rebuffering_controller_EPSILON);
            if (playbackObserver.getCurrentTime() < seekTo) {
                src_log.warn("Init: discontinuity encountered inferior to the threshold", freezePosition, seekTo, BUFFER_DISCONTINUITY_THRESHOLD);
                playbackObserver.setCurrentTime(seekTo);
                return stream_events_generators.warning(generateDiscontinuityError(freezePosition, seekTo));
            }
        }
        // Are we in a discontinuity between periods ? -> Seek at the beginning of the
        //                                                next period
        for (let i = manifest.periods.length - 2; i >= 0; i--) {
            const period = manifest.periods[i];
            if (period.end !== undefined && period.end <= freezePosition) {
                if (manifest.periods[i + 1].start > freezePosition &&
                    manifest.periods[i + 1].start > playbackObserver.getCurrentTime()) {
                    const nextPeriod = manifest.periods[i + 1];
                    playbackObserver.setCurrentTime(nextPeriod.start);
                    return stream_events_generators.warning(generateDiscontinuityError(freezePosition, nextPeriod.start));
                }
                break;
            }
        }
        return { type: "stalled",
            value: stalledReason };
    }));
    return merge(unlock$, stall$)
        .pipe(finalize(() => {
        playbackRateUpdater.dispose();
    }));
}
/**
 * @param {Array.<Object>} discontinuitiesStore
 * @param {Object} manifest
 * @param {number} stalledPosition
 * @returns {number|null}
 */
function findSeekableDiscontinuity(discontinuitiesStore, manifest, stalledPosition) {
    if (discontinuitiesStore.length === 0) {
        return null;
    }
    let maxDiscontinuityEnd = null;
    for (let i = 0; i < discontinuitiesStore.length; i++) {
        const { period } = discontinuitiesStore[i];
        if (period.start > stalledPosition) {
            return maxDiscontinuityEnd;
        }
        let discontinuityEnd;
        if (period.end === undefined || period.end > stalledPosition) {
            const { discontinuity, position } = discontinuitiesStore[i];
            const { start, end } = discontinuity;
            const discontinuityLowerLimit = start !== null && start !== void 0 ? start : position;
            if (stalledPosition >= (discontinuityLowerLimit - rebuffering_controller_EPSILON)) {
                if (end === null) {
                    const nextPeriod = manifest.getPeriodAfter(period);
                    if (nextPeriod !== null) {
                        discontinuityEnd = nextPeriod.start + rebuffering_controller_EPSILON;
                    }
                    else {
                        src_log.warn("Init: discontinuity at Period's end but no next Period");
                    }
                }
                else if (stalledPosition < (end + rebuffering_controller_EPSILON)) {
                    discontinuityEnd = end + rebuffering_controller_EPSILON;
                }
            }
            if (discontinuityEnd !== undefined) {
                src_log.info("Init: discontinuity found", stalledPosition, discontinuityEnd);
                maxDiscontinuityEnd =
                    maxDiscontinuityEnd !== null &&
                        maxDiscontinuityEnd > discontinuityEnd ? maxDiscontinuityEnd :
                        discontinuityEnd;
            }
        }
    }
    return maxDiscontinuityEnd;
}
/**
 * Return `true` if the given event indicates that a discontinuity is present.
 * @param {Object} evt
 * @returns {Array.<Object>}
 */
function eventContainsDiscontinuity(evt) {
    return evt.discontinuity !== null;
}
/**
 * Update the `discontinuitiesStore` Object with the given event information:
 *
 *   - If that event indicates than no discontinuity is found for a Period
 *     and buffer type, remove a possible existing discontinuity for that
 *     combination.
 *
 *   - If that event indicates that a discontinuity can be found for a Period
 *     and buffer type, replace previous occurences for that combination and
 *     store it in Period's chronological order in the Array.
 * @param {Array.<Object>} discontinuitiesStore
 * @param {Object} evt
 * @param {Object} observation
 * @returns {Array.<Object>}
 */
function updateDiscontinuitiesStore(discontinuitiesStore, evt, observation) {
    // First, perform clean-up of old discontinuities
    while (discontinuitiesStore.length > 0 &&
        discontinuitiesStore[0].period.end !== undefined &&
        discontinuitiesStore[0].period.end + 10 < observation.position) {
        discontinuitiesStore.shift();
    }
    const { period, bufferType } = evt;
    if (bufferType !== "audio" && bufferType !== "video") {
        return discontinuitiesStore;
    }
    for (let i = 0; i < discontinuitiesStore.length; i++) {
        if (discontinuitiesStore[i].period.id === period.id) {
            if (discontinuitiesStore[i].bufferType === bufferType) {
                if (!eventContainsDiscontinuity(evt)) {
                    discontinuitiesStore.splice(i, 1);
                }
                else {
                    discontinuitiesStore[i] = evt;
                }
                return discontinuitiesStore;
            }
        }
        else if (discontinuitiesStore[i].period.start > period.start) {
            if (eventContainsDiscontinuity(evt)) {
                discontinuitiesStore.splice(i, 0, evt);
            }
            return discontinuitiesStore;
        }
    }
    if (eventContainsDiscontinuity(evt)) {
        discontinuitiesStore.push(evt);
    }
    return discontinuitiesStore;
}
/**
 * Generate error emitted when a discontinuity has been encountered.
 * @param {number} stalledPosition
 * @param {number} seekTo
 * @returns {Error}
 */
function generateDiscontinuityError(stalledPosition, seekTo) {
    return new MediaError("DISCONTINUITY_ENCOUNTERED", "A discontinuity has been encountered at position " +
        String(stalledPosition) + ", seeked at position " +
        String(seekTo));
}
/**
 * Manage playback speed, allowing to force a playback rate of `0` when
 * rebuffering is wanted.
 *
 * Only one `PlaybackRateUpdater` should be created per HTMLMediaElement.
 * Note that the `PlaybackRateUpdater` reacts to playback event and wanted
 * speed change. You should call its `dispose` method once you don't need it
 * anymore.
 * @class PlaybackRateUpdater
 */
class PlaybackRateUpdater {
    /**
     * Create a new `PlaybackRateUpdater`.
     * @param {Object} playbackObserver
     * @param {Object} speed
     */
    constructor(playbackObserver, speed) {
        this._speedUpdateCanceller = new TaskCanceller();
        this._isRebuffering = false;
        this._playbackObserver = playbackObserver;
        this._isDisposed = false;
        this._speed = speed;
        this._updateSpeed();
    }
    /**
     * Force the playback rate to `0`, to start a rebuffering phase.
     *
     * You can call `stopRebuffering` when you want the rebuffering phase to end.
     */
    startRebuffering() {
        if (this._isRebuffering || this._isDisposed) {
            return;
        }
        this._isRebuffering = true;
        this._speedUpdateCanceller.cancel();
        src_log.info("Init: Pause playback to build buffer");
        this._playbackObserver.setPlaybackRate(0);
    }
    /**
     * If in a rebuffering phase (during which the playback rate is forced to
     * `0`), exit that phase to apply the wanted playback rate instead.
     *
     * Do nothing if not in a rebuffering phase.
     */
    stopRebuffering() {
        if (!this._isRebuffering || this._isDisposed) {
            return;
        }
        this._isRebuffering = false;
        this._speedUpdateCanceller = new TaskCanceller();
        this._updateSpeed();
    }
    /**
     * The `PlaybackRateUpdater` allocate resources to for example listen to
     * wanted speed changes and react to it.
     *
     * Consequently, you should call the `dispose` method, when you don't want the
     * `PlaybackRateUpdater` to have an effect anymore.
     */
    dispose() {
        this._speedUpdateCanceller.cancel();
        this._isDisposed = true;
    }
    _updateSpeed() {
        this._speed.onUpdate((lastSpeed) => {
            src_log.info("Init: Resume playback speed", lastSpeed);
            this._playbackObserver.setPlaybackRate(lastSpeed);
        }, { clearSignal: this._speedUpdateCanceller.signal, emitCurrentValue: true });
    }
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/pairwise.js


function pairwise() {
  return operate(function (source, subscriber) {
    var prev;
    var hasPrev = false;
    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
      var p = prev;
      prev = value;
      hasPrev && subscriber.next([p, value]);
      hasPrev = true;
    }));
  });
}
;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/are_same_stream_events.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Compare 2 events.
 * As the payload of two events may be the same, but the JS objects may not
 * have the same references, it may be difficult to compare them.
 * If two events start and end at the same moment, and possess the same id,
 * we consider the two to be the same.
 * /!\ However, the DASH-if spec does not say that the event payload
 * may be the same if these conditions are met. Thus, there are high chances
 * that it may be the case.
 * TODO See if we can compare payloads
 * @param {Object} evt1
 * @param {Object} evt2
 * @returns {Boolean}
 */
function areSameStreamEvents(evt1, evt2) {
    return evt1.id === evt2.id &&
        evt1.start === evt2.start &&
        evt1.end === evt2.end;
}
/* harmony default export */ const are_same_stream_events = (areSameStreamEvents);

;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/refresh_scheduled_events_list.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Refresh local scheduled events list
 * @param {Array.<Object>} oldScheduledEvents
 * @param {Object} manifest
 * @returns {Array.<Object>}
 */
function refreshScheduledEventsList(oldScheduledEvents, manifest) {
    const scheduledEvents = [];
    const { periods } = manifest;
    for (let i = 0; i < periods.length; i++) {
        const period = periods[i];
        const { streamEvents } = period;
        streamEvents.forEach(({ start, end, id, data }) => {
            for (let j = 0; j < oldScheduledEvents.length; j++) {
                const currentScheduledEvent = oldScheduledEvents[j];
                if (are_same_stream_events(currentScheduledEvent, { id, start, end })) {
                    scheduledEvents.push(currentScheduledEvent);
                    return;
                }
            }
            if (end === undefined) {
                const newScheduledEvent = { start,
                    id,
                    data,
                    publicEvent: { start,
                        data } };
                scheduledEvents.push(newScheduledEvent);
            }
            else {
                const newScheduledEvent = { start,
                    end,
                    id,
                    data,
                    publicEvent: { start,
                        end,
                        data } };
                scheduledEvents.push(newScheduledEvent);
            }
        });
    }
    return scheduledEvents;
}
/* harmony default export */ const refresh_scheduled_events_list = (refreshScheduledEventsList);

;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/stream_events_emitter.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Tells if a stream event has a duration
 * @param {Object} evt
 * @returns {Boolean}
 */
function isFiniteStreamEvent(evt) {
    return evt.end !== undefined;
}
/**
 * Get events from manifest and emit each time an event has to be emitted
 * @param {Object} manifest
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function streamEventsEmitter(manifest, mediaElement, observation$) {
    const eventsBeingPlayed = new WeakMap();
    let lastScheduledEvents = [];
    const scheduledEvents$ = event_emitter_fromEvent(manifest, "manifestUpdate").pipe(startWith(null), scan((oldScheduledEvents) => {
        return refresh_scheduled_events_list(oldScheduledEvents, manifest);
    }, []));
    /**
     * Examine playback situation from playback observations to emit stream events and
     * prepare set onExit callbacks if needed.
     * @param {Array.<Object>} scheduledEvents
     * @param {Object} oldObservation
     * @param {Object} newObservation
     * @returns {Observable}
     */
    function emitStreamEvents$(scheduledEvents, oldObservation, newObservation) {
        const { currentTime: previousTime } = oldObservation;
        const { isSeeking, currentTime } = newObservation;
        const eventsToSend = [];
        const eventsToExit = [];
        for (let i = 0; i < scheduledEvents.length; i++) {
            const event = scheduledEvents[i];
            const start = event.start;
            const end = isFiniteStreamEvent(event) ? event.end :
                undefined;
            const isBeingPlayed = eventsBeingPlayed.has(event);
            if (isBeingPlayed) {
                if (start > currentTime ||
                    (end !== undefined && currentTime >= end)) {
                    if (isFiniteStreamEvent(event)) {
                        eventsToExit.push(event.publicEvent);
                    }
                    eventsBeingPlayed.delete(event);
                }
            }
            else if (start <= currentTime &&
                end !== undefined &&
                currentTime < end) {
                eventsToSend.push({ type: "stream-event",
                    value: event.publicEvent });
                eventsBeingPlayed.set(event, true);
            }
            else if (previousTime < start &&
                currentTime >= (end !== null && end !== void 0 ? end : start)) {
                if (isSeeking) {
                    eventsToSend.push({ type: "stream-event-skip",
                        value: event.publicEvent });
                }
                else {
                    eventsToSend.push({ type: "stream-event",
                        value: event.publicEvent });
                    if (isFiniteStreamEvent(event)) {
                        eventsToExit.push(event.publicEvent);
                    }
                }
            }
        }
        return concat_concat(eventsToSend.length > 0 ? of(...eventsToSend) :
            EMPTY, eventsToExit.length > 0 ? of(...eventsToExit).pipe(tap((evt) => {
            if (typeof evt.onExit === "function") {
                evt.onExit();
            }
        }), 
        // NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
        // first type parameter as `any` instead of the perfectly fine `unknown`,
        // leading to linter issues, as it forbids the usage of `any`.
        // This is why we're disabling the eslint rule.
        /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
        ignoreElements()) : EMPTY);
    }
    /**
     * This pipe allows to control wether the polling should occur, if there
     * are scheduledEvents, or not.
     */
    return scheduledEvents$.pipe(tap((scheduledEvents) => lastScheduledEvents = scheduledEvents), map((evt) => evt.length > 0), distinctUntilChanged(), switchMap((hasEvents) => {
        if (!hasEvents) {
            return EMPTY;
        }
        const { STREAM_EVENT_EMITTER_POLL_INTERVAL } = src_config.getCurrent();
        return combineLatest([
            interval(STREAM_EVENT_EMITTER_POLL_INTERVAL).pipe(startWith(null)),
            observation$,
        ]).pipe(map(([_, observation]) => {
            const { seeking } = observation;
            return { isSeeking: seeking,
                currentTime: mediaElement.currentTime };
        }), pairwise(), mergeMap(([oldObservation, newObservation]) => emitStreamEvents$(lastScheduledEvents, oldObservation, newObservation)));
    }));
}
/* harmony default export */ const stream_events_emitter = (streamEventsEmitter);

;// CONCATENATED MODULE: ./src/core/init/stream_events_emitter/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const init_stream_events_emitter = (stream_events_emitter);

;// CONCATENATED MODULE: ./src/core/init/load_on_media_source.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */














/**
 * Returns a function allowing to load or reload the content in arguments into
 * a single or multiple MediaSources.
 * @param {Object} args
 * @returns {Function}
 */
function createMediaSourceLoader({ mediaElement, manifest, speed, bufferOptions, representationEstimator, playbackObserver, segmentFetcherCreator }) {
    /**
     * Load the content on the given MediaSource.
     * @param {MediaSource} mediaSource
     * @param {number} initialTime
     * @param {boolean} autoPlay
     */
    return function loadContentOnMediaSource(mediaSource, initialTime, autoPlay) {
        var _a;
        /** Maintains the MediaSource's duration up-to-date with the Manifest */
        const mediaDurationUpdater = new MediaDurationUpdater(manifest, mediaSource);
        const initialPeriod = (_a = manifest.getPeriodForTime(initialTime)) !== null && _a !== void 0 ? _a : manifest.getNextPeriod(initialTime);
        if (initialPeriod === undefined) {
            const error = new MediaError("MEDIA_STARTING_TIME_NOT_FOUND", "Wanted starting time not found in the Manifest.");
            return throwError(() => error);
        }
        /** Interface to create media buffers. */
        const segmentBuffersStore = new segment_buffers(mediaElement, mediaSource);
        const { seekAndPlay$, initialPlayPerformed, initialSeekPerformed } = initialSeekAndPlay({ mediaElement,
            playbackObserver,
            startTime: initialTime,
            mustAutoPlay: autoPlay });
        const observation$ = playbackObserver.getReference().asObservable();
        const streamEvents$ = initialPlayPerformed.asObservable().pipe(filter((hasPlayed) => hasPlayed), mergeMap(() => init_stream_events_emitter(manifest, mediaElement, observation$)));
        const streamObserver = createStreamPlaybackObserver(manifest, playbackObserver, { autoPlay,
            initialPlayPerformed,
            initialSeekPerformed,
            speed,
            startTime: initialTime });
        /** Cancel endOfStream calls when streams become active again. */
        const cancelEndOfStream$ = new Subject();
        /** Emits discontinuities detected by the StreamOrchestrator. */
        const discontinuityUpdate$ = new Subject();
        /** Emits event when streams are "locked", meaning they cannot load segments. */
        const lockedStream$ = new Subject();
        /** Emit each time a new Adaptation is considered by the `StreamOrchestrator`. */
        const lastAdaptationChange = createSharedReference(null);
        // Creates Observable which will manage every Stream for the given Content.
        const streams$ = stream({ manifest, initialPeriod }, streamObserver, representationEstimator, segmentBuffersStore, segmentFetcherCreator, bufferOptions).pipe(mergeMap((evt) => {
            switch (evt.type) {
                case "end-of-stream":
                    src_log.debug("Init: end-of-stream order received.");
                    return maintainEndOfStream(mediaSource).pipe(ignoreElements(), takeUntil(cancelEndOfStream$));
                case "resume-stream":
                    src_log.debug("Init: resume-stream order received.");
                    cancelEndOfStream$.next(null);
                    return EMPTY;
                case "stream-status":
                    const { period, bufferType, imminentDiscontinuity, position } = evt.value;
                    discontinuityUpdate$.next({ period,
                        bufferType,
                        discontinuity: imminentDiscontinuity,
                        position });
                    return EMPTY;
                case "locked-stream":
                    lockedStream$.next(evt.value);
                    return EMPTY;
                case "adaptationChange":
                    lastAdaptationChange.setValue(evt);
                    return of(evt);
                default:
                    return of(evt);
            }
        }));
        const contentTimeObserver = ContentTimeBoundariesObserver(manifest, lastAdaptationChange, streamObserver)
            .pipe(mergeMap((evt) => {
            if (evt.type === "contentDurationUpdate") {
                src_log.debug("Init: Duration has to be updated.", evt.value);
                mediaDurationUpdater.updateKnownDuration(evt.value);
                return EMPTY;
            }
            return of(evt);
        }));
        /**
         * Observable trying to avoid various stalling situations, emitting "stalled"
         * events when it cannot, as well as "unstalled" events when it get out of one.
         */
        const rebuffer$ = RebufferingController(playbackObserver, manifest, speed, lockedStream$, discontinuityUpdate$);
        /**
         * Emit a "loaded" events once the initial play has been performed and the
         * media can begin playback.
         * Also emits warning events if issues arise when doing so.
         */
        const loadingEvts$ = seekAndPlay$.pipe(switchMap((evt) => evt.type === "warning" ?
            of(evt) :
            emitLoadedEvent(observation$, mediaElement, segmentBuffersStore, false)));
        return merge(loadingEvts$, rebuffer$, streams$, contentTimeObserver, streamEvents$).pipe(finalize(() => {
            mediaDurationUpdater.stop();
            // clean-up every created SegmentBuffers
            segmentBuffersStore.disposeAll();
        }));
    };
}

;// CONCATENATED MODULE: ./src/utils/rx-throttle.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function throttle(func) {
    let isPending = false;
    return (...args) => {
        return new Observable_Observable((obs) => {
            if (isPending) {
                obs.complete();
                return undefined;
            }
            isPending = true;
            const funcSubscription = func(...args)
                .subscribe({
                next: (i) => { obs.next(i); },
                error: (e) => {
                    isPending = false;
                    obs.error(e);
                },
                complete: () => {
                    isPending = false;
                    obs.complete();
                },
            });
            return () => {
                funcSubscription.unsubscribe();
                isPending = false;
            };
        });
    };
}

;// CONCATENATED MODULE: ./src/core/init/manifest_update_scheduler.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Refresh the Manifest at the right time.
 * @param {Object} manifestUpdateSchedulerArguments
 * @returns {Observable}
 */
function manifestUpdateScheduler({ initialManifest, manifestFetcher, minimumManifestUpdateInterval, scheduleRefresh$, }) {
    /**
     * Fetch and parse the manifest from the URL given.
     * Throttled to avoid doing multiple simultaneous requests.
     */
    const fetchManifest = throttle((manifestURL, options) => manifestFetcher.fetch(manifestURL).pipe(mergeMap((response) => response.type === "warning" ?
        of(response) : // bubble-up warnings
        response.parse(options)), share()));
    // The Manifest always keeps the same reference
    const { manifest } = initialManifest;
    /** Number of consecutive times the parsing has been done in `unsafeMode`. */
    let consecutiveUnsafeMode = 0;
    return defer(() => handleManifestRefresh$(initialManifest));
    /**
     * Performs Manifest refresh (recursively) when it judges it is time to do so.
     * @param {Object} manifestRequestInfos - Various information linked to the
     * Manifest loading and parsing operations.
     * @returns {Observable} - Observable which will automatically refresh the
     * Manifest on subscription. Can also emit warnings when minor errors are
     * encountered.
     */
    function handleManifestRefresh$({ sendingTime, parsingTime, updatingTime }) {
        /**
         * Total time taken to fully update the last Manifest, in milliseconds.
         * Note: this time also includes possible requests done by the parsers.
         */
        const totalUpdateTime = parsingTime !== undefined ?
            parsingTime + (updatingTime !== null && updatingTime !== void 0 ? updatingTime : 0) :
            undefined;
        const { MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE, MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE } = src_config.getCurrent();
        /**
         * "unsafeMode" is a mode where we unlock advanced Manifest parsing
         * optimizations with the added risk to lose some information.
         * `unsafeModeEnabled` is set to `true` when the `unsafeMode` is enabled.
         *
         * Only perform parsing in `unsafeMode` when the last full parsing took a
         * lot of time and do not go higher than the maximum consecutive time.
         */
        const unsafeModeEnabled = consecutiveUnsafeMode > 0 ?
            consecutiveUnsafeMode < MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE :
            totalUpdateTime !== undefined ?
                (totalUpdateTime >= MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE) :
                false;
        /** Time elapsed since the beginning of the Manifest request, in milliseconds. */
        const timeSinceRequest = sendingTime === undefined ? 0 :
            performance.now() - sendingTime;
        /** Minimum update delay we should not go below, in milliseconds. */
        const minInterval = Math.max(minimumManifestUpdateInterval - timeSinceRequest, 0);
        /** Emit when the RxPlayer determined that a refresh should be done. */
        const internalRefresh$ = scheduleRefresh$
            .pipe(mergeMap(({ completeRefresh, delay, canUseUnsafeMode }) => {
            const unsafeMode = canUseUnsafeMode && unsafeModeEnabled;
            return startManualRefreshTimer(delay !== null && delay !== void 0 ? delay : 0, minimumManifestUpdateInterval, sendingTime)
                .pipe(map(() => ({ completeRefresh, unsafeMode })));
        }));
        /** Emit when the Manifest tells us that it has "expired". */
        const expired$ = manifest.expired === null ?
            EMPTY :
            timer(minInterval).pipe(mergeMap(() => manifest.expired === null ? EMPTY :
                from(manifest.expired)), map(() => ({ completeRefresh: true, unsafeMode: unsafeModeEnabled })));
        /** Emit when the Manifest should normally be refreshed. */
        const autoRefresh$ = createAutoRefreshObservable();
        return merge(autoRefresh$, internalRefresh$, expired$).pipe(take(1), mergeMap(({ completeRefresh, unsafeMode }) => refreshManifest({ completeRefresh,
            unsafeMode })), mergeMap(evt => {
            if (evt.type === "warning") {
                return of(evt);
            }
            return handleManifestRefresh$(evt);
        }));
        /**
         * Create an Observable that will emit when the Manifest needs to be
         * refreshed according to the Manifest's internal properties (parsing
         * time is also taken into account in this operation to avoid refreshing too
         * often).
         * @returns {Observable}
         */
        function createAutoRefreshObservable() {
            if (manifest.lifetime === undefined || manifest.lifetime < 0) {
                return EMPTY;
            }
            /** Regular refresh delay as asked by the Manifest. */
            const regularRefreshDelay = manifest.lifetime * 1000 - timeSinceRequest;
            /** Actually choosen delay to refresh the Manifest. */
            let actualRefreshInterval;
            if (totalUpdateTime === undefined) {
                actualRefreshInterval = regularRefreshDelay;
            }
            else if (manifest.lifetime < 3 && totalUpdateTime >= 100) {
                // If Manifest update is very frequent and we take time to update it,
                // postpone it.
                actualRefreshInterval = Math.min(Math.max(
                // Take 3 seconds as a default safe value for a base interval.
                3000 - timeSinceRequest, 
                // Add update time to the original interval.
                Math.max(regularRefreshDelay, 0) + totalUpdateTime), 
                // Limit the postponment's higher bound to a very high value relative
                // to `regularRefreshDelay`.
                // This avoid perpetually postponing a Manifest update when
                // performance seems to have been abysmal one time.
                regularRefreshDelay * 6);
                src_log.info("MUS: Manifest update rythm is too frequent. Postponing next request.", regularRefreshDelay, actualRefreshInterval);
            }
            else if (totalUpdateTime >= (manifest.lifetime * 1000) / 10) {
                // If Manifest updating time is very long relative to its lifetime,
                // postpone it:
                actualRefreshInterval = Math.min(
                // Just add the update time to the original waiting time
                Math.max(regularRefreshDelay, 0) + totalUpdateTime, 
                // Limit the postponment's higher bound to a very high value relative
                // to `regularRefreshDelay`.
                // This avoid perpetually postponing a Manifest update when
                // performance seems to have been abysmal one time.
                regularRefreshDelay * 6);
                src_log.info("MUS: Manifest took too long to parse. Postponing next request", actualRefreshInterval, actualRefreshInterval);
            }
            else {
                actualRefreshInterval = regularRefreshDelay;
            }
            return timer(Math.max(actualRefreshInterval, minInterval))
                .pipe(map(() => ({ completeRefresh: false, unsafeMode: unsafeModeEnabled })));
        }
    }
    /**
     * Refresh the Manifest.
     * Perform a full update if a partial update failed.
     * @param {boolean} completeRefresh
     * @returns {Observable}
     */
    function refreshManifest({ completeRefresh, unsafeMode }) {
        const manifestUpdateUrl = manifest.updateUrl;
        const fullRefresh = completeRefresh || manifestUpdateUrl === undefined;
        const refreshURL = fullRefresh ? manifest.getUrl() :
            manifestUpdateUrl;
        const externalClockOffset = manifest.clockOffset;
        if (unsafeMode) {
            consecutiveUnsafeMode += 1;
            src_log.info("Init: Refreshing the Manifest in \"unsafeMode\" for the " +
                String(consecutiveUnsafeMode) + " consecutive time.");
        }
        else if (consecutiveUnsafeMode > 0) {
            src_log.info("Init: Not parsing the Manifest in \"unsafeMode\" anymore after " +
                String(consecutiveUnsafeMode) + " consecutive times.");
            consecutiveUnsafeMode = 0;
        }
        return fetchManifest(refreshURL, { externalClockOffset,
            previousManifest: manifest,
            unsafeMode })
            .pipe(mergeMap((value) => {
            if (value.type === "warning") {
                return of(value);
            }
            const { manifest: newManifest, sendingTime: newSendingTime, receivedTime, parsingTime } = value;
            const updateTimeStart = performance.now();
            if (fullRefresh) {
                manifest.replace(newManifest);
            }
            else {
                try {
                    manifest.update(newManifest);
                }
                catch (e) {
                    const message = e instanceof Error ? e.message :
                        "unknown error";
                    src_log.warn(`MUS: Attempt to update Manifest failed: ${message}`, "Re-downloading the Manifest fully");
                    const { FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY } = src_config.getCurrent();
                    return startManualRefreshTimer(FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY, minimumManifestUpdateInterval, newSendingTime)
                        .pipe(mergeMap(() => refreshManifest({ completeRefresh: true, unsafeMode: false })));
                }
            }
            return of({ type: "parsed",
                manifest,
                sendingTime: newSendingTime,
                receivedTime,
                parsingTime,
                updatingTime: performance.now() - updateTimeStart });
        }));
    }
}
/**
 * Launch a timer Observable which will emit when it is time to refresh the
 * Manifest.
 * The timer's delay is calculated from:
 *   - a target delay (`wantedDelay`), which is the minimum time we want to wait
 *     in the best scenario
 *   - the minimum set possible interval between manifest updates
 *     (`minimumManifestUpdateInterval`)
 *   - the time at which was done the last Manifest refresh
 *     (`lastManifestRequestTime`)
 * @param {number} wantedDelay
 * @param {number} minimumManifestUpdateInterval
 * @param {number|undefined} lastManifestRequestTime
 * @returns {Observable}
 */
function startManualRefreshTimer(wantedDelay, minimumManifestUpdateInterval, lastManifestRequestTime) {
    return defer(() => {
        // The value allows to set a delay relatively to the last Manifest refresh
        // (to avoid asking for it too often).
        const timeSinceLastRefresh = lastManifestRequestTime === undefined ?
            0 :
            performance.now() - lastManifestRequestTime;
        const _minInterval = Math.max(minimumManifestUpdateInterval - timeSinceLastRefresh, 0);
        return timer(Math.max(wantedDelay - timeSinceLastRefresh, _minInterval));
    });
}

;// CONCATENATED MODULE: ./src/core/init/throw_on_media_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Returns an observable which throws the right MediaError as soon an "error"
 * event is received through the media element.
 * @param {HTMLMediaElement} mediaElement
 * @returns {Observable}
 */
function throwOnMediaError(mediaElement) {
    return fromEvent(mediaElement, "error")
        .pipe(mergeMap(() => {
        const mediaError = mediaElement.error;
        let errorCode;
        let errorMessage;
        if (!isNullOrUndefined(mediaError)) {
            errorCode = mediaError.code;
            errorMessage = mediaError.message;
        }
        switch (errorCode) {
            case 1:
                errorMessage = errorMessage !== null && errorMessage !== void 0 ? errorMessage : "The fetching of the associated resource was aborted by the user's request.";
                throw new MediaError("MEDIA_ERR_ABORTED", errorMessage);
            case 2:
                errorMessage = errorMessage !== null && errorMessage !== void 0 ? errorMessage : "A network error occurred which prevented the media from being " +
                    "successfully fetched";
                throw new MediaError("MEDIA_ERR_NETWORK", errorMessage);
            case 3:
                errorMessage = errorMessage !== null && errorMessage !== void 0 ? errorMessage : "An error occurred while trying to decode the media resource";
                throw new MediaError("MEDIA_ERR_DECODE", errorMessage);
            case 4:
                errorMessage = errorMessage !== null && errorMessage !== void 0 ? errorMessage : "The media resource has been found to be unsuitable.";
                throw new MediaError("MEDIA_ERR_SRC_NOT_SUPPORTED", errorMessage);
            default:
                errorMessage = errorMessage !== null && errorMessage !== void 0 ? errorMessage : "The HTMLMediaElement errored due to an unknown reason.";
                throw new MediaError("MEDIA_ERR_UNKNOWN", errorMessage);
        }
    }));
}

;// CONCATENATED MODULE: ./src/core/init/initialize_media_source.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



















/**
 * Begin content playback.
 *
 * Returns an Observable emitting notifications about the content lifecycle.
 * On subscription, it will perform every necessary tasks so the content can
 * play. Among them:
 *
 *   - Creates a MediaSource on the given `mediaElement` and attach to it the
 *     necessary SourceBuffer instances.
 *
 *   - download the content's Manifest and handle its refresh logic
 *
 *   - Perform decryption if needed
 *
 *   - ask for the choice of the wanted Adaptation through events (e.g. to
 *     choose a language)
 *
 *   - requests and push the right segments (according to the Adaptation choice,
 *     the current position, the network conditions etc.)
 *
 * This Observable will throw in the case where a fatal error (i.e. which has
 * stopped content playback) is encountered, with the corresponding error as a
 * payload.
 *
 * This Observable will never complete, it will always run until it is
 * unsubscribed from.
 * Unsubscription will stop playback and reset the corresponding state.
 *
 * @param {Object} args
 * @returns {Observable}
 */
function InitializeOnMediaSource({ adaptiveOptions, autoPlay, bufferOptions, keySystems, lowLatencyMode, manifest$, manifestFetcher, mediaElement, minimumManifestUpdateInterval, playbackObserver, segmentRequestOptions, speed, startAt, transport, textTrackOptions }) {
    /** Choose the right "Representation" for a given "Adaptation". */
    const representationEstimator = adaptive(adaptiveOptions);
    const playbackCanceller = new TaskCanceller();
    /**
     * Create and open a new MediaSource object on the given media element on
     * subscription.
     * Multiple concurrent subscriptions on this Observable will obtain the same
     * created MediaSource.
     * The MediaSource will be closed when subscriptions are down to 0.
     */
    const openMediaSource$ = openMediaSource(mediaElement).pipe(shareReplay({ refCount: true }));
    /** Send content protection initialization data. */
    const protectedSegments$ = new Subject();
    /** Initialize decryption capabilities and MediaSource. */
    const drmEvents$ = linkDrmAndContent(mediaElement, keySystems, protectedSegments$, openMediaSource$)
        .pipe(
    // Because multiple Observables here depend on this Observable as a source,
    // we prefer deferring Subscription until those Observables are themselves
    // all subscribed to.
    // This is needed because `drmEvents$` might send events synchronously
    // on subscription. In that case, it might communicate those events directly
    // after the first Subscription is done, making the next subscription miss
    // out on those events, even if that second subscription is done
    // synchronously after the first one.
    // By calling `deferSubscriptions`, we ensure that subscription to
    // `drmEvents$` effectively starts after a very short delay, thus
    // ensuring that no such race condition can occur.
    deferSubscriptions(), share());
    /**
     * Translate errors coming from the media element into RxPlayer errors
     * through a throwing Observable.
     */
    const mediaError$ = throwOnMediaError(mediaElement);
    const mediaSourceReady$ = drmEvents$.pipe(filter((evt) => evt.type === "decryption-ready" || evt.type === "decryption-disabled"), map(e => e.value), take(1));
    /** Load and play the content asked. */
    const loadContent$ = combineLatest([manifest$, mediaSourceReady$]).pipe(mergeMap(([manifestEvt, { drmSystemId, mediaSource: initialMediaSource }]) => {
        if (manifestEvt.type === "warning") {
            return of(manifestEvt);
        }
        const { manifest } = manifestEvt;
        src_log.debug("Init: Calculating initial time");
        const initialTime = getInitialTime(manifest, lowLatencyMode, startAt);
        src_log.debug("Init: Initial time calculated:", initialTime);
        const requestOptions = { lowLatencyMode,
            requestTimeout: segmentRequestOptions.requestTimeout,
            maxRetryRegular: segmentRequestOptions.regularError,
            maxRetryOffline: segmentRequestOptions.offlineError };
        const segmentFetcherCreator = new segment(transport, requestOptions, playbackCanceller.signal);
        const mediaSourceLoader = createMediaSourceLoader({
            bufferOptions: object_assign({ textTrackOptions, drmSystemId }, bufferOptions),
            manifest,
            mediaElement,
            playbackObserver,
            representationEstimator,
            segmentFetcherCreator,
            speed,
        });
        // handle initial load and reloads
        const recursiveLoad$ = recursivelyLoadOnMediaSource(initialMediaSource, initialTime, autoPlay);
        // Emit when we want to manually update the manifest.
        const scheduleRefresh$ = new Subject();
        const manifestUpdate$ = manifestUpdateScheduler({ initialManifest: manifestEvt,
            manifestFetcher,
            minimumManifestUpdateInterval,
            scheduleRefresh$ });
        const manifestEvents$ = merge(event_emitter_fromEvent(manifest, "manifestUpdate")
            .pipe(map(() => events_generators.manifestUpdate())), event_emitter_fromEvent(manifest, "decipherabilityUpdate")
            .pipe(map(events_generators.decipherabilityUpdate)));
        return merge(manifestEvents$, manifestUpdate$, recursiveLoad$)
            .pipe(startWith(events_generators.manifestReady(manifest)), finalize(() => { scheduleRefresh$.complete(); }));
        /**
         * Load the content defined by the Manifest in the mediaSource given at the
         * given position and playing status.
         * This function recursively re-call itself when a MediaSource reload is
         * wanted.
         * @param {MediaSource} mediaSource
         * @param {number} startingPos
         * @param {boolean} shouldPlay
         * @returns {Observable}
         */
        function recursivelyLoadOnMediaSource(mediaSource, startingPos, shouldPlay) {
            const reloadMediaSource$ = new Subject();
            const mediaSourceLoader$ = mediaSourceLoader(mediaSource, startingPos, shouldPlay)
                .pipe(filterMap((evt) => {
                switch (evt.type) {
                    case "needs-manifest-refresh":
                        scheduleRefresh$.next({ completeRefresh: false,
                            canUseUnsafeMode: true });
                        return null;
                    case "manifest-might-be-out-of-sync":
                        const { OUT_OF_SYNC_MANIFEST_REFRESH_DELAY } = src_config.getCurrent();
                        scheduleRefresh$.next({
                            completeRefresh: true,
                            canUseUnsafeMode: false,
                            delay: OUT_OF_SYNC_MANIFEST_REFRESH_DELAY,
                        });
                        return null;
                    case "needs-media-source-reload":
                        reloadMediaSource$.next(evt.value);
                        return null;
                    case "needs-decipherability-flush":
                        const keySystem = getCurrentKeySystem(mediaElement);
                        if (shouldReloadMediaSourceOnDecipherabilityUpdate(keySystem)) {
                            reloadMediaSource$.next(evt.value);
                            return null;
                        }
                        // simple seek close to the current position
                        // to flush the buffers
                        const { position } = evt.value;
                        if (position + 0.001 < evt.value.duration) {
                            playbackObserver.setCurrentTime(mediaElement.currentTime + 0.001);
                        }
                        else {
                            playbackObserver.setCurrentTime(position);
                        }
                        return null;
                    case "encryption-data-encountered":
                        protectedSegments$.next(evt.value);
                        return null;
                    case "needs-buffer-flush":
                        playbackObserver.setCurrentTime(mediaElement.currentTime + 0.001);
                        return null;
                }
                return evt;
            }, null));
            const currentLoad$ = mediaSourceLoader$.pipe(takeUntil(reloadMediaSource$));
            const handleReloads$ = reloadMediaSource$.pipe(switchMap((reloadOrder) => {
                return openMediaSource(mediaElement).pipe(mergeMap(newMS => recursivelyLoadOnMediaSource(newMS, reloadOrder.position, reloadOrder.autoPlay)), startWith(events_generators.reloadingMediaSource()));
            }));
            return merge(handleReloads$, currentLoad$);
        }
    }));
    return merge(loadContent$, mediaError$, drmEvents$.pipe(ignoreElements()))
        .pipe(finalize(() => { playbackCanceller.cancel(); }));
}

;// CONCATENATED MODULE: ./src/core/init/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const init = (InitializeOnMediaSource);

;// CONCATENATED MODULE: ./src/core/api/option_utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file exports various helpers to parse options given to various APIs,
 * throw if something is wrong, and return a normalized option object.
 */







/**
 * Parse options given to the API constructor and set default options as found
 * in the config.
 *
 * Do not mutate anything, only cross the given options and sane default options
 * (most coming from the config).
 * @param {Object|undefined} options
 * @returns {Object}
 */
function parseConstructorOptions(options) {
    let maxBufferAhead;
    let maxBufferBehind;
    let wantedBufferAhead;
    let maxVideoBufferSize;
    let throttleWhenHidden;
    let throttleVideoBitrateWhenHidden;
    let preferredAudioTracks;
    let preferredTextTracks;
    let preferredVideoTracks;
    let videoElement;
    let initialVideoBitrate;
    let initialAudioBitrate;
    let minAudioBitrate;
    let minVideoBitrate;
    let maxAudioBitrate;
    let maxVideoBitrate;
    const { DEFAULT_INITIAL_BITRATES, DEFAULT_LIMIT_VIDEO_WIDTH, DEFAULT_MIN_BITRATES, DEFAULT_MAX_BITRATES, DEFAULT_MAX_BUFFER_AHEAD, DEFAULT_MAX_BUFFER_BEHIND, DEFAULT_MAX_VIDEO_BUFFER_SIZE, DEFAULT_STOP_AT_END, DEFAULT_THROTTLE_WHEN_HIDDEN, DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN, DEFAULT_WANTED_BUFFER_AHEAD } = src_config.getCurrent();
    if (isNullOrUndefined(options.maxBufferAhead)) {
        maxBufferAhead = DEFAULT_MAX_BUFFER_AHEAD;
    }
    else {
        maxBufferAhead = Number(options.maxBufferAhead);
        if (isNaN(maxBufferAhead)) {
            throw new Error("Invalid maxBufferAhead parameter. Should be a number.");
        }
    }
    if (isNullOrUndefined(options.maxBufferBehind)) {
        maxBufferBehind = DEFAULT_MAX_BUFFER_BEHIND;
    }
    else {
        maxBufferBehind = Number(options.maxBufferBehind);
        if (isNaN(maxBufferBehind)) {
            throw new Error("Invalid maxBufferBehind parameter. Should be a number.");
        }
    }
    if (isNullOrUndefined(options.wantedBufferAhead)) {
        wantedBufferAhead = DEFAULT_WANTED_BUFFER_AHEAD;
    }
    else {
        wantedBufferAhead = Number(options.wantedBufferAhead);
        if (isNaN(wantedBufferAhead)) {
            /* eslint-disable max-len */
            throw new Error("Invalid wantedBufferAhead parameter. Should be a number.");
            /* eslint-enable max-len */
        }
    }
    if (isNullOrUndefined(options.maxVideoBufferSize)) {
        maxVideoBufferSize = DEFAULT_MAX_VIDEO_BUFFER_SIZE;
    }
    else {
        maxVideoBufferSize = Number(options.maxVideoBufferSize);
        if (isNaN(maxVideoBufferSize)) {
            /* eslint-disable max-len */
            throw new Error("Invalid maxVideoBufferSize parameter. Should be a number.");
            /* eslint-enable max-len */
        }
    }
    const limitVideoWidth = isNullOrUndefined(options.limitVideoWidth) ?
        DEFAULT_LIMIT_VIDEO_WIDTH :
        !!options.limitVideoWidth;
    if (!isNullOrUndefined(options.throttleWhenHidden)) {
        warnOnce("`throttleWhenHidden` API is deprecated. Consider using " +
            "`throttleVideoBitrateWhenHidden` instead.");
        throttleWhenHidden = !!options.throttleWhenHidden;
    }
    else {
        throttleWhenHidden = DEFAULT_THROTTLE_WHEN_HIDDEN;
    }
    // `throttleWhenHidden` and `throttleVideoBitrateWhenHidden` can be in conflict
    // Do not activate the latter if the former is
    if (throttleWhenHidden) {
        throttleVideoBitrateWhenHidden = false;
    }
    else {
        throttleVideoBitrateWhenHidden =
            isNullOrUndefined(options.throttleVideoBitrateWhenHidden) ?
                DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN :
                !!options.throttleVideoBitrateWhenHidden;
    }
    if (options.preferredTextTracks !== undefined) {
        if (!Array.isArray(options.preferredTextTracks)) {
            warnOnce("Invalid `preferredTextTracks` option, it should be an Array");
            preferredTextTracks = [];
        }
        else {
            preferredTextTracks = options.preferredTextTracks;
        }
    }
    else {
        preferredTextTracks = [];
    }
    if (options.preferredAudioTracks !== undefined) {
        if (!Array.isArray(options.preferredAudioTracks)) {
            warnOnce("Invalid `preferredAudioTracks` option, it should be an Array");
            preferredAudioTracks = [];
        }
        else {
            preferredAudioTracks = options.preferredAudioTracks;
        }
    }
    else {
        preferredAudioTracks = [];
    }
    if (options.preferredVideoTracks !== undefined) {
        if (!Array.isArray(options.preferredVideoTracks)) {
            warnOnce("Invalid `preferredVideoTracks` option, it should be an Array");
            preferredVideoTracks = [];
        }
        else {
            preferredVideoTracks = options.preferredVideoTracks;
        }
    }
    else {
        preferredVideoTracks = [];
    }
    if (isNullOrUndefined(options.videoElement)) {
        videoElement = document.createElement("video");
    }
    else if (options.videoElement instanceof HTMLMediaElement) {
        videoElement = options.videoElement;
    }
    else {
        /* eslint-disable max-len */
        throw new Error("Invalid videoElement parameter. Should be a HTMLMediaElement.");
        /* eslint-enable max-len */
    }
    if (isNullOrUndefined(options.initialVideoBitrate)) {
        initialVideoBitrate = DEFAULT_INITIAL_BITRATES.video;
    }
    else {
        initialVideoBitrate = Number(options.initialVideoBitrate);
        if (isNaN(initialVideoBitrate)) {
            /* eslint-disable max-len */
            throw new Error("Invalid initialVideoBitrate parameter. Should be a number.");
            /* eslint-enable max-len */
        }
    }
    if (isNullOrUndefined(options.initialAudioBitrate)) {
        initialAudioBitrate = DEFAULT_INITIAL_BITRATES.audio;
    }
    else {
        initialAudioBitrate = Number(options.initialAudioBitrate);
        if (isNaN(initialAudioBitrate)) {
            /* eslint-disable max-len */
            throw new Error("Invalid initialAudioBitrate parameter. Should be a number.");
            /* eslint-enable max-len */
        }
    }
    if (isNullOrUndefined(options.minVideoBitrate)) {
        minVideoBitrate = DEFAULT_MIN_BITRATES.video;
    }
    else {
        minVideoBitrate = Number(options.minVideoBitrate);
        if (isNaN(minVideoBitrate)) {
            throw new Error("Invalid maxVideoBitrate parameter. Should be a number.");
        }
    }
    if (isNullOrUndefined(options.minAudioBitrate)) {
        minAudioBitrate = DEFAULT_MIN_BITRATES.audio;
    }
    else {
        minAudioBitrate = Number(options.minAudioBitrate);
        if (isNaN(minAudioBitrate)) {
            throw new Error("Invalid minAudioBitrate parameter. Should be a number.");
        }
    }
    if (isNullOrUndefined(options.maxVideoBitrate)) {
        maxVideoBitrate = DEFAULT_MAX_BITRATES.video;
    }
    else {
        maxVideoBitrate = Number(options.maxVideoBitrate);
        if (isNaN(maxVideoBitrate)) {
            throw new Error("Invalid maxVideoBitrate parameter. Should be a number.");
        }
        else if (minVideoBitrate > maxVideoBitrate) {
            throw new Error("Invalid maxVideoBitrate parameter. Its value, \"" +
                `${maxVideoBitrate}", is inferior to the set minVideoBitrate, "` +
                `${minVideoBitrate}"`);
        }
    }
    if (isNullOrUndefined(options.maxAudioBitrate)) {
        maxAudioBitrate = DEFAULT_MAX_BITRATES.audio;
    }
    else {
        maxAudioBitrate = Number(options.maxAudioBitrate);
        if (isNaN(maxAudioBitrate)) {
            throw new Error("Invalid maxAudioBitrate parameter. Should be a number.");
        }
        else if (minAudioBitrate > maxAudioBitrate) {
            throw new Error("Invalid maxAudioBitrate parameter. Its value, \"" +
                `${maxAudioBitrate}", is inferior to the set minAudioBitrate, "` +
                `${minAudioBitrate}"`);
        }
    }
    const stopAtEnd = isNullOrUndefined(options.stopAtEnd) ? DEFAULT_STOP_AT_END :
        !!options.stopAtEnd;
    return { maxBufferAhead,
        maxBufferBehind,
        limitVideoWidth,
        videoElement,
        wantedBufferAhead,
        maxVideoBufferSize,
        throttleWhenHidden,
        throttleVideoBitrateWhenHidden,
        preferredAudioTracks,
        preferredTextTracks,
        preferredVideoTracks,
        initialAudioBitrate,
        initialVideoBitrate,
        minAudioBitrate,
        minVideoBitrate,
        maxAudioBitrate,
        maxVideoBitrate,
        stopAtEnd };
}
/**
 * Check the format of given reload options.
 * Throw if format in invalid.
 * @param {object | undefined} options
 */
function checkReloadOptions(options) {
    var _a, _b, _c, _d;
    if (options === null ||
        (typeof options !== "object" && options !== undefined)) {
        throw new Error("API: reload - Invalid options format.");
    }
    if ((options === null || options === void 0 ? void 0 : options.reloadAt) === null ||
        (typeof (options === null || options === void 0 ? void 0 : options.reloadAt) !== "object" && (options === null || options === void 0 ? void 0 : options.reloadAt) !== undefined)) {
        throw new Error("API: reload - Invalid 'reloadAt' option format.");
    }
    if (typeof ((_a = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _a === void 0 ? void 0 : _a.position) !== "number" &&
        ((_b = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _b === void 0 ? void 0 : _b.position) !== undefined) {
        throw new Error("API: reload - Invalid 'reloadAt.position' option format.");
    }
    if (typeof ((_c = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _c === void 0 ? void 0 : _c.relative) !== "number" &&
        ((_d = options === null || options === void 0 ? void 0 : options.reloadAt) === null || _d === void 0 ? void 0 : _d.relative) !== undefined) {
        throw new Error("API: reload - Invalid 'reloadAt.relative' option format.");
    }
}
/**
 * Parse options given to loadVideo and set default options as found
 * in the config.
 *
 * Do not mutate anything, only cross the given options and sane default options
 * (most coming from the config).
 *
 * Throws if any mandatory option is not set.
 * @param {Object|undefined} options
 * @param {Object} ctx - The player context, needed for some default values.
 * @returns {Object}
 */
function parseLoadVideoOptions(options) {
    var _a, _b, _c, _d, _e, _f, _g;
    let url;
    let transport;
    let keySystems;
    let textTrackMode;
    let textTrackElement;
    let startAt;
    const { DEFAULT_AUDIO_TRACK_SWITCHING_MODE, DEFAULT_AUTO_PLAY, DEFAULT_CODEC_SWITCHING_BEHAVIOR, DEFAULT_ENABLE_FAST_SWITCHING, DEFAULT_MANUAL_BITRATE_SWITCHING_MODE, DEFAULT_SHOW_NATIVE_SUBTITLE, DEFAULT_TEXT_TRACK_MODE } = src_config.getCurrent();
    if (isNullOrUndefined(options)) {
        throw new Error("No option set on loadVideo");
    }
    if (!isNullOrUndefined(options.url)) {
        url = String(options.url);
    }
    else if (isNullOrUndefined((_a = options.transportOptions) === null || _a === void 0 ? void 0 : _a.initialManifest) &&
        isNullOrUndefined((_b = options.transportOptions) === null || _b === void 0 ? void 0 : _b.manifestLoader)) {
        throw new Error("Unable to load a content: no url set on loadVideo.\n" +
            "Please provide at least either an `url` argument, a " +
            "`transportOptions.initialManifest` option or a " +
            "`transportOptions.manifestLoader` option so the RxPlayer " +
            "can load the content.");
    }
    if (isNullOrUndefined(options.transport)) {
        throw new Error("No transport set on loadVideo");
    }
    else {
        transport = String(options.transport);
    }
    const autoPlay = isNullOrUndefined(options.autoPlay) ? DEFAULT_AUTO_PLAY :
        !!options.autoPlay;
    if (isNullOrUndefined(options.keySystems)) {
        keySystems = [];
    }
    else {
        keySystems = Array.isArray(options.keySystems) ? options.keySystems :
            [options.keySystems];
        for (const keySystem of keySystems) {
            if (typeof keySystem.type !== "string" ||
                typeof keySystem.getLicense !== "function") {
                throw new Error("Invalid key system given: Missing type string or " +
                    "getLicense callback");
            }
        }
    }
    const lowLatencyMode = options.lowLatencyMode === undefined ?
        false :
        !!options.lowLatencyMode;
    const transportOptsArg = typeof options.transportOptions === "object" &&
        options.transportOptions !== null ?
        options.transportOptions :
        {};
    const initialManifest = (_c = options.transportOptions) === null || _c === void 0 ? void 0 : _c.initialManifest;
    const minimumManifestUpdateInterval = (_e = (_d = options.transportOptions) === null || _d === void 0 ? void 0 : _d.minimumManifestUpdateInterval) !== null && _e !== void 0 ? _e : 0;
    let audioTrackSwitchingMode = isNullOrUndefined(options.audioTrackSwitchingMode)
        ? DEFAULT_AUDIO_TRACK_SWITCHING_MODE
        : options.audioTrackSwitchingMode;
    if (!arrayIncludes(["seamless", "direct", "reload"], audioTrackSwitchingMode)) {
        src_log.warn("The `audioTrackSwitchingMode` loadVideo option must match one of " +
            "the following strategy name:\n" +
            "- `seamless`\n" +
            "- `direct`\n" +
            "- `reload`\n" +
            "If badly set, " + DEFAULT_AUDIO_TRACK_SWITCHING_MODE +
            " strategy will be used as default");
        audioTrackSwitchingMode = DEFAULT_AUDIO_TRACK_SWITCHING_MODE;
    }
    let onCodecSwitch = isNullOrUndefined(options.onCodecSwitch)
        ? DEFAULT_CODEC_SWITCHING_BEHAVIOR
        : options.onCodecSwitch;
    if (!arrayIncludes(["continue", "reload"], onCodecSwitch)) {
        src_log.warn("The `onCodecSwitch` loadVideo option must match one of " +
            "the following string:\n" +
            "- `continue`\n" +
            "- `reload`\n" +
            "If badly set, " + DEFAULT_CODEC_SWITCHING_BEHAVIOR +
            " will be used as default");
        onCodecSwitch = DEFAULT_CODEC_SWITCHING_BEHAVIOR;
    }
    const transportOptions = object_assign({}, transportOptsArg, {
        /* eslint-disable import/no-deprecated */
        supplementaryImageTracks: [],
        supplementaryTextTracks: [],
        /* eslint-enable import/no-deprecated */
        lowLatencyMode,
    });
    // remove already parsed data to simplify the `transportOptions` object
    delete transportOptions.initialManifest;
    delete transportOptions.minimumManifestUpdateInterval;
    if (options.supplementaryTextTracks !== undefined) {
        warnOnce("The `supplementaryTextTracks` loadVideo option is deprecated.\n" +
            "Please use the `TextTrackRenderer` tool instead.");
        const supplementaryTextTracks = Array.isArray(options.supplementaryTextTracks) ?
            options.supplementaryTextTracks : [options.supplementaryTextTracks];
        for (const supplementaryTextTrack of supplementaryTextTracks) {
            if (typeof supplementaryTextTrack.language !== "string" ||
                typeof supplementaryTextTrack.mimeType !== "string" ||
                typeof supplementaryTextTrack.url !== "string") {
                throw new Error("Invalid supplementary text track given. " +
                    "Missing either language, mimetype or url");
            }
        }
        transportOptions.supplementaryTextTracks = supplementaryTextTracks;
    }
    if (options.supplementaryImageTracks !== undefined) {
        warnOnce("The `supplementaryImageTracks` loadVideo option is deprecated.\n" +
            "Please use the `parseBifThumbnails` tool instead.");
        const supplementaryImageTracks = Array.isArray(options.supplementaryImageTracks) ?
            options.supplementaryImageTracks : [options.supplementaryImageTracks];
        for (const supplementaryImageTrack of supplementaryImageTracks) {
            if (typeof supplementaryImageTrack.mimeType !== "string" ||
                typeof supplementaryImageTrack.url !== "string") {
                throw new Error("Invalid supplementary image track given. " +
                    "Missing either mimetype or url");
            }
        }
        transportOptions.supplementaryImageTracks = supplementaryImageTracks;
    }
    if (isNullOrUndefined(options.textTrackMode)) {
        textTrackMode = DEFAULT_TEXT_TRACK_MODE;
    }
    else {
        if (options.textTrackMode !== "native" && options.textTrackMode !== "html") {
            throw new Error("Invalid textTrackMode.");
        }
        textTrackMode = options.textTrackMode;
    }
    if (!isNullOrUndefined(options.defaultAudioTrack)) {
        warnOnce("The `defaultAudioTrack` loadVideo option is deprecated.\n" +
            "Please use the `preferredAudioTracks` constructor option or the" +
            "`setPreferredAudioTracks` method instead");
    }
    const defaultAudioTrack = normalizeAudioTrack(options.defaultAudioTrack);
    if (!isNullOrUndefined(options.defaultTextTrack)) {
        warnOnce("The `defaultTextTrack` loadVideo option is deprecated.\n" +
            "Please use the `preferredTextTracks` constructor option or the" +
            "`setPreferredTextTracks` method instead");
    }
    const defaultTextTrack = normalizeTextTrack(options.defaultTextTrack);
    let hideNativeSubtitle = !DEFAULT_SHOW_NATIVE_SUBTITLE;
    if (!isNullOrUndefined(options.hideNativeSubtitle)) {
        warnOnce("The `hideNativeSubtitle` loadVideo option is deprecated");
        hideNativeSubtitle = !!options.hideNativeSubtitle;
    }
    const manualBitrateSwitchingMode = (_f = options.manualBitrateSwitchingMode) !== null && _f !== void 0 ? _f : DEFAULT_MANUAL_BITRATE_SWITCHING_MODE;
    const enableFastSwitching = isNullOrUndefined(options.enableFastSwitching) ?
        DEFAULT_ENABLE_FAST_SWITCHING :
        options.enableFastSwitching;
    if (textTrackMode === "html") {
        // TODO Better way to express that in TypeScript?
        if (isNullOrUndefined(options.textTrackElement)) {
            throw new Error("You have to provide a textTrackElement " +
                "in \"html\" textTrackMode.");
        }
        else if (!(options.textTrackElement instanceof HTMLElement)) {
            throw new Error("textTrackElement should be an HTMLElement.");
        }
        else {
            textTrackElement = options.textTrackElement;
        }
    }
    else if (!isNullOrUndefined(options.textTrackElement)) {
        src_log.warn("API: You have set a textTrackElement without being in " +
            "an \"html\" textTrackMode. It will be ignored.");
    }
    if (!isNullOrUndefined(options.startAt)) {
        // TODO Better way to express that in TypeScript?
        if (options.startAt.wallClockTime
            instanceof Date) {
            const wallClockTime = options.startAt
                .wallClockTime.getTime() / 1000;
            startAt = object_assign({}, options.startAt, { wallClockTime });
        }
        else {
            startAt = options.startAt;
        }
    }
    const networkConfig = (_g = options.networkConfig) !== null && _g !== void 0 ? _g : {};
    // TODO without cast
    /* eslint-disable @typescript-eslint/consistent-type-assertions */
    return { autoPlay,
        defaultAudioTrack,
        defaultTextTrack,
        enableFastSwitching,
        hideNativeSubtitle,
        keySystems,
        initialManifest,
        lowLatencyMode,
        manualBitrateSwitchingMode,
        audioTrackSwitchingMode,
        minimumManifestUpdateInterval,
        networkConfig,
        onCodecSwitch,
        startAt,
        textTrackElement,
        textTrackMode,
        transport,
        transportOptions,
        url };
    /* eslint-enable @typescript-eslint/consistent-type-assertions */
}


;// CONCATENATED MODULE: ./src/core/api/playback_observer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * HTMLMediaElement Events for which playback observations are calculated and
 * emitted.
 * @type {Array.<string>}
 */
const SCANNED_MEDIA_ELEMENTS_EVENTS = ["canplay",
    "ended",
    "play",
    "pause",
    "seeking",
    "seeked",
    "loadedmetadata",
    "ratechange"];
/**
 * Class allowing to "observe" current playback conditions so the RxPlayer is
 * then able to react upon them.
 *
 * This is a central class of the RxPlayer as many modules rely on the
 * `PlaybackObserver` to know the current state of the media being played.
 *
 * You can use the PlaybackObserver to either get the last observation
 * performed, get the current media state or subscribe to an Observable emitting
 * regularly media conditions.
 *
 * @class {PlaybackObserver}
 */
class PlaybackObserver {
    /**
     * Create a new `PlaybackObserver`, which allows to produce new "playback
     * observations" on various media events and intervals.
     *
     * Note that creating a `PlaybackObserver` lead to the usage of resources,
     * such as event listeners which will only be freed once the `stop` method is
     * called.
     * @param {HTMLMediaElement} mediaElement
     * @param {Object} options
     */
    constructor(mediaElement, options) {
        this._internalSeeksIncoming = [];
        this._mediaElement = mediaElement;
        this._withMediaSource = options.withMediaSource;
        this._lowLatencyMode = options.lowLatencyMode;
        this._canceller = new TaskCanceller();
        this._observationRef = this._createSharedReference();
    }
    /**
     * Stop the `PlaybackObserver` from emitting playback observations and free all
     * resources reserved to emitting them such as event listeners, intervals and
     * subscribing callbacks.
     *
     * Once `stop` is called, no new playback observation will ever be emitted.
     *
     * Note that it is important to call stop once the `PlaybackObserver` is no
     * more needed to avoid unnecessarily leaking resources.
     */
    stop() {
        this._canceller.cancel();
    }
    /**
     * Returns the current position advertised by the `HTMLMediaElement`, in
     * seconds.
     * @returns {number}
     */
    getCurrentTime() {
        return this._mediaElement.currentTime;
    }
    /**
     * Returns the current playback rate advertised by the `HTMLMediaElement`.
     * @returns {number}
     */
    getPlaybackRate() {
        return this._mediaElement.playbackRate;
    }
    /**
     * Returns the current `paused` status advertised by the `HTMLMediaElement`.
     *
     * Use this instead of the same status emitted on an observation when you want
     * to be sure you're using the current value.
     * @returns {boolean}
     */
    getIsPaused() {
        return this._mediaElement.paused;
    }
    /**
     * Update the current position (seek) on the `HTMLMediaElement`, by giving a
     * new position in seconds.
     *
     * Note that seeks performed through this method are caracherized as
     * "internal" seeks. They don't result into the exact same playback
     * observation than regular seeks (which most likely comes from the outside,
     * e.g. the user).
     * @param {number} time
     */
    setCurrentTime(time) {
        this._internalSeeksIncoming.push(time);
        this._mediaElement.currentTime = time;
    }
    /**
     * Update the playback rate of the `HTMLMediaElement`.
     * @param {number} playbackRate
     */
    setPlaybackRate(playbackRate) {
        this._mediaElement.playbackRate = playbackRate;
    }
    /**
     * Returns the current `readyState` advertised by the `HTMLMediaElement`.
     * @returns {number}
     */
    getReadyState() {
        return this._mediaElement.readyState;
    }
    /**
     * Returns an `IReadOnlySharedReference` storing the last playback observation
     * produced by the `PlaybackObserver` and updated each time a new one is
     * produced.
     *
     * This value can then be for example subscribed to to be notified of future
     * playback observations.
     *
     * @returns {Object}
     */
    getReference() {
        return this._observationRef;
    }
    /**
     * Register a callback so it regularly receives playback observations.
     * @param {Function} cb
     * @param {Object} options - Configuration options:
     *   - `includeLastObservation`: If set to `true` the last observation will
     *     be first emitted synchronously.
     *   - `clearSignal`: If set, the callback will be unregistered when this
     *     CancellationSignal emits.
     */
    listen(cb, options) {
        var _a;
        if (this._canceller.isUsed || ((_a = options === null || options === void 0 ? void 0 : options.clearSignal) === null || _a === void 0 ? void 0 : _a.isCancelled) === true) {
            return utils_noop;
        }
        this._observationRef.onUpdate(cb, {
            clearSignal: options === null || options === void 0 ? void 0 : options.clearSignal,
            emitCurrentValue: options === null || options === void 0 ? void 0 : options.includeLastObservation,
        });
    }
    /**
     * Generate a new playback observer which can listen to other
     * properties and which can only be accessed to read observations (e.g.
     * it cannot ask to perform a seek).
     *
     * The object returned will respect the `IReadOnlyPlaybackObserver` interface
     * and will inherit this `PlaybackObserver`'s lifecycle: it will emit when
     * the latter emits.
     *
     * As argument, this method takes a function which will allow to produce
     * the new set of properties to be present on each observation.
     * @param {Function} transform
     * @returns {Object}
     */
    deriveReadOnlyObserver(transform) {
        return generateReadOnlyObserver(this, transform, this._canceller.signal);
    }
    /**
     * Creates the `IReadOnlySharedReference` that will generate playback
     * observations.
     * @returns {Observable}
     */
    _createSharedReference() {
        if (this._observationRef !== undefined) {
            return this._observationRef;
        }
        let lastObservation;
        const { SAMPLING_INTERVAL_MEDIASOURCE, SAMPLING_INTERVAL_LOW_LATENCY, SAMPLING_INTERVAL_NO_MEDIASOURCE } = src_config.getCurrent();
        const getCurrentObservation = (event) => {
            let tmpEvt = event;
            let startedInternalSeekTime;
            if (tmpEvt === "seeking" && this._internalSeeksIncoming.length > 0) {
                tmpEvt = "internal-seeking";
                startedInternalSeekTime = this._internalSeeksIncoming.shift();
            }
            const _lastObservation = lastObservation !== null && lastObservation !== void 0 ? lastObservation : this._generateInitialObservation();
            const mediaTimings = getMediaInfos(this._mediaElement, tmpEvt, this._withMediaSource);
            let pendingInternalSeek = null;
            if (mediaTimings.seeking) {
                if (typeof startedInternalSeekTime === "number") {
                    pendingInternalSeek = startedInternalSeekTime;
                }
                else if (_lastObservation.pendingInternalSeek !== null && event !== "seeking") {
                    pendingInternalSeek = _lastObservation.pendingInternalSeek;
                }
            }
            const rebufferingStatus = getRebufferingStatus(_lastObservation, mediaTimings, { lowLatencyMode: this._lowLatencyMode,
                withMediaSource: this._withMediaSource });
            const freezingStatus = getFreezingStatus(_lastObservation, mediaTimings);
            const timings = object_assign({}, { rebuffering: rebufferingStatus,
                freezing: freezingStatus,
                pendingInternalSeek }, mediaTimings);
            if (src_log.hasLevel("DEBUG")) {
                src_log.debug("API: current media element state tick", "event", timings.event, "position", timings.position, "seeking", timings.seeking, "internalSeek", timings.pendingInternalSeek, "rebuffering", timings.rebuffering !== null, "freezing", timings.freezing !== null, "ended", timings.ended, "paused", timings.paused, "playbackRate", timings.playbackRate, "readyState", timings.readyState);
            }
            return timings;
        };
        const returnedSharedReference = createSharedReference(getCurrentObservation("init"));
        const generateObservationForEvent = (event) => {
            const newObservation = getCurrentObservation(event);
            if (src_log.hasLevel("DEBUG")) {
                src_log.debug("API: current playback timeline:\n" +
                    prettyPrintBuffered(newObservation.buffered, newObservation.position), `\n${event}`);
            }
            lastObservation = newObservation;
            returnedSharedReference.setValue(newObservation);
        };
        const interval = this._lowLatencyMode ? SAMPLING_INTERVAL_LOW_LATENCY :
            this._withMediaSource ? SAMPLING_INTERVAL_MEDIASOURCE :
                SAMPLING_INTERVAL_NO_MEDIASOURCE;
        let intervalId = setInterval(onInterval, interval);
        const removeEventListeners = SCANNED_MEDIA_ELEMENTS_EVENTS.map((eventName) => {
            this._mediaElement.addEventListener(eventName, onMediaEvent);
            function onMediaEvent() {
                restartInterval();
                generateObservationForEvent(eventName);
            }
            return () => {
                this._mediaElement.removeEventListener(eventName, onMediaEvent);
            };
        });
        this._canceller.signal.register(() => {
            clearInterval(intervalId);
            removeEventListeners.forEach(cb => cb());
            returnedSharedReference.finish();
        });
        return returnedSharedReference;
        function onInterval() {
            generateObservationForEvent("timeupdate");
        }
        function restartInterval() {
            clearInterval(intervalId);
            intervalId = setInterval(onInterval, interval);
        }
    }
    _generateInitialObservation() {
        return object_assign(getMediaInfos(this._mediaElement, "init", this._withMediaSource), { rebuffering: null,
            freezing: null,
            pendingInternalSeek: null });
    }
}
/**
 * Returns the amount of time in seconds the buffer should have ahead of the
 * current position before resuming playback. Based on the infos of the
 * rebuffering status.
 *
 * Waiting time differs between a rebuffering happening after a "seek" or one
 * happening after a buffer starvation occured.
 * @param {Object|null} rebufferingStatus
 * @param {Boolean} lowLatencyMode
 * @returns {Number}
 */
function getRebufferingEndGap(rebufferingStatus, lowLatencyMode) {
    if (rebufferingStatus === null) {
        return 0;
    }
    const suffix = lowLatencyMode ? "LOW_LATENCY" :
        "DEFAULT";
    const { RESUME_GAP_AFTER_SEEKING, RESUME_GAP_AFTER_NOT_ENOUGH_DATA, RESUME_GAP_AFTER_BUFFERING } = src_config.getCurrent();
    switch (rebufferingStatus.reason) {
        case "seeking":
            return RESUME_GAP_AFTER_SEEKING[suffix];
        case "not-ready":
            return RESUME_GAP_AFTER_NOT_ENOUGH_DATA[suffix];
        case "buffering":
            return RESUME_GAP_AFTER_BUFFERING[suffix];
    }
}
/**
 * @param {Object} currentRange
 * @param {Number} duration
 * @param {Boolean} lowLatencyMode
 * @returns {Boolean}
 */
function hasLoadedUntilTheEnd(currentTime, currentRange, ended, duration, lowLatencyMode) {
    const { REBUFFERING_GAP } = src_config.getCurrent();
    const suffix = lowLatencyMode ? "LOW_LATENCY" :
        "DEFAULT";
    if (currentRange === undefined) {
        return ended && Math.abs(duration - currentTime) <= REBUFFERING_GAP[suffix];
    }
    return currentRange !== null &&
        (duration - currentRange.end) <= REBUFFERING_GAP[suffix];
}
/**
 * Get basic playback information.
 * @param {HTMLMediaElement} mediaElement
 * @param {string} event
 * @returns {Object}
 */
function getMediaInfos(mediaElement, event, withMediaSource) {
    const { buffered, currentTime, duration, ended, paused, playbackRate, readyState, seeking } = mediaElement;
    let currentRange;
    let bufferGap;
    if (!withMediaSource && buffered.length === 0 && readyState >= 3) {
        // Sometimes `buffered` stay empty for directfile contents yet we are able
        // to play. This seems to be linked to browser-side issues but has been
        // encountered on enough platforms (Chrome desktop and PlayStation 4's
        // WebKit for us to do something about it in the player.
        currentRange = undefined;
        bufferGap = undefined;
    }
    else {
        currentRange = getRange(buffered, currentTime);
        bufferGap = currentRange !== null ? currentRange.end - currentTime :
            // TODO null/0 would probably be
            // more appropriate
            Infinity;
    }
    return { bufferGap,
        buffered,
        currentRange,
        position: currentTime,
        duration,
        ended,
        paused,
        playbackRate,
        readyState,
        seeking,
        event };
}
/**
 * Infer rebuffering status of the media based on:
 *   - the return of the function getMediaInfos
 *   - the previous observation object.
 *
 * @param {Object} prevObservation - Previous playback observation object.
 * @param {Object} currentInfo - Current set of basic information on the
 * `HTMLMediaElement`. This does not need every single property from a regular
 * playback observation.
 * @param {Object} options
 * @returns {Object|null}
 */
function getRebufferingStatus(prevObservation, currentInfo, { withMediaSource, lowLatencyMode }) {
    const { REBUFFERING_GAP } = src_config.getCurrent();
    const { event: currentEvt, position: currentTime, bufferGap, currentRange, duration, paused, readyState, ended } = currentInfo;
    const { rebuffering: prevRebuffering, event: prevEvt, position: prevTime } = prevObservation;
    const fullyLoaded = hasLoadedUntilTheEnd(currentTime, currentRange, ended, duration, lowLatencyMode);
    const canSwitchToRebuffering = (readyState >= 1 &&
        currentEvt !== "loadedmetadata" &&
        prevRebuffering === null &&
        !(fullyLoaded || ended));
    let rebufferEndPosition = null;
    let shouldRebuffer;
    let shouldStopRebuffer;
    const rebufferGap = lowLatencyMode ? REBUFFERING_GAP.LOW_LATENCY :
        REBUFFERING_GAP.DEFAULT;
    if (withMediaSource) {
        if (canSwitchToRebuffering) {
            if (bufferGap === Infinity) {
                shouldRebuffer = true;
                rebufferEndPosition = currentTime;
            }
            else if (bufferGap === undefined) {
                if (readyState < 3) {
                    shouldRebuffer = true;
                    rebufferEndPosition = undefined;
                }
            }
            else if (bufferGap <= rebufferGap) {
                shouldRebuffer = true;
                rebufferEndPosition = currentTime + bufferGap;
            }
        }
        else if (prevRebuffering !== null) {
            const resumeGap = getRebufferingEndGap(prevRebuffering, lowLatencyMode);
            if (shouldRebuffer !== true && prevRebuffering !== null && readyState > 1 &&
                (fullyLoaded || ended ||
                    (bufferGap !== undefined && isFinite(bufferGap) && bufferGap > resumeGap)) ||
                (bufferGap === undefined && readyState >= 3)) {
                shouldStopRebuffer = true;
            }
            else if (bufferGap === undefined) {
                rebufferEndPosition = undefined;
            }
            else if (bufferGap === Infinity) {
                rebufferEndPosition = currentTime;
            }
            else if (bufferGap <= resumeGap) {
                rebufferEndPosition = currentTime + bufferGap;
            }
        }
    }
    // when using a direct file, the media will stall and unstall on its
    // own, so we only try to detect when the media timestamp has not changed
    // between two consecutive timeupdates
    else {
        if (canSwitchToRebuffering &&
            ((!paused &&
                currentEvt === "timeupdate" && prevEvt === "timeupdate" &&
                currentTime === prevTime) ||
                (currentEvt === "seeking" && (bufferGap === Infinity || (bufferGap === undefined && readyState < 3))))) {
            shouldRebuffer = true;
        }
        else if (prevRebuffering !== null &&
            ((currentEvt !== "seeking" && currentTime !== prevTime) ||
                currentEvt === "canplay" ||
                (bufferGap === undefined && readyState >= 3) ||
                (bufferGap !== undefined && bufferGap < Infinity &&
                    (bufferGap > getRebufferingEndGap(prevRebuffering, lowLatencyMode) ||
                        fullyLoaded || ended)))) {
            shouldStopRebuffer = true;
        }
    }
    if (shouldStopRebuffer === true) {
        return null;
    }
    else if (shouldRebuffer === true || prevRebuffering !== null) {
        let reason;
        if (currentEvt === "seeking" ||
            prevRebuffering !== null && prevRebuffering.reason === "seeking") {
            reason = "seeking";
        }
        else if (currentInfo.seeking) {
            reason = "seeking";
        }
        else if (readyState === 1) {
            reason = "not-ready";
        }
        else {
            reason = "buffering";
        }
        if (prevRebuffering !== null && prevRebuffering.reason === reason) {
            return { reason: prevRebuffering.reason,
                timestamp: prevRebuffering.timestamp,
                position: rebufferEndPosition };
        }
        return { reason,
            timestamp: performance.now(),
            position: rebufferEndPosition };
    }
    return null;
}
/**
 * Detect if the current media can be considered as "freezing" (i.e. not
 * advancing for unknown reasons).
 *
 * Returns a corresponding `IFreezingStatus` object if that's the case and
 * `null` if not.
 * @param {Object} prevObservation
 * @param {Object} currentInfo
 * @returns {Object|null}
 */
function getFreezingStatus(prevObservation, currentInfo) {
    const { MINIMUM_BUFFER_AMOUNT_BEFORE_FREEZING } = src_config.getCurrent();
    if (prevObservation.freezing) {
        if (currentInfo.ended ||
            currentInfo.paused ||
            currentInfo.readyState === 0 ||
            currentInfo.playbackRate === 0 ||
            prevObservation.position !== currentInfo.position) {
            return null; // Quit freezing status
        }
        return prevObservation.freezing; // Stay in it
    }
    return currentInfo.event === "timeupdate" &&
        currentInfo.bufferGap !== undefined &&
        currentInfo.bufferGap > MINIMUM_BUFFER_AMOUNT_BEFORE_FREEZING &&
        !currentInfo.ended &&
        !currentInfo.paused &&
        currentInfo.readyState >= 1 &&
        currentInfo.playbackRate !== 0 &&
        currentInfo.position === prevObservation.position ?
        { timestamp: performance.now() } :
        null;
}
/**
 * Pretty print a TimeRanges Object, to see the current content of it in a
 * one-liner string.
 *
 * @example
 * This function is called by giving it directly the TimeRanges, such as:
 * ```js
 * prettyPrintBuffered(document.getElementsByTagName("video")[0].buffered);
 * ```
 *
 * Let's consider this possible return:
 *
 * ```
 * 0.00|==29.95==|29.95 ~30.05~ 60.00|==29.86==|89.86
 *          ^14
 * ```
 * This means that our video element has 29.95 seconds of buffer between 0 and
 * 29.95 seconds.
 * Then 30.05 seconds where no buffer is found.
 * Then 29.86 seconds of buffer between 60.00 and 89.86 seconds.
 *
 * A caret on the second line indicates the current time we're at.
 * The number coming after it is the current time.
 * @param {TimeRanges} buffered
 * @param {number} currentTime
 * @returns {string}
 */
function prettyPrintBuffered(buffered, currentTime) {
    let str = "";
    let currentTimeStr = "";
    for (let i = 0; i < buffered.length; i++) {
        const start = buffered.start(i);
        const end = buffered.end(i);
        const fixedStart = start.toFixed(2);
        const fixedEnd = end.toFixed(2);
        const fixedDuration = (end - start).toFixed(2);
        const newIntervalStr = `${fixedStart}|==${fixedDuration}==|${fixedEnd}`;
        str += newIntervalStr;
        if (currentTimeStr.length === 0 && end > currentTime) {
            const padBefore = str.length - Math.floor(newIntervalStr.length / 2);
            currentTimeStr = " ".repeat(padBefore) + `^${currentTime}`;
        }
        if (i < buffered.length - 1) {
            const nextStart = buffered.start(i + 1);
            const fixedDiff = (nextStart - end).toFixed(2);
            const holeStr = ` ~${fixedDiff}~ `;
            str += holeStr;
            if (currentTimeStr.length === 0 && currentTime < nextStart) {
                const padBefore = str.length - Math.floor(holeStr.length / 2);
                currentTimeStr = " ".repeat(padBefore) + `^${currentTime}`;
            }
        }
    }
    if (currentTimeStr.length === 0) {
        currentTimeStr = " ".repeat(str.length) + `^${currentTime}`;
    }
    return str + "\n" + currentTimeStr;
}
/**
 * Create `IReadOnlyPlaybackObserver` from a source `IReadOnlyPlaybackObserver`
 * and a mapping function.
 * @param {Object} src
 * @param {Function} transform
 * @returns {Object}
 */
function generateReadOnlyObserver(src, transform, cancellationSignal) {
    const mappedRef = transform(src.getReference(), cancellationSignal);
    return {
        getCurrentTime() {
            return src.getCurrentTime();
        },
        getReadyState() {
            return src.getReadyState();
        },
        getPlaybackRate() {
            return src.getPlaybackRate();
        },
        getIsPaused() {
            return src.getIsPaused();
        },
        getReference() {
            return mappedRef;
        },
        listen(cb, options) {
            var _a;
            if (cancellationSignal.isCancelled || ((_a = options === null || options === void 0 ? void 0 : options.clearSignal) === null || _a === void 0 ? void 0 : _a.isCancelled) === true) {
                return;
            }
            mappedRef.onUpdate(cb, {
                clearSignal: options === null || options === void 0 ? void 0 : options.clearSignal,
                emitCurrentValue: options === null || options === void 0 ? void 0 : options.includeLastObservation,
            });
        },
        deriveReadOnlyObserver(newTransformFn) {
            return generateReadOnlyObserver(this, newTransformFn, cancellationSignal);
        },
    };
}

;// CONCATENATED MODULE: ./src/core/api/tracks_management/track_choice_manager.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Transform an array of IAudioTrackPreference into an array of
 * INormalizedPreferredAudioTrack to be exploited by the TrackChoiceManager.
 * @param {Array.<Object|null>} tracks
 * @returns {Array.<Object|null>}
 */
function normalizeAudioTracks(tracks) {
    return tracks.map(t => t === null ?
        t :
        { normalized: t.language === undefined ? undefined :
                languages(t.language),
            audioDescription: t.audioDescription,
            codec: t.codec });
}
/**
 * Transform an array of ITextTrackPreference into an array of
 * INormalizedPreferredTextTrack to be exploited by the TrackChoiceManager.
 * @param {Array.<Object|null>} tracks
 * @returns {Array.<Object|null>}
 */
function normalizeTextTracks(tracks) {
    return tracks.map(t => t === null ?
        t :
        { normalized: languages(t.language),
            closedCaption: t.closedCaption });
}
/**
 * Manage audio and text tracks for all active periods.
 * Choose the audio and text tracks for each period and record this choice.
 * @class TrackChoiceManager
 */
class TrackChoiceManager {
    constructor(args) {
        this._periods = new SortedList((a, b) => a.period.start - b.period.start);
        this._audioChoiceMemory = new WeakMap();
        this._textChoiceMemory = new WeakMap();
        this._videoChoiceMemory = new WeakMap();
        this._preferredAudioTracks = [];
        this._preferredTextTracks = [];
        this._preferredVideoTracks = [];
        this.trickModeTrackEnabled = args.preferTrickModeTracks;
    }
    /**
     * Set the list of preferred audio tracks, in preference order.
     * @param {Array.<Object>} preferredAudioTracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredAudioTracks(preferredAudioTracks, shouldApply) {
        this._preferredAudioTracks = preferredAudioTracks;
        if (shouldApply) {
            this._applyAudioPreferences();
        }
    }
    /**
     * Set the list of preferred text tracks, in preference order.
     * @param {Array.<Object>} preferredTextTracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Periods. `false` if it should only
     * be applied to new content.
     */
    setPreferredTextTracks(preferredTextTracks, shouldApply) {
        this._preferredTextTracks = preferredTextTracks;
        if (shouldApply) {
            this._applyTextPreferences();
        }
    }
    /**
     * Set the list of preferred text tracks, in preference order.
     * @param {Array.<Object>} preferredVideoTracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredVideoTracks(preferredVideoTracks, shouldApply) {
        this._preferredVideoTracks = preferredVideoTracks;
        if (shouldApply) {
            this._applyVideoPreferences();
        }
    }
    /**
     * Add Subject to choose Adaptation for new "audio" or "text" Period.
     * @param {string} bufferType - The concerned buffer type
     * @param {Period} period - The concerned Period.
     * @param {Subject.<Object|null>} adaptation$ - A subject through which the
     * choice will be given
     */
    addPeriod(bufferType, period, adaptation$) {
        const periodItem = getPeriodItem(this._periods, period);
        const adaptations = period.getSupportedAdaptations(bufferType);
        if (periodItem !== undefined) {
            if (periodItem[bufferType] !== undefined) {
                src_log.warn(`TrackChoiceManager: ${bufferType} already added for period`, period.start);
                return;
            }
            else {
                periodItem[bufferType] = { adaptations, adaptation$ };
            }
        }
        else {
            this._periods.add({ period,
                [bufferType]: { adaptations, adaptation$ } });
        }
    }
    /**
     * Remove Subject to choose an "audio", "video" or "text" Adaptation for a
     * Period.
     * @param {string} bufferType - The concerned buffer type
     * @param {Period} period - The concerned Period.
     */
    removePeriod(bufferType, period) {
        const periodIndex = findPeriodIndex(this._periods, period);
        if (periodIndex === undefined) {
            src_log.warn(`TrackChoiceManager: ${bufferType} not found for period`, period.start);
            return;
        }
        const periodItem = this._periods.get(periodIndex);
        if (periodItem[bufferType] === undefined) {
            src_log.warn(`TrackChoiceManager: ${bufferType} already removed for period`, period.start);
            return;
        }
        delete periodItem[bufferType];
        if (periodItem.audio === undefined &&
            periodItem.text === undefined &&
            periodItem.video === undefined) {
            this._periods.removeElement(periodItem);
        }
    }
    resetPeriods() {
        while (this._periods.length() > 0) {
            this._periods.pop();
        }
    }
    /**
     * Update the choice of all added Periods based on:
     *   1. What was the last chosen adaptation
     *   2. If not found, the preferences
     */
    update() {
        this._resetChosenAudioTracks();
        this._resetChosenTextTracks();
        this._resetChosenVideoTracks();
    }
    /**
     * Emit initial audio Adaptation through the given Subject based on:
     *   - the preferred audio tracks
     *   - the last choice for this period, if one
     * @param {Period} period - The concerned Period.
     */
    setInitialAudioTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const audioInfos = periodItem !== undefined ? periodItem.audio :
            null;
        if (isNullOrUndefined(audioInfos) || periodItem === undefined) {
            throw new Error("TrackChoiceManager: Given Period not found.");
        }
        const audioAdaptations = period.getSupportedAdaptations("audio");
        const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
        if (chosenAudioAdaptation === null) {
            // If the Period was previously without audio, keep it that way
            audioInfos.adaptation$.next(null);
        }
        else if (chosenAudioAdaptation === undefined ||
            !arrayIncludes(audioAdaptations, chosenAudioAdaptation)) {
            // Find the optimal audio Adaptation
            const preferredAudioTracks = this._preferredAudioTracks;
            const normalizedPref = normalizeAudioTracks(preferredAudioTracks);
            const optimalAdaptation = findFirstOptimalAudioAdaptation(audioAdaptations, normalizedPref);
            this._audioChoiceMemory.set(period, optimalAdaptation);
            audioInfos.adaptation$.next(optimalAdaptation);
        }
        else {
            audioInfos.adaptation$.next(chosenAudioAdaptation); // set last one
        }
    }
    /**
     * Emit initial text Adaptation through the given Subject based on:
     *   - the preferred text tracks
     *   - the last choice for this period, if one
     * @param {Period} period - The concerned Period.
     */
    setInitialTextTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const textInfos = periodItem !== undefined ? periodItem.text :
            null;
        if (isNullOrUndefined(textInfos) || periodItem === undefined) {
            throw new Error("TrackChoiceManager: Given Period not found.");
        }
        const textAdaptations = period.getSupportedAdaptations("text");
        const chosenTextAdaptation = this._textChoiceMemory.get(period);
        if (chosenTextAdaptation === null) {
            // If the Period was previously without text, keep it that way
            textInfos.adaptation$.next(null);
        }
        else if (chosenTextAdaptation === undefined ||
            !arrayIncludes(textAdaptations, chosenTextAdaptation)) {
            // Find the optimal text Adaptation
            const preferredTextTracks = this._preferredTextTracks;
            const normalizedPref = normalizeTextTracks(preferredTextTracks);
            const optimalAdaptation = findFirstOptimalTextAdaptation(textAdaptations, normalizedPref);
            this._textChoiceMemory.set(period, optimalAdaptation);
            textInfos.adaptation$.next(optimalAdaptation);
        }
        else {
            textInfos.adaptation$.next(chosenTextAdaptation); // set last one
        }
    }
    /**
     * Emit initial video Adaptation through the given Subject based on:
     *   - the preferred video tracks
     *   - the last choice for this period, if one
     * @param {Period} period - The concerned Period.
     */
    setInitialVideoTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const videoInfos = periodItem !== undefined ? periodItem.video :
            null;
        if (isNullOrUndefined(videoInfos) || periodItem === undefined) {
            throw new Error("TrackChoiceManager: Given Period not found.");
        }
        const videoAdaptations = period.getSupportedAdaptations("video");
        const prevVideoAdaptation = this._videoChoiceMemory.get(period);
        let newBaseAdaptation;
        if (prevVideoAdaptation === null) {
            newBaseAdaptation = null;
        }
        else if (prevVideoAdaptation !== undefined &&
            arrayIncludes(videoAdaptations, prevVideoAdaptation.baseAdaptation)) {
            // still exists, re-select it
            newBaseAdaptation = prevVideoAdaptation.baseAdaptation;
        }
        else {
            // If that Adaptation does not exist (e.g. no choice has been made or it
            // is not in the Manifest anymore), look at preferences
            const preferredVideoTracks = this._preferredVideoTracks;
            newBaseAdaptation = findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks);
        }
        if (newBaseAdaptation === null) {
            this._videoChoiceMemory.set(period, null);
            videoInfos.adaptation$.next(null);
            return;
        }
        const newVideoAdaptation = getRightVideoTrack(newBaseAdaptation, this.trickModeTrackEnabled);
        this._videoChoiceMemory.set(period, { baseAdaptation: newBaseAdaptation,
            adaptation: newVideoAdaptation });
        videoInfos.adaptation$.next(newVideoAdaptation);
    }
    /**
     * Set audio track based on the ID of its adaptation for a given added Period.
     * @param {Period} period - The concerned Period.
     * @param {string} wantedId - adaptation id of the wanted track
     */
    setAudioTrackByID(period, wantedId) {
        const periodItem = getPeriodItem(this._periods, period);
        const audioInfos = periodItem !== undefined ? periodItem.audio :
            null;
        if (isNullOrUndefined(audioInfos)) {
            throw new Error("TrackChoiceManager: Given Period not found.");
        }
        const wantedAdaptation = arrayFind(audioInfos.adaptations, ({ id }) => id === wantedId);
        if (wantedAdaptation === undefined) {
            throw new Error("Audio Track not found.");
        }
        const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
        if (chosenAudioAdaptation === wantedAdaptation) {
            return;
        }
        this._audioChoiceMemory.set(period, wantedAdaptation);
        audioInfos.adaptation$.next(wantedAdaptation);
    }
    /**
     * Set text track based on the ID of its adaptation for a given added Period.
     * @param {Period} period - The concerned Period.
     * @param {string} wantedId - adaptation id of the wanted track
     */
    setTextTrackByID(period, wantedId) {
        const periodItem = getPeriodItem(this._periods, period);
        const textInfos = periodItem !== undefined ? periodItem.text :
            null;
        if (isNullOrUndefined(textInfos)) {
            throw new Error("TrackChoiceManager: Given Period not found.");
        }
        const wantedAdaptation = arrayFind(textInfos.adaptations, ({ id }) => id === wantedId);
        if (wantedAdaptation === undefined) {
            throw new Error("Text Track not found.");
        }
        const chosenTextAdaptation = this._textChoiceMemory.get(period);
        if (chosenTextAdaptation === wantedAdaptation) {
            return;
        }
        this._textChoiceMemory.set(period, wantedAdaptation);
        textInfos.adaptation$.next(wantedAdaptation);
    }
    /**
     * Set video track based on the ID of its adaptation for a given added Period.
     * @param {Period} period - The concerned Period.
     * @param {string} wantedId - adaptation id of the wanted track
     *
     * @throws Error - Throws if the period given has not been added
     * @throws Error - Throws if the given id is not found in any video adaptation
     * of the given Period.
     */
    setVideoTrackByID(period, wantedId) {
        const periodItem = getPeriodItem(this._periods, period);
        const videoInfos = periodItem !== undefined ? periodItem.video :
            null;
        if (isNullOrUndefined(videoInfos)) {
            throw new Error("LanguageManager: Given Period not found.");
        }
        const wantedBaseAdaptation = arrayFind(videoInfos.adaptations, ({ id }) => id === wantedId);
        if (wantedBaseAdaptation === undefined) {
            throw new Error("Video Track not found.");
        }
        const newVideoAdaptation = getRightVideoTrack(wantedBaseAdaptation, this.trickModeTrackEnabled);
        this._videoChoiceMemory.set(period, { baseAdaptation: wantedBaseAdaptation,
            adaptation: newVideoAdaptation });
        videoInfos.adaptation$.next(newVideoAdaptation);
    }
    /**
     * Disable the current text track for a given period.
     *
     * @param {Period} period - The concerned Period.
     *
     * @throws Error - Throws if the period given has not been added
     */
    disableTextTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const textInfos = periodItem !== undefined ? periodItem.text :
            null;
        if (isNullOrUndefined(textInfos)) {
            throw new Error("TrackChoiceManager: Given Period not found.");
        }
        const chosenTextAdaptation = this._textChoiceMemory.get(period);
        if (chosenTextAdaptation === null) {
            return;
        }
        this._textChoiceMemory.set(period, null);
        textInfos.adaptation$.next(null);
    }
    /**
     * Disable the current video track for a given period.
     * @param {Object} period
     * @throws Error - Throws if the period given has not been added
     */
    disableVideoTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const videoInfos = periodItem === null || periodItem === void 0 ? void 0 : periodItem.video;
        if (videoInfos === undefined) {
            throw new Error("TrackManager: Given Period not found.");
        }
        const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
        if (chosenVideoAdaptation === null) {
            return;
        }
        this._videoChoiceMemory.set(period, null);
        videoInfos.adaptation$.next(null);
    }
    disableVideoTrickModeTracks() {
        this.trickModeTrackEnabled = false;
        this._resetChosenVideoTracks();
    }
    enableVideoTrickModeTracks() {
        this.trickModeTrackEnabled = true;
        this._resetChosenVideoTracks();
    }
    /**
     * @returns {boolean}
     */
    isTrickModeEnabled() {
        return this.trickModeTrackEnabled;
    }
    /**
     * Returns an object describing the chosen audio track for the given audio
     * Period.
     *
     * Returns null is the the current audio track is disabled or not
     * set yet.
     *
     * @param {Period} period - The concerned Period.
     * @returns {Object|null} - The audio track chosen for this Period
     */
    getChosenAudioTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const audioInfos = periodItem !== undefined ? periodItem.audio :
            null;
        if (isNullOrUndefined(audioInfos)) {
            return null;
        }
        const chosenTrack = this._audioChoiceMemory.get(period);
        if (isNullOrUndefined(chosenTrack)) {
            return null;
        }
        const audioTrack = {
            language: takeFirstSet(chosenTrack.language, ""),
            normalized: takeFirstSet(chosenTrack.normalizedLanguage, ""),
            audioDescription: chosenTrack.isAudioDescription === true,
            id: chosenTrack.id,
            representations: chosenTrack.representations.map(parseAudioRepresentation),
            label: chosenTrack.label,
        };
        if (chosenTrack.isDub === true) {
            audioTrack.dub = true;
        }
        return audioTrack;
    }
    /**
     * Returns an object describing the chosen text track for the given text
     * Period.
     *
     * Returns null is the the current text track is disabled or not
     * set yet.
     *
     * @param {Period} period - The concerned Period.
     * @returns {Object|null} - The text track chosen for this Period
     */
    getChosenTextTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const textInfos = periodItem !== undefined ? periodItem.text :
            null;
        if (isNullOrUndefined(textInfos)) {
            return null;
        }
        const chosenTextAdaptation = this._textChoiceMemory.get(period);
        if (isNullOrUndefined(chosenTextAdaptation)) {
            return null;
        }
        return {
            language: takeFirstSet(chosenTextAdaptation.language, ""),
            normalized: takeFirstSet(chosenTextAdaptation.normalizedLanguage, ""),
            closedCaption: chosenTextAdaptation.isClosedCaption === true,
            id: chosenTextAdaptation.id,
            label: chosenTextAdaptation.label,
        };
    }
    /**
     * Returns an object describing the chosen video track for the given video
     * Period.
     *
     * Returns null is the the current video track is disabled or not
     * set yet.
     *
     * @param {Period} period - The concerned Period.
     * @returns {Object|null} - The video track chosen for this Period
     */
    getChosenVideoTrack(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const videoInfos = periodItem !== undefined ? periodItem.video :
            null;
        if (isNullOrUndefined(videoInfos)) {
            return null;
        }
        const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
        if (isNullOrUndefined(chosenVideoAdaptation)) {
            return null;
        }
        const currAdaptation = chosenVideoAdaptation.adaptation;
        const trickModeTracks = currAdaptation.trickModeTracks !== undefined ?
            currAdaptation.trickModeTracks.map((trickModeAdaptation) => {
                const representations = trickModeAdaptation.representations
                    .map(parseVideoRepresentation);
                const trickMode = { id: trickModeAdaptation.id,
                    representations,
                    isTrickModeTrack: true };
                if (trickModeAdaptation.isSignInterpreted === true) {
                    trickMode.signInterpreted = true;
                }
                return trickMode;
            }) :
            undefined;
        const videoTrack = {
            id: currAdaptation.id,
            representations: currAdaptation.representations.map(parseVideoRepresentation),
            label: currAdaptation.label,
        };
        if (currAdaptation.isSignInterpreted === true) {
            videoTrack.signInterpreted = true;
        }
        if (currAdaptation.isTrickModeTrack === true) {
            videoTrack.isTrickModeTrack = true;
        }
        if (trickModeTracks !== undefined) {
            videoTrack.trickModeTracks = trickModeTracks;
        }
        return videoTrack;
    }
    /**
     * Returns all available audio tracks for a given Period, as an array of
     * objects.
     *
     * @returns {Array.<Object>}
     */
    getAvailableAudioTracks(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const audioInfos = periodItem !== undefined ? periodItem.audio :
            null;
        if (isNullOrUndefined(audioInfos)) {
            return [];
        }
        const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
        const currentId = !isNullOrUndefined(chosenAudioAdaptation) ?
            chosenAudioAdaptation.id :
            null;
        return audioInfos.adaptations
            .map((adaptation) => {
            const formatted = {
                language: takeFirstSet(adaptation.language, ""),
                normalized: takeFirstSet(adaptation.normalizedLanguage, ""),
                audioDescription: adaptation.isAudioDescription === true,
                id: adaptation.id,
                active: currentId === null ? false :
                    currentId === adaptation.id,
                representations: adaptation.representations.map(parseAudioRepresentation),
                label: adaptation.label,
            };
            if (adaptation.isDub === true) {
                formatted.dub = true;
            }
            return formatted;
        });
    }
    /**
     * Returns all available text tracks for a given Period, as an array of
     * objects.
     *
     * @param {Period} period
     * @returns {Array.<Object>}
     */
    getAvailableTextTracks(period) {
        const periodItem = getPeriodItem(this._periods, period);
        const textInfos = periodItem !== undefined ? periodItem.text :
            null;
        if (isNullOrUndefined(textInfos)) {
            return [];
        }
        const chosenTextAdaptation = this._textChoiceMemory.get(period);
        const currentId = !isNullOrUndefined(chosenTextAdaptation) ?
            chosenTextAdaptation.id :
            null;
        return textInfos.adaptations
            .map((adaptation) => ({
            language: takeFirstSet(adaptation.language, ""),
            normalized: takeFirstSet(adaptation.normalizedLanguage, ""),
            closedCaption: adaptation.isClosedCaption === true,
            id: adaptation.id,
            active: currentId === null ? false :
                currentId === adaptation.id,
            label: adaptation.label,
        }));
    }
    /**
     * Returns all available video tracks for a given Period, as an array of
     * objects.
     *
     * @returns {Array.<Object>}
     */
    getAvailableVideoTracks(period) {
        var _a;
        const periodItem = getPeriodItem(this._periods, period);
        const videoInfos = periodItem !== undefined ? periodItem.video :
            null;
        if (isNullOrUndefined(videoInfos)) {
            return [];
        }
        const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
        const currentId = chosenVideoAdaptation === undefined ?
            undefined :
            (_a = chosenVideoAdaptation === null || chosenVideoAdaptation === void 0 ? void 0 : chosenVideoAdaptation.adaptation.id) !== null && _a !== void 0 ? _a : undefined;
        return videoInfos.adaptations
            .map((adaptation) => {
            const trickModeTracks = adaptation.trickModeTracks !== undefined ?
                adaptation.trickModeTracks.map((trickModeAdaptation) => {
                    const isActive = currentId === null ? false :
                        currentId === trickModeAdaptation.id;
                    const representations = trickModeAdaptation.representations
                        .map(parseVideoRepresentation);
                    const trickMode = { id: trickModeAdaptation.id,
                        representations,
                        isTrickModeTrack: true,
                        active: isActive };
                    if (trickModeAdaptation.isSignInterpreted === true) {
                        trickMode.signInterpreted = true;
                    }
                    return trickMode;
                }) :
                undefined;
            const formatted = {
                id: adaptation.id,
                active: currentId === null ? false :
                    currentId === adaptation.id,
                representations: adaptation.representations.map(parseVideoRepresentation),
                label: adaptation.label,
            };
            if (adaptation.isSignInterpreted === true) {
                formatted.signInterpreted = true;
            }
            if (trickModeTracks !== undefined) {
                formatted.trickModeTracks = trickModeTracks;
            }
            return formatted;
        });
    }
    /**
     * Reset all audio tracks choices to corresponds to the current preferences.
     */
    _applyAudioPreferences() {
        // Remove all memorized choices and start over
        this._audioChoiceMemory = new WeakMap();
        this._resetChosenAudioTracks();
    }
    /**
     * Reset all text tracks choices to corresponds to the current preferences.
     */
    _applyTextPreferences() {
        // Remove all memorized choices and start over
        this._textChoiceMemory = new WeakMap();
        this._resetChosenTextTracks();
    }
    /**
     * Reset all video tracks choices to corresponds to the current preferences.
     */
    _applyVideoPreferences() {
        // Remove all memorized choices and start over
        this._videoChoiceMemory = new WeakMap();
        this._resetChosenVideoTracks();
    }
    /**
     * Choose again the best audio tracks for all current Periods.
     * This is based on two things:
     *   1. what was the track previously chosen for that Period (by checking
     *      `this._audioChoiceMemory`).
     *   2. If no track were previously chosen or if it is not available anymore
     *      we check the audio preferences.
     */
    _resetChosenAudioTracks() {
        const preferredAudioTracks = this._preferredAudioTracks;
        const normalizedPref = normalizeAudioTracks(preferredAudioTracks);
        const recursiveUpdateAudioTrack = (index) => {
            if (index >= this._periods.length()) {
                // we did all audio Periods, exit
                return;
            }
            const periodItem = this._periods.get(index);
            if (isNullOrUndefined(periodItem.audio)) {
                // No audio choice for this period, check next one
                recursiveUpdateAudioTrack(index + 1);
                return;
            }
            const { period, audio: audioItem } = periodItem;
            const audioAdaptations = period.getSupportedAdaptations("audio");
            const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
            if (chosenAudioAdaptation === null ||
                (chosenAudioAdaptation !== undefined &&
                    arrayIncludes(audioAdaptations, chosenAudioAdaptation))) {
                // Already best audio for this Period, check next one
                recursiveUpdateAudioTrack(index + 1);
                return;
            }
            const optimalAdaptation = findFirstOptimalAudioAdaptation(audioAdaptations, normalizedPref);
            this._audioChoiceMemory.set(period, optimalAdaptation);
            audioItem.adaptation$.next(optimalAdaptation);
            // previous "next" call could have changed everything, start over
            recursiveUpdateAudioTrack(0);
        };
        recursiveUpdateAudioTrack(0);
    }
    /**
     * Choose again the best text tracks for all current Periods.
     * This is based on two things:
     *   1. what was the track previously chosen for that Period (by checking
     *      `this._textChoiceMemory`).
     *   2. If no track were previously chosen or if it is not available anymore
     *      we check the text preferences.
     */
    _resetChosenTextTracks() {
        const preferredTextTracks = this._preferredTextTracks;
        const normalizedPref = normalizeTextTracks(preferredTextTracks);
        const recursiveUpdateTextTrack = (index) => {
            if (index >= this._periods.length()) {
                // we did all text Periods, exit
                return;
            }
            const periodItem = this._periods.get(index);
            if (isNullOrUndefined(periodItem.text)) {
                // No text choice for this period, check next one
                recursiveUpdateTextTrack(index + 1);
                return;
            }
            const { period, text: textItem } = periodItem;
            const textAdaptations = period.getSupportedAdaptations("text");
            const chosenTextAdaptation = this._textChoiceMemory.get(period);
            if (chosenTextAdaptation === null ||
                (chosenTextAdaptation !== undefined &&
                    arrayIncludes(textAdaptations, chosenTextAdaptation))) {
                // Already best text for this Period, check next one
                recursiveUpdateTextTrack(index + 1);
                return;
            }
            const optimalAdaptation = findFirstOptimalTextAdaptation(textAdaptations, normalizedPref);
            this._textChoiceMemory.set(period, optimalAdaptation);
            textItem.adaptation$.next(optimalAdaptation);
            // previous "next" call could have changed everything, start over
            recursiveUpdateTextTrack(0);
        };
        recursiveUpdateTextTrack(0);
    }
    /**
     * Choose again the best video tracks for all current Periods.
     * This is based on two things:
     *   1. what was the track previously chosen for that Period (by checking
     *      `this._videoChoiceMemory`).
     *   2. If no track were previously chosen or if it is not available anymore
     *      we check the video preferences.
     */
    _resetChosenVideoTracks() {
        const preferredVideoTracks = this._preferredVideoTracks;
        const recursiveUpdateVideoTrack = (index) => {
            if (index >= this._periods.length()) {
                // we did all video Periods, exit
                return;
            }
            const periodItem = this._periods.get(index);
            if (isNullOrUndefined(periodItem.video)) {
                // No video choice for this period, check next one
                recursiveUpdateVideoTrack(index + 1);
                return;
            }
            const { period, video: videoItem } = periodItem;
            const videoAdaptations = period.getSupportedAdaptations("video");
            const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
            if (chosenVideoAdaptation === null) {
                // No video track for that one, so nothing to change.
                recursiveUpdateVideoTrack(index + 1);
                return;
            }
            else if (chosenVideoAdaptation !== undefined &&
                arrayIncludes(videoAdaptations, chosenVideoAdaptation.baseAdaptation)) {
                // The right Base Adaptation is selected and is still available.
                // Check if the selected Adaptation is still right
                const wantedVideoAdaptation = getRightVideoTrack(chosenVideoAdaptation.baseAdaptation, this.trickModeTrackEnabled);
                if (wantedVideoAdaptation.id === chosenVideoAdaptation.adaptation.id) {
                    // We're good, continue.
                    recursiveUpdateVideoTrack(index + 1);
                    return;
                }
                else {
                    // select the right track
                    this._videoChoiceMemory.set(period, {
                        baseAdaptation: chosenVideoAdaptation.baseAdaptation,
                        adaptation: wantedVideoAdaptation,
                    });
                    videoItem.adaptation$.next(wantedVideoAdaptation);
                    // previous "next" call could have changed everything, start over
                    return recursiveUpdateVideoTrack(0);
                }
            }
            const optimalAdaptation = findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks);
            if (optimalAdaptation === null) {
                this._videoChoiceMemory.set(period, null);
                videoItem.adaptation$.next(null);
                // previous "next" call could have changed everything, start over
                return recursiveUpdateVideoTrack(0);
            }
            const newVideoAdaptation = getRightVideoTrack(optimalAdaptation, this.trickModeTrackEnabled);
            this._videoChoiceMemory.set(period, { baseAdaptation: optimalAdaptation,
                adaptation: newVideoAdaptation });
            videoItem.adaptation$.next(newVideoAdaptation);
            // previous "next" call could have changed everything, start over
            return recursiveUpdateVideoTrack(0);
        };
        recursiveUpdateVideoTrack(0);
    }
}
/**
 * Create a function allowing to compare audio Adaptations with a given
 * `preferredAudioTrack` preference to see if they match.
 *
 * This function is curried to be easily and optimally used in a loop context.
 *
 * @param {Object} preferredAudioTrack - The audio track preference you want to
 * compare audio Adaptations to.
 * @returns {Function} - Function taking in argument an audio Adaptation and
 * returning `true` if it matches the `preferredAudioTrack` preference (and
 * `false` otherwise.
 */
function createAudioPreferenceMatcher(preferredAudioTrack) {
    /**
     * Compares an audio Adaptation to the given `preferredAudioTrack` preference.
     * Returns `true` if it matches, false otherwise.
     * @param {Object} audioAdaptation
     * @returns {boolean}
     */
    return function matchAudioPreference(audioAdaptation) {
        var _a;
        if (preferredAudioTrack.normalized !== undefined) {
            const language = (_a = audioAdaptation.normalizedLanguage) !== null && _a !== void 0 ? _a : "";
            if (language !== preferredAudioTrack.normalized) {
                return false;
            }
        }
        if (preferredAudioTrack.audioDescription !== undefined) {
            if (preferredAudioTrack.audioDescription) {
                if (audioAdaptation.isAudioDescription !== true) {
                    return false;
                }
            }
            else if (audioAdaptation.isAudioDescription === true) {
                return false;
            }
        }
        if (preferredAudioTrack.codec === undefined) {
            return true;
        }
        const regxp = preferredAudioTrack.codec.test;
        const codecTestingFn = (rep) => rep.codec !== undefined && regxp.test(rep.codec);
        if (preferredAudioTrack.codec.all) {
            return audioAdaptation.representations.every(codecTestingFn);
        }
        return audioAdaptation.representations.some(codecTestingFn);
    };
}
/**
 * Find an optimal audio adaptation given their list and the array of preferred
 * audio tracks sorted from the most preferred to the least preferred.
 *
 * `null` if the most optimal audio adaptation is no audio adaptation.
 * @param {Array.<Adaptation>} audioAdaptations
 * @param {Array.<Object|null>} preferredAudioTracks
 * @returns {Adaptation|null}
 */
function findFirstOptimalAudioAdaptation(audioAdaptations, preferredAudioTracks) {
    if (audioAdaptations.length === 0) {
        return null;
    }
    for (let i = 0; i < preferredAudioTracks.length; i++) {
        const preferredAudioTrack = preferredAudioTracks[i];
        if (preferredAudioTrack === null) {
            return null;
        }
        const matchPreferredAudio = createAudioPreferenceMatcher(preferredAudioTrack);
        const foundAdaptation = arrayFind(audioAdaptations, matchPreferredAudio);
        if (foundAdaptation !== undefined) {
            return foundAdaptation;
        }
    }
    // no optimal adaptation, just return the first one
    return audioAdaptations[0];
}
/**
 * Create a function allowing to compare text Adaptations with a given
 * `preferredTextTrack` preference to see if they match.
 *
 * This function is curried to be easily and optimally used in a loop context.
 *
 * @param {Object} preferredTextTrack - The text track preference you want to
 * compare text Adaptations to.
 * @returns {Function} - Function taking in argument a text Adaptation and
 * returning `true` if it matches the `preferredTextTrack` preference (and
 * `false` otherwise.
 */
function createTextPreferenceMatcher(preferredTextTrack) {
    /**
     * Compares a text Adaptation to the given `preferredTextTrack` preference.
     * Returns `true` if it matches, false otherwise.
     * @param {Object} textAdaptation
     * @returns {boolean}
     */
    return function matchTextPreference(textAdaptation) {
        return takeFirstSet(textAdaptation.normalizedLanguage, "") === preferredTextTrack.normalized &&
            (preferredTextTrack.closedCaption ? textAdaptation.isClosedCaption === true :
                textAdaptation.isClosedCaption !== true);
    };
}
/**
 * Find an optimal text adaptation given their list and the array of preferred
 * text tracks sorted from the most preferred to the least preferred.
 *
 * `null` if the most optimal text adaptation is no text adaptation.
 * @param {Array.<Object>} textAdaptations
 * @param {Array.<Object|null>} preferredTextTracks
 * @returns {Adaptation|null}
 */
function findFirstOptimalTextAdaptation(textAdaptations, preferredTextTracks) {
    if (textAdaptations.length === 0) {
        return null;
    }
    for (let i = 0; i < preferredTextTracks.length; i++) {
        const preferredTextTrack = preferredTextTracks[i];
        if (preferredTextTrack === null) {
            return null;
        }
        const matchPreferredText = createTextPreferenceMatcher(preferredTextTrack);
        const foundAdaptation = arrayFind(textAdaptations, matchPreferredText);
        if (foundAdaptation !== undefined) {
            return foundAdaptation;
        }
    }
    // no optimal adaptation
    return null;
}
/**
 * Create a function allowing to compare video Adaptations with a given
 * `preferredVideoTrack` preference to see if they match.
 *
 * This function is curried to be easily and optimally used in a loop context.
 *
 * @param {Object} preferredVideoTrack - The video track preference you want to
 * compare video Adaptations to.
 * @returns {Function} - Function taking in argument a video Adaptation and
 * returning `true` if it matches the `preferredVideoTrack` preference (and
 * `false` otherwise.
 */
function createVideoPreferenceMatcher(preferredVideoTrack) {
    /**
     * Compares a video Adaptation to the given `preferredVideoTrack` preference.
     * Returns `true` if it matches, false otherwise.
     * @param {Object} videoAdaptation
     * @returns {boolean}
     */
    return function matchVideoPreference(videoAdaptation) {
        if (preferredVideoTrack.signInterpreted !== undefined &&
            preferredVideoTrack.signInterpreted !== videoAdaptation.isSignInterpreted) {
            return false;
        }
        if (preferredVideoTrack.codec === undefined) {
            return true;
        }
        const regxp = preferredVideoTrack.codec.test;
        const codecTestingFn = (rep) => rep.codec !== undefined && regxp.test(rep.codec);
        if (preferredVideoTrack.codec.all) {
            return videoAdaptation.representations.every(codecTestingFn);
        }
        return videoAdaptation.representations.some(codecTestingFn);
    };
}
/**
 * Find an optimal video adaptation given their list and the array of preferred
 * video tracks sorted from the most preferred to the least preferred.
 *
 * `null` if the most optimal video adaptation is no video adaptation.
 * @param {Array.<Adaptation>} videoAdaptations
 * @param {Array.<Object|null>} preferredVideoTracks
 * @returns {Adaptation|null}
 */
function findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks) {
    if (videoAdaptations.length === 0) {
        return null;
    }
    for (let i = 0; i < preferredVideoTracks.length; i++) {
        const preferredVideoTrack = preferredVideoTracks[i];
        if (preferredVideoTrack === null) {
            return null;
        }
        const matchPreferredVideo = createVideoPreferenceMatcher(preferredVideoTrack);
        const foundAdaptation = arrayFind(videoAdaptations, matchPreferredVideo);
        if (foundAdaptation !== undefined) {
            return foundAdaptation;
        }
    }
    // no optimal adaptation, just return the first one
    return videoAdaptations[0];
}
/**
 * Returns the index of the given `period` in the given `periods`
 * SortedList.
 * Returns `undefined` if that `period` is not found.
 * @param {Object} periods
 * @param {Object} period
 * @returns {number|undefined}
 */
function findPeriodIndex(periods, period) {
    for (let i = 0; i < periods.length(); i++) {
        const periodI = periods.get(i);
        if (periodI.period.id === period.id) {
            return i;
        }
    }
}
/**
 * Returns element in the given `periods` SortedList that corresponds to the
 * `period` given.
 * Returns `undefined` if that `period` is not found.
 * @param {Object} periods
 * @param {Object} period
 * @returns {Object|undefined}
 */
function getPeriodItem(periods, period) {
    for (let i = 0; i < periods.length(); i++) {
        const periodI = periods.get(i);
        if (periodI.period.id === period.id) {
            return periodI;
        }
    }
}
/**
 * Parse video Representation into a IVideoRepresentation.
 * @param {Object} representation
 * @returns {Object}
 */
function parseVideoRepresentation({ id, bitrate, frameRate, width, height, codec, hdrInfo }) {
    return { id, bitrate, frameRate, width, height, codec, hdrInfo };
}
/**
 * Parse audio Representation into a ITMAudioRepresentation.
 * @param {Object} representation
 * @returns {Object}
 */
function parseAudioRepresentation({ id, bitrate, codec }) {
    return { id, bitrate, codec };
}
function getRightVideoTrack(adaptation, isTrickModeEnabled) {
    var _a;
    if (isTrickModeEnabled &&
        ((_a = adaptation.trickModeTracks) === null || _a === void 0 ? void 0 : _a[0]) !== undefined) {
        return adaptation.trickModeTracks[0];
    }
    return adaptation;
}

;// CONCATENATED MODULE: ./src/core/api/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Returns Observable which will emit:
 *   - `"seeking"` when we are seeking in the given mediaElement
 *   - `"seeked"` when a seek is considered as finished by the given observation$
 *     Observable.
 * @param {HTMLMediaElement} mediaElement
 * @param {Observable} observation$
 * @returns {Observable}
 */
function emitSeekEvents(mediaElement, observation$) {
    return defer(() => {
        if (mediaElement === null) {
            return EMPTY;
        }
        let isSeeking$ = observation$.pipe(filter((observation) => observation.event === "seeking"), map(() => "seeking"));
        if (mediaElement.seeking) {
            isSeeking$ = isSeeking$.pipe(startWith("seeking"));
        }
        const hasSeeked$ = isSeeking$.pipe(switchMap(() => observation$.pipe(filter((observation) => observation.event === "seeked"), map(() => "seeked"), take(1))));
        return merge(isSeeking$, hasSeeked$);
    });
}
/**
 * Get state string for a _loaded_ content.
 * @param {HTMLMediaElement} mediaElement
 * @param {Object} stalledStatus - Current stalled state:
 *   - null when not stalled
 *   - a description of the situation if stalled.
 * @returns {string}
 */
function getLoadedContentState(mediaElement, stalledStatus) {
    const { FORCED_ENDED_THRESHOLD } = src_config.getCurrent();
    if (mediaElement.ended) {
        return "ENDED" /* PLAYER_STATES.ENDED */;
    }
    if (stalledStatus !== null) {
        // On some old browsers (e.g. Chrome 54), the browser does not
        // emit an 'ended' event in some conditions. Detect if we
        // reached the end by comparing the current position and the
        // duration instead.
        const gapBetweenDurationAndCurrentTime = Math.abs(mediaElement.duration -
            mediaElement.currentTime);
        if (FORCED_ENDED_THRESHOLD != null &&
            gapBetweenDurationAndCurrentTime < FORCED_ENDED_THRESHOLD) {
            return "ENDED" /* PLAYER_STATES.ENDED */;
        }
        return stalledStatus === "seeking" ? "SEEKING" /* PLAYER_STATES.SEEKING */ :
            "BUFFERING" /* PLAYER_STATES.BUFFERING */;
    }
    return mediaElement.paused ? "PAUSED" /* PLAYER_STATES.PAUSED */ :
        "PLAYING" /* PLAYER_STATES.PLAYING */;
}

;// CONCATENATED MODULE: ./src/core/api/public_api.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file defines the public API for the RxPlayer.
 * It also starts the different sub-parts of the player on various API calls.
 */


/* eslint-disable-next-line max-len */





















/* eslint-disable @typescript-eslint/naming-convention */
const { getPageActivityRef: public_api_getPageActivityRef, getPictureOnPictureStateRef: public_api_getPictureOnPictureStateRef, getVideoVisibilityRef: public_api_getVideoVisibilityRef, getVideoWidthRef: public_api_getVideoWidthRef, onFullscreenChange$: public_api_onFullscreenChange$, onTextTrackChanges$: public_api_onTextTrackChanges$ } = event_listeners_namespaceObject;
/**
 * @class Player
 * @extends EventEmitter
 */
class Player extends EventEmitter {
    /** All possible Error types emitted by the RxPlayer. */
    static get ErrorTypes() {
        return ErrorTypes;
    }
    /** All possible Error codes emitted by the RxPlayer. */
    static get ErrorCodes() {
        return ErrorCodes;
    }
    /**
     * Current log level.
     * Update current log level.
     * Should be either (by verbosity ascending):
     *   - "NONE"
     *   - "ERROR"
     *   - "WARNING"
     *   - "INFO"
     *   - "DEBUG"
     * Any other value will be translated to "NONE".
     */
    static get LogLevel() {
        return src_log.getLevel();
    }
    static set LogLevel(logLevel) {
        src_log.setLevel(logLevel);
    }
    /**
     * @constructor
     * @param {Object} options
     */
    constructor(options = {}) {
        super();
        const { initialAudioBitrate, initialVideoBitrate, limitVideoWidth, minAudioBitrate, minVideoBitrate, maxAudioBitrate, maxBufferAhead, maxBufferBehind, maxVideoBitrate, preferredAudioTracks, preferredTextTracks, preferredVideoTracks, throttleWhenHidden, throttleVideoBitrateWhenHidden, videoElement, wantedBufferAhead, maxVideoBufferSize, stopAtEnd } = parseConstructorOptions(options);
        const { DEFAULT_UNMUTED_VOLUME } = src_config.getCurrent();
        // Workaround to support Firefox autoplay on FF 42.
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1194624
        videoElement.preload = "auto";
        this.version = /* PLAYER_VERSION */ "3.29.0";
        this.log = src_log;
        this.state = "STOPPED";
        this.videoElement = videoElement;
        const destroyCanceller = new TaskCanceller();
        this._priv_destroy$ = new Subject(); // TODO Remove the need for this Subject
        this._priv_destroy$.pipe(take(1)).subscribe(() => {
            destroyCanceller.cancel();
        });
        this._priv_pictureInPictureRef = public_api_getPictureOnPictureStateRef(videoElement, destroyCanceller.signal);
        /** @deprecated */
        public_api_onFullscreenChange$(videoElement)
            .pipe(takeUntil(this._priv_destroy$))
            /* eslint-disable import/no-deprecated */
            .subscribe(() => this.trigger("fullscreenChange", this.isFullscreen()));
        /* eslint-enable import/no-deprecated */
        /** @deprecated */
        public_api_onTextTrackChanges$(videoElement.textTracks)
            .pipe(takeUntil(this._priv_destroy$), map((evt) => {
            const target = evt.target;
            const arr = [];
            for (let i = 0; i < target.length; i++) {
                const textTrack = target[i];
                arr.push(textTrack);
            }
            return arr;
        }), 
        // We can have two consecutive textTrackChanges with the exact same
        // payload when we perform multiple texttrack operations before the event
        // loop is freed.
        // In that case we only want to fire one time the observable.
        distinctUntilChanged((textTracksA, textTracksB) => {
            if (textTracksA.length !== textTracksB.length) {
                return false;
            }
            for (let i = 0; i < textTracksA.length; i++) {
                if (textTracksA[i] !== textTracksB[i]) {
                    return false;
                }
            }
            return true;
        }))
            .subscribe((x) => this._priv_onNativeTextTracksNext(x));
        this._priv_speed = createSharedReference(videoElement.playbackRate);
        this._priv_preferTrickModeTracks = false;
        this._priv_contentLock = createSharedReference(false);
        this._priv_bufferOptions = {
            wantedBufferAhead: createSharedReference(wantedBufferAhead),
            maxBufferAhead: createSharedReference(maxBufferAhead),
            maxBufferBehind: createSharedReference(maxBufferBehind),
            maxVideoBufferSize: createSharedReference(maxVideoBufferSize),
        };
        this._priv_bitrateInfos = {
            lastBitrates: { audio: initialAudioBitrate,
                video: initialVideoBitrate },
            minAutoBitrates: { audio: createSharedReference(minAudioBitrate),
                video: createSharedReference(minVideoBitrate) },
            maxAutoBitrates: { audio: createSharedReference(maxAudioBitrate),
                video: createSharedReference(maxVideoBitrate) },
            manualBitrates: { audio: createSharedReference(-1),
                video: createSharedReference(-1) },
        };
        this._priv_throttleWhenHidden = throttleWhenHidden;
        this._priv_throttleVideoBitrateWhenHidden = throttleVideoBitrateWhenHidden;
        this._priv_limitVideoWidth = limitVideoWidth;
        this._priv_mutedMemory = DEFAULT_UNMUTED_VOLUME;
        this._priv_trackChoiceManager = null;
        this._priv_mediaElementTrackChoiceManager = null;
        this._priv_currentError = null;
        this._priv_contentInfos = null;
        this._priv_contentEventsMemory = {};
        this._priv_stopAtEnd = stopAtEnd;
        this._priv_setPlayerState("STOPPED" /* PLAYER_STATES.STOPPED */);
        this._priv_preferredAudioTracks = preferredAudioTracks;
        this._priv_preferredTextTracks = preferredTextTracks;
        this._priv_preferredVideoTracks = preferredVideoTracks;
        this._priv_reloadingMetadata = {};
    }
    /**
     * Register a new callback for a player event event.
     *
     * @param {string} evt - The event to register a callback to
     * @param {Function} fn - The callback to call as that event is triggered.
     * The callback will take as argument the eventual payload of the event
     * (single argument).
     */
    addEventListener(evt, fn) {
        // The EventEmitter's `addEventListener` method takes an optional third
        // argument that we do not want to expose in the public API.
        // We thus overwrite that function to remove any possible usage of that
        // third argument.
        return super.addEventListener(evt, fn);
    }
    /**
     * Stop the playback for the current content.
     */
    stop() {
        if (this._priv_contentInfos !== null) {
            this._priv_contentInfos.currentContentCanceller.cancel();
        }
        this._priv_cleanUpCurrentContentState();
        if (this.state !== "STOPPED" /* PLAYER_STATES.STOPPED */) {
            this._priv_setPlayerState("STOPPED" /* PLAYER_STATES.STOPPED */);
        }
    }
    /**
     * Free the resources used by the player.
     * /!\ The player cannot be "used" anymore after this method has been called.
     */
    dispose() {
        // free resources linked to the loaded content
        this.stop();
        if (this.videoElement !== null) {
            // free resources used for decryption management
            disposeDecryptionResources(this.videoElement)
                .catch((err) => {
                const message = err instanceof Error ? err.message :
                    "Unknown error";
                src_log.error("API: Could not dispose decryption resources: " + message);
            });
        }
        // free Observables linked to the Player instance
        this._priv_destroy$.next();
        this._priv_destroy$.complete();
        // Complete all subjects and references
        this._priv_speed.finish();
        this._priv_contentLock.finish();
        this._priv_bufferOptions.wantedBufferAhead.finish();
        this._priv_bufferOptions.maxVideoBufferSize.finish();
        this._priv_bufferOptions.maxBufferAhead.finish();
        this._priv_bufferOptions.maxBufferBehind.finish();
        this._priv_bitrateInfos.manualBitrates.video.finish();
        this._priv_bitrateInfos.manualBitrates.audio.finish();
        this._priv_bitrateInfos.minAutoBitrates.video.finish();
        this._priv_bitrateInfos.minAutoBitrates.audio.finish();
        this._priv_bitrateInfos.maxAutoBitrates.video.finish();
        this._priv_bitrateInfos.maxAutoBitrates.audio.finish();
        this._priv_reloadingMetadata = {};
        // un-attach video element
        this.videoElement = null;
    }
    /**
     * Load a new video.
     * @param {Object} opts
     */
    loadVideo(opts) {
        const options = parseLoadVideoOptions(opts);
        src_log.info("API: Calling loadvideo", options.url, options.transport);
        this._priv_reloadingMetadata = { options };
        this._priv_initializeContentPlayback(options);
    }
    /**
     * Reload the last loaded content.
     * @param {Object} reloadOpts
     */
    reload(reloadOpts) {
        var _a, _b;
        const { options, manifest, reloadPosition, reloadInPause } = this._priv_reloadingMetadata;
        if (options === undefined) {
            throw new Error("API: Can't reload without having previously loaded a content.");
        }
        checkReloadOptions(reloadOpts);
        let startAt;
        if (((_a = reloadOpts === null || reloadOpts === void 0 ? void 0 : reloadOpts.reloadAt) === null || _a === void 0 ? void 0 : _a.position) !== undefined) {
            startAt = { position: reloadOpts.reloadAt.position };
        }
        else if (((_b = reloadOpts === null || reloadOpts === void 0 ? void 0 : reloadOpts.reloadAt) === null || _b === void 0 ? void 0 : _b.relative) !== undefined) {
            if (reloadPosition === undefined) {
                throw new Error("Can't reload to a relative position when previous content was not loaded.");
            }
            else {
                startAt = { position: reloadOpts.reloadAt.relative + reloadPosition };
            }
        }
        else if (reloadPosition !== undefined) {
            startAt = { position: reloadPosition };
        }
        let autoPlay;
        if ((reloadOpts === null || reloadOpts === void 0 ? void 0 : reloadOpts.autoPlay) !== undefined) {
            autoPlay = reloadOpts.autoPlay;
        }
        else if (reloadInPause !== undefined) {
            autoPlay = !reloadInPause;
        }
        const newOptions = Object.assign(Object.assign({}, options), { initialManifest: manifest });
        if (startAt !== undefined) {
            newOptions.startAt = startAt;
        }
        if (autoPlay !== undefined) {
            newOptions.autoPlay = autoPlay;
        }
        this._priv_initializeContentPlayback(newOptions);
    }
    /**
     * From given options, initialize content playback.
     * @param {Object} options
     */
    _priv_initializeContentPlayback(options) {
        var _a, _b, _c;
        const { autoPlay, audioTrackSwitchingMode, defaultAudioTrack, defaultTextTrack, enableFastSwitching, initialManifest, keySystems, lowLatencyMode, manualBitrateSwitchingMode, minimumManifestUpdateInterval, networkConfig, onCodecSwitch, startAt, transport, transportOptions, url } = options;
        // Perform multiple checks on the given options
        if (this.videoElement === null) {
            throw new Error("the attached video element is disposed");
        }
        const isDirectFile = transport === "directfile";
        /** Subject which will emit to stop the current content. */
        const currentContentCanceller = new TaskCanceller();
        // Some logic needs the equivalent of the `currentContentCanceller` under
        // an Observable form
        // TODO remove the need for `stoppedContent$`
        const stoppedContent$ = new Observable_Observable((obs) => {
            currentContentCanceller.signal.register(() => {
                obs.next();
                obs.complete();
            });
        });
        /** Future `this._priv_contentInfos` related to this content. */
        const contentInfos = { url,
            currentContentCanceller,
            isDirectFile,
            segmentBuffersStore: null,
            thumbnails: null,
            manifest: null,
            currentPeriod: null,
            activeAdaptations: null,
            activeRepresentations: null,
            initialAudioTrack: defaultAudioTrack,
            initialTextTrack: defaultTextTrack };
        const videoElement = this.videoElement;
        /** Global "playback observer" which will emit playback conditions */
        const playbackObserver = new PlaybackObserver(videoElement, {
            withMediaSource: !isDirectFile,
            lowLatencyMode,
        });
        currentContentCanceller.signal.register(() => {
            playbackObserver.stop();
        });
        /** Emit playback events. */
        let playback$;
        if (!isDirectFile) {
            const transportFn = src_features.transports[transport];
            if (typeof transportFn !== "function") {
                // Stop previous content and reset its state
                this.stop();
                this._priv_currentError = null;
                throw new Error(`transport "${transport}" not supported`);
            }
            const transportPipelines = transportFn(transportOptions);
            const { offlineRetry, segmentRetry, manifestRetry, manifestRequestTimeout, segmentRequestTimeout } = networkConfig;
            /** Interface used to load and refresh the Manifest. */
            const manifestFetcher = new manifest(url, transportPipelines, { lowLatencyMode,
                maxRetryRegular: manifestRetry,
                maxRetryOffline: offlineRetry,
                requestTimeout: manifestRequestTimeout });
            /** Observable emitting the initial Manifest */
            let manifest$;
            if (initialManifest instanceof src_manifest) {
                manifest$ = of({ type: "parsed",
                    manifest: initialManifest });
            }
            else if (initialManifest !== undefined) {
                manifest$ = manifestFetcher.parse(initialManifest, { previousManifest: null,
                    unsafeMode: false });
            }
            else {
                manifest$ = manifestFetcher.fetch(url).pipe(mergeMap((response) => response.type === "warning" ?
                    of(response) : // bubble-up warnings
                    response.parse({ previousManifest: null, unsafeMode: false })));
            }
            // Load the Manifest right now and share it with every subscriber until
            // the content is stopped
            manifest$ = manifest$.pipe(takeUntil(stoppedContent$), shareReplay());
            manifest$.subscribe();
            // now that the Manifest is loading, stop previous content and reset state
            // This is done after fetching the Manifest as `stop` could technically
            // take time.
            this.stop();
            this._priv_currentError = null;
            this._priv_contentInfos = contentInfos;
            const relyOnVideoVisibilityAndSize = canRelyOnVideoVisibilityAndSize();
            const throttlers = { throttle: {},
                throttleBitrate: {},
                limitWidth: {} };
            if (this._priv_throttleWhenHidden) {
                if (!relyOnVideoVisibilityAndSize) {
                    src_log.warn("API: Can't apply throttleWhenHidden because " +
                        "browser can't be trusted for visibility.");
                }
                else {
                    throttlers.throttle = {
                        video: createMappedReference(public_api_getPageActivityRef(currentContentCanceller.signal), isActive => isActive ? Infinity : 0, currentContentCanceller.signal),
                    };
                }
            }
            if (this._priv_throttleVideoBitrateWhenHidden) {
                if (!relyOnVideoVisibilityAndSize) {
                    src_log.warn("API: Can't apply throttleVideoBitrateWhenHidden because " +
                        "browser can't be trusted for visibility.");
                }
                else {
                    throttlers.throttleBitrate = {
                        video: createMappedReference(public_api_getVideoVisibilityRef(this._priv_pictureInPictureRef, currentContentCanceller.signal), isActive => isActive ? Infinity : 0, currentContentCanceller.signal),
                    };
                }
            }
            if (this._priv_limitVideoWidth) {
                if (!relyOnVideoVisibilityAndSize) {
                    src_log.warn("API: Can't apply limitVideoWidth because browser can't be " +
                        "trusted for video size.");
                }
                else {
                    throttlers.limitWidth = {
                        video: public_api_getVideoWidthRef(videoElement, this._priv_pictureInPictureRef, currentContentCanceller.signal),
                    };
                }
            }
            /** Options used by the adaptive logic. */
            const adaptiveOptions = {
                initialBitrates: this._priv_bitrateInfos.lastBitrates,
                lowLatencyMode,
                manualBitrates: this._priv_bitrateInfos.manualBitrates,
                minAutoBitrates: this._priv_bitrateInfos.minAutoBitrates,
                maxAutoBitrates: this._priv_bitrateInfos.maxAutoBitrates,
                throttlers,
            };
            /** Options used by the TextTrack SegmentBuffer. */
            const textTrackOptions = options.textTrackMode === "native" ?
                { textTrackMode: "native",
                    hideNativeSubtitle: options.hideNativeSubtitle } :
                { textTrackMode: "html",
                    textTrackElement: options.textTrackElement };
            const bufferOptions = object_assign({ audioTrackSwitchingMode,
                enableFastSwitching,
                manualBitrateSwitchingMode,
                onCodecSwitch }, this._priv_bufferOptions);
            const segmentRequestOptions = { regularError: segmentRetry,
                requestTimeout: segmentRequestTimeout,
                offlineError: offlineRetry };
            // We've every options set up. Start everything now
            const init$ = init({ adaptiveOptions,
                autoPlay,
                bufferOptions,
                playbackObserver,
                keySystems,
                lowLatencyMode,
                manifest$,
                manifestFetcher,
                mediaElement: videoElement,
                minimumManifestUpdateInterval,
                segmentRequestOptions,
                speed: this._priv_speed,
                startAt,
                transport: transportPipelines,
                textTrackOptions })
                .pipe(takeUntil(stoppedContent$));
            playback$ = connectable(init$, { connector: () => new Subject(),
                resetOnDisconnect: false });
        }
        else {
            // Stop previous content and reset its state
            this.stop();
            this._priv_currentError = null;
            if (src_features.directfile === null) {
                throw new Error("DirectFile feature not activated in your build.");
            }
            this._priv_contentInfos = contentInfos;
            this._priv_mediaElementTrackChoiceManager =
                new src_features.directfile.mediaElementTrackChoiceManager(this.videoElement);
            const preferredAudioTracks = defaultAudioTrack === undefined ?
                this._priv_preferredAudioTracks :
                [defaultAudioTrack];
            this._priv_mediaElementTrackChoiceManager
                .setPreferredAudioTracks(preferredAudioTracks, true);
            const preferredTextTracks = defaultTextTrack === undefined ?
                this._priv_preferredTextTracks :
                [defaultTextTrack];
            this._priv_mediaElementTrackChoiceManager
                .setPreferredTextTracks(preferredTextTracks, true);
            this._priv_mediaElementTrackChoiceManager
                .setPreferredVideoTracks(this._priv_preferredVideoTracks, true);
            this.trigger("availableAudioTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableAudioTracks());
            this.trigger("availableVideoTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableVideoTracks());
            this.trigger("availableTextTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableTextTracks());
            this.trigger("audioTrackChange", (_a = this._priv_mediaElementTrackChoiceManager.getChosenAudioTrack()) !== null && _a !== void 0 ? _a : null);
            this.trigger("textTrackChange", (_b = this._priv_mediaElementTrackChoiceManager.getChosenTextTrack()) !== null && _b !== void 0 ? _b : null);
            this.trigger("videoTrackChange", (_c = this._priv_mediaElementTrackChoiceManager.getChosenVideoTrack()) !== null && _c !== void 0 ? _c : null);
            this._priv_mediaElementTrackChoiceManager
                .addEventListener("availableVideoTracksChange", (val) => this.trigger("availableVideoTracksChange", val));
            this._priv_mediaElementTrackChoiceManager
                .addEventListener("availableAudioTracksChange", (val) => this.trigger("availableAudioTracksChange", val));
            this._priv_mediaElementTrackChoiceManager
                .addEventListener("availableTextTracksChange", (val) => this.trigger("availableTextTracksChange", val));
            this._priv_mediaElementTrackChoiceManager
                .addEventListener("audioTrackChange", (val) => this.trigger("audioTrackChange", val));
            this._priv_mediaElementTrackChoiceManager
                .addEventListener("videoTrackChange", (val) => this.trigger("videoTrackChange", val));
            this._priv_mediaElementTrackChoiceManager
                .addEventListener("textTrackChange", (val) => this.trigger("textTrackChange", val));
            const directfileInit$ = src_features.directfile.initDirectFile({ autoPlay,
                keySystems,
                mediaElement: videoElement,
                speed: this._priv_speed,
                playbackObserver,
                startAt,
                url })
                .pipe(takeUntil(stoppedContent$));
            playback$ = connectable(directfileInit$, { connector: () => new Subject(),
                resetOnDisconnect: false });
        }
        /** Emit an object when the player "stalls" and null when it un-stalls */
        const stalled$ = playback$.pipe(filter((evt) => evt.type === "stalled" ||
            evt.type === "unstalled"), map(x => x.value), distinctUntilChanged((prevStallReason, currStallReason) => {
            return prevStallReason === null && currStallReason === null ||
                (prevStallReason !== null && currStallReason !== null &&
                    prevStallReason === currStallReason);
        }));
        /** Emit when the content is considered "loaded". */
        const loaded$ = playback$.pipe(filter((evt) => evt.type === "loaded"), share());
        /** Emit when we will "reload" the MediaSource. */
        const reloading$ = playback$
            .pipe(filter((evt) => evt.type === "reloading-media-source"), share());
        /** Emit when the media element emits a "seeking" event. */
        const observation$ = playbackObserver.getReference().asObservable();
        const stateChangingEvent$ = observation$.pipe(filter(o => {
            return o.event === "seeking" || o.event === "ended" ||
                o.event === "play" || o.event === "pause";
        }));
        /** Emit state updates once the content is considered "loaded". */
        const loadedStateUpdates$ = combineLatest([
            stalled$.pipe(startWith(null)),
            stateChangingEvent$.pipe(startWith(null)),
        ]).pipe(takeUntil(stoppedContent$), map(([stalledStatus]) => getLoadedContentState(videoElement, stalledStatus)));
        /** Emit all player "state" updates. */
        const playerState$ = concat_concat(of("LOADING" /* PLAYER_STATES.LOADING */), // Begin with LOADING
        loaded$.pipe(switchMap((_, i) => {
            const isFirstLoad = i === 0;
            return merge(
            // Purposely subscribed first so a RELOADING triggered synchronously
            // after a LOADED state is catched.
            reloading$.pipe(map(() => "RELOADING" /* PLAYER_STATES.RELOADING */)), 
            // Only switch to LOADED state for the first (i.e. non-RELOADING) load
            isFirstLoad ? of("LOADED" /* PLAYER_STATES.LOADED */) :
                EMPTY, 
            // Purposely put last so any other state change happens after we've
            // already switched to LOADED
            loadedStateUpdates$.pipe(takeUntil(reloading$), 
            // For the first load, we prefer staying at the LOADED state over
            // PAUSED when autoPlay is disabled.
            // For consecutive loads however, there's no LOADED state.
            skipWhile(state => isFirstLoad && state === "PAUSED" /* PLAYER_STATES.PAUSED */)));
        }))).pipe(distinctUntilChanged());
        let playbackSubscription;
        stoppedContent$.subscribe(() => {
            if (playbackSubscription !== undefined) {
                playbackSubscription.unsubscribe();
            }
        });
        /**
         * Function updating `this._priv_reloadingMetadata` in function of the
         * current state and playback conditions.
         * To call when either might change.
         * @param {string} state - The player state we're about to switch to.
         */
        const updateReloadingMetadata = (state) => {
            switch (state) {
                case "STOPPED":
                case "RELOADING":
                case "LOADING":
                    break; // keep previous metadata
                case "ENDED":
                    this._priv_reloadingMetadata.reloadInPause = true;
                    this._priv_reloadingMetadata.reloadPosition =
                        playbackObserver.getReference().getValue().position;
                    break;
                default:
                    const o = playbackObserver.getReference().getValue();
                    this._priv_reloadingMetadata.reloadInPause = o.paused;
                    this._priv_reloadingMetadata.reloadPosition = o.position;
                    break;
            }
        };
        playerState$.pipe(tap(newState => {
            updateReloadingMetadata(newState);
            this._priv_setPlayerState(newState);
            // Previous call could have performed all kind of side-effects, thus,
            // we re-check the current state associated to the RxPlayer
            if (this.state === "ENDED" && this._priv_stopAtEnd) {
                currentContentCanceller.cancel();
            }
        }), map(state => state !== "RELOADING" && state !== "STOPPED"), distinctUntilChanged(), switchMap(canSendObservation => canSendObservation ? observation$ :
            EMPTY), takeUntil(stoppedContent$)).subscribe(o => {
            updateReloadingMetadata(this.state);
            this._priv_triggerPositionUpdate(o);
        });
        // Link "seeking" and "seeked" events (once the content is loaded)
        loaded$.pipe(switchMap(() => emitSeekEvents(this.videoElement, observation$)), takeUntil(stoppedContent$)).subscribe((evt) => {
            src_log.info(`API: Triggering "${evt}" event`);
            this.trigger(evt, null);
        });
        // Link playback events to the corresponding callbacks
        playback$.subscribe({
            next: (x) => this._priv_onPlaybackEvent(x),
            error: (err) => this._priv_onPlaybackError(err),
            complete: () => {
                if (!contentInfos.currentContentCanceller.isUsed) {
                    src_log.info("API: Previous playback finished. Stopping and cleaning-up...");
                    contentInfos.currentContentCanceller.cancel();
                    this._priv_cleanUpCurrentContentState();
                    this._priv_setPlayerState("STOPPED" /* PLAYER_STATES.STOPPED */);
                }
            },
        });
        // initialize the content only when the lock is inactive
        this._priv_contentLock.asObservable()
            .pipe(filter((isLocked) => !isLocked), take(1), takeUntil(stoppedContent$))
            .subscribe(() => {
            // start playback!
            playbackSubscription = playback$.connect();
        });
    }
    /**
     * Returns fatal error if one for the current content.
     * null otherwise.
     * @returns {Object|null} - The current Error (`null` when no error).
     */
    getError() {
        return this._priv_currentError;
    }
    /**
     * Returns manifest/playlist object.
     * null if the player is STOPPED.
     * @deprecated
     * @returns {Manifest|null} - The current Manifest (`null` when not known).
     */
    getManifest() {
        warnOnce("getManifest is deprecated." +
            " Please open an issue if you used this API.");
        if (this._priv_contentInfos === null) {
            return null;
        }
        return this._priv_contentInfos.manifest;
    }
    /**
     * Returns Adaptations (tracks) for every currently playing type
     * (audio/video/text...).
     * @deprecated
     * @returns {Object|null} - The current Adaptation objects, per type (`null`
     * when none is known for now.
     */
    getCurrentAdaptations() {
        warnOnce("getCurrentAdaptations is deprecated." +
            " Please open an issue if you used this API.");
        if (this._priv_contentInfos === null) {
            return null;
        }
        const { currentPeriod, activeAdaptations } = this._priv_contentInfos;
        if (currentPeriod === null ||
            activeAdaptations === null ||
            isNullOrUndefined(activeAdaptations[currentPeriod.id])) {
            return null;
        }
        return activeAdaptations[currentPeriod.id];
    }
    /**
     * Returns representations (qualities) for every currently playing type
     * (audio/video/text...).
     * @deprecated
     * @returns {Object|null} - The current Representation objects, per type
     * (`null` when none is known for now.
     */
    getCurrentRepresentations() {
        warnOnce("getCurrentRepresentations is deprecated." +
            " Please open an issue if you used this API.");
        return this._priv_getCurrentRepresentations();
    }
    /**
     * Returns the media DOM element used by the player.
     * You should not its HTML5 API directly and use the player's method instead,
     * to ensure a well-behaved player.
     * @returns {HTMLMediaElement|null} - The HTMLMediaElement used (`null` when
     * disposed)
     */
    getVideoElement() {
        return this.videoElement;
    }
    /**
     * If one returns the first native text-track element attached to the media element.
     * @deprecated
     * @returns {TextTrack} - The native TextTrack attached (`null` when none)
     */
    getNativeTextTrack() {
        warnOnce("getNativeTextTrack is deprecated." +
            " Please open an issue if you used this API.");
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        const videoElement = this.videoElement;
        const textTracks = videoElement.textTracks;
        if (textTracks.length > 0) {
            return videoElement.textTracks[0];
        }
        else {
            return null;
        }
    }
    /**
     * Returns the player's current state.
     * @returns {string} - The current Player's state
     */
    getPlayerState() {
        return this.state;
    }
    /**
     * Returns true if both:
     *   - a content is loaded
     *   - the content loaded is a live content
     * @returns {Boolean} - `true` if we're playing a live content, `false` otherwise.
     */
    isLive() {
        if (this._priv_contentInfos === null) {
            return false;
        }
        const { isDirectFile, manifest } = this._priv_contentInfos;
        if (isDirectFile || manifest === null) {
            return false;
        }
        return manifest.isLive;
    }
    /**
     * Returns `true` if trickmode playback is active (usually through the usage
     * of the `setPlaybackRate` method), which means that the RxPlayer selects
     * "trickmode" video tracks in priority.
     * @returns {Boolean}
     */
    areTrickModeTracksEnabled() {
        return this._priv_preferTrickModeTracks;
    }
    /**
     * Returns the url of the content's manifest
     * @returns {string|undefined} - Current URL. `undefined` if not known or no
     * URL yet.
     */
    getUrl() {
        if (this._priv_contentInfos === null) {
            return undefined;
        }
        const { isDirectFile, manifest, url } = this._priv_contentInfos;
        if (isDirectFile) {
            return url;
        }
        if (manifest !== null) {
            return manifest.getUrl();
        }
        return undefined;
    }
    /**
     * Returns the video duration, in seconds.
     * NaN if no video is playing.
     * @returns {Number}
     */
    getVideoDuration() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        return this.videoElement.duration;
    }
    /**
     * Returns in seconds the difference between:
     *   - the end of the current contiguous loaded range.
     *   - the current time
     * @returns {Number}
     */
    getVideoBufferGap() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        const videoElement = this.videoElement;
        return getLeftSizeOfRange(videoElement.buffered, videoElement.currentTime);
    }
    /**
     * Returns in seconds the difference between:
     *   - the end of the current contiguous loaded range.
     *   - the start of the current contiguous loaded range.
     * @returns {Number}
     */
    getVideoLoadedTime() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        const videoElement = this.videoElement;
        return getSizeOfRange(videoElement.buffered, videoElement.currentTime);
    }
    /**
     * Returns in seconds the difference between:
     *   - the current time.
     *   - the start of the current contiguous loaded range.
     * @returns {Number}
     */
    getVideoPlayedTime() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        const videoElement = this.videoElement;
        return getPlayedSizeOfRange(videoElement.buffered, videoElement.currentTime);
    }
    /**
     * Get the current position, in s, in wall-clock time.
     * That is:
     *   - for live content, get a timestamp, in s, of the current played content.
     *   - for static content, returns the position from beginning in s.
     *
     * If you do not know if you want to use this method or getPosition:
     *   - If what you want is to display the current time to the user, use this
     *     one.
     *   - If what you want is to interact with the player's API or perform other
     *     actions (like statistics) with the real player data, use getPosition.
     *
     * @returns {Number}
     */
    getWallClockTime() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        if (this._priv_contentInfos === null) {
            return this.videoElement.currentTime;
        }
        const { isDirectFile, manifest } = this._priv_contentInfos;
        if (isDirectFile) {
            const startDate = getStartDate(this.videoElement);
            return (startDate !== null && startDate !== void 0 ? startDate : 0) + this.videoElement.currentTime;
        }
        if (manifest !== null) {
            const currentTime = this.videoElement.currentTime;
            const ast = manifest.availabilityStartTime !== undefined ?
                manifest.availabilityStartTime :
                0;
            return currentTime + ast;
        }
        return 0;
    }
    /**
     * Get the current position, in seconds, of the video element.
     *
     * If you do not know if you want to use this method or getWallClockTime:
     *   - If what you want is to display the current time to the user, use
     *     getWallClockTime.
     *   - If what you want is to interact with the player's API or perform other
     *     actions (like statistics) with the real player data, use this one.
     *
     * @returns {Number}
     */
    getPosition() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        return this.videoElement.currentTime;
    }
    /**
     * Returns the current playback rate at which the video plays.
     * @returns {Number}
     */
    getPlaybackRate() {
        return this._priv_speed.getValue();
    }
    /**
     * Update the playback rate of the video.
     *
     * This method's effect is persisted from content to content, and can be
     * called even when no content is playing (it will still have an effect for
     * the next contents).
     *
     * If you want to reverse effects provoked by `setPlaybackRate` before playing
     * another content, you will have to call `setPlaybackRate` first with the
     * default settings you want to set.
     *
     * As an example, to reset the speed to "normal" (x1) speed and to disable
     * trickMode video tracks (which may have been enabled by a previous
     * `setPlaybackRate` call), you can call:
     * ```js
     * player.setPlaybackRate(1, { preferTrickModeTracks: false });
     * ```
     *
     * --
     *
     * This method can be used to switch to or exit from "trickMode" video tracks,
     * which are tracks specifically defined to mimic the visual aspect of a VCR's
     * fast forward/rewind feature, by only displaying a few video frames during
     * playback.
     *
     * This behavior is configurable through the second argument, by adding a
     * property named `preferTrickModeTracks` to that object.
     *
     * You can set that value to `true` to switch to trickMode video tracks when
     * available, and set it to `false` when you want to disable that logic.
     * Note that like any configuration given to `setPlaybackRate`, this setting
     * is persisted through all future contents played by the player.
     *
     * If you want to stop enabling trickMode tracks, you will have to call
     * `setPlaybackRate` again with `preferTrickModeTracks` set to `false`.
     *
     * You can know at any moment whether this behavior is enabled by calling
     * the `areTrickModeTracksEnabled` method. This will only means that the
     * RxPlayer will select in priority trickmode video tracks, not that the
     * currently chosen video tracks is a trickmode track (for example, some
     * contents may have no trickmode tracks available).
     *
     * If you want to know about the latter instead, you can call `getVideoTrack`
     * and/or listen to `videoTrackChange` events. The track returned may have an
     * `isTrickModeTrack` property set to `true`, indicating that it is a
     * trickmode track.
     *
     * Note that switching to or getting out of a trickmode video track may
     * lead to the player being a brief instant in a `"RELOADING"` state (notified
     * through `playerStateChange` events and the `getLoadedContentState` method).
     * When in that state, a black screen may be displayed and multiple RxPlayer
     * APIs will not be usable.
     *
     * @param {Number} rate
     * @param {Object} opts
     */
    setPlaybackRate(rate, opts) {
        if (rate !== this._priv_speed.getValue()) {
            this._priv_speed.setValue(rate);
        }
        const preferTrickModeTracks = opts === null || opts === void 0 ? void 0 : opts.preferTrickModeTracks;
        if (typeof preferTrickModeTracks !== "boolean") {
            return;
        }
        this._priv_preferTrickModeTracks = preferTrickModeTracks;
        if (this._priv_trackChoiceManager !== null) {
            if (preferTrickModeTracks &&
                !this._priv_trackChoiceManager.isTrickModeEnabled()) {
                this._priv_trackChoiceManager.enableVideoTrickModeTracks();
            }
            else if (!preferTrickModeTracks &&
                this._priv_trackChoiceManager.isTrickModeEnabled()) {
                this._priv_trackChoiceManager.disableVideoTrickModeTracks();
            }
        }
    }
    /**
     * Returns all available bitrates for the current video Adaptation.
     * @returns {Array.<Number>}
     */
    getAvailableVideoBitrates() {
        if (this._priv_contentInfos === null) {
            return [];
        }
        const { currentPeriod, activeAdaptations } = this._priv_contentInfos;
        if (currentPeriod === null || activeAdaptations === null) {
            return [];
        }
        const adaptations = activeAdaptations[currentPeriod.id];
        if (adaptations === undefined || isNullOrUndefined(adaptations.video)) {
            return [];
        }
        return adaptations.video.getAvailableBitrates();
    }
    /**
     * Returns all available bitrates for the current audio Adaptation.
     * @returns {Array.<Number>}
     */
    getAvailableAudioBitrates() {
        if (this._priv_contentInfos === null) {
            return [];
        }
        const { currentPeriod, activeAdaptations } = this._priv_contentInfos;
        if (currentPeriod === null || activeAdaptations === null) {
            return [];
        }
        const adaptations = activeAdaptations[currentPeriod.id];
        if (adaptations === undefined || isNullOrUndefined(adaptations.audio)) {
            return [];
        }
        return adaptations.audio.getAvailableBitrates();
    }
    /**
     * Returns the manual audio bitrate set. -1 if in AUTO mode.
     * @returns {Number}
     */
    getManualAudioBitrate() {
        return this._priv_bitrateInfos.manualBitrates.audio.getValue();
    }
    /**
     * Returns the manual video bitrate set. -1 if in AUTO mode.
     * @returns {Number}
     */
    getManualVideoBitrate() {
        return this._priv_bitrateInfos.manualBitrates.video.getValue();
    }
    /**
     * Returns currently considered bitrate for video segments.
     * @returns {Number|undefined}
     */
    getVideoBitrate() {
        const representations = this._priv_getCurrentRepresentations();
        if (representations === null || isNullOrUndefined(representations.video)) {
            return undefined;
        }
        return representations.video.bitrate;
    }
    /**
     * Returns currently considered bitrate for audio segments.
     * @returns {Number|undefined}
     */
    getAudioBitrate() {
        const representations = this._priv_getCurrentRepresentations();
        if (representations === null || isNullOrUndefined(representations.audio)) {
            return undefined;
        }
        return representations.audio.bitrate;
    }
    /**
     * Returns minimum wanted video bitrate currently set.
     * @returns {Number}
     */
    getMinVideoBitrate() {
        return this._priv_bitrateInfos.minAutoBitrates.video.getValue();
    }
    /**
     * Returns minimum wanted audio bitrate currently set.
     * @returns {Number}
     */
    getMinAudioBitrate() {
        return this._priv_bitrateInfos.minAutoBitrates.audio.getValue();
    }
    /**
     * Returns maximum wanted video bitrate currently set.
     * @returns {Number}
     */
    getMaxVideoBitrate() {
        return this._priv_bitrateInfos.maxAutoBitrates.video.getValue();
    }
    /**
     * Returns maximum wanted audio bitrate currently set.
     * @returns {Number}
     */
    getMaxAudioBitrate() {
        return this._priv_bitrateInfos.maxAutoBitrates.audio.getValue();
    }
    /**
     * Play/Resume the current video.
     * @returns {Promise}
     */
    play() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        const playPromise = this.videoElement.play();
        /* eslint-disable @typescript-eslint/unbound-method */
        if (isNullOrUndefined(playPromise) || typeof playPromise.catch !== "function") {
            /* eslint-enable @typescript-eslint/unbound-method */
            return Promise.resolve();
        }
        return playPromise.catch((error) => {
            if (error.name === "NotAllowedError") {
                const warning = new MediaError("MEDIA_ERR_PLAY_NOT_ALLOWED", error.toString());
                this.trigger("warning", warning);
            }
            throw error;
        });
    }
    /**
     * Pause the current video.
     */
    pause() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        this.videoElement.pause();
    }
    /**
     * Seek to a given absolute position.
     * @param {Number|Object} time
     * @returns {Number} - The time the player has seek to
     */
    seekTo(time) {
        var _a;
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        if (this._priv_contentInfos === null) {
            throw new Error("player: no content loaded");
        }
        const { isDirectFile, manifest } = this._priv_contentInfos;
        if (!isDirectFile && manifest === null) {
            throw new Error("player: the content did not load yet");
        }
        let positionWanted;
        if (typeof time === "number") {
            positionWanted = time;
        }
        else if (typeof time === "object") {
            const timeObj = time;
            const currentTs = this.videoElement.currentTime;
            if (!isNullOrUndefined(timeObj.relative)) {
                positionWanted = currentTs + timeObj.relative;
            }
            else if (!isNullOrUndefined(timeObj.position)) {
                positionWanted = timeObj.position;
            }
            else if (!isNullOrUndefined(timeObj.wallClockTime)) {
                if (manifest !== null) {
                    positionWanted = timeObj.wallClockTime - ((_a = manifest.availabilityStartTime) !== null && _a !== void 0 ? _a : 0);
                }
                else if (isDirectFile && this.videoElement !== null) {
                    const startDate = getStartDate(this.videoElement);
                    if (startDate !== undefined) {
                        positionWanted = timeObj.wallClockTime - startDate;
                    }
                }
                if (positionWanted === undefined) {
                    positionWanted = timeObj.wallClockTime;
                }
            }
            else {
                throw new Error("invalid time object. You must set one of the " +
                    "following properties: \"relative\", \"position\" or " +
                    "\"wallClockTime\"");
            }
        }
        if (positionWanted === undefined) {
            throw new Error("invalid time given");
        }
        this.videoElement.currentTime = positionWanted;
        return positionWanted;
    }
    /**
     * Returns true if the media element is full screen.
     * @deprecated
     * @returns {Boolean}
     */
    isFullscreen() {
        warnOnce("isFullscreen is deprecated." +
            " Fullscreen management should now be managed by the application");
        return isFullscreen();
    }
    /**
     * Set/exit fullScreen.
     * @deprecated
     * @param {Boolean} [goFull=true] - if false, exit full screen.
     */
    setFullscreen(goFull = true) {
        warnOnce("setFullscreen is deprecated." +
            " Fullscreen management should now be managed by the application");
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        if (goFull) {
            requestFullscreen(this.videoElement);
        }
        else {
            exitFullscreen();
        }
    }
    /**
     * Exit from full screen mode.
     * @deprecated
     */
    exitFullscreen() {
        warnOnce("exitFullscreen is deprecated." +
            " Fullscreen management should now be managed by the application");
        exitFullscreen();
    }
    /**
     * Returns the current player's audio volume on the media element.
     * From 0 (no audio) to 1 (maximum volume).
     * @returns {Number}
     */
    getVolume() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        return this.videoElement.volume;
    }
    /**
     * Set the player's audio volume. From 0 (no volume) to 1 (maximum volume).
     * @param {Number} volume
     */
    setVolume(volume) {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        const videoElement = this.videoElement;
        if (volume !== videoElement.volume) {
            videoElement.volume = volume;
            this.trigger("volumeChange", volume);
        }
    }
    /**
     * Returns true if the volume is set to 0. false otherwise.
     * @returns {Boolean}
     */
    isMute() {
        return this.getVolume() === 0;
    }
    /**
     * Set the volume to 0 and save current one for when unmuted.
     */
    mute() {
        this._priv_mutedMemory = this.getVolume();
        this.setVolume(0);
    }
    /**
     * Set the volume back to when it was when mute was last called.
     * If the volume was set to 0, set a default volume instead (see config).
     */
    unMute() {
        const { DEFAULT_UNMUTED_VOLUME } = src_config.getCurrent();
        const vol = this.getVolume();
        if (vol === 0) {
            this.setVolume(this._priv_mutedMemory === 0 ? DEFAULT_UNMUTED_VOLUME :
                this._priv_mutedMemory);
        }
    }
    /**
     * Force the video bitrate to a given value. Act as a ceil.
     * -1 to set it on AUTO Mode
     * @param {Number} btr
     */
    setVideoBitrate(btr) {
        this._priv_bitrateInfos.manualBitrates.video.setValue(btr);
    }
    /**
     * Force the audio bitrate to a given value. Act as a ceil.
     * -1 to set it on AUTO Mode
     * @param {Number} btr
     */
    setAudioBitrate(btr) {
        this._priv_bitrateInfos.manualBitrates.audio.setValue(btr);
    }
    /**
     * Update the minimum video bitrate the user can switch to.
     * @param {Number} btr
     */
    setMinVideoBitrate(btr) {
        const maxVideoBitrate = this._priv_bitrateInfos.maxAutoBitrates.video.getValue();
        if (btr > maxVideoBitrate) {
            throw new Error("Invalid minimum video bitrate given. " +
                `Its value, "${btr}" is superior the current maximum ` +
                `video birate, "${maxVideoBitrate}".`);
        }
        this._priv_bitrateInfos.minAutoBitrates.video.setValue(btr);
    }
    /**
     * Update the minimum audio bitrate the user can switch to.
     * @param {Number} btr
     */
    setMinAudioBitrate(btr) {
        const maxAudioBitrate = this._priv_bitrateInfos.maxAutoBitrates.audio.getValue();
        if (btr > maxAudioBitrate) {
            throw new Error("Invalid minimum audio bitrate given. " +
                `Its value, "${btr}" is superior the current maximum ` +
                `audio birate, "${maxAudioBitrate}".`);
        }
        this._priv_bitrateInfos.minAutoBitrates.audio.setValue(btr);
    }
    /**
     * Update the maximum video bitrate the user can switch to.
     * @param {Number} btr
     */
    setMaxVideoBitrate(btr) {
        const minVideoBitrate = this._priv_bitrateInfos.minAutoBitrates.video.getValue();
        if (btr < minVideoBitrate) {
            throw new Error("Invalid maximum video bitrate given. " +
                `Its value, "${btr}" is inferior the current minimum ` +
                `video birate, "${minVideoBitrate}".`);
        }
        this._priv_bitrateInfos.maxAutoBitrates.video.setValue(btr);
    }
    /**
     * Update the maximum audio bitrate the user can switch to.
     * @param {Number} btr
     */
    setMaxAudioBitrate(btr) {
        const minAudioBitrate = this._priv_bitrateInfos.minAutoBitrates.audio.getValue();
        if (btr < minAudioBitrate) {
            throw new Error("Invalid maximum audio bitrate given. " +
                `Its value, "${btr}" is inferior the current minimum ` +
                `audio birate, "${minAudioBitrate}".`);
        }
        this._priv_bitrateInfos.maxAutoBitrates.audio.setValue(btr);
    }
    /**
     * Set the max buffer size for the buffer behind the current position.
     * Every buffer data before will be removed.
     * @param {Number} depthInSeconds
     */
    setMaxBufferBehind(depthInSeconds) {
        this._priv_bufferOptions.maxBufferBehind.setValue(depthInSeconds);
    }
    /**
     * Set the max buffer size for the buffer behind the current position.
     * Every buffer data before will be removed.
     * @param {Number} depthInSeconds
     */
    setMaxBufferAhead(depthInSeconds) {
        this._priv_bufferOptions.maxBufferAhead.setValue(depthInSeconds);
    }
    /**
     * Set the max buffer size for the buffer ahead of the current position.
     * The player will stop downloading chunks when this size is reached.
     * @param {Number} sizeInSeconds
     */
    setWantedBufferAhead(sizeInSeconds) {
        this._priv_bufferOptions.wantedBufferAhead.setValue(sizeInSeconds);
    }
    /**
     * Set the max buffer size the buffer should take in memory
     * The player . will stop downloading chunks when this size is reached.
     * @param {Number} sizeInKBytes
     */
    setMaxVideoBufferSize(sizeInKBytes) {
        this._priv_bufferOptions.maxVideoBufferSize.setValue(sizeInKBytes);
    }
    /**
     * Returns the max buffer size for the buffer behind the current position.
     * @returns {Number}
     */
    getMaxBufferBehind() {
        return this._priv_bufferOptions.maxBufferBehind.getValue();
    }
    /**
     * Returns the max buffer size for the buffer behind the current position.
     * @returns {Number}
     */
    getMaxBufferAhead() {
        return this._priv_bufferOptions.maxBufferAhead.getValue();
    }
    /**
     * Returns the max buffer size for the buffer ahead of the current position.
     * @returns {Number}
     */
    getWantedBufferAhead() {
        return this._priv_bufferOptions.wantedBufferAhead.getValue();
    }
    /**
     * Returns the max buffer memory size for the buffer in kilobytes
     * @returns {Number}
     */
    getMaxVideoBufferSize() {
        return this._priv_bufferOptions.maxVideoBufferSize.getValue();
    }
    /**
     * Returns type of current keysystem (e.g. playready, widevine) if the content
     * is encrypted. null otherwise.
     * @returns {string|null}
     */
    getCurrentKeySystem() {
        if (this.videoElement === null) {
            throw new Error("Disposed player");
        }
        return getCurrentKeySystem(this.videoElement);
    }
    /**
     * Returns every available audio tracks for the current Period.
     * @returns {Array.<Object>|null}
     */
    getAvailableAudioTracks() {
        var _a, _b;
        if (this._priv_contentInfos === null) {
            return [];
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            return (_b = (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.getAvailableAudioTracks()) !== null && _b !== void 0 ? _b : [];
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return [];
        }
        return this._priv_trackChoiceManager.getAvailableAudioTracks(currentPeriod);
    }
    /**
     * Returns every available text tracks for the current Period.
     * @returns {Array.<Object>|null}
     */
    getAvailableTextTracks() {
        var _a, _b;
        if (this._priv_contentInfos === null) {
            return [];
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            return (_b = (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.getAvailableTextTracks()) !== null && _b !== void 0 ? _b : [];
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return [];
        }
        return this._priv_trackChoiceManager.getAvailableTextTracks(currentPeriod);
    }
    /**
     * Returns every available video tracks for the current Period.
     * @returns {Array.<Object>|null}
     */
    getAvailableVideoTracks() {
        var _a, _b;
        if (this._priv_contentInfos === null) {
            return [];
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            return (_b = (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.getAvailableVideoTracks()) !== null && _b !== void 0 ? _b : [];
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return [];
        }
        return this._priv_trackChoiceManager.getAvailableVideoTracks(currentPeriod);
    }
    /**
     * Returns currently chosen audio language for the current Period.
     * @returns {string}
     */
    getAudioTrack() {
        if (this._priv_contentInfos === null) {
            return undefined;
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            if (this._priv_mediaElementTrackChoiceManager === null) {
                return undefined;
            }
            return this._priv_mediaElementTrackChoiceManager.getChosenAudioTrack();
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return undefined;
        }
        return this._priv_trackChoiceManager.getChosenAudioTrack(currentPeriod);
    }
    /**
     * Returns currently chosen subtitle for the current Period.
     * @returns {string}
     */
    getTextTrack() {
        if (this._priv_contentInfos === null) {
            return undefined;
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            if (this._priv_mediaElementTrackChoiceManager === null) {
                return undefined;
            }
            return this._priv_mediaElementTrackChoiceManager.getChosenTextTrack();
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return undefined;
        }
        return this._priv_trackChoiceManager.getChosenTextTrack(currentPeriod);
    }
    /**
     * Returns currently chosen video track for the current Period.
     * @returns {string}
     */
    getVideoTrack() {
        if (this._priv_contentInfos === null) {
            return undefined;
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            if (this._priv_mediaElementTrackChoiceManager === null) {
                return undefined;
            }
            return this._priv_mediaElementTrackChoiceManager.getChosenVideoTrack();
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return undefined;
        }
        return this._priv_trackChoiceManager.getChosenVideoTrack(currentPeriod);
    }
    /**
     * Update the audio language for the current Period.
     * @param {string} audioId
     * @throws Error - the current content has no TrackChoiceManager.
     * @throws Error - the given id is linked to no audio track.
     */
    setAudioTrack(audioId) {
        var _a;
        if (this._priv_contentInfos === null) {
            throw new Error("No content loaded");
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            try {
                (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.setAudioTrackById(audioId);
                return;
            }
            catch (e) {
                throw new Error("player: unknown audio track");
            }
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            throw new Error("No compatible content launched.");
        }
        try {
            this._priv_trackChoiceManager.setAudioTrackByID(currentPeriod, audioId);
        }
        catch (e) {
            throw new Error("player: unknown audio track");
        }
    }
    /**
     * Update the text language for the current Period.
     * @param {string} sub
     * @throws Error - the current content has no TrackChoiceManager.
     * @throws Error - the given id is linked to no text track.
     */
    setTextTrack(textId) {
        var _a;
        if (this._priv_contentInfos === null) {
            throw new Error("No content loaded");
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            try {
                (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.setTextTrackById(textId);
                return;
            }
            catch (e) {
                throw new Error("player: unknown text track");
            }
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            throw new Error("No compatible content launched.");
        }
        try {
            this._priv_trackChoiceManager.setTextTrackByID(currentPeriod, textId);
        }
        catch (e) {
            throw new Error("player: unknown text track");
        }
    }
    /**
     * Disable subtitles for the current content.
     */
    disableTextTrack() {
        var _a;
        if (this._priv_contentInfos === null) {
            return;
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.disableTextTrack();
            return;
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return;
        }
        return this._priv_trackChoiceManager.disableTextTrack(currentPeriod);
    }
    /**
     * Update the video track for the current Period.
     * @param {string} videoId
     * @throws Error - the current content has no TrackChoiceManager.
     * @throws Error - the given id is linked to no video track.
     */
    setVideoTrack(videoId) {
        var _a;
        if (this._priv_contentInfos === null) {
            throw new Error("No content loaded");
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile) {
            try {
                (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.setVideoTrackById(videoId);
                return;
            }
            catch (e) {
                throw new Error("player: unknown video track");
            }
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            throw new Error("No compatible content launched.");
        }
        try {
            this._priv_trackChoiceManager.setVideoTrackByID(currentPeriod, videoId);
        }
        catch (e) {
            throw new Error("player: unknown video track");
        }
    }
    /**
     * Disable video track for the current content.
     */
    disableVideoTrack() {
        if (this._priv_contentInfos === null) {
            return;
        }
        const { currentPeriod, isDirectFile } = this._priv_contentInfos;
        if (isDirectFile && this._priv_mediaElementTrackChoiceManager !== null) {
            return this._priv_mediaElementTrackChoiceManager.disableVideoTrack();
        }
        if (this._priv_trackChoiceManager === null || currentPeriod === null) {
            return;
        }
        return this._priv_trackChoiceManager.disableVideoTrack(currentPeriod);
    }
    /**
     * Returns the current list of preferred audio tracks, in preference order.
     * @returns {Array.<Object>}
     */
    getPreferredAudioTracks() {
        return this._priv_preferredAudioTracks;
    }
    /**
     * Returns the current list of preferred text tracks, in preference order.
     * @returns {Array.<Object>}
     */
    getPreferredTextTracks() {
        return this._priv_preferredTextTracks;
    }
    /**
     * Returns the current list of preferred text tracks, in preference order.
     * @returns {Array.<Object>}
     */
    getPreferredVideoTracks() {
        return this._priv_preferredVideoTracks;
    }
    /**
     * Set the list of preferred audio tracks, in preference order.
     * @param {Array.<Object>} tracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredAudioTracks(tracks, shouldApply = false) {
        if (!Array.isArray(tracks)) {
            throw new Error("Invalid `setPreferredAudioTracks` argument. " +
                "Should have been an Array.");
        }
        this._priv_preferredAudioTracks = tracks;
        if (this._priv_trackChoiceManager !== null) {
            this._priv_trackChoiceManager.setPreferredAudioTracks(tracks, shouldApply);
        }
        else if (this._priv_mediaElementTrackChoiceManager !== null) {
            this._priv_mediaElementTrackChoiceManager.setPreferredAudioTracks(tracks, shouldApply);
        }
    }
    /**
     * Set the list of preferred text tracks, in preference order.
     * @param {Array.<Object>} tracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Periods. `false` if it should only
     * be applied to new content.
     */
    setPreferredTextTracks(tracks, shouldApply = false) {
        if (!Array.isArray(tracks)) {
            throw new Error("Invalid `setPreferredTextTracks` argument. " +
                "Should have been an Array.");
        }
        this._priv_preferredTextTracks = tracks;
        if (this._priv_trackChoiceManager !== null) {
            this._priv_trackChoiceManager.setPreferredTextTracks(tracks, shouldApply);
        }
        else if (this._priv_mediaElementTrackChoiceManager !== null) {
            this._priv_mediaElementTrackChoiceManager.setPreferredTextTracks(tracks, shouldApply);
        }
    }
    /**
     * Set the list of preferred text tracks, in preference order.
     * @param {Array.<Object>} tracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredVideoTracks(tracks, shouldApply = false) {
        if (!Array.isArray(tracks)) {
            throw new Error("Invalid `setPreferredVideoTracks` argument. " +
                "Should have been an Array.");
        }
        this._priv_preferredVideoTracks = tracks;
        if (this._priv_trackChoiceManager !== null) {
            this._priv_trackChoiceManager.setPreferredVideoTracks(tracks, shouldApply);
        }
        else if (this._priv_mediaElementTrackChoiceManager !== null) {
            this._priv_mediaElementTrackChoiceManager.setPreferredVideoTracks(tracks, shouldApply);
        }
    }
    /**
     * @returns {Array.<Object>|null}
     * @deprecated
     */
    getImageTrackData() {
        warnOnce("`getImageTrackData` is deprecated." +
            "Please use the `parseBifThumbnails` tool instead.");
        if (this._priv_contentInfos === null) {
            return null;
        }
        /* eslint-disable import/no-deprecated */
        return this._priv_contentInfos.thumbnails;
        /* eslint-enable import/no-deprecated */
    }
    /**
     * Get minimum seek-able position.
     * @returns {number}
     */
    getMinimumPosition() {
        if (this._priv_contentInfos === null) {
            return null;
        }
        if (this._priv_contentInfos.isDirectFile) {
            return 0;
        }
        const { manifest } = this._priv_contentInfos;
        if (manifest !== null) {
            return manifest.getMinimumSafePosition();
        }
        return null;
    }
    /**
     * Get maximum seek-able position.
     * @returns {number}
     */
    getMaximumPosition() {
        if (this._priv_contentInfos === null) {
            return null;
        }
        const { isDirectFile, manifest } = this._priv_contentInfos;
        if (isDirectFile) {
            if (this.videoElement === null) {
                throw new Error("Disposed player");
            }
            return this.videoElement.duration;
        }
        if (manifest !== null) {
            if (!manifest.isDynamic && this.videoElement !== null) {
                return this.videoElement.duration;
            }
            return manifest.getMaximumSafePosition();
        }
        return null;
    }
    /**
     * /!\ For demo use only! Do not touch!
     *
     * Returns every chunk buffered for a given buffer type.
     * Returns `null` if no SegmentBuffer was created for this type of buffer.
     * @param {string} bufferType
     * @returns {Array.<Object>|null}
     */
    __priv_getSegmentBufferContent(bufferType) {
        if (this._priv_contentInfos === null ||
            this._priv_contentInfos.segmentBuffersStore === null) {
            return null;
        }
        const segmentBufferStatus = this._priv_contentInfos
            .segmentBuffersStore.getStatus(bufferType);
        return segmentBufferStatus.type === "initialized" ?
            segmentBufferStatus.value.getInventory() :
            null;
    }
    /**
     * Reset all state properties relative to a playing content.
     */
    _priv_cleanUpCurrentContentState() {
        var _a;
        src_log.debug("Locking `contentLock` to clean-up the current content.");
        // lock playback of new contents while cleaning up is pending
        this._priv_contentLock.setValue(true);
        this._priv_contentInfos = null;
        this._priv_trackChoiceManager = null;
        (_a = this._priv_mediaElementTrackChoiceManager) === null || _a === void 0 ? void 0 : _a.dispose();
        this._priv_mediaElementTrackChoiceManager = null;
        this._priv_contentEventsMemory = {};
        // DRM-related clean-up
        const freeUpContentLock = () => {
            if (this.videoElement !== null) { // If not disposed
                src_log.debug("Unlocking `contentLock`. Next content can begin.");
                this._priv_contentLock.setValue(false);
            }
        };
        if (!isNullOrUndefined(this.videoElement)) {
            clearOnStop(this.videoElement).then(() => {
                src_log.debug("API: DRM session cleaned-up with success!");
                freeUpContentLock();
            }, (err) => {
                src_log.error("API: An error arised when trying to clean-up the DRM session:" +
                    (err instanceof Error ? err.toString() :
                        "Unknown Error"));
                freeUpContentLock();
            });
        }
        else {
            freeUpContentLock();
        }
    }
    /**
     * Triggered each time the playback Observable emits.
     *
     * React to various events.
     *
     * @param {Object} event - payload emitted
     */
    _priv_onPlaybackEvent(event) {
        switch (event.type) {
            case "inband-events":
                const inbandEvents = event.value;
                this.trigger("inbandEvents", inbandEvents);
                return;
            case "stream-event":
                this.trigger("streamEvent", event.value);
                break;
            case "stream-event-skip":
                this.trigger("streamEventSkip", event.value);
                break;
            case "activePeriodChanged":
                this._priv_onActivePeriodChanged(event.value);
                break;
            case "periodStreamReady":
                this._priv_onPeriodStreamReady(event.value);
                break;
            case "periodStreamCleared":
                this._priv_onPeriodStreamCleared(event.value);
                break;
            case "reloading-media-source":
                this._priv_onReloadingMediaSource();
                break;
            case "representationChange":
                this._priv_onRepresentationChange(event.value);
                break;
            case "adaptationChange":
                this._priv_onAdaptationChange(event.value);
                break;
            case "bitrateEstimationChange":
                this._priv_onBitrateEstimationChange(event.value);
                break;
            case "manifestReady":
                this._priv_onManifestReady(event.value);
                break;
            case "warning":
                this._priv_onPlaybackWarning(event.value);
                break;
            case "loaded":
                if (this._priv_contentInfos === null) {
                    src_log.error("API: Loaded event while no content is loaded");
                    return;
                }
                this._priv_contentInfos.segmentBuffersStore = event.value.segmentBuffersStore;
                break;
            case "decipherabilityUpdate":
                this.trigger("decipherabilityUpdate", event.value);
                break;
            case "added-segment":
                if (this._priv_contentInfos === null) {
                    src_log.error("API: Added segment while no content is loaded");
                    return;
                }
                // Manage image tracks
                // @deprecated
                const { content, segmentData } = event.value;
                if (content.adaptation.type === "image") {
                    if (!isNullOrUndefined(segmentData) &&
                        segmentData.type === "bif") {
                        const imageData = segmentData.data;
                        /* eslint-disable import/no-deprecated */
                        this._priv_contentInfos.thumbnails = imageData;
                        this.trigger("imageTrackUpdate", { data: this._priv_contentInfos.thumbnails });
                        /* eslint-enable import/no-deprecated */
                    }
                }
        }
    }
    /**
     * Triggered when we received a fatal error.
     * Clean-up ressources and signal that the content has stopped on error.
     * @param {Error} error
     */
    _priv_onPlaybackError(error) {
        const formattedError = formatError(error, {
            defaultCode: "NONE",
            defaultReason: "An unknown error stopped content playback.",
        });
        formattedError.fatal = true;
        if (this._priv_contentInfos !== null) {
            this._priv_contentInfos.currentContentCanceller.cancel();
        }
        this._priv_cleanUpCurrentContentState();
        this._priv_currentError = formattedError;
        src_log.error("API: The player stopped because of an error", error instanceof Error ? error : "");
        this._priv_setPlayerState("STOPPED" /* PLAYER_STATES.STOPPED */);
        // TODO This condition is here because the eventual callback called when the
        // player state is updated can launch a new content, thus the error will not
        // be here anymore, in which case triggering the "error" event is unwanted.
        // This is very ugly though, and we should probable have a better solution
        if (this._priv_currentError === formattedError) {
            this.trigger("error", formattedError);
        }
    }
    /**
     * Triggered when we received a warning event during playback.
     * Trigger the right API event.
     * @param {Error} error
     */
    _priv_onPlaybackWarning(error) {
        const formattedError = formatError(error, {
            defaultCode: "NONE",
            defaultReason: "An unknown error happened.",
        });
        src_log.warn("API: Sending warning:", formattedError);
        this.trigger("warning", formattedError);
    }
    /**
     * Triggered when the Manifest has been loaded for the current content.
     * Initialize various private properties and emit initial event.
     * @param {Object} value
     */
    _priv_onManifestReady({ manifest }) {
        const contentInfos = this._priv_contentInfos;
        if (contentInfos === null) {
            src_log.error("API: The manifest is loaded but no content is.");
            return;
        }
        contentInfos.manifest = manifest;
        this._priv_reloadingMetadata.manifest = manifest;
        const { initialAudioTrack, initialTextTrack } = contentInfos;
        this._priv_trackChoiceManager = new TrackChoiceManager({
            preferTrickModeTracks: this._priv_preferTrickModeTracks,
        });
        const preferredAudioTracks = initialAudioTrack === undefined ?
            this._priv_preferredAudioTracks :
            [initialAudioTrack];
        this._priv_trackChoiceManager.setPreferredAudioTracks(preferredAudioTracks, true);
        const preferredTextTracks = initialTextTrack === undefined ?
            this._priv_preferredTextTracks :
            [initialTextTrack];
        this._priv_trackChoiceManager.setPreferredTextTracks(preferredTextTracks, true);
        this._priv_trackChoiceManager.setPreferredVideoTracks(this._priv_preferredVideoTracks, true);
        manifest.addEventListener("manifestUpdate", () => {
            // Update the tracks chosen if it changed
            if (this._priv_trackChoiceManager !== null) {
                this._priv_trackChoiceManager.update();
            }
        }, contentInfos.currentContentCanceller.signal);
    }
    /**
     * Triggered each times the current Period Changed.
     * Store and emit initial state for the Period.
     *
     * @param {Object} value
     */
    _priv_onActivePeriodChanged({ period }) {
        var _a, _b, _c, _d, _e, _f;
        if (this._priv_contentInfos === null) {
            src_log.error("API: The active period changed but no content is loaded");
            return;
        }
        this._priv_contentInfos.currentPeriod = period;
        if (this._priv_contentEventsMemory.periodChange !== period) {
            this._priv_contentEventsMemory.periodChange = period;
            this.trigger("periodChange", period);
        }
        this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
        this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
        this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks());
        // Emit intial events for the Period
        if (this._priv_trackChoiceManager !== null) {
            const audioTrack = this._priv_trackChoiceManager.getChosenAudioTrack(period);
            const textTrack = this._priv_trackChoiceManager.getChosenTextTrack(period);
            const videoTrack = this._priv_trackChoiceManager.getChosenVideoTrack(period);
            this.trigger("audioTrackChange", audioTrack);
            this.trigger("textTrackChange", textTrack);
            this.trigger("videoTrackChange", videoTrack);
        }
        else {
            this.trigger("audioTrackChange", null);
            this.trigger("textTrackChange", null);
            this.trigger("videoTrackChange", null);
        }
        this._priv_triggerAvailableBitratesChangeEvent("availableAudioBitratesChange", this.getAvailableAudioBitrates());
        this._priv_triggerAvailableBitratesChangeEvent("availableVideoBitratesChange", this.getAvailableVideoBitrates());
        const audioBitrate = (_c = (_b = (_a = this._priv_getCurrentRepresentations()) === null || _a === void 0 ? void 0 : _a.audio) === null || _b === void 0 ? void 0 : _b.bitrate) !== null && _c !== void 0 ? _c : -1;
        this._priv_triggerCurrentBitrateChangeEvent("audioBitrateChange", audioBitrate);
        const videoBitrate = (_f = (_e = (_d = this._priv_getCurrentRepresentations()) === null || _d === void 0 ? void 0 : _d.video) === null || _e === void 0 ? void 0 : _e.bitrate) !== null && _f !== void 0 ? _f : -1;
        this._priv_triggerCurrentBitrateChangeEvent("videoBitrateChange", videoBitrate);
    }
    /**
     * Triggered each times a new "PeriodStream" is ready.
     * Choose the right Adaptation for the Period and emit it.
     * @param {Object} value
     */
    _priv_onPeriodStreamReady(value) {
        const { type, period, adaptation$ } = value;
        switch (type) {
            case "video":
                if (this._priv_trackChoiceManager === null) {
                    src_log.error("API: TrackChoiceManager not instanciated for a new video period");
                    adaptation$.next(null);
                }
                else {
                    this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);
                    this._priv_trackChoiceManager.setInitialVideoTrack(period);
                }
                break;
            case "audio":
                if (this._priv_trackChoiceManager === null) {
                    src_log.error(`API: TrackChoiceManager not instanciated for a new ${type} period`);
                    adaptation$.next(null);
                }
                else {
                    this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);
                    this._priv_trackChoiceManager.setInitialAudioTrack(period);
                }
                break;
            case "text":
                if (this._priv_trackChoiceManager === null) {
                    src_log.error(`API: TrackChoiceManager not instanciated for a new ${type} period`);
                    adaptation$.next(null);
                }
                else {
                    this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);
                    this._priv_trackChoiceManager.setInitialTextTrack(period);
                }
                break;
            default:
                const adaptations = period.adaptations[type];
                if (!isNullOrUndefined(adaptations) && adaptations.length > 0) {
                    adaptation$.next(adaptations[0]);
                }
                else {
                    adaptation$.next(null);
                }
                break;
        }
    }
    /**
     * Triggered each times we "remove" a PeriodStream.
     * @param {Object} value
     */
    _priv_onPeriodStreamCleared(value) {
        const { type, period } = value;
        // Clean-up track choice from TrackChoiceManager
        switch (type) {
            case "audio":
            case "text":
            case "video":
                if (this._priv_trackChoiceManager !== null) {
                    this._priv_trackChoiceManager.removePeriod(type, period);
                }
                break;
        }
        // Clean-up stored Representation and Adaptation information
        if (this._priv_contentInfos === null) {
            return;
        }
        const { activeAdaptations, activeRepresentations } = this._priv_contentInfos;
        if (!isNullOrUndefined(activeAdaptations) &&
            !isNullOrUndefined(activeAdaptations[period.id])) {
            const activePeriodAdaptations = activeAdaptations[period.id];
            delete activePeriodAdaptations[type];
            if (Object.keys(activePeriodAdaptations).length === 0) {
                delete activeAdaptations[period.id];
            }
        }
        if (!isNullOrUndefined(activeRepresentations) &&
            !isNullOrUndefined(activeRepresentations[period.id])) {
            const activePeriodRepresentations = activeRepresentations[period.id];
            delete activePeriodRepresentations[type];
            if (Object.keys(activePeriodRepresentations).length === 0) {
                delete activeRepresentations[period.id];
            }
        }
    }
    /**
     * Triggered each time the content is re-loaded on the MediaSource.
     */
    _priv_onReloadingMediaSource() {
        if (this._priv_contentInfos !== null) {
            this._priv_contentInfos.segmentBuffersStore = null;
        }
        if (this._priv_trackChoiceManager !== null) {
            this._priv_trackChoiceManager.resetPeriods();
        }
    }
    /**
     * Triggered each times a new Adaptation is considered for the current
     * content.
     * Store given Adaptation and emit it if from the current Period.
     * @param {Object} value
     */
    _priv_onAdaptationChange({ type, adaptation, period, }) {
        if (this._priv_contentInfos === null) {
            src_log.error("API: The adaptations changed but no content is loaded");
            return;
        }
        // lazily create this._priv_contentInfos.activeAdaptations
        if (this._priv_contentInfos.activeAdaptations === null) {
            this._priv_contentInfos.activeAdaptations = {};
        }
        const { activeAdaptations, currentPeriod } = this._priv_contentInfos;
        const activePeriodAdaptations = activeAdaptations[period.id];
        if (isNullOrUndefined(activePeriodAdaptations)) {
            activeAdaptations[period.id] = { [type]: adaptation };
        }
        else {
            activePeriodAdaptations[type] = adaptation;
        }
        if (this._priv_trackChoiceManager !== null &&
            currentPeriod !== null && !isNullOrUndefined(period) &&
            period.id === currentPeriod.id) {
            switch (type) {
                case "audio":
                    const audioTrack = this._priv_trackChoiceManager
                        .getChosenAudioTrack(currentPeriod);
                    this.trigger("audioTrackChange", audioTrack);
                    const availableAudioBitrates = this.getAvailableAudioBitrates();
                    this._priv_triggerAvailableBitratesChangeEvent("availableAudioBitratesChange", availableAudioBitrates);
                    break;
                case "text":
                    const textTrack = this._priv_trackChoiceManager
                        .getChosenTextTrack(currentPeriod);
                    this.trigger("textTrackChange", textTrack);
                    break;
                case "video":
                    const videoTrack = this._priv_trackChoiceManager
                        .getChosenVideoTrack(currentPeriod);
                    this.trigger("videoTrackChange", videoTrack);
                    const availableVideoBitrates = this.getAvailableVideoBitrates();
                    this._priv_triggerAvailableBitratesChangeEvent("availableVideoBitratesChange", availableVideoBitrates);
                    break;
            }
        }
    }
    /**
     * Triggered each times a new Representation is considered during playback.
     *
     * Store given Representation and emit it if from the current Period.
     *
     * @param {Object} obj
     */
    _priv_onRepresentationChange({ type, period, representation, }) {
        var _a;
        if (this._priv_contentInfos === null) {
            src_log.error("API: The representations changed but no content is loaded");
            return;
        }
        // lazily create this._priv_contentInfos.activeRepresentations
        if (this._priv_contentInfos.activeRepresentations === null) {
            this._priv_contentInfos.activeRepresentations = {};
        }
        const { activeRepresentations, currentPeriod } = this._priv_contentInfos;
        const activePeriodRepresentations = activeRepresentations[period.id];
        if (isNullOrUndefined(activePeriodRepresentations)) {
            activeRepresentations[period.id] = { [type]: representation };
        }
        else {
            activePeriodRepresentations[type] = representation;
        }
        const bitrate = (_a = representation === null || representation === void 0 ? void 0 : representation.bitrate) !== null && _a !== void 0 ? _a : -1;
        if (!isNullOrUndefined(period) &&
            currentPeriod !== null &&
            currentPeriod.id === period.id) {
            if (type === "video") {
                this._priv_triggerCurrentBitrateChangeEvent("videoBitrateChange", bitrate);
            }
            else if (type === "audio") {
                this._priv_triggerCurrentBitrateChangeEvent("audioBitrateChange", bitrate);
            }
        }
    }
    /**
     * Triggered each time a bitrate estimate is calculated.
     *
     * Emit it.
     *
     * @param {Object} value
     */
    _priv_onBitrateEstimationChange({ type, bitrate, }) {
        if (bitrate !== undefined) {
            this._priv_bitrateInfos.lastBitrates[type] = bitrate;
        }
        this.trigger("bitrateEstimationChange", { type, bitrate });
    }
    /**
     * Triggered each time a textTrack is added to the video DOM Element.
     *
     * Trigger the right Player Event.
     *
     * @param {Array.<TextTrackElement>} tracks
     */
    _priv_onNativeTextTracksNext(tracks) {
        this.trigger("nativeTextTracksChange", tracks);
    }
    /**
     * Triggered each time the player state updates.
     *
     * Trigger the right Player Event.
     *
     * @param {string} newState
     */
    _priv_setPlayerState(newState) {
        if (this.state !== newState) {
            this.state = newState;
            src_log.info("API: playerStateChange event", newState);
            this.trigger("playerStateChange", newState);
        }
    }
    /**
     * Triggered each time a playback observation.
     *
     * Trigger the right Player Event
     *
     * @param {Object} observation
     */
    _priv_triggerPositionUpdate(observation) {
        var _a;
        if (this._priv_contentInfos === null) {
            src_log.warn("API: Cannot perform time update: no content loaded.");
            return;
        }
        const { isDirectFile, manifest } = this._priv_contentInfos;
        if ((!isDirectFile && manifest === null) || isNullOrUndefined(observation)) {
            return;
        }
        const maximumPosition = manifest !== null ? manifest.getMaximumSafePosition() :
            undefined;
        const positionData = {
            position: observation.position,
            duration: observation.duration,
            playbackRate: observation.playbackRate,
            maximumBufferTime: maximumPosition,
            // TODO bufferGap may be undefined
            bufferGap: observation.bufferGap === undefined ||
                !isFinite(observation.bufferGap) ?
                0 :
                observation.bufferGap,
        };
        if (manifest !== null &&
            manifest.isLive &&
            observation.position > 0) {
            const ast = (_a = manifest.availabilityStartTime) !== null && _a !== void 0 ? _a : 0;
            positionData.wallClockTime = observation.position + ast;
            const livePosition = manifest.getLivePosition();
            if (livePosition !== undefined) {
                positionData.liveGap = livePosition - observation.position;
            }
        }
        else if (isDirectFile && this.videoElement !== null) {
            const startDate = getStartDate(this.videoElement);
            if (startDate !== undefined) {
                positionData.wallClockTime = startDate + observation.position;
            }
        }
        this.trigger("positionUpdate", positionData);
    }
    /**
     * Trigger one of the "availableBitratesChange" event only if it changed from
     * the previously stored value.
     * @param {string} event
     * @param {Array.<number>} newVal
     */
    _priv_triggerAvailableBitratesChangeEvent(event, newVal) {
        const prevVal = this._priv_contentEventsMemory[event];
        if (prevVal === undefined || !areArraysOfNumbersEqual(newVal, prevVal)) {
            this._priv_contentEventsMemory[event] = newVal;
            this.trigger(event, newVal);
        }
    }
    /**
     * Trigger one of the "bitrateChange" event only if it changed from the
     * previously stored value.
     * @param {string} event
     * @param {number} newVal
     */
    _priv_triggerCurrentBitrateChangeEvent(event, newVal) {
        if (newVal !== this._priv_contentEventsMemory[event]) {
            this._priv_contentEventsMemory[event] = newVal;
            this.trigger(event, newVal);
        }
    }
    _priv_getCurrentRepresentations() {
        if (this._priv_contentInfos === null) {
            return null;
        }
        const { currentPeriod, activeRepresentations } = this._priv_contentInfos;
        if (currentPeriod === null ||
            activeRepresentations === null ||
            isNullOrUndefined(activeRepresentations[currentPeriod.id])) {
            return null;
        }
        return activeRepresentations[currentPeriod.id];
    }
}
Player.version = /* PLAYER_VERSION */ "3.29.0";
/* harmony default export */ const public_api = (Player);

;// CONCATENATED MODULE: ./src/core/api/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/* harmony default export */ const api = (public_api);

;// CONCATENATED MODULE: ./src/features/add_features.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIE OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Array.<Object>} featureFuncList
 */
function addFeatures(featureFuncList) {
    for (let i = 0; i < featureFuncList.length; i++) {
        const addFeature = featureFuncList[i];
        if (typeof addFeature === "function") {
            addFeature(features_object);
        }
        else if (!isNullOrUndefined(addFeature) &&
            typeof addFeature._addFeature === "function") {
            addFeature._addFeature(features_object);
        }
        else {
            throw new Error("Unrecognized feature");
        }
    }
}

;// CONCATENATED MODULE: ./src/minimal.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This file exports a MinimalPlayer class for which features can be lazy-loaded.
 *
 * This allows to import a "minimal" player with a small bundle size and then
 * import only features that is needed.
 */



if (typeof __RX_PLAYER_DEBUG_MODE__ === "boolean" && __RX_PLAYER_DEBUG_MODE__) {
    src_log.setLevel("DEBUG");
}
else if (false) {}
/**
 * Minimal Player for which you can features at will:
 *   - start with no features
 *   - Allow to only load features wanted
 *
 * @class MinimalPlayer
 */
class MinimalPlayer extends api {
    static addFeatures(featureList) {
        addFeatures(featureList);
    }
}

;// CONCATENATED MODULE: ./demo/full/scripts/lib/vespertine.js


/**
 * Homemade redux and r9webapp-core inspired state management architecture.
 *
 * This function creates a new module (defined in the modules directory) and
 * give it the payload in argument.
 *
 * The module can send state updates at any time, through its state Object,
 * and returns an Object containing functions: the actions.
 *
 * The actions can then be called through the dispatch function returned here.
 *
 * As an example is simpler for everyone:
 * @example
 * ```js
 * // 1 - The module
 * const TodoList = ({ state }, { maxLength }) => {
 *   // initial state
 *   state.set({
 *     todos: [],
 *   });
 *
 *   let lastTodoId = 0;
 *   return {
 *
 *     // add a todo if max length is not yet reached
 *     ADD_TODO: function(text) {
 *       const currentTodos = state.get("todos");
 *       if (currentTodos.length >= maxLength) {
 *         return -1;
 *       }
 *
 *       const id = lastTodoId++;
 *
 *       // update state
 *       state.set({
 *         todos: [
 *           ...currentTodos,
 *           { id, text },
 *         ],
 *       });
 *
 *       // return id so it's easier to retrieve for the caller
 *       return id;
 *     },
 *
 *     // remove a todo thanks to its id
 *     REMOVE_TODO function(todoId) {
 *       const currentTodos = state.get("todos");
 *
 *       const index = currentTodos
 *        .findIndex(({ id }) => id === todoId);
 *
 *        if (index < 0) {
 *          // Returning a boolean can help the caller to realize that the todo
 *          // did not exist
 *          return false;
 *        }
 *
 *        // clone to stay immutable here
 *        const todosClone = [ ...currentTodos ];
 *
 *        todosClone.splice(index, 1);
 *        state.set({ todos: todosClone });
 *        return true;
 *     },
 *   };
 * };
 *
 * // 2 - The interactions with it
 * const todoList = createModule(TodoList, { maxLength: 2 });
 *
 * // display todos when they change ($get is asynchronous, get is synchronous)
 * todoList.$get("todos")
 *   .subscribe(todos => {
 *     display(todos);
 *   });
 * console.log(todoList.get("todos").length); // 0
 *
 * const firstId = todoList.dispatch("ADD_TODO", "do something");
 * console.log(todoList.get("todos").length); // 1
 *
 * todoList.dispatch("ADD_TODO", "do another thing");
 * console.log(todoList.get("todos").length); // 2
 *
 * todoList.dispatch("ADD_TODO", "yet another");
 * console.log(todoList.get("todos").length); // still 2 - as it's the max
 *                                            // length set
 *
 * // remove the first todo created
 * todoList.dispatch("REMOVE_TODO", firstId);
 * console.log(todoList.get("todos").length); // back to 1
 *
 * todoList.destroy(); // cleanup and stop $get subscriptions
 * ```
 *
 * @param {Function} module
 * @param {*} payload
 * @returns {Object} - Object with the following functions:
 *
 *   - dispatch: call an action from the module. Takes the name of the action
 *     (a string) + an eventual payload in argument. Returns what the action
 *     returns.
 *
 *   - get: get the entire module state, or the property named after the
 *     argument (a string).
 *
 *   - $get: same as get, but returns an observable instead. Start emitting at
 *     the first change (I do not know yet if it's better to first emit the
 *     initial value immediately).
 *
 *   - destroy: destroy the module. Completes all subscriptions.
 */
var createModule = function createModule(module, payload) {
  if (typeof module !== "function") {
    throw new Error("A module should be a function");
  }
  var moduleState = {};
  var $destroy = new Subject();
  var $updates = new Subject().pipe(takeUntil($destroy));
  var getFromModule = function getFromModule() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (!args.length) {
      return moduleState;
    }
    if (args.length === 1) {
      return moduleState[args[0]];
    }
    return args.map(function (arg) {
      return moduleState[arg];
    });
  };
  var $getFromModule = function $getFromModule() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (!args.length) {
      return $updates;
    }
    if (args.length === 1) {
      return $updates.pipe(map(function (state) {
        return state[args];
      }), distinctUntilChanged());
    }
    var observables = args.map(function (arg) {
      return $updates.pipe(map(function (state) {
        return state[arg];
      }), distinctUntilChanged());
    });
    return combineLatest(observables);
  };
  var moduleArgs = {
    state: {
      get: getFromModule,
      set: function set(arg) {
        var newState = Object.assign(moduleState, arg);
        $updates.next(newState);
      }
    },
    $destroy: $destroy
  };
  var moduleActions = module(moduleArgs, payload);
  return {
    dispatch: function dispatch(actionName, actionPayload) {
      if (!moduleActions || typeof moduleActions[actionName] !== "function") {
        throw new Error("The " + actionName + " action does not exist on this module.");
      }
      return moduleActions[actionName](actionPayload);
    },
    get: getFromModule,
    $get: $getFromModule,
    destroy: function destroy() {
      $destroy.next();
      $destroy.complete();
    }
  };
};

;// CONCATENATED MODULE: ./src/parsers/images/bif.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */


/**
 * @param {UInt8Array} buf
 * @returns {Object}
 */
function parseBif(buf) {
    let pos = 0;
    const length = buf.length;
    const fileFormat = utf8ToStr(buf.subarray(pos + 1, pos + 8));
    pos += 8;
    if (buf[0] !== 0x89 || fileFormat !== "BIF\r\n\u001a\n") {
        throw new Error("Invalid BIF file");
    }
    const minorVersion = buf[pos];
    pos += 1;
    const majorVersion = buf[pos];
    pos += 1;
    const patchVersion = buf[pos];
    pos += 1;
    const increVersion = buf[pos];
    pos += 1;
    const version = [minorVersion, majorVersion, patchVersion, increVersion].join(".");
    if (majorVersion > 0) {
        throw new Error(`Unhandled version: ${majorVersion}`);
    }
    const imageCount = le4toi(buf, pos);
    pos += 4;
    const framewiseSeparation = le4toi(buf, pos);
    pos += 4;
    const format = utf8ToStr(buf.subarray(pos, pos + 4));
    pos += 4;
    const width = le2toi(buf, pos);
    pos += 2;
    const height = le2toi(buf, pos);
    pos += 2;
    const aspectRatio = [buf[pos], buf[pos + 1]].join(":");
    pos += 2;
    const isVod = buf[pos] === 1;
    // bytes 0x1F to 0x40 is unused data for now
    pos = 0x40;
    const thumbs = [];
    if (imageCount === 0) {
        throw new Error("bif: no images to parse");
    }
    let index = 0;
    let previousImageInfo = null;
    while (pos < length) {
        const currentImageTimestamp = le4toi(buf, pos);
        pos += 4;
        const currentImageOffset = le4toi(buf, pos);
        pos += 4;
        if (previousImageInfo !== null) {
            // calculate for index-1
            const ts = previousImageInfo.timestamp * framewiseSeparation;
            const duration = framewiseSeparation;
            const data = buf.slice(previousImageInfo.offset, currentImageOffset);
            thumbs.push({ index, duration, ts, data });
            index++;
        }
        if (currentImageTimestamp === 0xFFFFFFFF) {
            break;
        }
        previousImageInfo = { timestamp: currentImageTimestamp,
            offset: currentImageOffset };
    }
    return { fileFormat: "BIF",
        version,
        imageCount,
        timescale: 1000,
        format,
        width,
        height,
        aspectRatio,
        isVod,
        thumbs };
}
/* harmony default export */ const bif = (parseBif);

;// CONCATENATED MODULE: ./src/features/list/bif_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to parse BIF thumbnails.
 * @param {Object} features
 */
function addBIFParserFeature(features) {
    features.imageParser = bif;
}

/* harmony default export */ const bif_parser = ((/* unused pure expression or super */ null && (addBIFParserFeature)));

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/get_clock_offset.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Get difference between the server's clock, in milliseconds and the return of
 * the JS function `performance.now`.
 * This property allows to calculate the server time at any moment.
 *
 * `undefined` if we could not define such offset (in which case, you could have
 * to rely on the user's clock instead).
 *
 * For example, a response of 1000 would mean that performance.now() is 1 second
 * behind the server's time.
 * @param {string} serverClock
 * @returns {number|undefined}
 */
function getClockOffset(serverClock) {
    const httpOffset = Date.parse(serverClock) - performance.now();
    if (isNaN(httpOffset)) {
        src_log.warn("DASH Parser: Invalid clock received: ", serverClock);
        return undefined;
    }
    return httpOffset;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/get_http_utc-timing_url.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {Object} mpdIR
 * @returns {string|undefined}
 */
function getHTTPUTCTimingURL(mpdIR) {
    const UTCTimingHTTP = mpdIR.children.utcTimings
        .filter((utcTiming) => (utcTiming.schemeIdUri === "urn:mpeg:dash:utc:http-iso:2014" ||
        utcTiming.schemeIdUri === "urn:mpeg:dash:utc:http-xsdate:2014") && utcTiming.value !== undefined);
    return UTCTimingHTTP.length > 0 ? UTCTimingHTTP[0].value :
        undefined;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_last_time_from_adaptation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns "last time of reference" from the adaptation given, considering a
 * dynamic content.
 * Undefined if a time could not be found.
 * Null if the Adaptation has no segments (it could be that it didn't started or
 * that it already finished for example).
 *
 * We consider the earliest last time from every representations in the given
 * adaptation.
 * @param {Object} adaptation
 * @returns {Number|undefined|null}
 */
function getLastPositionFromAdaptation(adaptation) {
    const { representations } = adaptation;
    let min = null;
    for (let i = 0; i < representations.length; i++) {
        const lastPosition = representations[i].index.getLastAvailablePosition();
        if (lastPosition === undefined) { // we cannot tell
            return undefined;
        }
        if (lastPosition !== null) {
            min = min == null ? lastPosition :
                Math.min(min, lastPosition);
        }
    }
    if (min === null) { // It means that all positions were null === no segments (yet?)
        return null;
    }
    return min;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_maximum_positions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} manifest
 * @returns {number | undefined}
 */
function getMaximumPosition(periods) {
    for (let i = periods.length - 1; i >= 0; i--) {
        const periodAdaptations = periods[i].adaptations;
        const firstAudioAdaptationFromPeriod = periodAdaptations.audio === undefined ?
            undefined :
            periodAdaptations.audio[0];
        const firstVideoAdaptationFromPeriod = periodAdaptations.video === undefined ?
            undefined :
            periodAdaptations.video[0];
        if (firstAudioAdaptationFromPeriod !== undefined ||
            firstVideoAdaptationFromPeriod !== undefined) {
            // null == no segment
            let maximumAudioPosition = null;
            let maximumVideoPosition = null;
            if (firstAudioAdaptationFromPeriod !== undefined) {
                const lastPosition = getLastPositionFromAdaptation(firstAudioAdaptationFromPeriod);
                if (lastPosition === undefined) {
                    return { safe: undefined, unsafe: undefined };
                }
                maximumAudioPosition = lastPosition;
            }
            if (firstVideoAdaptationFromPeriod !== undefined) {
                const lastPosition = getLastPositionFromAdaptation(firstVideoAdaptationFromPeriod);
                if (lastPosition === undefined) {
                    return { safe: undefined, unsafe: undefined };
                }
                maximumVideoPosition = lastPosition;
            }
            if ((firstAudioAdaptationFromPeriod !== undefined &&
                maximumAudioPosition === null) ||
                (firstVideoAdaptationFromPeriod !== undefined &&
                    maximumVideoPosition === null)) {
                src_log.info("Parser utils: found Period with no segment. ", "Going to previous one to calculate last position");
                return { safe: undefined, unsafe: undefined };
            }
            if (maximumVideoPosition !== null) {
                if (maximumAudioPosition !== null) {
                    return { safe: Math.min(maximumAudioPosition, maximumVideoPosition),
                        unsafe: Math.max(maximumAudioPosition, maximumVideoPosition) };
                }
                return { safe: maximumVideoPosition,
                    unsafe: maximumVideoPosition };
            }
            if (maximumAudioPosition !== null) {
                return { safe: maximumAudioPosition,
                    unsafe: maximumAudioPosition };
            }
        }
    }
    return { safe: undefined, unsafe: undefined };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_first_time_from_adaptation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns "first time of reference" from the adaptation given, considering a
 * dynamic content.
 * Undefined if a time could not be found.
 *
 * We consider the latest first time from every representations in the given
 * adaptation.
 * @param {Object} adaptation
 * @returns {Number|undefined}
 */
function getFirstPositionFromAdaptation(adaptation) {
    const { representations } = adaptation;
    let max = null;
    for (let i = 0; i < representations.length; i++) {
        const firstPosition = representations[i].index.getFirstAvailablePosition();
        if (firstPosition === undefined) { // we cannot tell
            return undefined;
        }
        if (firstPosition !== null) {
            max = max == null ? firstPosition :
                Math.max(max, firstPosition);
        }
    }
    if (max === null) { // It means that all positions were null === no segments (yet?)
        return null;
    }
    return max;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/get_minimum_position.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} manifest
 * @returns {number | undefined}
 */
function getMinimumPosition(periods) {
    for (let i = 0; i <= periods.length - 1; i++) {
        const periodAdaptations = periods[i].adaptations;
        const firstAudioAdaptationFromPeriod = periodAdaptations.audio === undefined ?
            undefined :
            periodAdaptations.audio[0];
        const firstVideoAdaptationFromPeriod = periodAdaptations.video === undefined ?
            undefined :
            periodAdaptations.video[0];
        if (firstAudioAdaptationFromPeriod !== undefined ||
            firstVideoAdaptationFromPeriod !== undefined) {
            // null == no segment
            let minimumAudioPosition = null;
            let minimumVideoPosition = null;
            if (firstAudioAdaptationFromPeriod !== undefined) {
                const firstPosition = getFirstPositionFromAdaptation(firstAudioAdaptationFromPeriod);
                if (firstPosition === undefined) {
                    return undefined;
                }
                minimumAudioPosition = firstPosition;
            }
            if (firstVideoAdaptationFromPeriod !== undefined) {
                const firstPosition = getFirstPositionFromAdaptation(firstVideoAdaptationFromPeriod);
                if (firstPosition === undefined) {
                    return undefined;
                }
                minimumVideoPosition = firstPosition;
            }
            if ((firstAudioAdaptationFromPeriod !== undefined &&
                minimumAudioPosition === null) ||
                (firstVideoAdaptationFromPeriod !== undefined &&
                    minimumVideoPosition === null)) {
                src_log.info("Parser utils: found Period with no segment. ", "Going to next one to calculate first position");
                return undefined;
            }
            if (minimumVideoPosition !== null) {
                if (minimumAudioPosition !== null) {
                    return Math.max(minimumAudioPosition, minimumVideoPosition);
                }
                return minimumVideoPosition;
            }
            if (minimumAudioPosition !== null) {
                return minimumAudioPosition;
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/get_minimum_and_maximum_positions.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} periods
 * @returns {Array.<number>}
 */
function getMinimumAndMaximumPositions(periods) {
    if (periods.length === 0) {
        throw new Error("DASH Parser: no period available for a dynamic content");
    }
    const minimumSafePosition = getMinimumPosition(periods);
    const maxPositions = getMaximumPosition(periods);
    return { minimumSafePosition,
        maximumSafePosition: maxPositions.safe,
        maximumUnsafePosition: maxPositions.unsafe };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/parse_availability_start_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns the base time of the Manifest.
 * @param {Object} rootAttributes
 * @param {number|undefined}
 */
function parseAvailabilityStartTime(rootAttributes, referenceDateTime) {
    if (rootAttributes.type !== "dynamic") {
        return 0;
    }
    if (rootAttributes.availabilityStartTime == null) {
        return referenceDateTime == null ? 0 : referenceDateTime;
    }
    return rootAttributes.availabilityStartTime;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/flatten_overlapping_periods.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Avoid periods to overlap.
 *
 * According to DASH guidelines, if a period has media duration longer than
 * the distance between the start of this period and the start of the next period,
 * use of start times implies that the client will start the playout of the next
 * period at the time stated, rather than finishing the playout of the last period.
 *
 * Even if that case if defined when period last(s) segment(s) is/are a bit longer,
 * it can be meaningful when two periods are overlapping. We will always shorten
 * the first period, and even erase it if its duration is equal to zero.
 *
 * Example (Periods are numbered under their manifest order) :
 *
 * [ Period 1 ][ Period 2 ]       ------>  [ Period 1 ][ Period 3 ]
 *             [ Period 3 ]
 *
 * [ Period 1 ][ Period 2 ]       ------>  [ Period 1 ][  2  ][ Period 3 ]
 *                  [ Period 3 ]
 *
 * [ Period 1 ][ Period 2 ]       ------>  [  1  ][      Period 3     ]
 *        [      Period 3     ]
 *
 * @param {Array.<Object>} parsedPeriods
 * @return {Array.<Object>}
 */
function flattenOverlappingPeriods(parsedPeriods) {
    if (parsedPeriods.length === 0) {
        return [];
    }
    const flattenedPeriods = [parsedPeriods[0]];
    for (let i = 1; i < parsedPeriods.length; i++) {
        const parsedPeriod = parsedPeriods[i];
        let lastFlattenedPeriod = flattenedPeriods[flattenedPeriods.length - 1];
        while (lastFlattenedPeriod.duration === undefined ||
            (lastFlattenedPeriod.start + lastFlattenedPeriod.duration) > parsedPeriod.start) {
            src_log.warn("DASH: Updating overlapping Periods.", lastFlattenedPeriod === null || lastFlattenedPeriod === void 0 ? void 0 : lastFlattenedPeriod.start, parsedPeriod.start);
            lastFlattenedPeriod.duration = parsedPeriod.start - lastFlattenedPeriod.start;
            lastFlattenedPeriod.end = parsedPeriod.start;
            if (lastFlattenedPeriod.duration > 0) {
                // Note: Calling `break` to quit the while loop should theoritically be
                // unnecessary as the previous operations should ensure we do not re-enter
                // the loop's condition.
                // Yet we dit encounter infinite loops without it because of float-related
                // rounding errors.
                break;
            }
            else {
                // `lastFlattenedPeriod` has now a negative or `0` duration.
                // Remove it, consider the next Period in its place, and re-start the loop.
                flattenedPeriods.pop();
                lastFlattenedPeriod = flattenedPeriods[flattenedPeriods.length - 1];
            }
        }
        flattenedPeriods.push(parsedPeriod);
    }
    return flattenedPeriods;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/get_periods_time_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Get periods time information from current, next and previous
 * periods.
 * @param {Array.<Object>} periodsIR
 * @param {Object} manifestInfos
 * @return {Array.<Object>}
 */
function getPeriodsTimeInformation(periodsIR, manifestInfos) {
    const periodsTimeInformation = [];
    periodsIR.forEach((currentPeriod, i) => {
        let periodStart;
        if (currentPeriod.attributes.start != null) {
            periodStart = currentPeriod.attributes.start;
        }
        else {
            if (i === 0) {
                periodStart = (!manifestInfos.isDynamic ||
                    manifestInfos.availabilityStartTime == null) ?
                    0 :
                    manifestInfos.availabilityStartTime;
            }
            else {
                // take time information from previous period
                const prevPeriodInfos = periodsTimeInformation[periodsTimeInformation.length - 1];
                if (prevPeriodInfos != null && prevPeriodInfos.periodEnd != null) {
                    periodStart = prevPeriodInfos.periodEnd;
                }
                else {
                    throw new Error("Missing start time when parsing periods.");
                }
            }
        }
        let periodDuration;
        const nextPeriod = periodsIR[i + 1];
        if (currentPeriod.attributes.duration != null) {
            periodDuration = currentPeriod.attributes.duration;
        }
        else if (i === periodsIR.length - 1) {
            periodDuration = manifestInfos.duration;
        }
        else if (nextPeriod.attributes.start != null) {
            periodDuration = nextPeriod.attributes.start - periodStart;
        }
        const periodEnd = periodDuration != null ? (periodStart + periodDuration) :
            undefined;
        periodsTimeInformation.push({ periodStart,
            periodDuration,
            periodEnd });
    });
    return periodsTimeInformation;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/manifest_bounds_calculator.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This class allows to easily calculate the first and last available positions
 * in a content at any time.
 *
 * That task can be an hard for dynamic DASH contents: it depends on a
 * `timeShiftBufferDepth` defined in the MPD and on the maximum possible
 * position.
 *
 * The latter can come from either a clock synchronization mechanism or the
 * indexing schemes (e.g. SegmentTemplate, SegmentTimeline etc.) of the last
 * Periods.
 * As such, it might only be known once a large chunk of the MPD has already
 * been parsed.
 *
 * By centralizing the manifest bounds calculation in this class and by giving
 * an instance of it to each parsed elements which might depend on it, we
 * ensure that we can provide it once it is known to every one of those
 * elements without needing to parse a second time the MPD.
 * @class ManifestBoundsCalculator
 */
class ManifestBoundsCalculator {
    /**
     * @param {Object} args
     */
    constructor(args) {
        this._isDynamic = args.isDynamic;
        this._timeShiftBufferDepth = !args.isDynamic ||
            args.timeShiftBufferDepth === undefined ?
            null :
            args.timeShiftBufferDepth;
    }
    /**
     * Set the last position and the position time (the value of `performance.now()`
     * at the time that position was true converted into seconds).
     *
     * @example
     * Example if you trust `Date.now()` to give you a reliable offset:
     * ```js
     * const lastPosition = Date.now();
     * const positionTime = performance.now() / 1000;
     * manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
     * ```
     *
     * @param {number} lastPosition
     * @param {number|undefined} positionTime
     */
    setLastPosition(lastPosition, positionTime) {
        this._lastPosition = lastPosition;
        this._positionTime = positionTime;
    }
    /**
     * Returns `true` if the last position and the position time
     * (for dynamic content only) have been comunicated.
     * `false` otherwise.
     * @returns {boolean}
     */
    lastPositionIsKnown() {
        if (this._isDynamic) {
            return this._positionTime != null && this._lastPosition != null;
        }
        return this._lastPosition != null;
    }
    /**
     * Estimate a minimum bound for the content from the last set segment time
     * and buffer depth.
     * Consider that it is only an estimation, not the real value.
     * @return {number|undefined}
     */
    estimateMinimumBound() {
        if (!this._isDynamic || this._timeShiftBufferDepth === null) {
            return 0;
        }
        const maximumBound = this.estimateMaximumBound();
        if (maximumBound === undefined) {
            return undefined;
        }
        const minimumBound = maximumBound - this._timeShiftBufferDepth;
        return minimumBound;
    }
    /**
     * Estimate a maximum bound for the content from the last set segment time.
     * Consider that it is only an estimation, not the real value.
     * @return {number|undefined}
     */
    estimateMaximumBound() {
        if (this._isDynamic &&
            this._positionTime != null &&
            this._lastPosition != null) {
            return Math.max((this._lastPosition - this._positionTime) +
                (performance.now() / 1000), 0);
        }
        return this._lastPosition;
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/attach_trickmode_track.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Attach trick mode tracks to adaptations by assigning to the trickModeTracks
 * property an array of trick mode track adaptations.
 * @param {Object} adaptations
 * @param {Array.<Object>} trickModeTracks
 * @returns {void}
 */
function attachTrickModeTrack(adaptations, trickModeTracks) {
    for (const track of trickModeTracks) {
        const { adaptation, trickModeAttachedAdaptationIds } = track;
        for (const trickModeAttachedAdaptationId of trickModeAttachedAdaptationIds) {
            for (const adaptationType of SUPPORTED_ADAPTATIONS_TYPE) {
                const adaptationsByType = adaptations[adaptationType];
                if (adaptationsByType !== undefined) {
                    for (const adaptationByType of adaptationsByType) {
                        if (adaptationByType.id === trickModeAttachedAdaptationId) {
                            if (adaptationByType.trickModeTracks === undefined) {
                                adaptationByType.trickModeTracks = [];
                            }
                            adaptationByType.trickModeTracks.push(adaptation);
                        }
                    }
                }
            }
        }
    }
}
/* harmony default export */ const attach_trickmode_track = (attachTrickModeTrack);

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/infer_adaptation_type.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/** Different `role`s a text Adaptation can be. */
const SUPPORTED_TEXT_TYPES = ["subtitle", "caption"];
/**
 * Infers the type of adaptation from codec and mimetypes found in it.
 *
 * This follows the guidelines defined by the DASH-IF IOP:
 *   - one adaptation set contains a single media type
 *   - The order of verifications are:
 *       1. mimeType
 *       2. Role
 *       3. codec
 *
 * Note: This is based on DASH-IF-IOP-v4.0 with some more freedom.
 * @param {Array.<Object>} representations
 * @param {string|null} adaptationMimeType
 * @param {string|null} adaptationCodecs
 * @param {Array.<Object>|null} adaptationRoles
 * @returns {string} - "audio"|"video"|"text"|"image"|"metadata"|"unknown"
 */
function inferAdaptationType(representations, adaptationMimeType, adaptationCodecs, adaptationRoles) {
    function fromMimeType(mimeType, roles) {
        const topLevel = mimeType.split("/")[0];
        if (arrayIncludes(SUPPORTED_ADAPTATIONS_TYPE, topLevel)) {
            return topLevel;
        }
        if (mimeType === "application/bif") {
            return "image";
        }
        if (mimeType === "application/ttml+xml") {
            return "text";
        }
        // manage DASH-IF mp4-embedded subtitles and metadata
        if (mimeType === "application/mp4") {
            if (roles != null) {
                if (arrayFind(roles, (role) => role.schemeIdUri === "urn:mpeg:dash:role:2011" &&
                    arrayIncludes(SUPPORTED_TEXT_TYPES, role.value)) != null) {
                    return "text";
                }
            }
            return undefined;
        }
    }
    function fromCodecs(codecs) {
        switch (codecs.substring(0, 3)) {
            case "avc":
            case "hev":
            case "hvc":
            case "vp8":
            case "vp9":
            case "av1":
                return "video";
            case "vtt":
                return "text";
            case "bif":
                return "image";
        }
        switch (codecs.substring(0, 4)) {
            case "mp4a":
                return "audio";
            case "wvtt":
            case "stpp":
                return "text";
        }
    }
    if (adaptationMimeType !== null) {
        const typeFromMimeType = fromMimeType(adaptationMimeType, adaptationRoles);
        if (typeFromMimeType !== undefined) {
            return typeFromMimeType;
        }
    }
    if (adaptationCodecs !== null) {
        const typeFromCodecs = fromCodecs(adaptationCodecs);
        if (typeFromCodecs !== undefined) {
            return typeFromCodecs;
        }
    }
    for (let i = 0; i < representations.length; i++) {
        const representation = representations[i];
        const { mimeType, codecs } = representation.attributes;
        if (mimeType !== undefined) {
            const typeFromMimeType = fromMimeType(mimeType, adaptationRoles);
            if (typeFromMimeType !== undefined) {
                return typeFromMimeType;
            }
        }
        if (codecs !== undefined) {
            const typeFromCodecs = fromCodecs(codecs);
            if (typeFromCodecs !== undefined) {
                return typeFromCodecs;
            }
        }
    }
    return undefined;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/get_hdr_information.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Extract the webm HDR information out of the codec string.
 * The syntax of the codec string is defined in VP Codec ISO Media File Format
 * Binding, in the section Codecs Parameter String.
 * @param {string} codecString
 * @returns {Object | undefined}
 */
function getWEBMHDRInformation(codecString) {
    // cccc.PP.LL.DD.CC[.cp[.tc[.mc[.FF]]]]
    const [cccc, _PP, _LL, DD, _CC, cp, tc, mc] = codecString.split(".");
    if (cccc !== "vp08" &&
        cccc !== "vp09" &&
        cccc !== "vp10") {
        return undefined;
    }
    let colorDepth;
    let eotf;
    let colorSpace;
    if (DD !== undefined &&
        DD === "10" ||
        DD === "12") {
        colorDepth = parseInt(DD, 10);
    }
    if (tc !== undefined) {
        if (tc === "16") {
            eotf = "pq";
        }
        else if (tc === "18") {
            eotf = "hlg";
        }
    }
    if (cp !== undefined &&
        mc !== undefined &&
        cp === "09" &&
        mc === "09") {
        colorSpace = "rec2020";
    }
    if (colorDepth === undefined ||
        eotf === undefined) {
        return undefined;
    }
    return { colorDepth, eotf, colorSpace };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/index_helpers.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Calculate the number of times a timeline element repeats based on the next
 * element.
 * @param {Object} element
 * @param {Object|null|undefined} nextElement
 * @param {number|undefined} maxPosition
 * @returns {Number}
 */
function calculateRepeat(element, nextElement, maxPosition) {
    const { repeatCount } = element;
    if (repeatCount >= 0) {
        return repeatCount;
    }
    // A negative value of the @r attribute of the S element indicates
    // that the duration indicated in @d attribute repeats until the
    // start of the next S element, the end of the Period or until the
    // next MPD update.
    let segmentEnd;
    if (!isNullOrUndefined(nextElement)) {
        segmentEnd = nextElement.start;
    }
    else if (maxPosition !== undefined) {
        segmentEnd = maxPosition;
    }
    else {
        segmentEnd = Number.MAX_VALUE;
    }
    return Math.ceil((segmentEnd - element.start) / element.duration) - 1;
}
/**
 * Returns end of the segment given, in index time.
 * @param {Object} segment
 * @param {Object|null} [nextSegment]
 * @param {number} maxPosition
 * @returns {Number}
 */
function getIndexSegmentEnd(segment, nextSegment, maxPosition) {
    const { start, duration } = segment;
    if (duration <= 0) {
        return start;
    }
    const repeat = calculateRepeat(segment, nextSegment, maxPosition);
    return start + (repeat + 1) * duration;
}
/**
 * Convert from `presentationTime`, the time of the segment at the moment it
 * is decoded to `mediaTime`, the original time the segments point at.
 * @param {number} time
 * @param {Object} indexOptions
 * @returns {number}
 */
function toIndexTime(time, indexOptions) {
    var _a;
    return time * indexOptions.timescale + ((_a = indexOptions.indexTimeOffset) !== null && _a !== void 0 ? _a : 0);
}
/**
 * Convert from `mediaTime`, the original time the segments point at to
 * `presentationTime`, the time of the segment at the moment it is decoded.
 * @param {number} time
 * @param {Object} indexOptions
 * @returns {number}
 */
function fromIndexTime(time, indexOptions) {
    var _a;
    return (time - ((_a = indexOptions.indexTimeOffset) !== null && _a !== void 0 ? _a : 0)) / indexOptions.timescale;
}
/**
 * @param {Number} start
 * @param {Number} duration
 * @param {Number} timescale
 * @returns {Object} - Object with two properties:
 *   - up {Number}: timescaled timestamp of the beginning time
 *   - to {Number}: timescaled timestamp of the end time (start time + duration)
 */
function getTimescaledRange(start, duration, timescale) {
    return [start * timescale,
        (start + duration) * timescale];
}
/**
 * Get index of the last segment in the timeline starting before/at the given
 * timescaled time.
 * Returns -1 if the given time is lower than the start of the first available
 * segment.
 * @param {Object} index
 * @param {Number} timeTScaled
 * @returns {Number}
 */
function getIndexOfLastObjectBefore(timeline, timeTScaled) {
    let low = 0;
    let high = timeline.length;
    while (low < high) {
        const mid = (low + high) >>> 1; // Divide by two + floor
        if (timeline[mid].start <= timeTScaled) {
            low = mid + 1;
        }
        else {
            high = mid;
        }
    }
    return low - 1;
}
/**
 * @param {Object} index
 * @param {number} timeSec
 * @param {number} [maxPosition]
 * @returns {number|null}
 */
function checkDiscontinuity(index, timeSec, maxPosition) {
    const { timeline } = index;
    const scaledTime = toIndexTime(timeSec, index);
    if (scaledTime < 0) {
        return null;
    }
    const segmentIndex = getIndexOfLastObjectBefore(timeline, scaledTime);
    if (segmentIndex < 0 || segmentIndex >= timeline.length - 1) {
        return null;
    }
    const timelineItem = timeline[segmentIndex];
    if (timelineItem.duration <= 0) {
        return null;
    }
    const nextTimelineItem = timeline[segmentIndex + 1];
    if (nextTimelineItem === undefined) {
        return null;
    }
    const nextStart = nextTimelineItem.start;
    const segmentEnd = getIndexSegmentEnd(timelineItem, nextTimelineItem, maxPosition);
    return scaledTime >= segmentEnd &&
        scaledTime < nextStart ? fromIndexTime(nextStart, index) :
        null;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/get_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Construct init segment for the given index.
 * @param {Object} index
 * @param {function} isEMSGWhitelisted
 * @returns {Object}
 */
function getInitSegment(index, isEMSGWhitelisted) {
    var _a;
    const { initialization } = index;
    const privateInfos = {};
    if (isEMSGWhitelisted !== undefined) {
        privateInfos.isEMSGWhitelisted = isEMSGWhitelisted;
    }
    return { id: "init",
        isInit: true,
        time: 0,
        end: 0,
        duration: 0,
        timescale: 1,
        range: initialization != null ? initialization.range :
            undefined,
        indexRange: index.indexRange,
        url: (_a = initialization === null || initialization === void 0 ? void 0 : initialization.url) !== null && _a !== void 0 ? _a : null,
        complete: true,
        privateInfos,
        timestampOffset: -(index.indexTimeOffset / index.timescale) };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/tokens.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Pad with 0 in the left of the given n argument to reach l length
 * @param {Number|string} n
 * @param {Number} l
 * @returns {string}
 */
function padLeftWithZeros(n, l) {
    const nToString = n.toString();
    if (nToString.length >= l) {
        return nToString;
    }
    const arr = new Array(l + 1).join("0") + nToString;
    return arr.slice(-l);
}
/**
 * @param {string|number} replacer
 * @returns {Function}
 */
function processFormatedToken(replacer) {
    return (_match, _format, widthStr) => {
        const width = isNonEmptyString(widthStr) ? parseInt(widthStr, 10) :
            1;
        return padLeftWithZeros(String(replacer), width);
    };
}
/**
 * @param {string} urlTemplate
 * @param {string|undefined} representationId
 * @param {number|undefined} bitrate
 * @returns {string}
 */
function constructRepresentationUrl(urlTemplate, representationId, bitrate) {
    return replaceRepresentationDASHTokens(urlTemplate, representationId, bitrate);
}
/**
 * Replace "tokens" written in a given path (e.g. $RepresentationID$) by the corresponding
 * infos, taken from the given segment.
 * @param {string} path
 * @param {string|undefined} id
 * @param {number|undefined} bitrate
 * @returns {string}
 */
function replaceRepresentationDASHTokens(path, id, bitrate) {
    if (path.indexOf("$") === -1) {
        return path;
    }
    else {
        return path
            .replace(/\$\$/g, "$")
            .replace(/\$RepresentationID\$/g, String(id))
            .replace(/\$Bandwidth(\%0(\d+)d)?\$/g, processFormatedToken(bitrate === undefined ? 0 :
            bitrate));
    }
}
/**
 * Create function allowing to replace "tokens" in a given DASH segment URL
 * (e.g. $Time$, which has to be replaced by the segment's start time) by the
 * right information.
 * @param {number|undefined} time
 * @param {number|undefined} nb
 * @returns {Function}
 */
function createDashUrlDetokenizer(time, nb) {
    /**
     * Replace the tokens in the given `url` by the segment information defined
     * by the outer function.
     * @param {string} url
     * @returns {string}
     *
     * @throws Error - Throws if we do not have enough data to construct the URL
     */
    return function replaceTokensInUrl(url) {
        if (url.indexOf("$") === -1) {
            return url;
        }
        else {
            return url
                .replace(/\$\$/g, "$")
                .replace(/\$Number(\%0(\d+)d)?\$/g, (_x, _y, widthStr) => {
                if (nb === undefined) {
                    throw new Error("Segment number not defined in a $Number$ scheme");
                }
                return processFormatedToken(nb)(_x, _y, widthStr);
            })
                .replace(/\$Time(\%0(\d+)d)?\$/g, (_x, _y, widthStr) => {
                if (time === undefined) {
                    throw new Error("Segment time not defined in a $Time$ scheme");
                }
                return processFormatedToken(time)(_x, _y, widthStr);
            });
        }
    };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/get_segments_from_timeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * For the given start time and duration of a timeline element, calculate how
 * much this element should be repeated to contain the time given.
 * 0 being the same element, 1 being the next one etc.
 * @param {Number} segmentStartTime
 * @param {Number} segmentDuration
 * @param {Number} wantedTime
 * @returns {Number}
 */
function getWantedRepeatIndex(segmentStartTime, segmentDuration, wantedTime) {
    const diff = wantedTime - segmentStartTime;
    return diff > 0 ? Math.floor(diff / segmentDuration) :
        0;
}
/**
 * Get a list of Segments for the time range wanted.
 * @param {Object} index - index object, constructed by parsing the manifest.
 * @param {number} from - starting timestamp wanted, in seconds
 * @param {number} durationWanted - duration wanted, in seconds
 * @param {function} isEMSGWhitelisted
 * @param {number|undefined} maximumTime
 * @returns {Array.<Object>}
 */
function getSegmentsFromTimeline(index, from, durationWanted, isEMSGWhitelisted, maximumTime) {
    const scaledUp = toIndexTime(from, index);
    const scaledTo = toIndexTime(from + durationWanted, index);
    const { timeline, timescale, segmentUrlTemplate, startNumber } = index;
    let currentNumber = startNumber !== null && startNumber !== void 0 ? startNumber : 1;
    const segments = [];
    const timelineLength = timeline.length;
    for (let i = 0; i < timelineLength; i++) {
        const timelineItem = timeline[i];
        const { duration, start, range } = timelineItem;
        const repeat = calculateRepeat(timelineItem, timeline[i + 1], maximumTime);
        const complete = index.availabilityTimeComplete !== false ||
            i !== timelineLength - 1 &&
                repeat !== 0;
        let segmentNumberInCurrentRange = getWantedRepeatIndex(start, duration, scaledUp);
        let segmentTime = start + segmentNumberInCurrentRange * duration;
        while (segmentTime < scaledTo && segmentNumberInCurrentRange <= repeat) {
            const segmentNumber = currentNumber + segmentNumberInCurrentRange;
            const detokenizedURL = segmentUrlTemplate === null ?
                null :
                createDashUrlDetokenizer(segmentTime, segmentNumber)(segmentUrlTemplate);
            let time = segmentTime - index.indexTimeOffset;
            let realDuration = duration;
            if (time < 0) {
                realDuration = duration + time; // Remove from duration the part before `0`
                time = 0;
            }
            const segment = { id: String(segmentTime),
                time: time / timescale,
                end: (time + realDuration) / timescale,
                duration: realDuration / timescale,
                isInit: false,
                range,
                timescale: 1,
                url: detokenizedURL,
                number: segmentNumber,
                timestampOffset: -(index.indexTimeOffset / timescale),
                complete,
                privateInfos: { isEMSGWhitelisted } };
            segments.push(segment);
            // update segment number and segment time for the next segment
            segmentNumberInCurrentRange++;
            segmentTime = start + segmentNumberInCurrentRange * duration;
        }
        if (segmentTime >= scaledTo) {
            // we reached ``scaledTo``, we're done
            return segments;
        }
        currentNumber += repeat + 1;
    }
    return segments;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/base.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Add a new segment to the index.
 *
 * /!\ Mutate the given index
 * @param {Object} index
 * @param {Object} segmentInfos
 * @returns {Boolean} - true if the segment has been added
 */
function _addSegmentInfos(index, segmentInfos) {
    if (segmentInfos.timescale !== index.timescale) {
        const { timescale } = index;
        index.timeline.push({ start: (segmentInfos.time / segmentInfos.timescale)
                * timescale,
            duration: (segmentInfos.duration / segmentInfos.timescale)
                * timescale,
            repeatCount: segmentInfos.count === undefined ?
                0 :
                segmentInfos.count,
            range: segmentInfos.range });
    }
    else {
        index.timeline.push({ start: segmentInfos.time,
            duration: segmentInfos.duration,
            repeatCount: segmentInfos.count === undefined ?
                0 :
                segmentInfos.count,
            range: segmentInfos.range });
    }
    return true;
}
class BaseRepresentationIndex {
    /**
     * @param {Object} index
     * @param {Object} context
     */
    constructor(index, context) {
        var _a, _b, _c;
        const { periodStart, periodEnd, representationId, representationBitrate, isEMSGWhitelisted } = context;
        const timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
        const presentationTimeOffset = index.presentationTimeOffset != null ?
            index.presentationTimeOffset : 0;
        const indexTimeOffset = presentationTimeOffset - periodStart * timescale;
        const initializationUrl = ((_b = index.initialization) === null || _b === void 0 ? void 0 : _b.media) === undefined ?
            null :
            constructRepresentationUrl(index.initialization.media, representationId, representationBitrate);
        const segmentUrlTemplate = index.media === undefined ?
            null :
            constructRepresentationUrl(index.media, representationId, representationBitrate);
        // TODO If indexRange is either undefined or behind the initialization segment
        // the following logic will not work.
        // However taking the nth first bytes like `dash.js` does (where n = 1500) is
        // not straightforward as we would need to clean-up the segment after that.
        // The following logic corresponds to 100% of tested cases, so good enough for
        // now.
        const range = index.initialization !== undefined ? index.initialization.range :
            index.indexRange !== undefined ? [0, index.indexRange[0] - 1] :
                undefined;
        this._index = { indexRange: index.indexRange,
            indexTimeOffset,
            initialization: { url: initializationUrl, range },
            segmentUrlTemplate,
            startNumber: index.startNumber,
            timeline: (_c = index.timeline) !== null && _c !== void 0 ? _c : [],
            timescale };
        this._scaledPeriodStart = toIndexTime(periodStart, this._index);
        this._scaledPeriodEnd = periodEnd == null ? undefined :
            toIndexTime(periodEnd, this._index);
        this._isInitialized = this._index.timeline.length > 0;
        this._isEMSGWhitelisted = isEMSGWhitelisted;
    }
    /**
     * Construct init Segment.
     * @returns {Object}
     */
    getInitSegment() {
        return getInitSegment(this._index, this._isEMSGWhitelisted);
    }
    /**
     * Get the list of segments that are currently available from the `from`
     * position, in seconds, ending `dur` seconds after that position.
     *
     * Note that if not already done, you might need to "initialize" the
     * `BaseRepresentationIndex` first so that the list of available segments
     * is known.
     *
     * @see isInitialized for more information on `BaseRepresentationIndex`
     * initialization.
     * @param {Number} from
     * @param {Number} dur
     * @returns {Array.<Object>}
     */
    getSegments(from, dur) {
        return getSegmentsFromTimeline(this._index, from, dur, this._isEMSGWhitelisted, this._scaledPeriodEnd);
    }
    /**
     * Returns false as no Segment-Base based index should need to be refreshed.
     * @returns {Boolean}
     */
    shouldRefresh() {
        return false;
    }
    /**
     * Returns first position in index.
     * @returns {Number|null}
     */
    getFirstAvailablePosition() {
        const index = this._index;
        if (index.timeline.length === 0) {
            return null;
        }
        return fromIndexTime(Math.max(this._scaledPeriodStart, index.timeline[0].start), index);
    }
    /**
     * Returns last position in index.
     * @returns {Number|null}
     */
    getLastAvailablePosition() {
        var _a;
        const { timeline } = this._index;
        if (timeline.length === 0) {
            return null;
        }
        const lastTimelineElement = timeline[timeline.length - 1];
        const lastTime = Math.min(getIndexSegmentEnd(lastTimelineElement, null, this._scaledPeriodEnd), (_a = this._scaledPeriodEnd) !== null && _a !== void 0 ? _a : Infinity);
        return fromIndexTime(lastTime, this._index);
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        return this.getLastAvailablePosition();
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     *
     * Always `false` in a `BaseRepresentationIndex` because all segments should
     * be directly available.
     * @returns {boolean}
     */
    awaitSegmentBetween() {
        return false;
    }
    /**
     * Segments in a segmentBase scheme should stay available.
     * @returns {Boolean|undefined}
     */
    isSegmentStillAvailable() {
        return true;
    }
    /**
     * We do not check for discontinuity in SegmentBase-based indexes.
     * @returns {null}
     */
    checkDiscontinuity() {
        return null;
    }
    /**
     * No segment in a `BaseRepresentationIndex` are known initially.
     * It is only defined generally in an "index segment" that will thus need to
     * be first loaded and parsed.
     * Until then, this `BaseRepresentationIndex` is considered as `uninitialized`
     * (@see isInitialized).
     *
     * Once that those information are available, the present
     * `BaseRepresentationIndex` can be "initialized" by adding that parsed
     * segment information through this method.
     * @param {Array.<Object>} indexSegments
     * @returns {Array.<Object>}
     */
    initializeIndex(indexSegments) {
        for (let i = 0; i < indexSegments.length; i++) {
            _addSegmentInfos(this._index, indexSegments[i]);
        }
        this._isInitialized = true;
    }
    /**
     * Returns `false` as a `BaseRepresentationIndex` should not be dynamic and as
     * such segments should never fall out-of-sync.
     * @returns {Boolean}
     */
    canBeOutOfSyncError() {
        return false;
    }
    /**
     * Returns `true` as SegmentBase are not dynamic and as such no new segment
     * should become available in the future.
     * @returns {Boolean}
     */
    isFinished() {
        return true;
    }
    /**
     * No segment in a `BaseRepresentationIndex` are known initially.
     * It is only defined generally in an "index segment" that will thus need to
     * be first loaded and parsed.
     *
     * Once the index segment or equivalent has been parsed, the `initializeIndex`
     * method have to be called with the corresponding segment information so the
     * `BaseRepresentationIndex` can be considered as "initialized" (and so this
     * method can return `true`).
     * Until then this method will return `false` and segments linked to that
     * Representation may be missing.
     * @returns {Boolean}
     */
    isInitialized() {
        return this._isInitialized;
    }
    /**
     * Replace in-place this `BaseRepresentationIndex` information by the
     * information from another one.
     * @param {Object} newIndex
     */
    _replace(newIndex) {
        this._index = newIndex._index;
        this._isInitialized = newIndex._isInitialized;
        this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
        this._isEMSGWhitelisted = newIndex._isEMSGWhitelisted;
    }
    _update() {
        src_log.error("Base RepresentationIndex: Cannot update a SegmentList");
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/list.ts
/*
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class ListRepresentationIndex {
    /**
     * @param {Object} index
     * @param {Object} context
     */
    constructor(index, context) {
        var _a, _b;
        if (index.duration === undefined) {
            throw new Error("Invalid SegmentList: no duration");
        }
        const { periodStart, periodEnd, representationId, representationBitrate, isEMSGWhitelisted } = context;
        this._isEMSGWhitelisted = isEMSGWhitelisted;
        this._periodStart = periodStart;
        this._periodEnd = periodEnd;
        const presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset :
            0;
        const timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
        const indexTimeOffset = presentationTimeOffset - periodStart * timescale;
        const initializationUrl = ((_b = index.initialization) === null || _b === void 0 ? void 0 : _b.media) === undefined ?
            null :
            constructRepresentationUrl(index.initialization.media, representationId, representationBitrate);
        const list = index.list.map((lItem) => ({
            url: lItem.media === undefined ?
                null :
                constructRepresentationUrl(lItem.media, representationId, representationBitrate),
            mediaRange: lItem.mediaRange
        }));
        this._index = { list,
            timescale,
            duration: index.duration,
            indexTimeOffset,
            indexRange: index.indexRange,
            initialization: index.initialization == null ?
                undefined :
                { url: initializationUrl,
                    range: index.initialization.range } };
    }
    /**
     * Construct init Segment.
     * @returns {Object}
     */
    getInitSegment() {
        const initSegment = getInitSegment(this._index);
        if (initSegment.privateInfos === undefined) {
            initSegment.privateInfos = {};
        }
        initSegment.privateInfos.isEMSGWhitelisted = this._isEMSGWhitelisted;
        return initSegment;
    }
    /**
     * @param {Number} fromTime
     * @param {Number} dur
     * @returns {Array.<Object>}
     */
    getSegments(fromTime, dur) {
        const index = this._index;
        const { duration, list, timescale } = index;
        const durationInSeconds = duration / timescale;
        const fromTimeInPeriod = fromTime - this._periodStart;
        const [up, to] = getTimescaledRange(fromTimeInPeriod, dur, timescale);
        const length = Math.min(list.length - 1, Math.floor(to / duration));
        const segments = [];
        let i = Math.floor(up / duration);
        while (i <= length) {
            const range = list[i].mediaRange;
            const url = list[i].url;
            const time = i * durationInSeconds + this._periodStart;
            const segment = { id: String(i),
                time,
                isInit: false,
                range,
                duration: durationInSeconds,
                timescale: 1,
                end: time + durationInSeconds,
                url,
                timestampOffset: -(index.indexTimeOffset / timescale),
                complete: true,
                privateInfos: { isEMSGWhitelisted: this._isEMSGWhitelisted } };
            segments.push(segment);
            i++;
        }
        return segments;
    }
    /**
     * Returns whether the Manifest should be refreshed based on the
     * `ListRepresentationIndex`'s state and the time range the player is
     * currently considering.
     * @param {Number} _fromTime
     * @param {Number} _toTime
     * @returns {Boolean}
     */
    shouldRefresh(_fromTime, _toTime) {
        // DASH Manifests are usually refreshed through other means, i.e. thanks to
        // the `minimumUpdatePeriod` attribute.
        // Moreover, SegmentList are usually only found in static MPDs.
        return false;
    }
    /**
     * Returns first position in this index, in seconds.
     * @returns {Number}
     */
    getFirstAvailablePosition() {
        return this._periodStart;
    }
    /**
     * Returns last position in this index, in seconds.
     * @returns {Number}
     */
    getLastAvailablePosition() {
        var _a;
        const index = this._index;
        const { duration, list } = index;
        return Math.min(((list.length * duration) / index.timescale) + this._periodStart, (_a = this._periodEnd) !== null && _a !== void 0 ? _a : Infinity);
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        return this.getLastAvailablePosition();
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     *
     * Always `false` in a `ListRepresentationIndex` because all segments should
     * be directly available.
     * @returns {boolean}
     */
    awaitSegmentBetween() {
        return false;
    }
    /**
     * Returns true if a Segment returned by this index is still considered
     * available.
     * @returns {Boolean}
     */
    isSegmentStillAvailable() {
        return true;
    }
    /**
     * We do not check for discontinuity in SegmentList-based indexes.
     * @returns {null}
     */
    checkDiscontinuity() {
        return null;
    }
    /**
     * SegmentList should not be updated.
     * @returns {Boolean}
     */
    canBeOutOfSyncError() {
        return false;
    }
    /**
     * @returns {Boolean}
     */
    isFinished() {
        return true;
    }
    /**
     * @returns {Boolean}
     */
    isInitialized() {
        return true;
    }
    /**
     * @param {Object} newIndex
     */
    _replace(newIndex) {
        this._index = newIndex._index;
    }
    _update() {
        src_log.error("List RepresentationIndex: Cannot update a SegmentList");
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/clear_timeline_from_position.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Remove segments which starts before the given `firstAvailablePosition` from
 * the timeline. `firstAvailablePosition` has to be time scaled.
 * @param {Array.<Object>}
 * @returns {number} - Returns the number of removed segments. This includes
 * potential implicit segment from decremented `repeatCount` attributes.
 */
function clearTimelineFromPosition(timeline, firstAvailablePosition) {
    let nbEltsRemoved = 0;
    while (timeline.length > 0) {
        const firstElt = timeline[0];
        if (firstElt.start >= firstAvailablePosition) {
            return nbEltsRemoved; // all clear
        }
        if (firstElt.repeatCount === -1) {
            return nbEltsRemoved;
        }
        else if (firstElt.repeatCount === 0) {
            timeline.shift();
            nbEltsRemoved += 1;
        }
        else { // we have a segment repetition
            const nextElt = timeline[1];
            if (nextElt !== undefined && nextElt.start <= firstAvailablePosition) {
                timeline.shift();
                nbEltsRemoved += 1;
            }
            else { // no next segment or next segment is available
                if (firstElt.duration <= 0) {
                    return nbEltsRemoved;
                }
                let nextStart = firstElt.start + firstElt.duration;
                let nextRepeat = 1;
                while (nextStart < firstAvailablePosition &&
                    nextRepeat <= firstElt.repeatCount) {
                    nextStart += firstElt.duration;
                    nextRepeat++;
                }
                if (nextRepeat > firstElt.repeatCount) { // every start is before
                    timeline.shift();
                    nbEltsRemoved = firstElt.repeatCount + 1;
                }
                else { // some repetitions start after and some before
                    const newRepeat = firstElt.repeatCount - nextRepeat;
                    firstElt.start = nextStart;
                    firstElt.repeatCount = newRepeat;
                    nbEltsRemoved += nextRepeat;
                    return nbEltsRemoved;
                }
            }
        }
    }
    return nbEltsRemoved;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/is_segment_still_available.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns true if a Segment returned by the corresponding index is still
 * considered available.
 * Returns false if it is not available anymore.
 * Returns undefined if we cannot know whether it is still available or not.
 * /!\ We do not check the mediaURLs of the segment.
 * @param {Object} segment
 * @param {Array.<Object>} timescale
 * @param {number} timeline
 * @returns {Boolean|undefined}
 */
function isSegmentStillAvailable(segment, timeline, timescale, indexTimeOffset) {
    for (let i = 0; i < timeline.length; i++) {
        const tSegment = timeline[i];
        const tSegmentTime = (tSegment.start - indexTimeOffset) / timescale;
        if (tSegmentTime > segment.time) {
            return false;
        }
        else if (tSegmentTime === segment.time) {
            if (tSegment.range === undefined) {
                return segment.range === undefined;
            }
            return segment.range != null &&
                tSegment.range[0] === segment.range[0] &&
                tSegment.range[1] === segment.range[1];
        }
        else { // tSegment.start < segment.time
            if (tSegment.repeatCount >= 0 && tSegment.duration !== undefined) {
                const timeDiff = tSegmentTime - tSegment.start;
                const repeat = (timeDiff / tSegment.duration) - 1;
                return repeat % 1 === 0 && repeat <= tSegment.repeatCount;
            }
        }
    }
    return false;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/utils/update_segment_timeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Update a complete array of segments in a given timeline with a [generally]
 * smaller but [generally] newer set of segments.
 *
 * Returns a boolean:
 *   - If set to `true`, the old timeline was emptied and completely replaced by
 *     the content of the newer timeline.
 *     This could happen either if a problem happened while trying to update or
 *     when the update is actually bigger than what it is updating.
 *   - If set to `false`, the older timeline was either updated to add the newer
 *     segments, or untouched.
 *
 * @param {Array.<Object>} oldTimeline
 * @param {Array.<Object>} newTimeline
 * @returns {boolean}
 */
function updateSegmentTimeline(oldTimeline, newTimeline) {
    if (oldTimeline.length === 0) {
        oldTimeline.push(...newTimeline);
        return true;
    }
    else if (newTimeline.length === 0) {
        return false;
    }
    const prevTimelineLength = oldTimeline.length;
    const newIndexStart = newTimeline[0].start;
    const oldLastElt = oldTimeline[prevTimelineLength - 1];
    const oldIndexEnd = getIndexSegmentEnd(oldLastElt, newTimeline[0]);
    if (oldIndexEnd < newIndexStart) {
        throw new MediaError("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: not enough data");
    }
    for (let i = prevTimelineLength - 1; i >= 0; i--) {
        const currStart = oldTimeline[i].start;
        if (currStart === newIndexStart) {
            // replace that one and those after it
            const nbEltsToRemove = prevTimelineLength - i;
            oldTimeline.splice(i, nbEltsToRemove, ...newTimeline);
            return false;
        }
        else if (currStart < newIndexStart) { // first to be before
            const currElt = oldTimeline[i];
            if (currElt.start + currElt.duration > newIndexStart) {
                // The new Manifest overlaps a previous segment (weird)
                // In that improbable case, we'll just completely replace segments
                src_log.warn("RepresentationIndex: Manifest update removed all previous segments");
                oldTimeline.splice(0, prevTimelineLength, ...newTimeline);
                return true;
            }
            else if (currElt.repeatCount === undefined || currElt.repeatCount <= 0) {
                if (currElt.repeatCount < 0) {
                    currElt.repeatCount = Math.floor((newIndexStart - currElt.start) /
                        currElt.duration) - 1;
                }
                oldTimeline.splice(i + 1, prevTimelineLength - (i + 1), ...newTimeline);
                return false;
            }
            // else, there is a positive repeat we might want to update
            const eltLastTime = currElt.start + currElt.duration * (currElt.repeatCount + 1);
            if (eltLastTime <= newIndexStart) { // our new index comes directly after
                // put it after this one
                oldTimeline.splice(i + 1, prevTimelineLength - (i + 1), ...newTimeline);
                return false;
            }
            const newCurrRepeat = ((newIndexStart - currElt.start) / currElt.duration) - 1;
            if (newCurrRepeat % 1 === 0 && currElt.duration === newTimeline[0].duration) {
                const newRepeatCount = newTimeline[0].repeatCount < 0 ?
                    -1 : // === maximum possible repeat
                    newTimeline[0].repeatCount + newCurrRepeat + 1;
                // replace that one and those after it
                oldTimeline.splice(i, prevTimelineLength - i, ...newTimeline);
                oldTimeline[i].start = currElt.start;
                oldTimeline[i].repeatCount = newRepeatCount;
                return false;
            }
            src_log.warn("RepresentationIndex: Manifest update removed previous segments");
            oldTimeline[i].repeatCount = Math.floor(newCurrRepeat);
            // put it after this one
            oldTimeline.splice(i + 1, prevTimelineLength - (i + 1), ...newTimeline);
            return false;
        }
    }
    // if we got here, it means that every segments in the previous manifest are
    // after the new one. This is unusual.
    // Either the new one has more depth or it's an older one.
    const prevLastElt = oldTimeline[oldTimeline.length - 1];
    const newLastElt = newTimeline[newTimeline.length - 1];
    if (prevLastElt.repeatCount !== undefined && prevLastElt.repeatCount < 0) {
        if (prevLastElt.start > newLastElt.start) {
            src_log.warn("RepresentationIndex: The new index is older than the previous one");
            return false;
        }
        else { // the new has more depth
            src_log.warn("RepresentationIndex: The new index is \"bigger\" than the previous one");
            oldTimeline.splice(0, prevTimelineLength, ...newTimeline);
            return true;
        }
    }
    const prevLastTime = prevLastElt.start + prevLastElt.duration *
        (prevLastElt.repeatCount + 1);
    const newLastTime = newLastElt.start + newLastElt.duration *
        (newLastElt.repeatCount + 1);
    if (prevLastTime >= newLastTime) {
        src_log.warn("RepresentationIndex: The new index is older than the previous one");
        return false;
    }
    // the new one has more depth. full update
    src_log.warn("RepresentationIndex: The new index is \"bigger\" than the previous one");
    oldTimeline.splice(0, prevTimelineLength, ...newTimeline);
    return true;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * In Javascript, numbers are encoded in a way that a floating number may be
 * represented internally with a rounding error.
 *
 * This function returns a small number allowing to accound for rounding many
 * rounding errors.
 * @param {number} timescale
 * @returns {boolean}
 */
function getSegmentTimeRoundingError(timescale) {
    return src_config.getCurrent().DEFAULT_MAXIMUM_TIME_ROUNDING_ERROR * timescale;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/convert_element_to_index_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Translate parsed `S` node into Segment compatible with this index:
 * Find out the start, repeatCount and duration of each of these.
 *
 * @param {Object} item - parsed `S` node
 * @param {Object|null} previousItem - the previously parsed Segment (related
 * to the `S` node coming just before). If `null`, we're talking about the first
 * segment.
 * @param {Object|null} nextItem - the `S` node coming next. If `null`, we're
 * talking about the last segment.
 * @returns {Object|null}
 */
function convertElementsToIndexSegment(item, previousItem, nextItem) {
    let start = item.start;
    let duration = item.duration;
    const repeatCount = item.repeatCount;
    if (start === undefined) {
        if (previousItem === null) {
            start = 0;
        }
        else if (!isNullOrUndefined(previousItem.duration)) {
            start = previousItem.start +
                (previousItem.duration * (previousItem.repeatCount + 1));
        }
    }
    if ((duration === undefined || isNaN(duration)) &&
        nextItem !== null && nextItem.start !== undefined && !isNaN(nextItem.start) &&
        start !== undefined && !isNaN(start)) {
        duration = nextItem.start - start;
    }
    if ((start !== undefined && !isNaN(start)) &&
        (duration !== undefined && !isNaN(duration)) &&
        (repeatCount === undefined || !isNaN(repeatCount))) {
        return { start,
            duration,
            repeatCount: repeatCount === undefined ? 0 :
                repeatCount };
    }
    src_log.warn("DASH: A \"S\" Element could not have been parsed.");
    return null;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/parse_s_element.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a given <S> element in the MPD into a JS Object.
 * @param {Element} root
 * @returns {Object}
 */
function parseSElement(root) {
    const parsedS = {};
    for (let j = 0; j < root.attributes.length; j++) {
        const attribute = root.attributes[j];
        switch (attribute.name) {
            case "t":
                const start = parseInt(attribute.value, 10);
                if (isNaN(start)) {
                    src_log.warn(`DASH: invalid t ("${attribute.value}")`);
                }
                else {
                    parsedS.start = start;
                }
                break;
            case "d":
                const duration = parseInt(attribute.value, 10);
                if (isNaN(duration)) {
                    src_log.warn(`DASH: invalid d ("${attribute.value}")`);
                }
                else {
                    parsedS.duration = duration;
                }
                break;
            case "r":
                const repeatCount = parseInt(attribute.value, 10);
                if (isNaN(repeatCount)) {
                    src_log.warn(`DASH: invalid r ("${attribute.value}")`);
                }
                else {
                    parsedS.repeatCount = repeatCount;
                }
                break;
        }
    }
    return parsedS;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/construct_timeline_from_elements.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Allows to generate the "timeline" for the "Timeline" RepresentationIndex.
 * Call this function when the timeline is unknown.
 * This function was added to only perform that task lazily, i.e. only when
 * first needed.
 * @param {HTMLCollection} elements - All S nodes constituting the corresponding
 * SegmentTimeline node.
 * @returns {Array.<Object>}
 */
function constructTimelineFromElements(elements) {
    const initialTimeline = [];
    for (let i = 0; i < elements.length; i++) {
        initialTimeline.push(parseSElement(elements[i]));
    }
    const timeline = [];
    for (let i = 0; i < initialTimeline.length; i++) {
        const item = initialTimeline[i];
        const previousItem = timeline[timeline.length - 1] === undefined ?
            null :
            timeline[timeline.length - 1];
        const nextItem = initialTimeline[i + 1] === undefined ?
            null :
            initialTimeline[i + 1];
        const timelineElement = convertElementsToIndexSegment(item, previousItem, nextItem);
        if (timelineElement !== null) {
            timeline.push(timelineElement);
        }
    }
    return timeline;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/find_first_common_start_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * By comparing two timelines for the same content at different points in time,
 * retrieve the index in both timelines of the first segment having the same
 * starting time.
 * Returns `null` if not found.
 * @param {Array.<Object>} prevTimeline
 * @param {HTMLCollection} newElements
 * @returns {Object|null}
 */
function findFirstCommonStartTime(prevTimeline, newElements) {
    if (prevTimeline.length === 0 || newElements.length === 0) {
        return null;
    }
    const prevInitialStart = prevTimeline[0].start;
    const newFirstTAttr = newElements[0].getAttribute("t");
    const newInitialStart = newFirstTAttr === null ? null :
        parseInt(newFirstTAttr, 10);
    if (newInitialStart === null || Number.isNaN(newInitialStart)) {
        return null;
    }
    if (prevInitialStart === newInitialStart) {
        return { prevSegmentsIdx: 0,
            newElementsIdx: 0,
            repeatNumberInPrevSegments: 0,
            repeatNumberInNewElements: 0 };
    }
    else if (prevInitialStart < newInitialStart) {
        let prevElt = prevTimeline[0];
        let prevElementIndex = 0;
        while (true) {
            if (prevElt.repeatCount > 0) {
                const diff = newInitialStart - prevElt.start;
                if (diff % prevElt.duration === 0 &&
                    diff / prevElt.duration <= prevElt.repeatCount) {
                    const repeatNumberInPrevSegments = diff / prevElt.duration;
                    return { repeatNumberInPrevSegments,
                        prevSegmentsIdx: prevElementIndex,
                        newElementsIdx: 0,
                        repeatNumberInNewElements: 0 };
                }
            }
            prevElementIndex++;
            if (prevElementIndex >= prevTimeline.length) {
                return null;
            }
            prevElt = prevTimeline[prevElementIndex];
            if (prevElt.start === newInitialStart) {
                return { prevSegmentsIdx: prevElementIndex,
                    newElementsIdx: 0,
                    repeatNumberInPrevSegments: 0,
                    repeatNumberInNewElements: 0 };
            }
            else if (prevElt.start > newInitialStart) {
                return null;
            }
        }
    }
    else {
        let newElementsIdx = 0;
        let newElt = newElements[0];
        let currentTimeOffset = newInitialStart;
        while (true) {
            const dAttr = newElt.getAttribute("d");
            const duration = dAttr === null ? null :
                parseInt(dAttr, 10);
            if (duration === null || Number.isNaN(duration)) {
                return null;
            }
            const rAttr = newElt.getAttribute("r");
            const repeatCount = rAttr === null ? null :
                parseInt(rAttr, 10);
            if (repeatCount !== null) {
                if (Number.isNaN(repeatCount) || repeatCount < 0) {
                    return null;
                }
                if (repeatCount > 0) {
                    const diff = prevInitialStart - currentTimeOffset;
                    if (diff % duration === 0 &&
                        diff / duration <= repeatCount) {
                        const repeatNumberInNewElements = diff / duration;
                        return { repeatNumberInPrevSegments: 0,
                            repeatNumberInNewElements,
                            prevSegmentsIdx: 0,
                            newElementsIdx };
                    }
                }
                currentTimeOffset += duration * (repeatCount + 1);
            }
            else {
                currentTimeOffset += duration;
            }
            newElementsIdx++;
            if (newElementsIdx >= newElements.length) {
                return null;
            }
            newElt = newElements[newElementsIdx];
            const tAttr = newElt.getAttribute("t");
            const time = tAttr === null ? null :
                parseInt(tAttr, 10);
            if (time !== null) {
                if (Number.isNaN(time)) {
                    return null;
                }
                currentTimeOffset = time;
            }
            if (currentTimeOffset === prevInitialStart) {
                return { newElementsIdx,
                    prevSegmentsIdx: 0,
                    repeatNumberInPrevSegments: 0,
                    repeatNumberInNewElements: 0 };
            }
            else if (currentTimeOffset > newInitialStart) {
                return null;
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/construct_timeline_from_previous_timeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





function constructTimelineFromPreviousTimeline(newElements, prevTimeline) {
    var _a;
    // Find first index in both timeline where a common segment is found.
    const commonStartInfo = findFirstCommonStartTime(prevTimeline, newElements);
    if (commonStartInfo === null) {
        src_log.warn("DASH: Cannot perform \"based\" update. Common segment not found.");
        return constructTimelineFromElements(newElements);
    }
    const { prevSegmentsIdx, newElementsIdx, repeatNumberInPrevSegments, repeatNumberInNewElements } = commonStartInfo;
    /** Guess of the number of elements in common. */
    const numberCommonEltGuess = prevTimeline.length - prevSegmentsIdx;
    const lastCommonEltNewEltsIdx = numberCommonEltGuess + newElementsIdx - 1;
    if (lastCommonEltNewEltsIdx >= newElements.length) {
        src_log.info("DASH: Cannot perform \"based\" update. New timeline too short");
        return constructTimelineFromElements(newElements);
    }
    // Remove elements which are not available anymore
    const newTimeline = prevTimeline.slice(prevSegmentsIdx);
    if (repeatNumberInPrevSegments > 0) {
        const commonEltInOldTimeline = newTimeline[0];
        commonEltInOldTimeline.start += commonEltInOldTimeline.duration *
            repeatNumberInPrevSegments;
        newTimeline[0].repeatCount -= repeatNumberInPrevSegments;
    }
    if (repeatNumberInNewElements > 0 && newElementsIdx !== 0) {
        src_log.info("DASH: Cannot perform \"based\" update. " +
            "The new timeline has a different form.");
        return constructTimelineFromElements(newElements);
    }
    const prevLastElement = newTimeline[newTimeline.length - 1];
    const newCommonElt = parseSElement(newElements[lastCommonEltNewEltsIdx]);
    const newRepeatCountOffseted = ((_a = newCommonElt.repeatCount) !== null && _a !== void 0 ? _a : 0) -
        repeatNumberInNewElements;
    if (newCommonElt.duration !== prevLastElement.duration ||
        prevLastElement.repeatCount > newRepeatCountOffseted) {
        src_log.info("DASH: Cannot perform \"based\" update. " +
            "The new timeline has a different form at the beginning.");
        return constructTimelineFromElements(newElements);
    }
    if (newCommonElt.repeatCount !== undefined &&
        newCommonElt.repeatCount > prevLastElement.repeatCount) {
        prevLastElement.repeatCount = newCommonElt.repeatCount;
    }
    const newEltsToPush = [];
    const items = [];
    for (let i = lastCommonEltNewEltsIdx + 1; i < newElements.length; i++) {
        items.push(parseSElement(newElements[i]));
    }
    for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const previousItem = newEltsToPush[newEltsToPush.length - 1] === undefined ?
            prevLastElement :
            newEltsToPush[newEltsToPush.length - 1];
        const nextItem = items[i + 1] === undefined ?
            null :
            items[i + 1];
        const timelineElement = convertElementsToIndexSegment(item, previousItem, nextItem);
        if (timelineElement !== null) {
            newEltsToPush.push(timelineElement);
        }
    }
    return newTimeline.concat(newEltsToPush);
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/timeline_representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */













// eslint-disable-next-line max-len

class TimelineRepresentationIndex {
    /**
     * @param {Object} index
     * @param {Object} context
     */
    constructor(index, context) {
        var _a, _b, _c, _d;
        if (!TimelineRepresentationIndex.isTimelineIndexArgument(index)) {
            throw new Error("The given index is not compatible with a " +
                "TimelineRepresentationIndex.");
        }
        const { availabilityTimeComplete, manifestBoundsCalculator, isDynamic, isLastPeriod, representationId, representationBitrate, periodStart, periodEnd, isEMSGWhitelisted } = context;
        const timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
        const presentationTimeOffset = index.presentationTimeOffset != null ?
            index.presentationTimeOffset :
            0;
        const scaledStart = periodStart * timescale;
        const indexTimeOffset = presentationTimeOffset - scaledStart;
        this._manifestBoundsCalculator = manifestBoundsCalculator;
        this._isEMSGWhitelisted = isEMSGWhitelisted;
        this._isLastPeriod = isLastPeriod;
        this._lastUpdate = context.receivedTime == null ?
            performance.now() :
            context.receivedTime;
        this._unsafelyBaseOnPreviousIndex = null;
        if (context.unsafelyBaseOnPreviousRepresentation !== null &&
            context.unsafelyBaseOnPreviousRepresentation.index
                instanceof TimelineRepresentationIndex) {
            // avoid too much nested references, to keep memory down
            context.unsafelyBaseOnPreviousRepresentation
                .index._unsafelyBaseOnPreviousIndex = null;
            this._unsafelyBaseOnPreviousIndex = context
                .unsafelyBaseOnPreviousRepresentation.index;
        }
        this._isDynamic = isDynamic;
        this._parseTimeline = (_b = index.timelineParser) !== null && _b !== void 0 ? _b : null;
        const initializationUrl = ((_c = index.initialization) === null || _c === void 0 ? void 0 : _c.media) === undefined ?
            null :
            constructRepresentationUrl(index.initialization.media, representationId, representationBitrate);
        const segmentUrlTemplate = index.media === undefined ?
            null :
            constructRepresentationUrl(index.media, representationId, representationBitrate);
        this._index = { availabilityTimeComplete,
            indexRange: index.indexRange,
            indexTimeOffset,
            initialization: index.initialization == null ?
                undefined :
                {
                    url: initializationUrl,
                    range: index.initialization.range,
                },
            segmentUrlTemplate,
            startNumber: index.startNumber,
            timeline: (_d = index.timeline) !== null && _d !== void 0 ? _d : null,
            timescale };
        this._scaledPeriodStart = toIndexTime(periodStart, this._index);
        this._scaledPeriodEnd = periodEnd === undefined ? undefined :
            toIndexTime(periodEnd, this._index);
    }
    /**
     * Construct init Segment.
     * @returns {Object}
     */
    getInitSegment() {
        return getInitSegment(this._index, this._isEMSGWhitelisted);
    }
    /**
     * Asks for segments to download for a given time range.
     * @param {Number} from - Beginning of the time wanted, in seconds
     * @param {Number} duration - duration wanted, in seconds
     * @returns {Array.<Object>}
     */
    getSegments(from, duration) {
        this._refreshTimeline(); // clear timeline if needed
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        // destructuring to please TypeScript
        const { segmentUrlTemplate, startNumber, timeline, timescale, indexTimeOffset } = this._index;
        return getSegmentsFromTimeline({ segmentUrlTemplate,
            startNumber,
            timeline,
            timescale,
            indexTimeOffset }, from, duration, this._isEMSGWhitelisted, this._scaledPeriodEnd);
    }
    /**
     * Returns true if the index should be refreshed.
     * @returns {Boolean}
     */
    shouldRefresh() {
        // DASH Manifest based on a SegmentTimeline should have minimumUpdatePeriod
        // attribute which should be sufficient to know when to refresh it.
        return false;
    }
    /**
     * Returns the starting time, in seconds, of the earliest segment currently
     * available.
     * Returns null if nothing is in the index
     * @returns {Number|null}
     */
    getFirstAvailablePosition() {
        this._refreshTimeline();
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        const timeline = this._index.timeline;
        return timeline.length === 0 ? null :
            fromIndexTime(Math.max(this._scaledPeriodStart, timeline[0].start), this._index);
    }
    /**
     * Returns the ending time, in seconds, of the last segment currently
     * available.
     * Returns null if nothing is in the index
     * @returns {Number|null}
     */
    getLastAvailablePosition() {
        this._refreshTimeline();
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        const lastTime = TimelineRepresentationIndex.getIndexEnd(this._index.timeline, this._scaledPeriodEnd);
        return lastTime === null ? null :
            fromIndexTime(lastTime, this._index);
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        if (!this._isDynamic || !this._isLastPeriod) { // @see isFinished
            return this.getLastAvailablePosition();
        }
        return undefined;
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     * @param {number} start
     * @param {number} end
     * @returns {boolean|undefined}
     */
    awaitSegmentBetween(start, end) {
        var _a;
        assert_assert(start <= end);
        if (!this._isDynamic || !this._isLastPeriod) {
            return false;
        }
        this._refreshTimeline();
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        const { timeline, timescale } = this._index;
        const segmentTimeRounding = getSegmentTimeRoundingError(timescale);
        const scaledEnd = toIndexTime(end, this._index);
        if (timeline.length > 0) {
            const lastTimelineElement = timeline[timeline.length - 1];
            const lastSegmentEnd = getIndexSegmentEnd(lastTimelineElement, null, this._scaledPeriodEnd);
            const roundedEnd = lastSegmentEnd + segmentTimeRounding;
            if (roundedEnd >= Math.min(scaledEnd, (_a = this._scaledPeriodEnd) !== null && _a !== void 0 ? _a : Infinity)) {
                return false; // already loaded
            }
        }
        if (this._scaledPeriodEnd === undefined) {
            return (scaledEnd + segmentTimeRounding) > this._scaledPeriodStart ? undefined :
                false;
        }
        const scaledStart = toIndexTime(start, this._index);
        return (scaledStart - segmentTimeRounding) < this._scaledPeriodEnd &&
            (scaledEnd + segmentTimeRounding) > this._scaledPeriodStart;
    }
    /**
     * Returns true if a Segment returned by this index is still considered
     * available.
     * Returns false if it is not available anymore.
     * Returns undefined if we cannot know whether it is still available or not.
     * @param {Object} segment
     * @returns {Boolean|undefined}
     */
    isSegmentStillAvailable(segment) {
        if (segment.isInit) {
            return true;
        }
        this._refreshTimeline();
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        const { timeline, timescale, indexTimeOffset } = this._index;
        return isSegmentStillAvailable(segment, timeline, timescale, indexTimeOffset);
    }
    /**
     * Checks if the time given is in a discontinuity. That is:
     *   - We're on the upper bound of the current range (end of the range - time
     *     is inferior to the timescale)
     *   - The next range starts after the end of the current range.
     * @param {Number} time
     * @returns {Number|null}
     */
    checkDiscontinuity(time) {
        this._refreshTimeline();
        let timeline = this._index.timeline;
        if (timeline === null) {
            timeline = this._getTimeline();
            this._index.timeline = timeline;
        }
        return checkDiscontinuity({ timeline,
            timescale: this._index.timescale,
            indexTimeOffset: this._index.indexTimeOffset }, time, this._scaledPeriodEnd);
    }
    /**
     * @param {Error} error
     * @returns {Boolean}
     */
    canBeOutOfSyncError(error) {
        if (!this._isDynamic) {
            return false;
        }
        return error instanceof NetworkError &&
            error.isHttpError(404);
    }
    /**
     * Replace this RepresentationIndex with one from a new version of the
     * Manifest.
     * @param {Object} newIndex
     */
    _replace(newIndex) {
        this._parseTimeline = newIndex._parseTimeline;
        this._index = newIndex._index;
        this._isDynamic = newIndex._isDynamic;
        this._scaledPeriodStart = newIndex._scaledPeriodStart;
        this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
        this._lastUpdate = newIndex._lastUpdate;
        this._manifestBoundsCalculator = newIndex._manifestBoundsCalculator;
        this._isLastPeriod = newIndex._isLastPeriod;
    }
    /**
     * Update this RepresentationIndex with a shorter version of it coming from a
     * new version of the MPD.
     * @param {Object} newIndex
     */
    _update(newIndex) {
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        if (newIndex._index.timeline === null) {
            newIndex._index.timeline = newIndex._getTimeline();
        }
        const hasReplaced = updateSegmentTimeline(this._index.timeline, newIndex._index.timeline);
        if (hasReplaced) {
            this._index.startNumber = newIndex._index.startNumber;
        }
        this._isDynamic = newIndex._isDynamic;
        this._scaledPeriodStart = newIndex._scaledPeriodStart;
        this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
        this._lastUpdate = newIndex._lastUpdate;
        this._isLastPeriod = newIndex._isLastPeriod;
    }
    /**
     * Returns `true` if this RepresentationIndex currently contains its last
     * segment.
     * Returns `false` if it's still pending.
     * @returns {Boolean}
     */
    isFinished() {
        if (!this._isDynamic || !this._isLastPeriod) {
            // Either the content is not dynamic, in which case no new segment will
            // be generated, either it is but this index is not linked to the current
            // last Period in the MPD, in which case it is inferred that it has been
            // completely generated. Note that this second condition might break very
            // very rare use cases where old Periods are still being generated, yet it
            // should fix more cases than it breaks.
            return true;
        }
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        const { timeline } = this._index;
        if (this._scaledPeriodEnd === undefined || timeline.length === 0) {
            return false;
        }
        const lastTimelineElement = timeline[timeline.length - 1];
        const lastTime = getIndexSegmentEnd(lastTimelineElement, null, this._scaledPeriodEnd);
        const segmentTimeRounding = getSegmentTimeRoundingError(this._index.timescale);
        return (lastTime + segmentTimeRounding) >= this._scaledPeriodEnd;
    }
    /**
     * @returns {Boolean}
     */
    isInitialized() {
        return true;
    }
    /**
     * Returns `true` if the given object can be used as an "index" argument to
     * create a new `TimelineRepresentationIndex`.
     * @param {Object} index
     * @returns {boolean}
     */
    static isTimelineIndexArgument(index) {
        return typeof index.timelineParser === "function" ||
            Array.isArray(index.timeline);
    }
    /**
     * Clean-up timeline to remove segment information which should not be
     * available due to timeshifting.
     */
    _refreshTimeline() {
        if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
        }
        if (!this._isDynamic) {
            return;
        }
        const firstPosition = this._manifestBoundsCalculator.estimateMinimumBound();
        if (firstPosition == null) {
            return; // we don't know yet
        }
        const scaledFirstPosition = toIndexTime(firstPosition, this._index);
        const nbEltsRemoved = clearTimelineFromPosition(this._index.timeline, scaledFirstPosition);
        if (this._index.startNumber !== undefined) {
            this._index.startNumber += nbEltsRemoved;
        }
    }
    static getIndexEnd(timeline, scaledPeriodEnd) {
        if (timeline.length <= 0) {
            return null;
        }
        return Math.min(getIndexSegmentEnd(timeline[timeline.length - 1], null, scaledPeriodEnd), scaledPeriodEnd !== null && scaledPeriodEnd !== void 0 ? scaledPeriodEnd : Infinity);
    }
    /**
     * Allows to generate the "timeline" for this RepresentationIndex.
     * Call this function when the timeline is unknown.
     * This function was added to only perform that task lazily, i.e. only when
     * first needed.
     * After calling it, every now unneeded variable will be freed from memory.
     * This means that calling _getTimeline more than once will just return an
     * empty array.
     *
     * /!\ Please note that this structure should follow the exact same structure
     * than a SegmentTimeline element in the corresponding MPD.
     * This means:
     *   - It should have the same amount of elements in its array than there was
     *     `<S>` elements in the SegmentTimeline.
     *   - Each of those same elements should have the same start time, the same
     *     duration and the same repeat counter than what could be deduced from
     *     the SegmentTimeline.
     * This is needed to be able to run parsing optimization when refreshing the
     * MPD. Not doing so could lead to the RxPlayer not being able to play the
     * stream anymore.
     * @returns {Array.<Object>}
     */
    _getTimeline() {
        if (this._parseTimeline === null) {
            if (this._index.timeline !== null) {
                return this._index.timeline;
            }
            src_log.error("DASH: Timeline already lazily parsed.");
            return [];
        }
        const newElements = this._parseTimeline();
        this._parseTimeline = null; // Free memory
        const { MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY } = src_config.getCurrent();
        if (this._unsafelyBaseOnPreviousIndex === null ||
            newElements.length < MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY) {
            // Just completely parse the current timeline
            return constructTimelineFromElements(newElements);
        }
        // Construct previously parsed timeline if not already done
        let prevTimeline;
        if (this._unsafelyBaseOnPreviousIndex._index.timeline === null) {
            prevTimeline = this._unsafelyBaseOnPreviousIndex._getTimeline();
            this._unsafelyBaseOnPreviousIndex._index.timeline = prevTimeline;
        }
        else {
            prevTimeline = this._unsafelyBaseOnPreviousIndex._index.timeline;
        }
        this._unsafelyBaseOnPreviousIndex = null; // Free memory
        return constructTimelineFromPreviousTimeline(newElements, prevTimeline);
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/timeline/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const timeline = (TimelineRepresentationIndex);

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/indexes/template.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * IRepresentationIndex implementation for DASH' SegmentTemplate without a
 * SegmentTimeline.
 * @class TemplateRepresentationIndex
 */
class TemplateRepresentationIndex {
    /**
     * @param {Object} index
     * @param {Object} context
     */
    constructor(index, context) {
        var _a, _b;
        const { aggressiveMode, availabilityTimeOffset, manifestBoundsCalculator, isDynamic, periodEnd, periodStart, representationId, representationBitrate, isEMSGWhitelisted } = context;
        const timescale = (_a = index.timescale) !== null && _a !== void 0 ? _a : 1;
        this._availabilityTimeOffset = availabilityTimeOffset;
        this._manifestBoundsCalculator = manifestBoundsCalculator;
        this._aggressiveMode = aggressiveMode;
        const presentationTimeOffset = index.presentationTimeOffset != null ?
            index.presentationTimeOffset :
            0;
        const scaledStart = periodStart * timescale;
        const indexTimeOffset = presentationTimeOffset - scaledStart;
        if (index.duration === undefined) {
            throw new Error("Invalid SegmentTemplate: no duration");
        }
        const initializationUrl = ((_b = index.initialization) === null || _b === void 0 ? void 0 : _b.media) === undefined ?
            null :
            constructRepresentationUrl(index.initialization.media, representationId, representationBitrate);
        const segmentUrlTemplate = index.media === undefined ?
            null :
            constructRepresentationUrl(index.media, representationId, representationBitrate);
        this._index = { duration: index.duration,
            timescale,
            indexRange: index.indexRange,
            indexTimeOffset,
            initialization: index.initialization == null ?
                undefined :
                { url: initializationUrl,
                    range: index.initialization.range },
            url: segmentUrlTemplate,
            presentationTimeOffset,
            startNumber: index.startNumber };
        this._isDynamic = isDynamic;
        this._periodStart = periodStart;
        this._scaledRelativePeriodEnd = periodEnd === undefined ?
            undefined :
            (periodEnd - periodStart) * timescale;
        this._isEMSGWhitelisted = isEMSGWhitelisted;
    }
    /**
     * Construct init Segment.
     * @returns {Object}
     */
    getInitSegment() {
        return getInitSegment(this._index, this._isEMSGWhitelisted);
    }
    /**
     * @param {Number} fromTime
     * @param {Number} dur
     * @returns {Array.<Object>}
     */
    getSegments(fromTime, dur) {
        const index = this._index;
        const { duration, startNumber, timescale, url } = index;
        const scaledStart = this._periodStart * timescale;
        const scaledEnd = this._scaledRelativePeriodEnd;
        // Convert the asked position to the right timescales, and consider them
        // relatively to the Period's start.
        const upFromPeriodStart = fromTime * timescale - scaledStart;
        const toFromPeriodStart = (fromTime + dur) * timescale - scaledStart;
        const firstSegmentStart = this._getFirstSegmentStart();
        const lastSegmentStart = this._getLastSegmentStart();
        if (firstSegmentStart == null || lastSegmentStart == null) {
            return [];
        }
        const startPosition = Math.max(firstSegmentStart, upFromPeriodStart);
        const lastWantedStartPosition = Math.min(lastSegmentStart, toFromPeriodStart);
        if ((lastWantedStartPosition + duration) <= startPosition) {
            return [];
        }
        const segments = [];
        // number corresponding to the Period's start
        const numberOffset = startNumber !== null && startNumber !== void 0 ? startNumber : 1;
        // calcul initial time from Period start, where the first segment would have
        // the `0` number
        let numberIndexedToZero = Math.floor(startPosition / duration);
        for (let timeFromPeriodStart = numberIndexedToZero * duration; timeFromPeriodStart <= lastWantedStartPosition; timeFromPeriodStart += duration) {
            // To obtain the real number, adds the real number from the Period's start
            const realNumber = numberIndexedToZero + numberOffset;
            const realDuration = scaledEnd != null &&
                timeFromPeriodStart + duration > scaledEnd ?
                scaledEnd - timeFromPeriodStart :
                duration;
            const realTime = timeFromPeriodStart + scaledStart;
            const manifestTime = timeFromPeriodStart + this._index.presentationTimeOffset;
            const detokenizedURL = url === null ?
                null :
                createDashUrlDetokenizer(manifestTime, realNumber)(url);
            const args = { id: String(realNumber),
                number: realNumber,
                time: realTime / timescale,
                end: (realTime + realDuration) / timescale,
                duration: realDuration / timescale,
                timescale: 1,
                isInit: false,
                scaledDuration: realDuration / timescale,
                url: detokenizedURL,
                timestampOffset: -(index.indexTimeOffset / timescale),
                complete: true,
                privateInfos: {
                    isEMSGWhitelisted: this._isEMSGWhitelisted,
                } };
            segments.push(args);
            numberIndexedToZero++;
        }
        return segments;
    }
    /**
     * Returns first possible position in the index, in seconds.
     * @returns {number|null|undefined}
     */
    getFirstAvailablePosition() {
        const firstSegmentStart = this._getFirstSegmentStart();
        if (firstSegmentStart == null) {
            return firstSegmentStart; // return undefined or null
        }
        return (firstSegmentStart / this._index.timescale) + this._periodStart;
    }
    /**
     * Returns last possible position in the index, in seconds.
     * @returns {number|null}
     */
    getLastAvailablePosition() {
        var _a;
        const lastSegmentStart = this._getLastSegmentStart();
        if (lastSegmentStart == null) {
            // In that case (null or undefined), getLastAvailablePosition should reflect
            // the result of getLastSegmentStart, as the meaning is the same for
            // the two functions. So, we return the result of the latter.
            return lastSegmentStart;
        }
        const lastSegmentEnd = Math.min(lastSegmentStart + this._index.duration, (_a = this._scaledRelativePeriodEnd) !== null && _a !== void 0 ? _a : Infinity);
        return (lastSegmentEnd / this._index.timescale) + this._periodStart;
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        if (!this._isDynamic) {
            return this.getLastAvailablePosition();
        }
        if (this._scaledRelativePeriodEnd === undefined) {
            return undefined;
        }
        const { timescale } = this._index;
        const absoluteScaledPeriodEnd = (this._scaledRelativePeriodEnd +
            this._periodStart * timescale);
        return absoluteScaledPeriodEnd / this._index.timescale;
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     *
     * Always `false` in a `BaseRepresentationIndex` because all segments should
     * be directly available.
     * @returns {boolean}
     */
    awaitSegmentBetween(start, end) {
        assert_assert(start <= end);
        if (!this._isDynamic) {
            return false;
        }
        const { timescale } = this._index;
        const segmentTimeRounding = getSegmentTimeRoundingError(timescale);
        const scaledPeriodStart = this._periodStart * timescale;
        const scaledRelativeEnd = end * timescale - scaledPeriodStart;
        if (this._scaledRelativePeriodEnd === undefined) {
            return (scaledRelativeEnd + segmentTimeRounding) >= 0;
        }
        const scaledRelativePeriodEnd = this._scaledRelativePeriodEnd;
        const scaledRelativeStart = start * timescale - scaledPeriodStart;
        return (scaledRelativeStart - segmentTimeRounding) < scaledRelativePeriodEnd &&
            (scaledRelativeEnd + segmentTimeRounding) >= 0;
    }
    /**
     * Returns true if, based on the arguments, the index should be refreshed.
     * We never have to refresh a SegmentTemplate-based manifest.
     * @returns {Boolean}
     */
    shouldRefresh() {
        return false;
    }
    /**
     * We cannot check for discontinuity in SegmentTemplate-based indexes.
     * @returns {null}
     */
    checkDiscontinuity() {
        return null;
    }
    /**
     * Returns `true` if the given segment should still be available as of now
     * (not removed since and still request-able).
     * Returns `false` if that's not the case.
     * Returns `undefined` if we do not know whether that's the case or not.
     * @param {Object} segment
     * @returns {boolean|undefined}
     */
    isSegmentStillAvailable(segment) {
        if (segment.isInit) {
            return true;
        }
        const segmentsForTime = this.getSegments(segment.time, 0.1);
        if (segmentsForTime.length === 0) {
            return false;
        }
        return segmentsForTime[0].time === segment.time &&
            segmentsForTime[0].end === segment.end &&
            segmentsForTime[0].number === segment.number;
    }
    /**
     * SegmentTemplate without a SegmentTimeline should not be updated.
     * @returns {Boolean}
     */
    canBeOutOfSyncError() {
        return false;
    }
    /**
     * @returns {Boolean}
     */
    isFinished() {
        if (!this._isDynamic) {
            return true;
        }
        if (this._scaledRelativePeriodEnd === undefined) {
            return false;
        }
        const { timescale } = this._index;
        const lastSegmentStart = this._getLastSegmentStart();
        // As last segment start is null if live time is before
        // current period, consider the index not to be finished.
        if (lastSegmentStart == null) {
            return false;
        }
        const lastSegmentEnd = lastSegmentStart + this._index.duration;
        const segmentTimeRounding = getSegmentTimeRoundingError(timescale);
        return (lastSegmentEnd + segmentTimeRounding) >= this._scaledRelativePeriodEnd;
    }
    /**
     * @returns {Boolean}
     */
    isInitialized() {
        return true;
    }
    /**
     * @param {Object} newIndex
     */
    _replace(newIndex) {
        this._index = newIndex._index;
        this._aggressiveMode = newIndex._aggressiveMode;
        this._isDynamic = newIndex._isDynamic;
        this._periodStart = newIndex._periodStart;
        this._scaledRelativePeriodEnd = newIndex._scaledRelativePeriodEnd;
        this._manifestBoundsCalculator = newIndex._manifestBoundsCalculator;
    }
    /**
     * @param {Object} newIndex
     */
    _update(newIndex) {
        // As segments are not declared individually, as long as this Representation
        // is present, we have every information we need
        this._replace(newIndex);
    }
    /**
     * Returns the timescaled start of the first segment that should be available,
     * relatively to the start of the Period.
     * @returns {number | null | undefined}
     */
    _getFirstSegmentStart() {
        if (!this._isDynamic) {
            return 0; // it is the start of the Period
        }
        // 1 - check that this index is already available
        if (this._scaledRelativePeriodEnd === 0 ||
            this._scaledRelativePeriodEnd === undefined) {
            // /!\ The scaled max position augments continuously and might not
            // reflect exactly the real server-side value. As segments are
            // generated discretely.
            const maximumBound = this._manifestBoundsCalculator.estimateMaximumBound();
            if (maximumBound !== undefined && maximumBound < this._periodStart) {
                // Maximum position is before this period.
                // No segment is yet available here
                return null;
            }
        }
        const { duration, timescale } = this._index;
        const firstPosition = this._manifestBoundsCalculator.estimateMinimumBound();
        if (firstPosition === undefined) {
            return undefined;
        }
        const segmentTime = firstPosition > this._periodStart ?
            (firstPosition - this._periodStart) * timescale :
            0;
        const numberIndexedToZero = Math.floor(segmentTime / duration);
        return numberIndexedToZero * duration;
    }
    /**
     * Returns the timescaled start of the last segment that should be available,
     * relatively to the start of the Period.
     * Returns null if live time is before current period.
     * @returns {number|null|undefined}
     */
    _getLastSegmentStart() {
        var _a;
        const { duration, timescale } = this._index;
        if (this._isDynamic) {
            const lastPos = this._manifestBoundsCalculator.estimateMaximumBound();
            if (lastPos === undefined) {
                return undefined;
            }
            const agressiveModeOffset = this._aggressiveMode ? (duration / timescale) :
                0;
            if (this._scaledRelativePeriodEnd != null &&
                this._scaledRelativePeriodEnd <
                    (lastPos + agressiveModeOffset - this._periodStart) * this._index.timescale) {
                if (this._scaledRelativePeriodEnd < duration) {
                    return null;
                }
                return (Math.floor(this._scaledRelativePeriodEnd / duration) - 1) * duration;
            }
            // /!\ The scaled last position augments continuously and might not
            // reflect exactly the real server-side value. As segments are
            // generated discretely.
            const scaledLastPosition = (lastPos - this._periodStart) * timescale;
            // Maximum position is before this period.
            // No segment is yet available here
            if (scaledLastPosition < 0) {
                return null;
            }
            const availabilityTimeOffset = ((this._availabilityTimeOffset !== undefined ? this._availabilityTimeOffset : 0) +
                agressiveModeOffset) * timescale;
            const numberOfSegmentsAvailable = Math.floor((scaledLastPosition + availabilityTimeOffset) / duration);
            return numberOfSegmentsAvailable <= 0 ?
                null :
                (numberOfSegmentsAvailable - 1) * duration;
        }
        else {
            const maximumTime = (_a = this._scaledRelativePeriodEnd) !== null && _a !== void 0 ? _a : 0;
            const numberIndexedToZero = Math.ceil(maximumTime / duration) - 1;
            const regularLastSegmentStart = numberIndexedToZero * duration;
            // In some SegmentTemplate, we could think that there is one more
            // segment that there actually is due to a very little difference between
            // the period's duration and a multiple of a segment's duration.
            // Check that we're within a good margin
            const minimumDuration = src_config.getCurrent().MINIMUM_SEGMENT_SIZE * timescale;
            if (maximumTime - regularLastSegmentStart > minimumDuration ||
                numberIndexedToZero === 0) {
                return regularLastSegmentStart;
            }
            return (numberIndexedToZero - 1) * duration;
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/parse_representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse the specific segment indexing information found in a representation
 * into a IRepresentationIndex implementation.
 * @param {Array.<Object>} representation
 * @param {Object} context
 * @returns {Array.<Object>}
 */
function parseRepresentationIndex(representation, context) {
    var _a, _b;
    const { aggressiveMode, availabilityTimeOffset, manifestBoundsCalculator, isDynamic, end: periodEnd, start: periodStart, receivedTime, timeShiftBufferDepth, unsafelyBaseOnPreviousRepresentation, inbandEventStreams, isLastPeriod } = context;
    const isEMSGWhitelisted = (inbandEvent) => {
        if (inbandEventStreams === undefined) {
            return false;
        }
        return inbandEventStreams
            .some(({ schemeIdUri }) => schemeIdUri === inbandEvent.schemeIdUri);
    };
    const reprIndexCtxt = { aggressiveMode,
        availabilityTimeComplete: true,
        availabilityTimeOffset,
        unsafelyBaseOnPreviousRepresentation,
        isEMSGWhitelisted,
        isLastPeriod,
        manifestBoundsCalculator,
        isDynamic,
        periodEnd,
        periodStart,
        receivedTime,
        representationBitrate: representation.attributes.bitrate,
        representationId: representation.attributes.id,
        timeShiftBufferDepth };
    let representationIndex;
    if (representation.children.segmentBase !== undefined) {
        const { segmentBase } = representation.children;
        representationIndex = new BaseRepresentationIndex(segmentBase, reprIndexCtxt);
    }
    else if (representation.children.segmentList !== undefined) {
        const { segmentList } = representation.children;
        representationIndex = new ListRepresentationIndex(segmentList, reprIndexCtxt);
    }
    else if (representation.children.segmentTemplate !== undefined ||
        context.parentSegmentTemplates.length > 0) {
        const segmentTemplates = context.parentSegmentTemplates.slice();
        const childSegmentTemplate = representation.children.segmentTemplate;
        if (childSegmentTemplate !== undefined) {
            segmentTemplates.push(childSegmentTemplate);
        }
        const segmentTemplate = object_assign({}, ...segmentTemplates /* Ugly TS Hack */);
        reprIndexCtxt.availabilityTimeComplete =
            (_a = segmentTemplate.availabilityTimeComplete) !== null && _a !== void 0 ? _a : context.availabilityTimeComplete;
        reprIndexCtxt.availabilityTimeOffset =
            ((_b = segmentTemplate.availabilityTimeOffset) !== null && _b !== void 0 ? _b : 0) +
                context.availabilityTimeOffset;
        representationIndex = timeline.isTimelineIndexArgument(segmentTemplate) ?
            new timeline(segmentTemplate, reprIndexCtxt) :
            new TemplateRepresentationIndex(segmentTemplate, reprIndexCtxt);
    }
    else {
        const adaptationChildren = context.adaptation.children;
        if (adaptationChildren.segmentBase !== undefined) {
            const { segmentBase } = adaptationChildren;
            representationIndex = new BaseRepresentationIndex(segmentBase, reprIndexCtxt);
        }
        else if (adaptationChildren.segmentList !== undefined) {
            const { segmentList } = adaptationChildren;
            representationIndex = new ListRepresentationIndex(segmentList, reprIndexCtxt);
        }
        else {
            representationIndex = new TemplateRepresentationIndex({
                duration: Number.MAX_VALUE,
                timescale: 1,
                startNumber: 0,
                media: "",
            }, reprIndexCtxt);
        }
    }
    return representationIndex;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/resolve_base_urls.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Array.<string>} currentBaseURLs
 * @param {Array.<Object>} newBaseUrlsIR
 * @returns {Array.<string>}
 */
function resolveBaseURLs(currentBaseURLs, newBaseUrlsIR) {
    var _a;
    if (newBaseUrlsIR.length === 0) {
        return currentBaseURLs;
    }
    const newBaseUrls = newBaseUrlsIR.map(ir => {
        return { url: ir.value };
    });
    if (currentBaseURLs.length === 0) {
        return newBaseUrls;
    }
    const result = [];
    for (let i = 0; i < currentBaseURLs.length; i++) {
        const curBaseUrl = currentBaseURLs[i];
        for (let j = 0; j < newBaseUrls.length; j++) {
            const newBaseUrl = newBaseUrls[j];
            const newUrl = resolveURL(curBaseUrl.url, newBaseUrl.url);
            result.push({ url: newUrl,
                serviceLocation: (_a = newBaseUrl.serviceLocation) !== null && _a !== void 0 ? _a : curBaseUrl.serviceLocation });
        }
    }
    return result;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/parse_representations.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Combine inband event streams from representation and
 * adaptation data.
 * @param {Object} representation
 * @param {Object} adaptation
 * @returns {undefined | Array.<Object>}
 */
function combineInbandEventStreams(representation, adaptation) {
    const newSchemeId = [];
    if (representation.children.inbandEventStreams !== undefined) {
        newSchemeId.push(...representation.children.inbandEventStreams);
    }
    if (adaptation.children.inbandEventStreams !== undefined) {
        newSchemeId.push(...adaptation.children.inbandEventStreams);
    }
    if (newSchemeId.length === 0) {
        return undefined;
    }
    return newSchemeId;
}
/**
 * Extract HDR information from manifest and codecs.
 * @param {Object}
 * @returns {Object | undefined}
 */
function getHDRInformation({ adaptationProfiles, manifestProfiles, codecs, }) {
    const profiles = (adaptationProfiles !== null && adaptationProfiles !== void 0 ? adaptationProfiles : "") + (manifestProfiles !== null && manifestProfiles !== void 0 ? manifestProfiles : "");
    if (codecs === undefined) {
        return undefined;
    }
    if (profiles.indexOf("http://dashif.org/guidelines/dash-if-uhd#hevc-hdr-pq10") !== -1) {
        if (codecs === "hvc1.2.4.L153.B0" ||
            codecs === "hev1.2.4.L153.B0") {
            return { colorDepth: 10,
                eotf: "pq",
                colorSpace: "rec2020" };
        }
    }
    if (/^vp(08|09|10)/.exec(codecs)) {
        return getWEBMHDRInformation(codecs);
    }
}
/**
 * Process intermediate representations to create final parsed representations.
 * @param {Array.<Object>} representationsIR
 * @param {Object} context
 * @returns {Array.<Object>}
 */
function parseRepresentations(representationsIR, adaptation, context) {
    var _a, _b, _c, _d;
    const parsedRepresentations = [];
    for (const representation of representationsIR) {
        // Compute Representation ID
        let representationID = representation.attributes.id != null ?
            representation.attributes.id :
            (String(representation.attributes.bitrate) +
                (representation.attributes.height != null ?
                    (`-${representation.attributes.height}`) :
                    "") +
                (representation.attributes.width != null ?
                    (`-${representation.attributes.width}`) :
                    "") +
                (representation.attributes.mimeType != null ?
                    (`-${representation.attributes.mimeType}`) :
                    "") +
                (representation.attributes.codecs != null ?
                    (`-${representation.attributes.codecs}`) :
                    ""));
        // Avoid duplicate IDs
        while (parsedRepresentations.some(r => r.id === representationID)) {
            representationID += "-dup";
        }
        // Retrieve previous version of the Representation, if one.
        const unsafelyBaseOnPreviousRepresentation = (_b = (_a = context
            .unsafelyBaseOnPreviousAdaptation) === null || _a === void 0 ? void 0 : _a.getRepresentation(representationID)) !== null && _b !== void 0 ? _b : null;
        const inbandEventStreams = combineInbandEventStreams(representation, adaptation);
        const availabilityTimeComplete = (_c = representation.attributes.availabilityTimeComplete) !== null && _c !== void 0 ? _c : context.availabilityTimeComplete;
        const availabilityTimeOffset = ((_d = representation.attributes.availabilityTimeOffset) !== null && _d !== void 0 ? _d : 0) +
            context.availabilityTimeOffset;
        const reprIndexCtxt = object_assign({}, context, { availabilityTimeOffset,
            availabilityTimeComplete,
            unsafelyBaseOnPreviousRepresentation,
            adaptation,
            inbandEventStreams });
        const representationIndex = parseRepresentationIndex(representation, reprIndexCtxt);
        // Find bitrate
        let representationBitrate;
        if (representation.attributes.bitrate == null) {
            src_log.warn("DASH: No usable bitrate found in the Representation.");
            representationBitrate = 0;
        }
        else {
            representationBitrate = representation.attributes.bitrate;
        }
        const representationBaseURLs = resolveBaseURLs(context.baseURLs, representation.children.baseURLs);
        const cdnMetadata = representationBaseURLs.map(x => ({ baseUrl: x.url, id: x.serviceLocation }));
        // Construct Representation Base
        const parsedRepresentation = { bitrate: representationBitrate,
            cdnMetadata,
            index: representationIndex,
            id: representationID };
        // Add optional attributes
        let codecs;
        if (representation.attributes.codecs != null) {
            codecs = representation.attributes.codecs;
        }
        else if (adaptation.attributes.codecs != null) {
            codecs = adaptation.attributes.codecs;
        }
        if (codecs != null) {
            codecs = codecs === "mp4a.40.02" ? "mp4a.40.2" : codecs;
            parsedRepresentation.codecs = codecs;
        }
        if (representation.attributes.frameRate != null) {
            parsedRepresentation.frameRate =
                representation.attributes.frameRate;
        }
        else if (adaptation.attributes.frameRate != null) {
            parsedRepresentation.frameRate =
                adaptation.attributes.frameRate;
        }
        if (representation.attributes.height != null) {
            parsedRepresentation.height =
                representation.attributes.height;
        }
        else if (adaptation.attributes.height != null) {
            parsedRepresentation.height =
                adaptation.attributes.height;
        }
        if (representation.attributes.mimeType != null) {
            parsedRepresentation.mimeType =
                representation.attributes.mimeType;
        }
        else if (adaptation.attributes.mimeType != null) {
            parsedRepresentation.mimeType =
                adaptation.attributes.mimeType;
        }
        if (representation.attributes.width != null) {
            parsedRepresentation.width =
                representation.attributes.width;
        }
        else if (adaptation.attributes.width != null) {
            parsedRepresentation.width =
                adaptation.attributes.width;
        }
        const contentProtectionsIr = adaptation.children.contentProtections !== undefined ?
            adaptation.children.contentProtections :
            [];
        if (representation.children.contentProtections !== undefined) {
            contentProtectionsIr.push(...representation.children.contentProtections);
        }
        if (contentProtectionsIr.length > 0) {
            const contentProtections = contentProtectionsIr
                .reduce((acc, cp) => {
                let systemId;
                if (cp.attributes.schemeIdUri !== undefined &&
                    cp.attributes.schemeIdUri.substring(0, 9) === "urn:uuid:") {
                    systemId = cp.attributes.schemeIdUri.substring(9)
                        .replace(/-/g, "")
                        .toLowerCase();
                }
                if (cp.attributes.keyId !== undefined && cp.attributes.keyId.length > 0) {
                    const kidObj = { keyId: cp.attributes.keyId, systemId };
                    if (acc.keyIds === undefined) {
                        acc.keyIds = [kidObj];
                    }
                    else {
                        acc.keyIds.push(kidObj);
                    }
                }
                if (systemId !== undefined) {
                    const { cencPssh } = cp.children;
                    const values = [];
                    for (const data of cencPssh) {
                        values.push({ systemId, data });
                    }
                    if (values.length > 0) {
                        const cencInitData = arrayFind(acc.initData, (i) => i.type === "cenc");
                        if (cencInitData === undefined) {
                            acc.initData.push({ type: "cenc", values });
                        }
                        else {
                            cencInitData.values.push(...values);
                        }
                    }
                }
                return acc;
            }, { keyIds: undefined, initData: [] });
            if (Object.keys(contentProtections.initData).length > 0 ||
                (contentProtections.keyIds !== undefined &&
                    contentProtections.keyIds.length > 0)) {
                parsedRepresentation.contentProtections = contentProtections;
            }
        }
        parsedRepresentation.hdrInfo =
            getHDRInformation({ adaptationProfiles: adaptation.attributes.profiles,
                manifestProfiles: context.manifestProfiles,
                codecs });
        parsedRepresentations.push(parsedRepresentation);
    }
    return parsedRepresentations;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/parse_adaptation_sets.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







// eslint-disable-next-line max-len



/**
 * Detect if the accessibility given defines an adaptation for the visually
 * impaired.
 * Based on DVB Document A168 (DVB-DASH) and DASH-IF 4.3.
 * @param {Object} accessibility
 * @returns {Boolean}
 */
function isVisuallyImpaired(accessibility) {
    if (accessibility === undefined) {
        return false;
    }
    const isVisuallyImpairedAudioDvbDash = (accessibility.schemeIdUri === "urn:tva:metadata:cs:AudioPurposeCS:2007" &&
        accessibility.value === "1");
    const isVisuallyImpairedDashIf = (accessibility.schemeIdUri === "urn:mpeg:dash:role:2011" &&
        accessibility.value === "description");
    return isVisuallyImpairedAudioDvbDash || isVisuallyImpairedDashIf;
}
/**
 * Detect if the accessibility given defines an adaptation for the hard of
 * hearing.
 * Based on DVB Document A168 (DVB-DASH).
 * @param {Object} accessibility
 * @returns {Boolean}
 */
function isHardOfHearing(accessibility) {
    if (accessibility === undefined) {
        return false;
    }
    return (accessibility.schemeIdUri === "urn:tva:metadata:cs:AudioPurposeCS:2007" &&
        accessibility.value === "2");
}
/**
 * Detect if the accessibility given defines an AdaptationSet containing a sign
 * language interpretation.
 * Based on DASH-IF 4.3.
 * @param {Object} accessibility
 * @returns {Boolean}
 */
function hasSignLanguageInterpretation(accessibility) {
    if (accessibility === undefined) {
        return false;
    }
    return (accessibility.schemeIdUri === "urn:mpeg:dash:role:2011" &&
        accessibility.value === "sign");
}
/**
 * Contruct Adaptation ID from the information we have.
 * @param {Object} adaptation
 * @param {Array.<Object>} representations
 * @param {Array.<Object>} representations
 * @param {Object} infos
 * @returns {string}
 */
function getAdaptationID(adaptation, infos) {
    if (isNonEmptyString(adaptation.attributes.id)) {
        return adaptation.attributes.id;
    }
    const { isClosedCaption, isAudioDescription, isSignInterpreted, isTrickModeTrack, type } = infos;
    let idString = type;
    if (isNonEmptyString(adaptation.attributes.language)) {
        idString += `-${adaptation.attributes.language}`;
    }
    if (isClosedCaption === true) {
        idString += "-cc";
    }
    if (isAudioDescription === true) {
        idString += "-ad";
    }
    if (isSignInterpreted === true) {
        idString += "-si";
    }
    if (isTrickModeTrack) {
        idString += "-trickMode";
    }
    if (isNonEmptyString(adaptation.attributes.contentType)) {
        idString += `-${adaptation.attributes.contentType}`;
    }
    if (isNonEmptyString(adaptation.attributes.codecs)) {
        idString += `-${adaptation.attributes.codecs}`;
    }
    if (isNonEmptyString(adaptation.attributes.mimeType)) {
        idString += `-${adaptation.attributes.mimeType}`;
    }
    if (isNonEmptyString(adaptation.attributes.frameRate)) {
        idString += `-${adaptation.attributes.frameRate}`;
    }
    return idString;
}
/**
 * Returns a list of ID this adaptation can be seamlessly switched to
 * @param {Object} adaptation
 * @returns {Array.<string>}
 */
function getAdaptationSetSwitchingIDs(adaptation) {
    if (adaptation.children.supplementalProperties != null) {
        const { supplementalProperties } = adaptation.children;
        for (const supplementalProperty of supplementalProperties) {
            if (supplementalProperty.schemeIdUri ===
                "urn:mpeg:dash:adaptation-set-switching:2016" &&
                supplementalProperty.value != null) {
                return supplementalProperty.value.split(",")
                    .map(id => id.trim())
                    .filter(id => id);
            }
        }
    }
    return [];
}
/**
 * Process AdaptationSets intermediate representations to return under its final
 * form.
 * Note that the AdaptationSets returned are sorted by priority (from the most
 * priority to the least one).
 * @param {Array.<Object>} adaptationsIR
 * @param {Object} context
 * @returns {Array.<Object>}
 */
function parseAdaptationSets(adaptationsIR, context) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const parsedAdaptations = { video: [],
        audio: [],
        text: [],
        image: [] };
    const trickModeAdaptations = [];
    const adaptationSwitchingInfos = {};
    const parsedAdaptationsIDs = [];
    /**
     * Index of the last parsed Video AdaptationSet with a Role set as "main" in
     * `parsedAdaptations.video`.
     * `-1` if not yet encountered.
     * Used as we merge all main video AdaptationSet due to a comprehension of the
     * DASH-IF IOP.
     */
    let lastMainVideoAdapIdx = -1;
    for (let adaptationIdx = 0; adaptationIdx < adaptationsIR.length; adaptationIdx++) {
        const adaptation = adaptationsIR[adaptationIdx];
        const adaptationChildren = adaptation.children;
        const { essentialProperties, roles, label } = adaptationChildren;
        const isMainAdaptation = Array.isArray(roles) &&
            roles.some((role) => role.value === "main") &&
            roles.some((role) => role.schemeIdUri === "urn:mpeg:dash:role:2011");
        const representationsIR = adaptation.children.representations;
        const availabilityTimeComplete = (_a = adaptation.attributes.availabilityTimeComplete) !== null && _a !== void 0 ? _a : context.availabilityTimeComplete;
        const availabilityTimeOffset = ((_b = adaptation.attributes.availabilityTimeOffset) !== null && _b !== void 0 ? _b : 0) +
            context.availabilityTimeOffset;
        const adaptationMimeType = adaptation.attributes.mimeType;
        const adaptationCodecs = adaptation.attributes.codecs;
        const type = inferAdaptationType(representationsIR, isNonEmptyString(adaptationMimeType) ?
            adaptationMimeType :
            null, isNonEmptyString(adaptationCodecs) ?
            adaptationCodecs :
            null, adaptationChildren.roles != null ?
            adaptationChildren.roles :
            null);
        if (type === undefined) {
            continue;
        }
        const priority = (_c = adaptation.attributes.selectionPriority) !== null && _c !== void 0 ? _c : 1;
        const originalID = adaptation.attributes.id;
        let newID;
        const adaptationSetSwitchingIDs = getAdaptationSetSwitchingIDs(adaptation);
        const parentSegmentTemplates = [];
        if (context.segmentTemplate !== undefined) {
            parentSegmentTemplates.push(context.segmentTemplate);
        }
        if (adaptation.children.segmentTemplate !== undefined) {
            parentSegmentTemplates.push(adaptation.children.segmentTemplate);
        }
        const reprCtxt = {
            aggressiveMode: context.aggressiveMode,
            availabilityTimeComplete,
            availabilityTimeOffset,
            baseURLs: resolveBaseURLs(context.baseURLs, adaptationChildren.baseURLs),
            manifestBoundsCalculator: context.manifestBoundsCalculator,
            end: context.end,
            isDynamic: context.isDynamic,
            isLastPeriod: context.isLastPeriod,
            manifestProfiles: context.manifestProfiles,
            parentSegmentTemplates,
            receivedTime: context.receivedTime,
            start: context.start,
            timeShiftBufferDepth: context.timeShiftBufferDepth,
            unsafelyBaseOnPreviousAdaptation: null,
        };
        const trickModeProperty = Array.isArray(essentialProperties) ?
            arrayFind(essentialProperties, (scheme) => {
                return scheme.schemeIdUri === "http://dashif.org/guidelines/trickmode";
            }) : undefined;
        const trickModeAttachedAdaptationIds = (_d = trickModeProperty === null || trickModeProperty === void 0 ? void 0 : trickModeProperty.value) === null || _d === void 0 ? void 0 : _d.split(" ");
        const isTrickModeTrack = trickModeAttachedAdaptationIds !== undefined;
        if (type === "video" &&
            isMainAdaptation &&
            lastMainVideoAdapIdx >= 0 &&
            parsedAdaptations.video.length > lastMainVideoAdapIdx &&
            !isTrickModeTrack) {
            const videoMainAdaptation = parsedAdaptations.video[lastMainVideoAdapIdx][0];
            reprCtxt.unsafelyBaseOnPreviousAdaptation = (_f = (_e = context
                .unsafelyBaseOnPreviousPeriod) === null || _e === void 0 ? void 0 : _e.getAdaptation(videoMainAdaptation.id)) !== null && _f !== void 0 ? _f : null;
            const representations = parseRepresentations(representationsIR, adaptation, reprCtxt);
            videoMainAdaptation.representations.push(...representations);
            newID = videoMainAdaptation.id;
        }
        else {
            const { accessibilities } = adaptationChildren;
            let isDub;
            if (roles !== undefined &&
                roles.some((role) => role.value === "dub")) {
                isDub = true;
            }
            let isClosedCaption;
            if (type !== "text") {
                isClosedCaption = false;
            }
            else if (accessibilities !== undefined) {
                isClosedCaption = accessibilities.some(isHardOfHearing);
            }
            let isAudioDescription;
            if (type !== "audio") {
                isAudioDescription = false;
            }
            else if (accessibilities !== undefined) {
                isAudioDescription = accessibilities.some(isVisuallyImpaired);
            }
            let isSignInterpreted;
            if (type !== "video") {
                isSignInterpreted = false;
            }
            else if (accessibilities !== undefined) {
                isSignInterpreted = accessibilities.some(hasSignLanguageInterpretation);
            }
            let adaptationID = getAdaptationID(adaptation, { isAudioDescription,
                isClosedCaption,
                isSignInterpreted,
                isTrickModeTrack,
                type });
            // Avoid duplicate IDs
            while (arrayIncludes(parsedAdaptationsIDs, adaptationID)) {
                adaptationID += "-dup";
            }
            newID = adaptationID;
            parsedAdaptationsIDs.push(adaptationID);
            reprCtxt.unsafelyBaseOnPreviousAdaptation = (_h = (_g = context
                .unsafelyBaseOnPreviousPeriod) === null || _g === void 0 ? void 0 : _g.getAdaptation(adaptationID)) !== null && _h !== void 0 ? _h : null;
            const representations = parseRepresentations(representationsIR, adaptation, reprCtxt);
            const parsedAdaptationSet = { id: adaptationID,
                representations,
                type,
                isTrickModeTrack };
            if (adaptation.attributes.language != null) {
                parsedAdaptationSet.language = adaptation.attributes.language;
            }
            if (isClosedCaption != null) {
                parsedAdaptationSet.closedCaption = isClosedCaption;
            }
            if (isAudioDescription != null) {
                parsedAdaptationSet.audioDescription = isAudioDescription;
            }
            if (isDub === true) {
                parsedAdaptationSet.isDub = true;
            }
            if (isSignInterpreted === true) {
                parsedAdaptationSet.isSignInterpreted = true;
            }
            if (label !== undefined) {
                parsedAdaptationSet.label = label;
            }
            if (trickModeAttachedAdaptationIds !== undefined) {
                trickModeAdaptations.push({ adaptation: parsedAdaptationSet,
                    trickModeAttachedAdaptationIds });
            }
            else {
                // look if we have to merge this into another Adaptation
                let mergedIntoIdx = -1;
                for (const id of adaptationSetSwitchingIDs) {
                    const switchingInfos = adaptationSwitchingInfos[id];
                    if (switchingInfos !== undefined &&
                        switchingInfos.newID !== newID &&
                        arrayIncludes(switchingInfos.adaptationSetSwitchingIDs, originalID)) {
                        mergedIntoIdx = arrayFindIndex(parsedAdaptations[type], (a) => a[0].id === id);
                        const mergedInto = parsedAdaptations[type][mergedIntoIdx];
                        if (mergedInto !== undefined &&
                            mergedInto[0].audioDescription ===
                                parsedAdaptationSet.audioDescription &&
                            mergedInto[0].closedCaption ===
                                parsedAdaptationSet.closedCaption &&
                            mergedInto[0].language === parsedAdaptationSet.language) {
                            src_log.info("DASH Parser: merging \"switchable\" AdaptationSets", originalID, id);
                            mergedInto[0].representations.push(...parsedAdaptationSet.representations);
                            if (type === "video" &&
                                isMainAdaptation &&
                                !mergedInto[1].isMainAdaptation) {
                                lastMainVideoAdapIdx = Math.max(lastMainVideoAdapIdx, mergedIntoIdx);
                            }
                            mergedInto[1] = {
                                priority: Math.max(priority, mergedInto[1].priority),
                                isMainAdaptation: isMainAdaptation ||
                                    mergedInto[1].isMainAdaptation,
                                indexInMpd: Math.min(adaptationIdx, mergedInto[1].indexInMpd),
                            };
                        }
                    }
                }
                if (mergedIntoIdx < 0) {
                    parsedAdaptations[type].push([parsedAdaptationSet,
                        { priority,
                            isMainAdaptation,
                            indexInMpd: adaptationIdx }]);
                    if (type === "video" && isMainAdaptation) {
                        lastMainVideoAdapIdx = parsedAdaptations.video.length - 1;
                    }
                }
            }
        }
        if (originalID != null && adaptationSwitchingInfos[originalID] == null) {
            adaptationSwitchingInfos[originalID] = { newID,
                adaptationSetSwitchingIDs };
        }
    }
    const adaptationsPerType = SUPPORTED_ADAPTATIONS_TYPE.reduce((acc, adaptationType) => {
        const adaptationsParsedForType = parsedAdaptations[adaptationType];
        if (adaptationsParsedForType.length > 0) {
            adaptationsParsedForType.sort(compareAdaptations);
            acc[adaptationType] = adaptationsParsedForType
                .map(([parsedAdaptation]) => parsedAdaptation);
        }
        return acc;
    }, {});
    parsedAdaptations.video.sort(compareAdaptations);
    attach_trickmode_track(adaptationsPerType, trickModeAdaptations);
    return adaptationsPerType;
}
/**
 * Compare groups of parsed AdaptationSet, alongside some ordering metadata,
 * allowing to easily sort them through JavaScript's `Array.prototype.sort`
 * method.
 * @param {Array.<Object>} a
 * @param {Array.<Object>} b
 * @returns {number}
 */
function compareAdaptations(a, b) {
    const priorityDiff = b[1].priority - a[1].priority;
    if (priorityDiff !== 0) {
        return priorityDiff;
    }
    if (a[1].isMainAdaptation !== b[1].isMainAdaptation) {
        return a[1].isMainAdaptation ? -1 :
            1;
    }
    return a[1].indexInMpd - b[1].indexInMpd;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/parse_periods.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





// eslint-disable-next-line max-len





const generatePeriodID = idGenerator();
/**
 * Process intermediate periods to create final parsed periods.
 * @param {Array.<Object>} periodsIR
 * @param {Object} context
 * @returns {Array.<Object>}
 */
function parsePeriods(periodsIR, context) {
    var _a, _b, _c, _d, _e, _f;
    const parsedPeriods = [];
    const periodsTimeInformation = getPeriodsTimeInformation(periodsIR, context);
    if (periodsTimeInformation.length !== periodsIR.length) {
        throw new Error("MPD parsing error: the time information are incoherent.");
    }
    const { isDynamic, timeShiftBufferDepth } = context;
    const manifestBoundsCalculator = new ManifestBoundsCalculator({ isDynamic,
        timeShiftBufferDepth });
    if (!isDynamic && context.duration != null) {
        manifestBoundsCalculator.setLastPosition(context.duration);
    }
    // We parse it in reverse because we might need to deduce the buffer depth from
    // the last Periods' indexes
    for (let i = periodsIR.length - 1; i >= 0; i--) {
        const isLastPeriod = i === periodsIR.length - 1;
        const periodIR = periodsIR[i];
        const xlinkInfos = context.xlinkInfos.get(periodIR);
        const periodBaseURLs = resolveBaseURLs(context.baseURLs, periodIR.children.baseURLs);
        const { periodStart, periodDuration, periodEnd } = periodsTimeInformation[i];
        let periodID;
        if (periodIR.attributes.id == null) {
            src_log.warn("DASH: No usable id found in the Period. Generating one.");
            periodID = "gen-dash-period-" + generatePeriodID();
        }
        else {
            periodID = periodIR.attributes.id;
        }
        // Avoid duplicate IDs
        while (parsedPeriods.some(p => p.id === periodID)) {
            periodID += "-dup";
        }
        const receivedTime = xlinkInfos !== undefined ? xlinkInfos.receivedTime :
            context.receivedTime;
        const unsafelyBaseOnPreviousPeriod = (_b = (_a = context
            .unsafelyBaseOnPreviousManifest) === null || _a === void 0 ? void 0 : _a.getPeriod(periodID)) !== null && _b !== void 0 ? _b : null;
        const availabilityTimeComplete = (_c = periodIR.attributes.availabilityTimeComplete) !== null && _c !== void 0 ? _c : true;
        const availabilityTimeOffset = (_d = periodIR.attributes.availabilityTimeOffset) !== null && _d !== void 0 ? _d : 0;
        const { aggressiveMode, manifestProfiles } = context;
        const { segmentTemplate } = periodIR.children;
        const adapCtxt = { aggressiveMode,
            availabilityTimeComplete,
            availabilityTimeOffset,
            baseURLs: periodBaseURLs,
            manifestBoundsCalculator,
            end: periodEnd,
            isDynamic,
            isLastPeriod,
            manifestProfiles,
            receivedTime,
            segmentTemplate,
            start: periodStart,
            timeShiftBufferDepth,
            unsafelyBaseOnPreviousPeriod };
        const adaptations = parseAdaptationSets(periodIR.children.adaptations, adapCtxt);
        const namespaces = ((_e = context.xmlNamespaces) !== null && _e !== void 0 ? _e : [])
            .concat((_f = periodIR.attributes.namespaces) !== null && _f !== void 0 ? _f : []);
        const streamEvents = generateStreamEvents(periodIR.children.eventStreams, periodStart, namespaces);
        const parsedPeriod = { id: periodID,
            start: periodStart,
            end: periodEnd,
            duration: periodDuration,
            adaptations,
            streamEvents };
        parsedPeriods.unshift(parsedPeriod);
        if (!manifestBoundsCalculator.lastPositionIsKnown()) {
            const lastPosition = getMaximumLastPosition(adaptations);
            if (!isDynamic) {
                if (typeof lastPosition === "number") {
                    manifestBoundsCalculator.setLastPosition(lastPosition);
                }
            }
            else {
                if (typeof lastPosition === "number") {
                    const positionTime = performance.now() / 1000;
                    manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
                }
                else {
                    const guessedLastPositionFromClock = guessLastPositionFromClock(context, periodStart);
                    if (guessedLastPositionFromClock !== undefined) {
                        const [guessedLastPosition, guessedPositionTime] = guessedLastPositionFromClock;
                        manifestBoundsCalculator.setLastPosition(guessedLastPosition, guessedPositionTime);
                    }
                }
            }
        }
    }
    if (context.isDynamic && !manifestBoundsCalculator.lastPositionIsKnown()) {
        // Guess a last time the last position
        const guessedLastPositionFromClock = guessLastPositionFromClock(context, 0);
        if (guessedLastPositionFromClock !== undefined) {
            const [lastPosition, positionTime] = guessedLastPositionFromClock;
            manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
        }
    }
    return flattenOverlappingPeriods(parsedPeriods);
}
/**
 * Try to guess the "last position", which is the last position
 * available in the manifest in seconds, and the "position time", the time
 * (`performance.now()`) in which the last position was collected.
 *
 * These values allows to retrieve at any time in the future the new last
 * position, by substracting the position time to the last position, and
 * adding to it the new value returned by `performance.now`.
 *
 * The last position and position time are returned by this function if and only if
 * it would indicate a last position superior to the `minimumTime` given.
 *
 * This last part allows for example to detect which Period is likely to be the
 * "current" one in multi-periods contents. By giving the Period's start as a
 * `minimumTime`, you ensure that you will get a value only if the current time
 * is in that period.
 *
 * This is useful as guessing the live time from the clock can be seen as a last
 * resort. By detecting that the current time is before the currently considered
 * Period, we can just parse and look at the previous Period. If we can guess
 * the live time more directly from that previous one, we might be better off
 * than just using the clock.
 *
 * @param {Object} context
 * @param {number} minimumTime
 * @returns {Array.<number|undefined>}
 */
function guessLastPositionFromClock(context, minimumTime) {
    if (context.clockOffset != null) {
        const lastPosition = context.clockOffset / 1000 -
            context.availabilityStartTime;
        const positionTime = performance.now() / 1000;
        const timeInSec = positionTime + lastPosition;
        if (timeInSec >= minimumTime) {
            return [timeInSec, positionTime];
        }
    }
    else {
        const now = Date.now() / 1000;
        if (now >= minimumTime) {
            src_log.warn("DASH Parser: no clock synchronization mechanism found." +
                " Using the system clock instead.");
            const lastPosition = now - context.availabilityStartTime;
            const positionTime = performance.now() / 1000;
            return [lastPosition, positionTime];
        }
    }
    return undefined;
}
/**
 * Try to extract the last position declared for any segments in a Period:
 *   - If at least a single index' last position is defined, take the maximum
 *     among them.
 *   - If segments are available but we cannot define the last position
 *     return undefined.
 *   - If no segment are available in that period, return null
 * @param {Object} adaptationsPerType
 * @returns {number|null|undefined}
 */
function getMaximumLastPosition(adaptationsPerType) {
    let maxEncounteredPosition = null;
    let allIndexAreEmpty = true;
    const adaptationsVal = object_values(adaptationsPerType)
        .filter((ada) => ada != null);
    const allAdaptations = flatMap(adaptationsVal, (adaptationsForType) => adaptationsForType);
    for (const adaptation of allAdaptations) {
        const representations = adaptation.representations;
        for (const representation of representations) {
            const position = representation.index.getLastAvailablePosition();
            if (position !== null) {
                allIndexAreEmpty = false;
                if (typeof position === "number") {
                    maxEncounteredPosition =
                        maxEncounteredPosition == null ? position :
                            Math.max(maxEncounteredPosition, position);
                }
            }
        }
    }
    if (maxEncounteredPosition != null) {
        return maxEncounteredPosition;
    }
    else if (allIndexAreEmpty) {
        return null;
    }
    return undefined;
}
/**
 * Generate parsed "eventStream" objects from a `StreamEvent` node's
 * intermediate Representation.
 * @param {Array.<Object>} baseIr - The array of every encountered StreamEvent's
 * intermediate representations for a given Period.
 * @param {number} periodStart - The time in seconds at which this corresponding
 * Period starts.
 * @returns {Array.<Object>} - The parsed objects.
 */
function generateStreamEvents(baseIr, periodStart, xmlNamespaces) {
    var _a, _b;
    const res = [];
    for (const eventStreamIr of baseIr) {
        const { schemeIdUri = "", timescale = 1 } = eventStreamIr.attributes;
        const allNamespaces = xmlNamespaces
            .concat((_a = eventStreamIr.attributes.namespaces) !== null && _a !== void 0 ? _a : []);
        for (const eventIr of eventStreamIr.children.events) {
            if (eventIr.eventStreamData !== undefined) {
                const start = (((_b = eventIr.presentationTime) !== null && _b !== void 0 ? _b : 0) / timescale) + periodStart;
                const end = eventIr.duration === undefined ?
                    undefined :
                    start + (eventIr.duration / timescale);
                let element;
                if (eventIr.eventStreamData instanceof Element) {
                    element = eventIr.eventStreamData;
                }
                else {
                    // First, we will create a parent Element defining all namespaces that
                    // should have been encountered until know.
                    // This is needed because the DOMParser API might throw when
                    // encountering unknown namespaced attributes or elements in the given
                    // `<Event>` xml subset.
                    let parentNode = allNamespaces.reduce((acc, ns) => {
                        return acc + "xmlns:" + ns.key + "=\"" + ns.value + "\" ";
                    }, "<toremove ");
                    parentNode += ">";
                    const elementToString = utf8ToStr(new Uint8Array(eventIr.eventStreamData));
                    element = new DOMParser()
                        .parseFromString(parentNode + elementToString + "</toremove>", "application/xml")
                        .documentElement
                        .childNodes[0]; // unwrap from the `<toremove>` element
                }
                res.push({ start,
                    end,
                    id: eventIr.id,
                    data: { type: "dash-event-stream",
                        value: { schemeIdUri,
                            timescale,
                            element } } });
            }
        }
    }
    return res;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/parse_mpd.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




// eslint-disable-next-line max-len






/**
 * Checks if xlinks needs to be loaded before actually parsing the manifest.
 * @param {Object} mpdIR
 * @param {Object} args
 * @param {boolean} hasLoadedClock
 * @param {Array.<Object>} warnings
 * @returns {Object}
 */
function parseMpdIr(mpdIR, args, warnings, hasLoadedClock, xlinkInfos = new WeakMap()) {
    const { children: rootChildren, attributes: rootAttributes } = mpdIR;
    if (args.externalClockOffset == null) {
        const isDynamic = rootAttributes.type === "dynamic";
        const directTiming = arrayFind(rootChildren.utcTimings, (utcTiming) => {
            return utcTiming.schemeIdUri === "urn:mpeg:dash:utc:direct:2014" &&
                utcTiming.value != null;
        });
        const clockOffsetFromDirectUTCTiming = directTiming != null &&
            directTiming.value != null ? getClockOffset(directTiming.value) :
            undefined;
        const clockOffset = clockOffsetFromDirectUTCTiming != null &&
            !isNaN(clockOffsetFromDirectUTCTiming) ?
            clockOffsetFromDirectUTCTiming :
            undefined;
        if (clockOffset != null && hasLoadedClock !== true) {
            args.externalClockOffset = clockOffset;
        }
        else if (isDynamic && hasLoadedClock !== true) {
            const UTCTimingHTTPURL = getHTTPUTCTimingURL(mpdIR);
            if (UTCTimingHTTPURL != null && UTCTimingHTTPURL.length > 0) {
                // TODO fetch UTCTiming and XLinks at the same time
                return {
                    type: "needs-clock",
                    value: {
                        url: UTCTimingHTTPURL,
                        continue: function continueParsingMPD(responseDataClock) {
                            if (!responseDataClock.success) {
                                warnings.push(responseDataClock.error);
                                src_log.warn("DASH Parser: Error on fetching the clock ressource", responseDataClock.error);
                                return parseMpdIr(mpdIR, args, warnings, true);
                            }
                            args.externalClockOffset = getClockOffset(responseDataClock.data);
                            return parseMpdIr(mpdIR, args, warnings, true);
                        },
                    },
                };
            }
        }
    }
    const xlinksToLoad = [];
    for (let i = 0; i < rootChildren.periods.length; i++) {
        const { xlinkHref, xlinkActuate } = rootChildren.periods[i].attributes;
        if (xlinkHref != null && xlinkActuate === "onLoad") {
            xlinksToLoad.push({ index: i, ressource: xlinkHref });
        }
    }
    if (xlinksToLoad.length === 0) {
        return parseCompleteIntermediateRepresentation(mpdIR, args, warnings, xlinkInfos);
    }
    return {
        type: "needs-xlinks",
        value: {
            xlinksUrls: xlinksToLoad.map(({ ressource }) => ressource),
            continue: function continueParsingMPD(loadedRessources) {
                if (loadedRessources.length !== xlinksToLoad.length) {
                    throw new Error("DASH parser: wrong number of loaded ressources.");
                }
                // Note: It is important to go from the last index to the first index in
                // the resulting array, as we will potentially add elements to the array
                for (let i = loadedRessources.length - 1; i >= 0; i--) {
                    const index = xlinksToLoad[i].index;
                    const { parsed: periodsIR, warnings: parsingWarnings, receivedTime, sendingTime, url } = loadedRessources[i];
                    if (parsingWarnings.length > 0) {
                        warnings.push(...parsingWarnings);
                    }
                    for (const periodIR of periodsIR) {
                        xlinkInfos.set(periodIR, { receivedTime, sendingTime, url });
                    }
                    // replace original "xlinked" periods by the real deal
                    rootChildren.periods.splice(index, 1, ...periodsIR);
                }
                return parseMpdIr(mpdIR, args, warnings, hasLoadedClock, xlinkInfos);
            },
        },
    };
}
/**
 * Parse the MPD intermediate representation into a regular Manifest.
 * @param {Object} mpdIR
 * @param {Object} args
 * @param {Array.<Object>} warnings
 * @param {Object} xlinkInfos
 * @returns {Object}
 */
function parseCompleteIntermediateRepresentation(mpdIR, args, warnings, xlinkInfos) {
    var _a, _b, _c;
    const { children: rootChildren, attributes: rootAttributes } = mpdIR;
    const isDynamic = rootAttributes.type === "dynamic";
    const initialBaseUrl = args.url !== undefined ?
        [{ url: args.url.substring(0, getFilenameIndexInUrl(args.url)) }] :
        [];
    const mpdBaseUrls = resolveBaseURLs(initialBaseUrl, rootChildren.baseURLs);
    const availabilityStartTime = parseAvailabilityStartTime(rootAttributes, args.referenceDateTime);
    const timeShiftBufferDepth = rootAttributes.timeShiftBufferDepth;
    const { externalClockOffset: clockOffset, unsafelyBaseOnPreviousManifest } = args;
    const manifestInfos = { aggressiveMode: args.aggressiveMode,
        availabilityStartTime,
        baseURLs: mpdBaseUrls,
        clockOffset,
        duration: rootAttributes.duration,
        isDynamic,
        manifestProfiles: mpdIR.attributes.profiles,
        receivedTime: args.manifestReceivedTime,
        timeShiftBufferDepth,
        unsafelyBaseOnPreviousManifest,
        xlinkInfos,
        xmlNamespaces: mpdIR.attributes.namespaces };
    const parsedPeriods = parsePeriods(rootChildren.periods, manifestInfos);
    const mediaPresentationDuration = rootAttributes.duration;
    let lifetime;
    let minimumTime;
    let timeshiftDepth = null;
    let maximumTimeData;
    if (rootAttributes.minimumUpdatePeriod !== undefined &&
        rootAttributes.minimumUpdatePeriod >= 0) {
        lifetime = rootAttributes.minimumUpdatePeriod === 0 ?
            src_config.getCurrent().DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0 :
            rootAttributes.minimumUpdatePeriod;
    }
    const { minimumSafePosition, maximumSafePosition, maximumUnsafePosition } = getMinimumAndMaximumPositions(parsedPeriods);
    const now = performance.now();
    if (!isDynamic) {
        minimumTime = minimumSafePosition !== undefined ? minimumSafePosition :
            ((_a = parsedPeriods[0]) === null || _a === void 0 ? void 0 : _a.start) !== undefined ? parsedPeriods[0].start :
                0;
        let finalMaximumSafePosition = mediaPresentationDuration !== null && mediaPresentationDuration !== void 0 ? mediaPresentationDuration : Infinity;
        if (parsedPeriods[parsedPeriods.length - 1] !== undefined) {
            const lastPeriod = parsedPeriods[parsedPeriods.length - 1];
            const lastPeriodEnd = (_b = lastPeriod.end) !== null && _b !== void 0 ? _b : (lastPeriod.duration !== undefined ?
                lastPeriod.start + lastPeriod.duration :
                undefined);
            if (lastPeriodEnd !== undefined && lastPeriodEnd < finalMaximumSafePosition) {
                finalMaximumSafePosition = lastPeriodEnd;
            }
        }
        if (maximumSafePosition !== undefined &&
            maximumSafePosition < finalMaximumSafePosition) {
            finalMaximumSafePosition = maximumSafePosition;
        }
        maximumTimeData = { isLinear: false,
            maximumSafePosition: finalMaximumSafePosition,
            livePosition: undefined,
            time: now };
    }
    else {
        minimumTime = minimumSafePosition;
        timeshiftDepth = timeShiftBufferDepth !== null && timeShiftBufferDepth !== void 0 ? timeShiftBufferDepth : null;
        let finalMaximumSafePosition;
        let livePosition;
        if (maximumUnsafePosition !== undefined) {
            livePosition = maximumUnsafePosition;
        }
        if (maximumSafePosition !== undefined) {
            finalMaximumSafePosition = maximumSafePosition;
        }
        else {
            const ast = availabilityStartTime !== null && availabilityStartTime !== void 0 ? availabilityStartTime : 0;
            const { externalClockOffset } = args;
            if (externalClockOffset === undefined) {
                src_log.warn("DASH Parser: use system clock to define maximum position");
                finalMaximumSafePosition = (Date.now() / 1000) - ast;
            }
            else {
                const serverTime = performance.now() + externalClockOffset;
                finalMaximumSafePosition = (serverTime / 1000) - ast;
            }
        }
        if (livePosition === undefined) {
            livePosition = finalMaximumSafePosition;
        }
        maximumTimeData = { isLinear: true,
            maximumSafePosition: finalMaximumSafePosition,
            livePosition,
            time: now };
        // if the minimum calculated time is even below the buffer depth, perhaps we
        // can go even lower in terms of depth
        if (timeshiftDepth !== null && minimumTime !== undefined &&
            finalMaximumSafePosition - minimumTime > timeshiftDepth) {
            timeshiftDepth = finalMaximumSafePosition - minimumTime;
        }
    }
    // `isLastPeriodKnown` should be `true` in two cases for DASH contents:
    //   1. When the content is static, because we know that no supplementary
    //      Period will be added.
    //   2. If the content is dynamic, only when both the duration is known and
    //      the `minimumUpdatePeriod` is not set. This corresponds to the case
    //      explained in "4.6.4. Transition Phase between Live and On-Demand" of
    //      the DASH-IF IOP v4.3 for live contents transitionning to on-demand.
    const isLastPeriodKnown = !isDynamic ||
        (mpdIR.attributes.minimumUpdatePeriod === undefined &&
            (((_c = parsedPeriods[parsedPeriods.length - 1]) === null || _c === void 0 ? void 0 : _c.end) !== undefined ||
                mpdIR.attributes.duration !== undefined));
    const parsedMPD = {
        availabilityStartTime,
        clockOffset: args.externalClockOffset,
        isDynamic,
        isLive: isDynamic,
        isLastPeriodKnown,
        periods: parsedPeriods,
        publishTime: rootAttributes.publishTime,
        suggestedPresentationDelay: rootAttributes.suggestedPresentationDelay,
        transportType: "dash",
        timeBounds: { minimumSafePosition: minimumTime,
            timeshiftDepth,
            maximumTimeData },
        lifetime,
        uris: args.url == null ?
            rootChildren.locations : [args.url, ...rootChildren.locations],
    };
    return { type: "done", value: { parsed: parsedMPD, warnings } };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/common/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const common = (parseMpdIr);


;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/BaseURL.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Parse an BaseURL element into an BaseURL intermediate
 * representation.
 * @param {Element} root - The BaseURL root element.
 * @returns {Array.<Object|undefined>}
 */
function parseBaseURL(root) {
    const value = root.textContent;
    const warnings = [];
    if (value === null || value.length === 0) {
        return [undefined, warnings];
    }
    return [{ value },
        warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/ContentComponent.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Parse a "ContentComponent" Element in a DASH MPD.
 * @param {Element} root
 * @returns {Object}
 */
function parseContentComponent(root) {
    const ret = {};
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "id":
                ret.id = attribute.value;
                break;
            case "lang":
                ret.language = attribute.value;
                break;
            case "contentType":
                ret.contentType = attribute.value;
                break;
            case "par":
                ret.par = attribute.value;
                break;
        }
    }
    return ret;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// XML-Schema
/* eslint-disable max-len */
// <http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd>
/* eslint-enable max-len */



const iso8601Duration = /^P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/;
const rangeRe = /([0-9]+)-([0-9]+)/;
/**
 * Parse MPD boolean attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed boolean - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<Boolean | Error | null>}
 */
function parseBoolean(val, displayName) {
    if (val === "true") {
        return [true, null];
    }
    if (val === "false") {
        return [false, null];
    }
    const error = new MPDError(`\`${displayName}\` property is not a boolean value but "${val}"`);
    return [false, error];
}
/**
 * Parse MPD integer attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed boolean - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<number | Error | null>}
 */
function parseMPDInteger(val, displayName) {
    const toInt = parseInt(val, 10);
    if (isNaN(toInt)) {
        const error = new MPDError(`\`${displayName}\` property is not an integer value but "${val}"`);
        return [null, error];
    }
    return [toInt, null];
}
/**
 * Parse MPD float attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed boolean - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<number | Error | null>}
 */
function parseMPDFloat(val, displayName) {
    if (val === "INF") {
        return [Infinity, null];
    }
    const toInt = parseFloat(val);
    if (isNaN(toInt)) {
        const error = new MPDError(`\`${displayName}\` property is not an integer value but "${val}"`);
        return [null, error];
    }
    return [toInt, null];
}
/**
 * Parse MPD attributes which are either integer or boolean values.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<Boolean | number | Error | null>}
 */
function parseIntOrBoolean(val, displayName) {
    if (val === "true") {
        return [true, null];
    }
    if (val === "false") {
        return [false, null];
    }
    const toInt = parseInt(val, 10);
    if (isNaN(toInt)) {
        const error = new MPDError(`\`${displayName}\` property is not a boolean nor an integer but "${val}"`);
        return [null, error];
    }
    return [toInt, null];
}
/**
 * Parse MPD date attributes.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<Date | null | Error>}
 */
function parseDateTime(val, displayName) {
    const parsed = Date.parse(val);
    if (isNaN(parsed)) {
        const error = new MPDError(`\`${displayName}\` is in an invalid date format: "${val}"`);
        return [null, error];
    }
    return [new Date(Date.parse(val)).getTime() / 1000, null];
}
/**
 * Parse MPD ISO8601 duration attributes into seconds.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val - The value to parse
 * @param {string} displayName - The name of the property. Used for error
 * formatting.
 * @returns {Array.<number | Error | null>}
 */
function parseDuration(val, displayName) {
    if (!isNonEmptyString(val)) {
        const error = new MPDError(`\`${displayName}\` property is empty`);
        return [0, error];
    }
    const match = iso8601Duration.exec(val);
    if (match === null) {
        const error = new MPDError(`\`${displayName}\` property has an unrecognized format "${val}"`);
        return [null, error];
    }
    const duration = (parseFloat(isNonEmptyString(match[2]) ? match[2] :
        "0") * 365 * 24 * 60 * 60 +
        parseFloat(isNonEmptyString(match[4]) ? match[4] :
            "0") * 30 * 24 * 60 * 60 +
        parseFloat(isNonEmptyString(match[6]) ? match[6] :
            "0") * 24 * 60 * 60 +
        parseFloat(isNonEmptyString(match[8]) ? match[8] :
            "0") * 60 * 60 +
        parseFloat(isNonEmptyString(match[10]) ? match[10] :
            "0") * 60 +
        parseFloat(isNonEmptyString(match[12]) ? match[12] :
            "0"));
    return [duration, null];
}
/**
 * Parse MPD byterange attributes into arrays of two elements: the start and
 * the end.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val
 * @param {string} displayName
 * @returns {Array.<Array.<number> | Error | null>}
 */
function parseByteRange(val, displayName) {
    const match = rangeRe.exec(val);
    if (match === null) {
        const error = new MPDError(`\`${displayName}\` property has an unrecognized format "${val}"`);
        return [null, error];
    }
    else {
        return [[+match[1], +match[2]], null];
    }
}
/**
 * Parse MPD base64 attribute into an Uint8Array.
 * the end.
 *
 * The returned value is a tuple of two elements where:
 *   1. the first value is the parsed value - or `null` if we could not parse
 *      it
 *   2. the second value is a possible error encountered while parsing this
 *      value - set to `null` if no error was encountered.
 * @param {string} val
 * @param {string} displayName
 * @returns {Uint8Array | Error | null>}
 */
function parseBase64(val, displayName) {
    try {
        return [base64ToBytes(val), null];
    }
    catch (_) {
        const error = new MPDError(`\`${displayName}\` is not a valid base64 string: "${val}"`);
        return [null, error];
    }
}
/**
 * @param {Element} root
 * @returns {Object}
 */
function parseScheme(root) {
    let schemeIdUri;
    let value;
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "schemeIdUri":
                schemeIdUri = attribute.value;
                break;
            case "value":
                value = attribute.value;
                break;
        }
    }
    return { schemeIdUri,
        value };
}
/**
 * Create a function to factorize the MPD parsing logic.
 * @param {Object} dest - The destination object which will contain the parsed
 * values.
 * @param {Array.<Error>} warnings - An array which will contain every parsing
 * error encountered.
 * @return {Function}
 */
function ValueParser(dest, warnings) {
    /**
     * Parse a single value and add it to the `dest` objects.
     * If an error arised while parsing, add it at the end of the `warnings` array.
     * @param {string} objKey - The key which will be added to the `dest` object.
     * @param {string} val - The value found in the MPD which we should parse.
     * @param {Function} parsingFn - The parsing function adapted for this value.
     * @param {string} displayName - The name of the key as it appears in the MPD.
     * This is used only in error formatting,
     */
    return function (val, { asKey, parser, dashName }) {
        const [parsingResult, parsingError] = parser(val, dashName);
        if (parsingError !== null) {
            src_log.warn(parsingError.message);
            warnings.push(parsingError);
        }
        if (parsingResult !== null) {
            dest[asKey] = parsingResult;
        }
    };
}
/**
 * Error arising when parsing the MPD.
 * @class MPDError
 * @extends Error
 */
class MPDError extends Error {
    /**
     * @param {string} message
     */
    constructor(message) {
        super();
        // @see https://stackoverflow.com/questions/41102060/typescript-extending-error-class
        Object.setPrototypeOf(this, MPDError.prototype);
        this.name = "MPDError";
        this.message = message;
    }
}


;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/ContentProtection.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {NodeList} contentProtectionChildren
 * @Returns {Object}
 */
function parseContentProtectionChildren(contentProtectionChildren) {
    const warnings = [];
    const cencPssh = [];
    for (let i = 0; i < contentProtectionChildren.length; i++) {
        if (contentProtectionChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentElement = contentProtectionChildren[i];
            if (currentElement.nodeName === "cenc:pssh") {
                const content = currentElement.textContent;
                if (content !== null && content.length > 0) {
                    const [toUint8Array, error] = parseBase64(content, "cenc:pssh");
                    if (error !== null) {
                        src_log.warn(error.message);
                        warnings.push(error);
                    }
                    if (toUint8Array !== null) {
                        cencPssh.push(toUint8Array);
                    }
                }
            }
        }
    }
    return [{ cencPssh }, warnings];
}
/**
 * @param {Element} root
 * @returns {Object}
 */
function parseContentProtectionAttributes(root) {
    const ret = {};
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "schemeIdUri":
                ret.schemeIdUri = attribute.value;
                break;
            case "value":
                ret.value = attribute.value;
                break;
            case "cenc:default_KID":
                ret.keyId = string_parsing_hexToBytes(attribute.value.replace(/-/g, ""));
        }
    }
    return ret;
}
/**
 * @param {Element} contentProtectionElement
 * @returns {Object}
 */
function parseContentProtection(contentProtectionElement) {
    const [children, childrenWarnings] = parseContentProtectionChildren(contentProtectionElement.childNodes);
    const attributes = parseContentProtectionAttributes(contentProtectionElement);
    return [{ children, attributes }, childrenWarnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/Initialization.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Element} root
 * @returns {Array.<Object>}
 */
function parseInitialization(root) {
    const parsedInitialization = {};
    const warnings = [];
    const parseValue = ValueParser(parsedInitialization, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "range":
                parseValue(attribute.value, { asKey: "range",
                    parser: parseByteRange,
                    dashName: "range" });
                break;
            case "sourceURL":
                parsedInitialization.media = attribute.value;
                break;
        }
    }
    return [parsedInitialization, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/SegmentBase.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse a SegmentBase element into a SegmentBase intermediate representation.
 * @param {Element} root - The SegmentBase root element.
 * @returns {Array}
 */
function parseSegmentBase(root) {
    const attributes = {};
    let warnings = [];
    const parseValue = ValueParser(attributes, warnings);
    const segmentBaseChildren = root.childNodes;
    for (let i = 0; i < segmentBaseChildren.length; i++) {
        if (segmentBaseChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentNode = segmentBaseChildren[i];
            if (currentNode.nodeName === "Initialization") {
                const [initialization, initializationWarnings] = parseInitialization(currentNode);
                attributes.initialization = initialization;
                warnings = warnings.concat(initializationWarnings);
            }
        }
    }
    for (let i = 0; i < root.attributes.length; i++) {
        const attr = root.attributes[i];
        switch (attr.name) {
            case "timescale":
                parseValue(attr.value, { asKey: "timescale",
                    parser: parseMPDInteger,
                    dashName: "timescale" });
                break;
            case "presentationTimeOffset":
                parseValue(attr.value, { asKey: "presentationTimeOffset",
                    parser: parseMPDFloat,
                    dashName: "presentationTimeOffset" });
                break;
            case "indexRange":
                parseValue(attr.value, { asKey: "indexRange",
                    parser: parseByteRange,
                    dashName: "indexRange" });
                break;
            case "indexRangeExact":
                parseValue(attr.value, { asKey: "indexRangeExact",
                    parser: parseBoolean,
                    dashName: "indexRangeExact" });
                break;
            case "availabilityTimeOffset":
                parseValue(attr.value, { asKey: "availabilityTimeOffset",
                    parser: parseMPDFloat,
                    dashName: "availabilityTimeOffset" });
                break;
            case "availabilityTimeComplete":
                parseValue(attr.value, { asKey: "availabilityTimeComplete",
                    parser: parseBoolean,
                    dashName: "availabilityTimeComplete" });
                break;
            case "duration":
                parseValue(attr.value, { asKey: "duration",
                    parser: parseMPDInteger,
                    dashName: "duration" });
                break;
            case "startNumber":
                parseValue(attr.value, { asKey: "startNumber",
                    parser: parseMPDInteger,
                    dashName: "startNumber" });
                break;
        }
    }
    return [attributes, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/SegmentURL.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a SegmentURL element into a SegmentURL intermediate
 * representation.
 * @param {Element} root - The SegmentURL root element.
 * @returns {Array}
 */
function parseSegmentURL(root) {
    const parsedSegmentURL = {};
    const warnings = [];
    const parseValue = ValueParser(parsedSegmentURL, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "media":
                parsedSegmentURL.media = attribute.value;
                break;
            case "indexRange":
                parseValue(attribute.value, { asKey: "indexRange",
                    parser: parseByteRange,
                    dashName: "indexRange" });
                break;
            case "index":
                parsedSegmentURL.index = attribute.value;
                break;
            case "mediaRange":
                parseValue(attribute.value, { asKey: "mediaRange",
                    parser: parseByteRange,
                    dashName: "mediaRange" });
                break;
        }
    }
    return [parsedSegmentURL, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/SegmentList.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {Element} root
 * @returns {Array}
 */
function parseSegmentList(root) {
    const [base, baseWarnings] = parseSegmentBase(root);
    let warnings = baseWarnings;
    const list = [];
    const segmentListChildren = root.childNodes;
    for (let i = 0; i < segmentListChildren.length; i++) {
        if (segmentListChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentNode = segmentListChildren[i];
            if (currentNode.nodeName === "SegmentURL") {
                const [segmentURL, segmentURLWarnings] = parseSegmentURL(currentNode);
                list.push(segmentURL);
                warnings = warnings.concat(segmentURLWarnings);
            }
        }
    }
    const ret = object_assign(base, { list });
    return [ret, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/SegmentTimeline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {Element} root
 * @returns {Function}
 */
function createSegmentTimelineParser(root) {
    let result = null;
    return function () {
        if (result === null) {
            const elements = root.getElementsByTagName("S");
            result = elements;
            return elements;
        }
        return result;
    };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/SegmentTemplate.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Parse a SegmentTemplate element into a SegmentTemplate intermediate
 * representation.
 * @param {Element} root - The SegmentTemplate root element.
 * @returns {Array}
 */
function parseSegmentTemplate(root) {
    const [base, segmentBaseWarnings] = parseSegmentBase(root);
    const warnings = segmentBaseWarnings;
    let timelineParser;
    // First look for a possible SegmentTimeline
    for (let i = 0; i < root.childNodes.length; i++) {
        if (root.childNodes[i].nodeType === Node.ELEMENT_NODE) {
            const currentNode = root.childNodes[i];
            if (currentNode.nodeName === "SegmentTimeline") {
                timelineParser = createSegmentTimelineParser(currentNode);
            }
        }
    }
    const ret = object_assign({}, base, { duration: base.duration, timelineParser });
    const parseValue = ValueParser(ret, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.nodeName) {
            case "initialization":
                if (ret.initialization == null) {
                    ret.initialization = { media: attribute.value };
                }
                break;
            case "index":
                ret.index = attribute.value;
                break;
            case "availabilityTimeOffset":
                parseValue(attribute.value, { asKey: "availabilityTimeOffset",
                    parser: parseMPDFloat,
                    dashName: "availabilityTimeOffset" });
                break;
            case "availabilityTimeComplete":
                parseValue(attribute.value, { asKey: "availabilityTimeComplete",
                    parser: parseBoolean,
                    dashName: "availabilityTimeComplete" });
                break;
            case "media":
                ret.media = attribute.value;
                break;
            case "bitstreamSwitching":
                parseValue(attribute.value, { asKey: "bitstreamSwitching",
                    parser: parseBoolean,
                    dashName: "bitstreamSwitching" });
                break;
        }
    }
    return [ret, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/Representation.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @param {NodeList} representationChildren
 * @returns {Object}
 */
function parseRepresentationChildren(representationChildren) {
    const children = {
        baseURLs: [],
    };
    const contentProtections = [];
    let warnings = [];
    for (let i = 0; i < representationChildren.length; i++) {
        if (representationChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentElement = representationChildren[i];
            switch (currentElement.nodeName) {
                case "BaseURL":
                    const [baseURLObj, baseURLWarnings] = parseBaseURL(currentElement);
                    if (baseURLObj !== undefined) {
                        children.baseURLs.push(baseURLObj);
                    }
                    warnings = warnings.concat(baseURLWarnings);
                    break;
                case "InbandEventStream":
                    if (children.inbandEventStreams === undefined) {
                        children.inbandEventStreams = [];
                    }
                    children.inbandEventStreams.push(parseScheme(currentElement));
                    break;
                case "SegmentBase":
                    const [segmentBase, segmentBaseWarnings] = parseSegmentBase(currentElement);
                    children.segmentBase = segmentBase;
                    if (segmentBaseWarnings.length > 0) {
                        warnings = warnings.concat(segmentBaseWarnings);
                    }
                    break;
                case "SegmentList":
                    const [segmentList, segmentListWarnings] = parseSegmentList(currentElement);
                    warnings = warnings.concat(segmentListWarnings);
                    children.segmentList = segmentList;
                    break;
                case "SegmentTemplate":
                    const [segmentTemplate, segmentTemplateWarnings] = parseSegmentTemplate(currentElement);
                    warnings = warnings.concat(segmentTemplateWarnings);
                    children.segmentTemplate = segmentTemplate;
                    break;
                case "ContentProtection":
                    const [contentProtection, contentProtectionWarnings] = parseContentProtection(currentElement);
                    if (contentProtectionWarnings.length > 0) {
                        warnings = warnings.concat(contentProtectionWarnings);
                    }
                    if (contentProtection !== undefined) {
                        contentProtections.push(contentProtection);
                    }
                    break;
            }
        }
    }
    if (contentProtections.length > 0) {
        children.contentProtections = contentProtections;
    }
    return [children, warnings];
}
/**
 * @param {Element} representationElement
 * @returns {Array}
 */
function parseRepresentationAttributes(representationElement) {
    const attributes = {};
    const warnings = [];
    const parseValue = ValueParser(attributes, warnings);
    for (let i = 0; i < representationElement.attributes.length; i++) {
        const attr = representationElement.attributes[i];
        switch (attr.name) {
            case "audioSamplingRate":
                attributes.audioSamplingRate = attr.value;
                break;
            case "bandwidth":
                parseValue(attr.value, { asKey: "bitrate",
                    parser: parseMPDInteger,
                    dashName: "bandwidth" });
                break;
            case "codecs":
                attributes.codecs = attr.value;
                break;
            case "codingDependency":
                parseValue(attr.value, { asKey: "codingDependency",
                    parser: parseBoolean,
                    dashName: "codingDependency" });
                break;
            case "frameRate":
                attributes.frameRate = attr.value;
                break;
            case "height":
                parseValue(attr.value, { asKey: "height",
                    parser: parseMPDInteger,
                    dashName: "height" });
                break;
            case "id":
                attributes.id = attr.value;
                break;
            case "maxPlayoutRate":
                parseValue(attr.value, { asKey: "maxPlayoutRate",
                    parser: parseMPDFloat,
                    dashName: "maxPlayoutRate" });
                break;
            case "maximumSAPPeriod":
                parseValue(attr.value, { asKey: "maximumSAPPeriod",
                    parser: parseMPDFloat,
                    dashName: "maximumSAPPeriod" });
                break;
            case "mimeType":
                attributes.mimeType = attr.value;
                break;
            case "profiles":
                attributes.profiles = attr.value;
                break;
            case "qualityRanking":
                parseValue(attr.value, { asKey: "qualityRanking",
                    parser: parseMPDInteger,
                    dashName: "qualityRanking" });
                break;
            case "segmentProfiles":
                attributes.segmentProfiles = attr.value;
                break;
            case "width":
                parseValue(attr.value, { asKey: "width",
                    parser: parseMPDInteger,
                    dashName: "width" });
                break;
            case "availabilityTimeOffset":
                parseValue(attr.value, { asKey: "availabilityTimeOffset",
                    parser: parseMPDFloat,
                    dashName: "availabilityTimeOffset" });
                break;
            case "availabilityTimeComplete":
                parseValue(attr.value, { asKey: "availabilityTimeComplete",
                    parser: parseBoolean,
                    dashName: "availabilityTimeComplete" });
                break;
        }
    }
    if (attributes.bitrate === undefined) {
        warnings.push(new MPDError("No bitrate found on a Representation"));
    }
    return [attributes, warnings];
}
/**
 * @param {Element} representationElement
 * @returns {Array}
 */
function createRepresentationIntermediateRepresentation(representationElement) {
    const [children, childrenWarnings] = parseRepresentationChildren(representationElement.childNodes);
    const [attributes, attrsWarnings] = parseRepresentationAttributes(representationElement);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/AdaptationSet.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Parse child nodes from an AdaptationSet.
 * @param {NodeList} adaptationSetChildren - The AdaptationSet child nodes.
 * @returns {Array.<Object>}
 */
function parseAdaptationSetChildren(adaptationSetChildren) {
    const children = {
        baseURLs: [],
        representations: [],
    };
    const contentProtections = [];
    let warnings = [];
    for (let i = 0; i < adaptationSetChildren.length; i++) {
        if (adaptationSetChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentElement = adaptationSetChildren[i];
            switch (currentElement.nodeName) {
                case "Accessibility":
                    if (children.accessibilities === undefined) {
                        children.accessibilities = [parseScheme(currentElement)];
                    }
                    else {
                        children.accessibilities.push(parseScheme(currentElement));
                    }
                    break;
                case "BaseURL":
                    const [baseURLObj, baseURLWarnings] = parseBaseURL(currentElement);
                    if (baseURLObj !== undefined) {
                        children.baseURLs.push(baseURLObj);
                    }
                    if (baseURLWarnings.length > 0) {
                        warnings = warnings.concat(baseURLWarnings);
                    }
                    break;
                case "ContentComponent":
                    children.contentComponent = parseContentComponent(currentElement);
                    break;
                case "EssentialProperty":
                    if (children.essentialProperties == null) {
                        children.essentialProperties = [parseScheme(currentElement)];
                    }
                    else {
                        children.essentialProperties.push(parseScheme(currentElement));
                    }
                    break;
                case "InbandEventStream":
                    if (children.inbandEventStreams === undefined) {
                        children.inbandEventStreams = [];
                    }
                    children.inbandEventStreams.push(parseScheme(currentElement));
                    break;
                case "Label":
                    const label = currentElement.textContent;
                    if (label !== null && label !== undefined) {
                        children.label = label;
                    }
                    break;
                case "Representation":
                    const [representation, representationWarnings] = createRepresentationIntermediateRepresentation(currentElement);
                    children.representations.push(representation);
                    if (representationWarnings.length > 0) {
                        warnings = warnings.concat(representationWarnings);
                    }
                    break;
                case "Role":
                    if (children.roles == null) {
                        children.roles = [parseScheme(currentElement)];
                    }
                    else {
                        children.roles.push(parseScheme(currentElement));
                    }
                    break;
                case "SupplementalProperty":
                    if (children.supplementalProperties == null) {
                        children.supplementalProperties = [parseScheme(currentElement)];
                    }
                    else {
                        children.supplementalProperties.push(parseScheme(currentElement));
                    }
                    break;
                case "SegmentBase":
                    const [segmentBase, segmentBaseWarnings] = parseSegmentBase(currentElement);
                    children.segmentBase = segmentBase;
                    if (segmentBaseWarnings.length > 0) {
                        warnings = warnings.concat(segmentBaseWarnings);
                    }
                    break;
                case "SegmentList":
                    const [segmentList, segmentListWarnings] = parseSegmentList(currentElement);
                    children.segmentList = segmentList;
                    if (segmentListWarnings.length > 0) {
                        warnings = warnings.concat(segmentListWarnings);
                    }
                    break;
                case "SegmentTemplate":
                    const [segmentTemplate, segmentTemplateWarnings] = parseSegmentTemplate(currentElement);
                    children.segmentTemplate = segmentTemplate;
                    if (segmentTemplateWarnings.length > 0) {
                        warnings = warnings.concat(segmentTemplateWarnings);
                    }
                    break;
                case "ContentProtection":
                    const [contentProtection, contentProtectionWarnings] = parseContentProtection(currentElement);
                    if (contentProtectionWarnings.length > 0) {
                        warnings = warnings.concat(contentProtectionWarnings);
                    }
                    if (contentProtection !== undefined) {
                        contentProtections.push(contentProtection);
                    }
                    break;
                // case "Rating":
                //   children.rating = currentElement;
                //   break;
                // case "Viewpoint":
                //   children.viewpoint = currentElement;
                //   break;
            }
        }
    }
    if (contentProtections.length > 0) {
        children.contentProtections = contentProtections;
    }
    return [children, warnings];
}
/**
 * Parse every attributes from an AdaptationSet root element into a simple JS
 * object.
 * @param {Element} root - The AdaptationSet root element.
 * @returns {Array.<Object>}
 */
function parseAdaptationSetAttributes(root) {
    const parsedAdaptation = {};
    const warnings = [];
    const parseValue = ValueParser(parsedAdaptation, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "id":
                parsedAdaptation.id = attribute.value;
                break;
            case "group":
                parseValue(attribute.value, { asKey: "group",
                    parser: parseMPDInteger,
                    dashName: "group" });
                break;
            case "lang":
                parsedAdaptation.language = attribute.value;
                break;
            case "contentType":
                parsedAdaptation.contentType = attribute.value;
                break;
            case "par":
                parsedAdaptation.par = attribute.value;
                break;
            case "minBandwidth":
                parseValue(attribute.value, { asKey: "minBitrate",
                    parser: parseMPDInteger,
                    dashName: "minBandwidth" });
                break;
            case "maxBandwidth":
                parseValue(attribute.value, { asKey: "maxBitrate",
                    parser: parseMPDInteger,
                    dashName: "maxBandwidth" });
                break;
            case "minWidth":
                parseValue(attribute.value, { asKey: "minWidth",
                    parser: parseMPDInteger,
                    dashName: "minWidth" });
                break;
            case "maxWidth":
                parseValue(attribute.value, { asKey: "maxWidth",
                    parser: parseMPDInteger,
                    dashName: "maxWidth" });
                break;
            case "minHeight":
                parseValue(attribute.value, { asKey: "minHeight",
                    parser: parseMPDInteger,
                    dashName: "minHeight" });
                break;
            case "maxHeight":
                parseValue(attribute.value, { asKey: "maxHeight",
                    parser: parseMPDInteger,
                    dashName: "maxHeight" });
                break;
            case "minFrameRate":
                {
                    parsedAdaptation.minFrameRate = attribute.value;
                }
                break;
            case "maxFrameRate":
                parsedAdaptation.maxFrameRate = attribute.value;
                break;
            case "selectionPriority":
                parseValue(attribute.value, { asKey: "selectionPriority",
                    parser: parseMPDInteger,
                    dashName: "selectionPriority" });
                break;
            case "segmentAlignment":
                parseValue(attribute.value, { asKey: "segmentAlignment",
                    parser: parseIntOrBoolean,
                    dashName: "segmentAlignment" });
                break;
            case "subsegmentAlignment":
                parseValue(attribute.value, { asKey: "subsegmentAlignment",
                    parser: parseIntOrBoolean,
                    dashName: "subsegmentAlignment" });
                break;
            case "bitstreamSwitching":
                parseValue(attribute.value, { asKey: "bitstreamSwitching",
                    parser: parseBoolean,
                    dashName: "bitstreamSwitching" });
                break;
            case "audioSamplingRate":
                parsedAdaptation.audioSamplingRate = attribute.value;
                break;
            case "codecs":
                parsedAdaptation.codecs = attribute.value;
                break;
            case "codingDependency":
                parseValue(attribute.value, { asKey: "codingDependency",
                    parser: parseBoolean,
                    dashName: "codingDependency" });
                break;
            case "frameRate":
                parsedAdaptation.frameRate = attribute.value;
                break;
            case "height":
                parseValue(attribute.value, { asKey: "height",
                    parser: parseMPDInteger,
                    dashName: "height" });
                break;
            case "maxPlayoutRate":
                parseValue(attribute.value, { asKey: "maxPlayoutRate",
                    parser: parseMPDFloat,
                    dashName: "maxPlayoutRate" });
                break;
            case "maximumSAPPeriod":
                parseValue(attribute.value, { asKey: "maximumSAPPeriod",
                    parser: parseMPDFloat,
                    dashName: "maximumSAPPeriod" });
                break;
            case "mimeType":
                parsedAdaptation.mimeType = attribute.value;
                break;
            case "profiles":
                parsedAdaptation.profiles = attribute.value;
                break;
            case "segmentProfiles":
                parsedAdaptation.segmentProfiles = attribute.value;
                break;
            case "width":
                parseValue(attribute.value, { asKey: "width",
                    parser: parseMPDInteger,
                    dashName: "width" });
                break;
            case "availabilityTimeOffset":
                parseValue(attribute.value, { asKey: "availabilityTimeOffset",
                    parser: parseMPDFloat,
                    dashName: "availabilityTimeOffset" });
                break;
            case "availabilityTimeComplete":
                parseValue(attribute.value, { asKey: "availabilityTimeComplete",
                    parser: parseBoolean,
                    dashName: "availabilityTimeComplete" });
                break;
        }
    }
    return [parsedAdaptation, warnings];
}
/**
 * Parse an AdaptationSet element into an AdaptationSet intermediate
 * representation.
 * @param {Element} adaptationSetElement - The AdaptationSet root element.
 * @returns {Array.<Object>}
 */
function createAdaptationSetIntermediateRepresentation(adaptationSetElement) {
    const childNodes = adaptationSetElement.childNodes;
    const [children, childrenWarnings] = parseAdaptationSetChildren(childNodes);
    const [attributes, attrsWarnings] = parseAdaptationSetAttributes(adaptationSetElement);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/EventStream.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse the EventStream node to extract Event nodes and their
 * content.
 * @param {Element} element
 * @returns {Array}
 */
function parseEventStream(element) {
    const eventStreamIR = {
        children: { events: [] },
        attributes: {},
    };
    let warnings = [];
    // 1 - Parse attributes
    const parseValue = ValueParser(eventStreamIR.attributes, warnings);
    for (let i = 0; i < element.attributes.length; i++) {
        const attr = element.attributes[i];
        switch (attr.name) {
            case "schemeIdUri":
                eventStreamIR.attributes.schemeIdUri = attr.value;
                break;
            case "timescale":
                parseValue(attr.value, { asKey: "timescale",
                    parser: parseMPDInteger,
                    dashName: "timescale" });
                break;
            case "value":
                eventStreamIR.attributes.value = attr.value;
                break;
        }
    }
    for (let i = 0; i < element.childNodes.length; i++) {
        if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {
            const currentElement = element.childNodes[i];
            switch (currentElement.nodeName) {
                case "Event":
                    const [event, eventWarnings] = parseEvent(currentElement);
                    eventStreamIR.children.events.push(event);
                    if (eventWarnings.length > 0) {
                        warnings = warnings.concat(eventWarnings);
                    }
                    break;
            }
        }
    }
    return [eventStreamIR, warnings];
}
/**
 * Parse `Event` Element, as found in EventStream nodes.
 * @param {Element} element
 * @returns {Array}
 */
function parseEvent(element) {
    const eventIR = {
        eventStreamData: element,
    };
    const warnings = [];
    // 1 - Parse attributes
    const parseValue = ValueParser(eventIR, warnings);
    for (let i = 0; i < element.attributes.length; i++) {
        const attr = element.attributes[i];
        switch (attr.name) {
            case "presentationTime":
                parseValue(attr.value, { asKey: "presentationTime",
                    parser: parseMPDInteger,
                    dashName: "presentationTime" });
                break;
            case "duration":
                parseValue(attr.value, { asKey: "duration",
                    parser: parseMPDInteger,
                    dashName: "duration" });
                break;
            case "id":
                eventIR.id = attr.value;
                break;
        }
    }
    return [eventIR, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/Period.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @param {NodeList} periodChildren
 * @returns {Array}
 */
function parsePeriodChildren(periodChildren) {
    const baseURLs = [];
    const adaptations = [];
    let segmentTemplate;
    let warnings = [];
    const eventStreams = [];
    for (let i = 0; i < periodChildren.length; i++) {
        if (periodChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentElement = periodChildren[i];
            switch (currentElement.nodeName) {
                case "BaseURL":
                    const [baseURLObj, baseURLWarnings] = parseBaseURL(currentElement);
                    if (baseURLObj !== undefined) {
                        baseURLs.push(baseURLObj);
                    }
                    warnings = warnings.concat(baseURLWarnings);
                    break;
                case "AdaptationSet":
                    const [adaptation, adaptationWarnings] = createAdaptationSetIntermediateRepresentation(currentElement);
                    adaptations.push(adaptation);
                    warnings = warnings.concat(adaptationWarnings);
                    break;
                case "EventStream":
                    const [eventStream, eventStreamWarnings] = parseEventStream(currentElement);
                    eventStreams.push(eventStream);
                    warnings = warnings.concat(eventStreamWarnings);
                    break;
                case "SegmentTemplate":
                    const [parsedSegmentTemplate, segmentTemplateWarnings] = parseSegmentTemplate(currentElement);
                    segmentTemplate = parsedSegmentTemplate;
                    if (segmentTemplateWarnings.length > 0) {
                        warnings = warnings.concat(segmentTemplateWarnings);
                    }
                    break;
            }
        }
    }
    return [{ baseURLs, adaptations, eventStreams, segmentTemplate }, warnings];
}
/**
 * @param {Element} periodElement
 * @returns {Array}
 */
function parsePeriodAttributes(periodElement) {
    const res = {};
    const warnings = [];
    const parseValue = ValueParser(res, warnings);
    for (let i = 0; i < periodElement.attributes.length; i++) {
        const attr = periodElement.attributes[i];
        switch (attr.name) {
            case "id":
                res.id = attr.value;
                break;
            case "start":
                parseValue(attr.value, { asKey: "start",
                    parser: parseDuration,
                    dashName: "start" });
                break;
            case "duration":
                parseValue(attr.value, { asKey: "duration",
                    parser: parseDuration,
                    dashName: "duration" });
                break;
            case "bitstreamSwitching":
                parseValue(attr.value, { asKey: "bitstreamSwitching",
                    parser: parseBoolean,
                    dashName: "bitstreamSwitching" });
                break;
            case "xlink:href":
                res.xlinkHref = attr.value;
                break;
            case "xlink:actuate":
                res.xlinkActuate = attr.value;
                break;
        }
    }
    return [res, warnings];
}
/**
 * @param {Element} periodElement
 * @returns {Array}
 */
function createPeriodIntermediateRepresentation(periodElement) {
    const [children, childrenWarnings] = parsePeriodChildren(periodElement.childNodes);
    const [attributes, attrsWarnings] = parsePeriodAttributes(periodElement);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/node_parsers/MPD.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Parse children of the MPD's root into a simple object.
 * @param {NodeList} mpdChildren
 * @returns {Array.<Object>}
 */
function parseMPDChildren(mpdChildren) {
    const baseURLs = [];
    const locations = [];
    const periods = [];
    const utcTimings = [];
    let warnings = [];
    for (let i = 0; i < mpdChildren.length; i++) {
        if (mpdChildren[i].nodeType === Node.ELEMENT_NODE) {
            const currentNode = mpdChildren[i];
            switch (currentNode.nodeName) {
                case "BaseURL":
                    const [baseURLObj, baseURLWarnings] = parseBaseURL(currentNode);
                    if (baseURLObj !== undefined) {
                        baseURLs.push(baseURLObj);
                    }
                    warnings = warnings.concat(baseURLWarnings);
                    break;
                case "Location":
                    locations.push(currentNode.textContent === null ?
                        "" :
                        currentNode.textContent);
                    break;
                case "Period":
                    const [period, periodWarnings] = createPeriodIntermediateRepresentation(currentNode);
                    periods.push(period);
                    warnings = warnings.concat(periodWarnings);
                    break;
                case "UTCTiming":
                    const utcTiming = parseScheme(currentNode);
                    utcTimings.push(utcTiming);
                    break;
            }
        }
    }
    return [{ baseURLs, locations, periods, utcTimings },
        warnings];
}
/**
 * @param {Element} root
 * @returns {Array.<Object>}
 */
function parseMPDAttributes(root) {
    const res = {};
    const warnings = [];
    const parseValue = ValueParser(res, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
        const attribute = root.attributes[i];
        switch (attribute.name) {
            case "id":
                res.id = attribute.value;
                break;
            case "profiles":
                res.profiles = attribute.value;
                break;
            case "type":
                res.type = attribute.value;
                break;
            case "availabilityStartTime":
                parseValue(attribute.value, { asKey: "availabilityStartTime",
                    parser: parseDateTime,
                    dashName: "availabilityStartTime" });
                break;
            case "availabilityEndTime":
                parseValue(attribute.value, { asKey: "availabilityEndTime",
                    parser: parseDateTime,
                    dashName: "availabilityEndTime" });
                break;
            case "publishTime":
                parseValue(attribute.value, { asKey: "publishTime",
                    parser: parseDateTime,
                    dashName: "publishTime" });
                break;
            case "mediaPresentationDuration":
                parseValue(attribute.value, { asKey: "duration",
                    parser: parseDuration,
                    dashName: "mediaPresentationDuration" });
                break;
            case "minimumUpdatePeriod":
                parseValue(attribute.value, { asKey: "minimumUpdatePeriod",
                    parser: parseDuration,
                    dashName: "minimumUpdatePeriod" });
                break;
            case "minBufferTime":
                parseValue(attribute.value, { asKey: "minBufferTime",
                    parser: parseDuration,
                    dashName: "minBufferTime" });
                break;
            case "timeShiftBufferDepth":
                parseValue(attribute.value, { asKey: "timeShiftBufferDepth",
                    parser: parseDuration,
                    dashName: "timeShiftBufferDepth" });
                break;
            case "suggestedPresentationDelay":
                parseValue(attribute.value, { asKey: "suggestedPresentationDelay",
                    parser: parseDuration,
                    dashName: "suggestedPresentationDelay" });
                break;
            case "maxSegmentDuration":
                parseValue(attribute.value, { asKey: "maxSegmentDuration",
                    parser: parseDuration,
                    dashName: "maxSegmentDuration" });
                break;
            case "maxSubsegmentDuration":
                parseValue(attribute.value, { asKey: "maxSubsegmentDuration",
                    parser: parseDuration,
                    dashName: "maxSubsegmentDuration" });
                break;
        }
    }
    return [res, warnings];
}
/**
 * @param {Element} root
 * @returns {Array.<Object>}
 */
function createMPDIntermediateRepresentation(root) {
    const [children, childrenWarnings] = parseMPDChildren(root.childNodes);
    const [attributes, attrsWarnings] = parseMPDAttributes(root);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/parse_from_document.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Parse MPD through the JS parser, on a `Document` instance.
 * @param {Document} manifest - Original manifest as returned by the server
 * @param {Object} args - Various parsing options and information.
 * @returns {Object} - Response returned by the DASH-JS parser.
 */
function parseFromDocument(document, args) {
    const root = document.documentElement;
    if (isNullOrUndefined(root) || root.nodeName !== "MPD") {
        throw new Error("DASH Parser: document root should be MPD");
    }
    const [mpdIR, warnings] = createMPDIntermediateRepresentation(root);
    const ret = common(mpdIR, args, warnings);
    return processReturn(ret);
    /**
     * Handle `parseMpdIr` return values, asking for resources if they are needed
     * and pre-processing them before continuing parsing.
     *
     * @param {Object} initialRes
     * @returns {Object}
     */
    function processReturn(initialRes) {
        if (initialRes.type === "done") {
            return initialRes;
        }
        else if (initialRes.type === "needs-clock") {
            return {
                type: "needs-resources",
                value: {
                    urls: [initialRes.value.url],
                    format: "string",
                    continue(loadedClock) {
                        if (loadedClock.length !== 1) {
                            throw new Error("DASH parser: wrong number of loaded ressources.");
                        }
                        const newRet = initialRes.value.continue(loadedClock[0].responseData);
                        return processReturn(newRet);
                    },
                },
            };
        }
        else if (initialRes.type === "needs-xlinks") {
            return {
                type: "needs-resources",
                value: {
                    urls: initialRes.value.xlinksUrls,
                    format: "string",
                    continue(loadedXlinks) {
                        const resourceInfos = [];
                        for (let i = 0; i < loadedXlinks.length; i++) {
                            const { responseData: xlinkResp, receivedTime, sendingTime, url } = loadedXlinks[i];
                            if (!xlinkResp.success) {
                                throw xlinkResp.error;
                            }
                            const wrappedData = "<root>" + xlinkResp.data + "</root>";
                            const dataAsXML = new DOMParser().parseFromString(wrappedData, "text/xml");
                            if (dataAsXML == null || dataAsXML.children.length === 0) {
                                throw new Error("DASH parser: Invalid external ressources");
                            }
                            const periods = dataAsXML.children[0].children;
                            const periodsIR = [];
                            const periodsIRWarnings = [];
                            for (let j = 0; j < periods.length; j++) {
                                if (periods[j].nodeType === Node.ELEMENT_NODE) {
                                    const [periodIR, periodWarnings] = createPeriodIntermediateRepresentation(periods[j]);
                                    periodsIRWarnings.push(...periodWarnings);
                                    periodsIR.push(periodIR);
                                }
                            }
                            resourceInfos.push({ url,
                                receivedTime,
                                sendingTime,
                                parsed: periodsIR,
                                warnings: periodsIRWarnings });
                        }
                        const newRet = initialRes.value.continue(resourceInfos);
                        return processReturn(newRet);
                    },
                },
            };
        }
        else {
            assertUnreachable(initialRes);
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/dash/js-parser/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const js_parser = (parseFromDocument);

;// CONCATENATED MODULE: ./src/utils/request/xhr.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const DEFAULT_RESPONSE_TYPE = "json";
function request(options) {
    const requestOptions = {
        url: options.url,
        headers: options.headers,
        responseType: isNullOrUndefined(options.responseType) ? DEFAULT_RESPONSE_TYPE :
            options.responseType,
        timeout: options.timeout,
    };
    return new Promise((resolve, reject) => {
        const { onProgress, cancelSignal } = options;
        const { url, headers, responseType, timeout } = requestOptions;
        const xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        let timeoutId;
        if (timeout !== undefined) {
            xhr.timeout = timeout;
            // We've seen on some browser (mainly on some LG TVs), that `xhr.timeout`
            // was either not supported or did not function properly despite the
            // browser being recent enough to support it.
            // That's why we also start a manual timeout. We do this a little later
            // than the "native one" performed on the xhr assuming that the latter
            // is more precise, it might also be more efficient.
            timeoutId = window.setTimeout(() => {
                clearCancellingProcess();
                reject(new RequestError(url, xhr.status, "TIMEOUT", xhr));
            }, timeout + 3000);
        }
        xhr.responseType = responseType;
        if (xhr.responseType === "document") {
            xhr.overrideMimeType("text/xml");
        }
        if (!isNullOrUndefined(headers)) {
            const _headers = headers;
            for (const key in _headers) {
                if (_headers.hasOwnProperty(key)) {
                    xhr.setRequestHeader(key, _headers[key]);
                }
            }
        }
        const sendingTime = performance.now();
        // Handle request cancellation
        let deregisterCancellationListener = null;
        if (cancelSignal !== undefined) {
            deregisterCancellationListener = cancelSignal
                .register(function abortRequest(err) {
                clearCancellingProcess();
                if (!isNullOrUndefined(xhr) && xhr.readyState !== 4) {
                    xhr.abort();
                }
                reject(err);
            });
            if (cancelSignal.isCancelled) {
                return;
            }
        }
        xhr.onerror = function onXHRError() {
            clearCancellingProcess();
            reject(new RequestError(url, xhr.status, "ERROR_EVENT", xhr));
        };
        xhr.ontimeout = function onXHRTimeout() {
            clearCancellingProcess();
            reject(new RequestError(url, xhr.status, "TIMEOUT", xhr));
        };
        if (onProgress !== undefined) {
            xhr.onprogress = function onXHRProgress(event) {
                const currentTime = performance.now();
                onProgress({ url,
                    duration: currentTime - sendingTime,
                    sendingTime,
                    currentTime,
                    size: event.loaded,
                    totalSize: event.total });
            };
        }
        xhr.onload = function onXHRLoad(event) {
            if (xhr.readyState === 4) {
                clearCancellingProcess();
                if (xhr.status >= 200 && xhr.status < 300) {
                    const receivedTime = performance.now();
                    const totalSize = xhr.response instanceof
                        ArrayBuffer ? xhr.response.byteLength :
                        event.total;
                    const status = xhr.status;
                    const loadedResponseType = xhr.responseType;
                    const _url = isNonEmptyString(xhr.responseURL) ? xhr.responseURL :
                        url;
                    let responseData;
                    if (loadedResponseType === "json") {
                        // IE bug where response is string with responseType json
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                        responseData = typeof xhr.response === "object" ?
                            xhr.response :
                            toJSONForIE(xhr.responseText);
                    }
                    else {
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                        responseData = xhr.response;
                    }
                    if (isNullOrUndefined(responseData)) {
                        reject(new RequestError(url, xhr.status, "PARSE_ERROR", xhr));
                        return;
                    }
                    resolve({ status,
                        url: _url,
                        responseType: loadedResponseType,
                        sendingTime,
                        receivedTime,
                        requestDuration: receivedTime - sendingTime,
                        size: totalSize,
                        responseData });
                }
                else {
                    reject(new RequestError(url, xhr.status, "ERROR_HTTP_CODE", xhr));
                }
            }
        };
        xhr.send();
        /**
         * Clear resources and timers created to handle cancellation and timeouts.
         */
        function clearCancellingProcess() {
            if (timeoutId !== undefined) {
                clearTimeout(timeoutId);
            }
            if (deregisterCancellationListener !== null) {
                deregisterCancellationListener();
            }
        }
    });
}
/**
 * @param {string} data
 * @returns {Object|null}
 */
function toJSONForIE(data) {
    try {
        return JSON.parse(data);
    }
    catch (e) {
        return null;
    }
}

;// CONCATENATED MODULE: ./src/utils/request/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const utils_request = (request);


;// CONCATENATED MODULE: ./src/transports/utils/call_custom_manifest_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function callCustomManifestLoader(customManifestLoader, fallbackManifestLoader) {
    return (url, loaderOptions, cancelSignal) => {
        return new Promise((res, rej) => {
            const timeAPIsDelta = Date.now() - performance.now();
            /** `true` when the custom segmentLoader should not be active anymore. */
            let hasFinished = false;
            /**
             * Callback triggered when the custom manifest loader has a response.
             * @param {Object} args
             */
            const resolve = (_args) => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                const receivedTime = _args.receivingTime !== undefined ? _args.receivingTime - timeAPIsDelta :
                    undefined;
                const sendingTime = _args.sendingTime !== undefined ? _args.sendingTime - timeAPIsDelta :
                    undefined;
                res({ responseData: _args.data,
                    size: _args.size,
                    requestDuration: _args.duration,
                    url: _args.url,
                    receivedTime, sendingTime });
            };
            /**
             * Callback triggered when the custom manifest loader fails
             * @param {*} err - The corresponding error encountered
             */
            const reject = (err) => {
                var _a, _b, _c;
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                // Format error and send it
                const castedErr = err;
                const message = (_a = castedErr === null || castedErr === void 0 ? void 0 : castedErr.message) !== null && _a !== void 0 ? _a : "Unknown error when fetching the Manifest through a " +
                    "custom manifestLoader.";
                const emittedErr = new CustomLoaderError(message, (_b = castedErr === null || castedErr === void 0 ? void 0 : castedErr.canRetry) !== null && _b !== void 0 ? _b : false, (_c = castedErr === null || castedErr === void 0 ? void 0 : castedErr.isOfflineError) !== null && _c !== void 0 ? _c : false, castedErr === null || castedErr === void 0 ? void 0 : castedErr.xhr);
                rej(emittedErr);
            };
            /**
             * Callback triggered when the custom manifest loader wants to fallback to
             * the "regular" implementation
             */
            const fallback = () => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                fallbackManifestLoader(url, loaderOptions, cancelSignal).then(res, rej);
            };
            const callbacks = { reject, resolve, fallback };
            const abort = customManifestLoader(url, callbacks, { timeout: loaderOptions.timeout });
            cancelSignal.register(abortCustomLoader);
            /**
             * The logic to run when the custom loader is cancelled while pending.
             * @param {Error} err
             */
            function abortCustomLoader(err) {
                if (hasFinished) {
                    return;
                }
                hasFinished = true;
                if (typeof abort === "function") {
                    abort();
                }
                rej(err);
            }
        });
    };
}

;// CONCATENATED MODULE: ./src/transports/utils/generate_manifest_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Manifest loader triggered if there was no custom-defined one in the API.
 * @param {string} preferredType
 * @returns {Function}
 */
function generateRegularManifestLoader(preferredType) {
    return function regularManifestLoader(url, loaderOptions, cancelSignal) {
        if (url === undefined) {
            throw new Error("Cannot perform HTTP(s) request. URL not known");
        }
        // What follows could be written in a single line, but TypeScript wouldn't
        // shut up.
        // So I wrote that instead, temporarily of course ;)
        switch (preferredType) {
            case "arraybuffer":
                return utils_request({ url,
                    responseType: "arraybuffer",
                    timeout: loaderOptions.timeout,
                    cancelSignal });
            case "text":
                return utils_request({ url,
                    responseType: "text",
                    timeout: loaderOptions.timeout,
                    cancelSignal });
            case "document":
                return utils_request({ url,
                    responseType: "document",
                    timeout: loaderOptions.timeout,
                    cancelSignal });
            default:
                assertUnreachable(preferredType);
        }
    };
}
/**
 * Generate a manifest loader for the application
 * @param {Function} [customManifestLoader]
 * @returns {Function}
 */
function generateManifestLoader({ customManifestLoader }, preferredType) {
    const regularManifestLoader = generateRegularManifestLoader(preferredType);
    if (typeof customManifestLoader !== "function") {
        return regularManifestLoader;
    }
    return callCustomManifestLoader(customManifestLoader, regularManifestLoader);
}

;// CONCATENATED MODULE: ./src/transports/dash/construct_segment_url.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function constructSegmentUrl(wantedCdn, segment) {
    return wantedCdn === null ? null :
        segment.url === null ? wantedCdn.baseUrl :
            resolveURL(wantedCdn.baseUrl, segment.url);
}

;// CONCATENATED MODULE: ./src/transports/dash/image_pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Loads an image segment.
 * @param {Object|null} wantedCdn
 * @param {Object} content
 * @param {Object} options
 * @param {Object} cancelSignal
 * @param {Object} callbacks
 * @returns {Promise}
 */
async function imageLoader(wantedCdn, content, options, cancelSignal, callbacks) {
    const { segment } = content;
    const url = constructSegmentUrl(wantedCdn, segment);
    if (segment.isInit || url === null) {
        return { resultType: "segment-created",
            resultData: null };
    }
    const data = await utils_request({ url,
        responseType: "arraybuffer",
        timeout: options.timeout,
        onProgress: callbacks.onProgress,
        cancelSignal });
    return { resultType: "segment-loaded",
        resultData: data };
}
/**
 * Parses an image segment.
 * @param {Object} loadedSegment
 * @param {Object} content
 * @returns {Object}
 */
function imageParser(loadedSegment, content) {
    const { segment, period } = content;
    const { data, isChunked } = loadedSegment;
    if (content.segment.isInit) { // image init segment has no use
        return { segmentType: "init",
            initializationData: null,
            initializationDataSize: 0,
            protectionDataUpdate: false,
            initTimescale: undefined };
    }
    if (isChunked) {
        throw new Error("Image data should not be downloaded in chunks");
    }
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    // TODO image Parsing should be more on the buffer side, no?
    if (data === null || src_features.imageParser === null) {
        return { segmentType: "media",
            chunkData: null,
            chunkSize: 0,
            chunkInfos: { duration: segment.duration,
                time: segment.time },
            chunkOffset,
            protectionDataUpdate: false,
            appendWindow: [period.start, period.end] };
    }
    const bifObject = src_features.imageParser(new Uint8Array(data));
    const thumbsData = bifObject.thumbs;
    return { segmentType: "media",
        chunkData: { data: thumbsData,
            start: 0,
            end: Number.MAX_VALUE,
            timescale: 1,
            type: "bif" },
        chunkSize: undefined,
        chunkInfos: { time: 0,
            duration: Number.MAX_VALUE },
        chunkOffset,
        protectionDataUpdate: false,
        appendWindow: [period.start, period.end] };
}

;// CONCATENATED MODULE: ./src/transports/dash/manifest_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








function generateManifestParser(options) {
    const { aggressiveMode, referenceDateTime } = options;
    const serverTimeOffset = options.serverSyncInfos !== undefined ?
        options.serverSyncInfos.serverTimestamp - options.serverSyncInfos.clientTime :
        undefined;
    return function manifestParser(manifestData, parserOptions, onWarnings, cancelSignal, scheduleRequest) {
        var _a;
        const { responseData } = manifestData;
        const argClockOffset = parserOptions.externalClockOffset;
        const url = (_a = manifestData.url) !== null && _a !== void 0 ? _a : parserOptions.originalUrl;
        const optAggressiveMode = aggressiveMode === true;
        const externalClockOffset = serverTimeOffset !== null && serverTimeOffset !== void 0 ? serverTimeOffset : argClockOffset;
        const unsafelyBaseOnPreviousManifest = parserOptions.unsafeMode ?
            parserOptions.previousManifest :
            null;
        const dashParserOpts = { aggressiveMode: optAggressiveMode,
            unsafelyBaseOnPreviousManifest,
            url,
            referenceDateTime,
            externalClockOffset };
        const parsers = src_features.dashParsers;
        if (parsers.wasm === null ||
            parsers.wasm.status === "uninitialized" ||
            parsers.wasm.status === "failure") {
            src_log.debug("DASH: WASM MPD Parser not initialized. Running JS one.");
            return runDefaultJsParser();
        }
        else {
            const manifestAB = getManifestAsArrayBuffer(responseData);
            if (!doesXmlSeemsUtf8Encoded(manifestAB)) {
                src_log.info("DASH: MPD doesn't seem to be UTF-8-encoded. " +
                    "Running JS parser instead of the WASM one.");
                return runDefaultJsParser();
            }
            if (parsers.wasm.status === "initialized") {
                src_log.debug("DASH: Running WASM MPD Parser.");
                const parsed = parsers.wasm.runWasmParser(manifestAB, dashParserOpts);
                return processMpdParserResponse(parsed);
            }
            else {
                src_log.debug("DASH: Awaiting WASM initialization before parsing the MPD.");
                const initProm = parsers.wasm.waitForInitialization()
                    .catch(() => { });
                return initProm.then(() => {
                    if (parsers.wasm === null || parsers.wasm.status !== "initialized") {
                        src_log.warn("DASH: WASM MPD parser initialization failed. " +
                            "Running JS parser instead");
                        return runDefaultJsParser();
                    }
                    src_log.debug("DASH: Running WASM MPD Parser.");
                    const parsed = parsers.wasm.runWasmParser(manifestAB, dashParserOpts);
                    return processMpdParserResponse(parsed);
                });
            }
        }
        /**
         * Parse the MPD through the default JS-written parser (as opposed to the
         * WebAssembly one).
         * If it is not defined, throws.
         * @returns {Observable}
         */
        function runDefaultJsParser() {
            if (parsers.js === null) {
                throw new Error("No MPD parser is imported");
            }
            const manifestDoc = getManifestAsDocument(responseData);
            const parsedManifest = parsers.js(manifestDoc, dashParserOpts);
            return processMpdParserResponse(parsedManifest);
        }
        /**
         * Process return of one of the MPD parser.
         * If it asks for a resource, load it then continue.
         * @param {Object} parserResponse - Response returned from a MPD parser.
         * @returns {Observable}
         */
        function processMpdParserResponse(parserResponse) {
            if (parserResponse.type === "done") {
                if (parserResponse.value.warnings.length > 0) {
                    onWarnings(parserResponse.value.warnings);
                }
                if (cancelSignal.isCancelled) {
                    return Promise.reject(cancelSignal.cancellationError);
                }
                const manifest = new src_manifest(parserResponse.value.parsed, options);
                return { manifest, url };
            }
            const { value } = parserResponse;
            const externalResources = value.urls.map(resourceUrl => {
                return scheduleRequest(() => {
                    const defaultTimeout = src_config.getCurrent().DEFAULT_REQUEST_TIMEOUT;
                    return value.format === "string" ? utils_request({ url: resourceUrl,
                        responseType: "text",
                        timeout: defaultTimeout,
                        cancelSignal }) :
                        utils_request({ url: resourceUrl,
                            responseType: "arraybuffer",
                            timeout: defaultTimeout,
                            cancelSignal });
                }).then((res) => {
                    if (value.format === "string") {
                        if (typeof res.responseData !== "string") {
                            throw new Error("External DASH resources should have been a string");
                        }
                        return object_assign(res, {
                            responseData: {
                                success: true,
                                data: res.responseData
                            },
                        });
                    }
                    else {
                        if (!(res.responseData instanceof ArrayBuffer)) {
                            throw new Error("External DASH resources should have been ArrayBuffers");
                        }
                        return object_assign(res, {
                            responseData: {
                                success: true,
                                data: res.responseData
                            },
                        });
                    }
                }, (err) => {
                    const error = formatError(err, {
                        defaultCode: "PIPELINE_PARSE_ERROR",
                        defaultReason: "An unknown error occured when parsing ressources.",
                    });
                    return object_assign({}, {
                        size: undefined,
                        requestDuration: undefined,
                        responseData: {
                            success: false,
                            error
                        },
                    });
                });
            });
            return Promise.all(externalResources).then(loadedResources => {
                if (value.format === "string") {
                    assertLoadedResourcesFormatString(loadedResources);
                    return processMpdParserResponse(value.continue(loadedResources));
                }
                else {
                    assertLoadedResourcesFormatArrayBuffer(loadedResources);
                    return processMpdParserResponse(value.continue(loadedResources));
                }
            });
        }
    };
}
/**
 * Throw if the given input is not in the expected format.
 * Allows to enforce runtime type-checking as compile-time type-checking here is
 * difficult to enforce.
 *
 * @param loadedResource
 * @returns
 */
function assertLoadedResourcesFormatString(loadedResources) {
    if (true) {
        return;
    }
    loadedResources.forEach((loadedResource) => {
        const { responseData } = loadedResource;
        if (responseData.success && typeof responseData.data === "string") {
            return;
        }
        else if (!responseData.success) {
            return;
        }
        throw new Error("Invalid data given to the LoadedRessource");
    });
}
/**
 * Throw if the given input is not in the expected format.
 * Allows to enforce runtime type-checking as compile-time type-checking here is
 * difficult to enforce.
 *
 * @param loadedResource
 * @returns
 */
function assertLoadedResourcesFormatArrayBuffer(loadedResources) {
    if (true) {
        return;
    }
    loadedResources.forEach((loadedResource) => {
        const { responseData } = loadedResource;
        if (responseData.success && responseData.data instanceof ArrayBuffer) {
            return;
        }
        else if (!responseData.success) {
            return;
        }
        throw new Error("Invalid data given to the LoadedRessource");
    });
}
/**
 * Try to convert a Manifest from an unknown format to a `Document` format.
 * Useful to exploit DOM-parsing APIs to quickly parse an XML Manifest.
 *
 * Throws if the format cannot be converted.
 * @param {*} manifestSrc
 * @returns {Document}
 */
function getManifestAsDocument(manifestSrc) {
    if (manifestSrc instanceof ArrayBuffer) {
        return new DOMParser()
            .parseFromString(utf8ToStr(new Uint8Array(manifestSrc)), "text/xml");
    }
    else if (typeof manifestSrc === "string") {
        return new DOMParser().parseFromString(manifestSrc, "text/xml");
    }
    else if (manifestSrc instanceof Document) {
        return manifestSrc;
    }
    else {
        throw new Error("DASH Manifest Parser: Unrecognized Manifest format");
    }
}
/**
 * Try to convert a Manifest from an unknown format to an `ArrayBuffer` format.
 * Throws if the format cannot be converted.
 * @param {*} manifestSrc
 * @returns {ArrayBuffer}
 */
function getManifestAsArrayBuffer(manifestSrc) {
    if (manifestSrc instanceof ArrayBuffer) {
        return manifestSrc;
    }
    else if (typeof manifestSrc === "string") {
        return strToUtf8(manifestSrc).buffer;
    }
    else if (manifestSrc instanceof Document) {
        return strToUtf8(manifestSrc.documentElement.innerHTML).buffer;
    }
    else {
        throw new Error("DASH Manifest Parser: Unrecognized Manifest format");
    }
}
/**
 * Returns true if the given XML appears to be encoded in UTF-8.
 *
 * For now, this function can return a lot of false positives, but it should
 * mostly work with real use cases.
 * @param {ArrayBuffer} xmlData
 * @returns {boolean}
 */
function doesXmlSeemsUtf8Encoded(xmlData) {
    const dv = new DataView(xmlData);
    if (dv.getUint16(0) === 0xEFBB && dv.getUint8(2) === 0XBF) {
        // (UTF-8 BOM)
        return true;
    }
    else if (dv.getUint16(0) === 0xFEFF || dv.getUint16(0) === 0xFFFe) {
        // (UTF-16 BOM)
        return false;
    }
    // TODO check encoding from request mimeType and text declaration?
    // https://www.w3.org/TR/xml/#sec-TextDecl
    return true;
}

;// CONCATENATED MODULE: ./src/utils/request/fetch.ts
/*
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const _Headers = typeof Headers === "function" ? Headers :
    null;
const _AbortController = typeof AbortController === "function" ?
    AbortController :
    null;
function fetchRequest(options) {
    let headers;
    if (!isNullOrUndefined(options.headers)) {
        if (isNullOrUndefined(_Headers)) {
            headers = options.headers;
        }
        else {
            headers = new _Headers();
            const headerNames = Object.keys(options.headers);
            for (let i = 0; i < headerNames.length; i++) {
                const headerName = headerNames[i];
                headers.append(headerName, options.headers[headerName]);
            }
        }
    }
    src_log.debug("Fetch: Called with URL", options.url);
    let cancellation = null;
    let timeouted = false;
    const sendingTime = performance.now();
    const abortController = !isNullOrUndefined(_AbortController) ? new _AbortController() :
        null;
    /**
     * Abort current fetchRequest by triggering AbortController signal.
     * @returns {void}
     */
    function abortFetch() {
        if (isNullOrUndefined(abortController)) {
            src_log.warn("Fetch: AbortController API not available.");
            return;
        }
        abortController.abort();
    }
    let timeout;
    if (options.timeout !== undefined) {
        timeout = window.setTimeout(() => {
            timeouted = true;
            abortFetch();
        }, options.timeout);
    }
    const deregisterCancelLstnr = options.cancelSignal
        .register(function abortRequest(err) {
        cancellation = err;
        abortFetch();
    });
    const fetchOpts = { method: "GET" };
    if (headers !== undefined) {
        fetchOpts.headers = headers;
    }
    fetchOpts.signal = !isNullOrUndefined(abortController) ? abortController.signal :
        null;
    return fetch(options.url, fetchOpts).then((response) => {
        if (!isNullOrUndefined(timeout)) {
            clearTimeout(timeout);
        }
        if (response.status >= 300) {
            src_log.warn("Fetch: Request HTTP Error", response.status, response.url);
            throw new RequestError(response.url, response.status, NetworkErrorTypes.ERROR_HTTP_CODE);
        }
        if (isNullOrUndefined(response.body)) {
            throw new RequestError(response.url, response.status, NetworkErrorTypes.PARSE_ERROR);
        }
        const contentLengthHeader = response.headers.get("Content-Length");
        const contentLength = !isNullOrUndefined(contentLengthHeader) &&
            !isNaN(+contentLengthHeader) ? +contentLengthHeader :
            undefined;
        const reader = response.body.getReader();
        let size = 0;
        return readBufferAndSendEvents();
        async function readBufferAndSendEvents() {
            const data = await reader.read();
            if (!data.done && !isNullOrUndefined(data.value)) {
                size += data.value.byteLength;
                const currentTime = performance.now();
                const dataInfo = { url: response.url,
                    currentTime,
                    duration: currentTime - sendingTime,
                    sendingTime,
                    chunkSize: data.value.byteLength,
                    chunk: data.value.buffer,
                    size,
                    totalSize: contentLength };
                options.onData(dataInfo);
                return readBufferAndSendEvents();
            }
            else if (data.done) {
                deregisterCancelLstnr();
                const receivedTime = performance.now();
                const requestDuration = receivedTime - sendingTime;
                return { requestDuration,
                    receivedTime,
                    sendingTime,
                    size,
                    status: response.status,
                    url: response.url };
            }
            return readBufferAndSendEvents();
        }
    }).catch((err) => {
        if (cancellation !== null) {
            throw cancellation;
        }
        deregisterCancelLstnr();
        if (timeouted) {
            src_log.warn("Fetch: Request timeouted.");
            throw new RequestError(options.url, 0, NetworkErrorTypes.TIMEOUT);
        }
        else if (err instanceof RequestError) {
            throw err;
        }
        src_log.warn("Fetch: Request Error", err instanceof Error ? err.toString() :
            "");
        throw new RequestError(options.url, 0, NetworkErrorTypes.ERROR_EVENT);
    });
}
/**
 * Returns true if fetch should be supported in the current browser.
 * @return {boolean}
 */
function fetchIsSupported() {
    return (typeof window.fetch === "function" &&
        !isNullOrUndefined(_AbortController) &&
        !isNullOrUndefined(_Headers));
}

;// CONCATENATED MODULE: ./src/transports/utils/byte_range.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns text-formatted byteRange (`bytes=$start-$end?)`
 * @param {Array.<string|Number>} arr
 * @returns {string}
 */
function byteRange([start, end]) {
    return end === Infinity ? `bytes=${start}-` :
        `bytes=${start}-${end}`;
}

;// CONCATENATED MODULE: ./src/transports/utils/infer_segment_container.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Guess the type of container a segment is in based on Manifest information.
 *
 * Returns:
 *   - "mp4" if we can say with confidence the segment will be in an mp4 format
 *   - "webm" if we can say with confidence the segment will be in a webm format
 *   - `undefined` if we cannot say with confidence in which container the
 *     segment will be in.
 * @param {string} adaptationType
 * @param {Object} representation
 * @returns {string | undefined}
 */
function inferSegmentContainer(adaptationType, representation) {
    if (adaptationType === "audio" || adaptationType === "video") {
        if (representation.mimeType === "video/mp4" ||
            representation.mimeType === "audio/mp4") {
            return "mp4";
        }
        if (representation.mimeType === "video/webm" ||
            representation.mimeType === "audio/webm") {
            return "webm";
        }
        return undefined;
    }
    else if (adaptationType === "text") {
        return representation.mimeType === "application/mp4" ?
            "mp4" :
            undefined;
    }
    return undefined;
}

;// CONCATENATED MODULE: ./src/transports/utils/find_complete_box.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Find the offset for the first declaration of the given box in an isobmff.
 * Returns -1 if not found or if incomplete.
 *
 * This function does not throw or log in case of partial segments.
 * @param {Uint8Array} buf - the isobmff
 * @param {Number} wantedName
 * @returns {Number} - Offset where the box begins. -1 if not found.
 */
function findCompleteBox(buf, wantedName) {
    const len = buf.length;
    let i = 0;
    while (i + 8 <= len) {
        let size = be4toi(buf, i);
        if (size === 0) {
            size = len - i;
        }
        else if (size === 1) {
            if (i + 16 > len) {
                return -1;
            }
            size = be8toi(buf, i + 8);
        }
        if (isNaN(size) || size <= 0) { // should not happen
            return -1;
        }
        const name = be4toi(buf, i + 4);
        if (name === wantedName) {
            if (i + size <= len) {
                return i;
            }
            return -1;
        }
        i += size;
    }
    return -1;
}

;// CONCATENATED MODULE: ./src/transports/utils/check_isobmff_integrity.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Check if an ISOBMFF segment has all the right box needed to be decoded.
 * Throw if that's not the case.
 * @param {Uint8Array} buffer - The whole ISOBMFF segment
 * @param {boolean} isInitSegment - `true` if this is an initialization segment,
 * `false` otherwise.
 */
function checkISOBMFFIntegrity(buffer, isInitSegment) {
    if (isInitSegment) {
        const ftypIndex = findCompleteBox(buffer, 0x66747970 /* ftyp */);
        if (ftypIndex < 0) {
            throw new OtherError("INTEGRITY_ERROR", "Incomplete `ftyp` box");
        }
        const moovIndex = findCompleteBox(buffer, 0x6D6F6F76 /* moov */);
        if (moovIndex < 0) {
            throw new OtherError("INTEGRITY_ERROR", "Incomplete `moov` box");
        }
    }
    else {
        const moofIndex = findCompleteBox(buffer, 0x6D6F6F66 /* moof */);
        if (moofIndex < 0) {
            throw new OtherError("INTEGRITY_ERROR", "Incomplete `moof` box");
        }
        const mdatIndex = findCompleteBox(buffer, 0x6D646174 /* mdat */);
        if (mdatIndex < 0) {
            throw new OtherError("INTEGRITY_ERROR", "Incomplete `mdat` box");
        }
    }
}

;// CONCATENATED MODULE: ./src/transports/dash/add_segment_integrity_checks_to_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Add multiple checks on the response given by the `segmentLoader` in argument.
 * If the response appear to be corrupted, the returned Promise will reject with
 * an error with an `INTEGRITY_ERROR` code.
 * @param {Function} segmentLoader
 * @returns {Function}
 */
function addSegmentIntegrityChecks(segmentLoader) {
    return (url, content, loaderOptions, initialCancelSignal, callbacks) => {
        return new Promise((resolve, reject) => {
            const requestCanceller = new TaskCanceller({ cancelOn: initialCancelSignal });
            // Reject the `CancellationError` when `requestCanceller`'s signal emits
            // `stopRejectingOnCancel` here is a function allowing to stop this mechanism
            const stopRejectingOnCancel = requestCanceller.signal.register(reject);
            segmentLoader(url, content, loaderOptions, requestCanceller.signal, Object.assign(Object.assign({}, callbacks), { onNewChunk(data) {
                    try {
                        trowOnIntegrityError(data);
                        callbacks.onNewChunk(data);
                    }
                    catch (err) {
                        // Do not reject with a `CancellationError` after cancelling the request
                        stopRejectingOnCancel();
                        // Cancel the request
                        requestCanceller.cancel();
                        // Reject with thrown error
                        reject(err);
                    }
                } })).then((info) => {
                if (requestCanceller.isUsed) {
                    return;
                }
                stopRejectingOnCancel();
                if (info.resultType === "segment-loaded") {
                    try {
                        trowOnIntegrityError(info.resultData.responseData);
                    }
                    catch (err) {
                        reject(err);
                        return;
                    }
                }
                resolve(info);
            }, (error) => {
                stopRejectingOnCancel();
                reject(error);
            });
        });
        /**
         * If the data's seems to be corrupted, throws an `INTEGRITY_ERROR` error.
         * @param {*} data
         */
        function trowOnIntegrityError(data) {
            if (!(data instanceof ArrayBuffer) && !(data instanceof Uint8Array) ||
                inferSegmentContainer(content.adaptation.type, content.representation) !== "mp4") {
                return;
            }
            checkISOBMFFIntegrity(new Uint8Array(data), content.segment.isInit);
        }
    };
}

;// CONCATENATED MODULE: ./src/transports/dash/init_segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Perform a request for an initialization segment, agnostic to the container.
 * @param {string} url
 * @param {Object} segment
 * @param {Object} options
 * @param {CancellationSignal} cancelSignal
 * @param {Object} callbacks
 * @returns {Promise}
 */
function initSegmentLoader(url, segment, options, cancelSignal, callbacks) {
    if (segment.range === undefined) {
        return utils_request({ url,
            responseType: "arraybuffer",
            timeout: options.timeout,
            cancelSignal,
            onProgress: callbacks.onProgress })
            .then(data => ({ resultType: "segment-loaded",
            resultData: data }));
    }
    if (segment.indexRange === undefined) {
        return utils_request({ url,
            headers: { Range: byteRange(segment.range) },
            responseType: "arraybuffer",
            timeout: options.timeout,
            cancelSignal,
            onProgress: callbacks.onProgress })
            .then(data => ({ resultType: "segment-loaded",
            resultData: data }));
    }
    // range and indexRange are contiguous (99% of the cases)
    if (segment.range[1] + 1 === segment.indexRange[0]) {
        return utils_request({ url,
            headers: { Range: byteRange([segment.range[0],
                    segment.indexRange[1]]) },
            responseType: "arraybuffer",
            timeout: options.timeout,
            cancelSignal,
            onProgress: callbacks.onProgress })
            .then(data => ({ resultType: "segment-loaded",
            resultData: data }));
    }
    const rangeRequest$ = utils_request({ url,
        headers: { Range: byteRange(segment.range) },
        responseType: "arraybuffer",
        timeout: options.timeout,
        cancelSignal,
        onProgress: callbacks.onProgress });
    const indexRequest$ = utils_request({ url,
        headers: { Range: byteRange(segment.indexRange) },
        responseType: "arraybuffer",
        timeout: options.timeout,
        cancelSignal,
        onProgress: callbacks.onProgress });
    return Promise.all([rangeRequest$, indexRequest$])
        .then(([initData, indexData]) => {
        const data = byte_parsing_concat(new Uint8Array(initData.responseData), new Uint8Array(indexData.responseData));
        const sendingTime = Math.min(initData.sendingTime, indexData.sendingTime);
        const receivedTime = Math.max(initData.receivedTime, indexData.receivedTime);
        return { resultType: "segment-loaded",
            resultData: { url,
                responseData: data,
                size: initData.size + indexData.size,
                requestDuration: receivedTime - sendingTime,
                sendingTime,
                receivedTime } };
    });
}

;// CONCATENATED MODULE: ./src/transports/dash/extract_complete_chunks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Take a chunk of ISOBMFF data and extract complete `moof`+`mdat` subsegments
 * which are ready to be decoded.
 * Returns a tuple of two containing first an array of those subsegments
 * followed by tha last un-decodable part.
 * @param {Uint8Array} buffer
 * @returns {Array}
 */
function extractCompleteChunks(buffer) {
    let _position = 0;
    const chunks = [];
    while (_position < buffer.length) {
        const currentBuffer = buffer.subarray(_position, Infinity);
        const moofIndex = findCompleteBox(currentBuffer, 0x6D6F6F66 /* moof */);
        if (moofIndex < 0) {
            // no moof, not a segment.
            return [chunks, currentBuffer];
        }
        const moofLen = be4toi(buffer, moofIndex + _position);
        const moofEnd = _position + moofIndex + moofLen;
        if (moofEnd > buffer.length) {
            // not a complete moof segment
            return [chunks, currentBuffer];
        }
        const mdatIndex = findCompleteBox(currentBuffer, 0x6D646174 /* mdat */);
        if (mdatIndex < 0) {
            // no mdat, not a segment.
            return [chunks, currentBuffer];
        }
        const mdatLen = be4toi(buffer, mdatIndex + _position);
        const mdatEnd = _position + mdatIndex + mdatLen;
        if (mdatEnd > buffer.length) {
            // not a complete mdat segment
            return [chunks, currentBuffer];
        }
        const maxEnd = Math.max(moofEnd, mdatEnd);
        const chunk = buffer.subarray(_position, maxEnd);
        chunks.push(chunk);
        _position = maxEnd;
    }
    return [chunks, null];
}

;// CONCATENATED MODULE: ./src/transports/dash/low_latency_segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Load segments through a "chunk" mode (decodable chunk by decodable chunk).
 *
 * This method is particularly adapted to low-latency streams.
 *
 * @param {string} url - URL of the segment to download.
 * @param {Object} content - Context of the segment needed.
 * @param {Object} options
 * @param {Object} callbacks
 * @param {CancellationSignal} cancelSignal
 * @returns {Promise}
 */
function lowLatencySegmentLoader(url, content, options, callbacks, cancelSignal) {
    const { segment } = content;
    const headers = segment.range !== undefined ? { Range: byteRange(segment.range) } :
        undefined;
    let partialChunk = null;
    /**
     * Called each time `fetch` has new data available.
     * @param {Object} info
     */
    function onData(info) {
        const chunk = new Uint8Array(info.chunk);
        const concatenated = partialChunk !== null ? byte_parsing_concat(partialChunk, chunk) :
            chunk;
        const res = extractCompleteChunks(concatenated);
        const completeChunks = res[0];
        partialChunk = res[1];
        for (let i = 0; i < completeChunks.length; i++) {
            callbacks.onNewChunk(completeChunks[i]);
            if (cancelSignal.isCancelled) {
                return;
            }
        }
        callbacks.onProgress({ duration: info.duration,
            size: info.size,
            totalSize: info.totalSize });
        if (cancelSignal.isCancelled) {
            return;
        }
    }
    return fetchRequest({ url,
        headers,
        onData,
        timeout: options.timeout,
        cancelSignal })
        .then((res) => ({ resultType: "chunk-complete",
        resultData: res }));
}

;// CONCATENATED MODULE: ./src/transports/dash/segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * Segment loader triggered if there was no custom-defined one in the API.
 * @param {string} url
 * @param {Object} content
 * @param {boolean} lowLatencyMode
 * @param {Object} options
 * @param {Object} callbacks
 * @param {Object} cancelSignal
 * @returns {Promise}
 */
function regularSegmentLoader(url, content, lowLatencyMode, options, callbacks, cancelSignal) {
    if (content.segment.isInit) {
        return initSegmentLoader(url, content.segment, options, cancelSignal, callbacks);
    }
    const containerType = inferSegmentContainer(content.adaptation.type, content.representation);
    if (lowLatencyMode && (containerType === "mp4" || containerType === undefined)) {
        if (fetchIsSupported()) {
            return lowLatencySegmentLoader(url, content, options, callbacks, cancelSignal);
        }
        else {
            warnOnce("DASH: Your browser does not have the fetch API. You will have " +
                "a higher chance of rebuffering when playing close to the live edge");
        }
    }
    const { segment } = content;
    return utils_request({ url,
        responseType: "arraybuffer",
        headers: segment.range !== undefined ?
            { Range: byteRange(segment.range) } :
            undefined,
        timeout: options.timeout,
        cancelSignal,
        onProgress: callbacks.onProgress })
        .then((data) => ({ resultType: "segment-loaded",
        resultData: data }));
}
/**
 * @param {Object} config
 * @returns {Function}
 */
function generateSegmentLoader({ lowLatencyMode, segmentLoader: customSegmentLoader, checkMediaSegmentIntegrity }) {
    return checkMediaSegmentIntegrity !== true ? segmentLoader :
        addSegmentIntegrityChecks(segmentLoader);
    /**
     * @param {Object|null} wantedCdn
     * @returns {Observable}
     */
    function segmentLoader(wantedCdn, content, options, cancelSignal, callbacks) {
        const url = constructSegmentUrl(wantedCdn, content.segment);
        if (url == null) {
            return Promise.resolve({ resultType: "segment-created",
                resultData: null });
        }
        if (lowLatencyMode || customSegmentLoader === undefined) {
            return regularSegmentLoader(url, content, lowLatencyMode, options, callbacks, cancelSignal);
        }
        const args = { adaptation: content.adaptation,
            manifest: content.manifest,
            period: content.period,
            representation: content.representation,
            segment: content.segment,
            transport: "dash",
            timeout: options.timeout,
            url };
        return new Promise((res, rej) => {
            /** `true` when the custom segmentLoader should not be active anymore. */
            let hasFinished = false;
            /**
             * Callback triggered when the custom segment loader has a response.
             * @param {Object} _args
             */
            const resolve = (_args) => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                res({ resultType: "segment-loaded",
                    resultData: { responseData: _args.data,
                        size: _args.size,
                        requestDuration: _args.duration } });
            };
            /**
             * Callback triggered when the custom segment loader fails
             * @param {*} err - The corresponding error encountered
             */
            const reject = (err) => {
                var _a, _b, _c;
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                // Format error and send it
                const castedErr = err;
                const message = (_a = castedErr === null || castedErr === void 0 ? void 0 : castedErr.message) !== null && _a !== void 0 ? _a : "Unknown error when fetching a DASH segment through a " +
                    "custom segmentLoader.";
                const emittedErr = new CustomLoaderError(message, (_b = castedErr === null || castedErr === void 0 ? void 0 : castedErr.canRetry) !== null && _b !== void 0 ? _b : false, (_c = castedErr === null || castedErr === void 0 ? void 0 : castedErr.isOfflineError) !== null && _c !== void 0 ? _c : false, castedErr === null || castedErr === void 0 ? void 0 : castedErr.xhr);
                rej(emittedErr);
            };
            const progress = (_args) => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                callbacks.onProgress({ duration: _args.duration,
                    size: _args.size,
                    totalSize: _args.totalSize });
            };
            /**
             * Callback triggered when the custom segment loader wants to fallback to
             * the "regular" implementation
             */
            const fallback = () => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                regularSegmentLoader(url, content, lowLatencyMode, options, callbacks, cancelSignal)
                    .then(res, rej);
            };
            const customCallbacks = { reject, resolve, progress, fallback };
            const abort = customSegmentLoader(args, customCallbacks);
            cancelSignal.register(abortCustomLoader);
            /**
             * The logic to run when the custom loader is cancelled while pending.
             * @param {Error} err
             */
            function abortCustomLoader(err) {
                if (hasFinished) {
                    return;
                }
                hasFinished = true;
                if (typeof abort === "function") {
                    abort();
                }
                rej(err);
            }
        });
    }
}

;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/constants.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Maximum integer that can be stored on 32 bits.
 *
 * This can be used for example to know what is the maximum ISOBMFF box size
 * that can be stored on the first four bytes of a box. Any value higher than
 * that will need 8 bytes (64 bits) to be stored.
 */
const MAX_32_BIT_INT = Math.pow(2, 32) - 1;

;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/read.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the content of the first "traf" box encountered in the given ISOBMFF
 * data.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */
function getTRAF(buffer) {
    const moof = getBoxContent(buffer, 0x6D6F6F66 /* moof */);
    if (moof === null) {
        return null;
    }
    return getBoxContent(moof, 0x74726166 /* traf */);
}
/**
 * Returns the content of all "traf" boxes encountered in the given ISOBMFF
 * data.
 * Might be preferred to just `getTRAF` if you suspect that your ISOBMFF may
 * have multiple "moof" boxes.
 * @param {Uint8Array} buffer
 * @returns {Array.<Uint8Array>}
 */
function getTRAFs(buffer) {
    const moofs = getBoxesContent(buffer, 0x6D6F6F66 /* moof */);
    return moofs.reduce((acc, moof) => {
        const traf = getBoxContent(moof, 0x74726166 /* traf */);
        if (traf !== null) {
            acc.push(traf);
        }
        return acc;
    }, []);
}
/**
 * Returns the content of the first "moof" box encountered in the given ISOBMFF
 * data.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */
function getMDAT(buf) {
    return getBoxContent(buf, 0x6D646174 /* "mdat" */);
}
/**
 * Returns the content of the first "mdia" box encountered in the given ISOBMFF
 * data.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */
function getMDIA(buf) {
    const moov = getBoxContent(buf, 0x6D6F6F76 /* moov */);
    if (moov === null) {
        return null;
    }
    const trak = getBoxContent(moov, 0x7472616B /* "trak" */);
    if (trak === null) {
        return null;
    }
    return getBoxContent(trak, 0x6D646961 /* "mdia" */);
}
/**
 * Returns the content of the first "emsg" box encountered in the given ISOBMFF
 * data.
 * Returns null if not found.
 * @param {Uint8Array} buffer
 * @returns {Uint8Array|null}
 */
function getEMSG(buffer, offset = 0) {
    return getBoxContent(buffer.subarray(offset), 0x656D7367 /* emsg */);
}


;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * Parse the sidx part (segment index) of an ISOBMFF buffer and construct a
 * corresponding Array of available segments.
 *
 * Returns `null` if not found.
 * @param {Uint8Array} buf
 * @param {Number} sidxOffsetInWholeSegment
 * @returns {Object|null} {Array.<Object>} - Information about each subsegment.
 */
function getSegmentsFromSidx(buf, sidxOffsetInWholeSegment) {
    const sidxOffsets = get_box_getBoxOffsets(buf, 0x73696478 /* "sidx" */);
    if (sidxOffsets === null) {
        return null;
    }
    let offset = sidxOffsetInWholeSegment;
    const boxSize = sidxOffsets[2] - sidxOffsets[0];
    let cursor = sidxOffsets[1];
    /* version(8) */
    /* flags(24) */
    /* reference_ID(32); */
    /* timescale(32); */
    const version = buf[cursor];
    cursor += 4 + 4;
    const timescale = be4toi(buf, cursor);
    cursor += 4;
    /* earliest_presentation_time(32 / 64) */
    /* first_offset(32 / 64) */
    let time;
    if (version === 0) {
        time = be4toi(buf, cursor);
        cursor += 4;
        offset += be4toi(buf, cursor) + boxSize;
        cursor += 4;
    }
    else if (version === 1) {
        time = be8toi(buf, cursor);
        cursor += 8;
        offset += be8toi(buf, cursor) + boxSize;
        cursor += 8;
    }
    else {
        return null;
    }
    const segments = [];
    /* reserved(16) */
    /* reference_count(16) */
    cursor += 2;
    let count = be2toi(buf, cursor);
    cursor += 2;
    while (--count >= 0) {
        /* reference_type(1) */
        /* reference_size(31) */
        /* segment_duration(32) */
        /* sap..(32) */
        const refChunk = be4toi(buf, cursor);
        cursor += 4;
        const refType = (refChunk & 0x80000000) >>> 31;
        const refSize = (refChunk & 0x7FFFFFFF);
        // when set to 1 indicates that the reference is to a sidx, else to media
        if (refType === 1) {
            throw new Error("sidx with reference_type `1` not yet implemented");
        }
        const duration = be4toi(buf, cursor);
        cursor += 4;
        // let sapChunk = be4toi(buf, cursor + 8);
        cursor += 4;
        // TODO(pierre): handle sap
        // let startsWithSap = (sapChunk & 0x80000000) >>> 31;
        // let sapType = (sapChunk & 0x70000000) >>> 28;
        // let sapDelta = sapChunk & 0x0FFFFFFF;
        segments.push({ time,
            duration,
            timescale,
            range: [offset, offset + refSize - 1] });
        time += duration;
        offset += refSize;
    }
    return segments;
}
/**
 * Parse track Fragment Decode Time to get a precize initial time for this
 * segment (in the media timescale).
 *
 * Stops at the first tfdt encountered from the beginning of the file.
 * Returns this time.
 * `undefined` if not found.
 * @param {Uint8Array} buffer
 * @returns {Number | undefined}
 */
function getTrackFragmentDecodeTime(buffer) {
    const traf = getTRAF(buffer);
    if (traf === null) {
        return undefined;
    }
    const tfdt = getBoxContent(traf, 0x74666474 /* tfdt */);
    if (tfdt === null) {
        return undefined;
    }
    const version = tfdt[0];
    return version === 1 ? be8toi(tfdt, 4) :
        version === 0 ? be4toi(tfdt, 4) :
            undefined;
}
/**
 * Returns the "default sample duration" which is the default value for duration
 * of samples found in a "traf" ISOBMFF box.
 *
 * Returns `undefined` if no "default sample duration" has been found.
 * @param {Uint8Array} traf
 * @returns {number|undefined}
 */
function getDefaultDurationFromTFHDInTRAF(traf) {
    const tfhd = getBoxContent(traf, 0x74666864 /* tfhd */);
    if (tfhd === null) {
        return undefined;
    }
    let cursor = /* version */ 1;
    const flags = be3toi(tfhd, cursor);
    cursor += 3;
    const hasBaseDataOffset = (flags & 0x000001) > 0;
    const hasSampleDescriptionIndex = (flags & 0x000002) > 0;
    const hasDefaultSampleDuration = (flags & 0x000008) > 0;
    if (!hasDefaultSampleDuration) {
        return undefined;
    }
    cursor += 4;
    if (hasBaseDataOffset) {
        cursor += 8;
    }
    if (hasSampleDescriptionIndex) {
        cursor += 4;
    }
    const defaultDuration = be4toi(tfhd, cursor);
    return defaultDuration;
}
/**
 * Calculate segment duration approximation by additioning the duration from
 * every samples in a trun ISOBMFF box.
 *
 * Returns `undefined` if we could not parse the duration.
 * @param {Uint8Array} buffer
 * @returns {number | undefined}
 */
function getDurationFromTrun(buffer) {
    const trafs = getTRAFs(buffer);
    if (trafs.length === 0) {
        return undefined;
    }
    let completeDuration = 0;
    for (const traf of trafs) {
        const trun = getBoxContent(traf, 0x7472756E /* trun */);
        if (trun === null) {
            return undefined;
        }
        let cursor = 0;
        const version = trun[cursor];
        cursor += 1;
        if (version > 1) {
            return undefined;
        }
        const flags = be3toi(trun, cursor);
        cursor += 3;
        const hasSampleDuration = (flags & 0x000100) > 0;
        let defaultDuration = 0;
        if (!hasSampleDuration) {
            defaultDuration = getDefaultDurationFromTFHDInTRAF(traf);
            if (defaultDuration === undefined) {
                return undefined;
            }
        }
        const hasDataOffset = (flags & 0x000001) > 0;
        const hasFirstSampleFlags = (flags & 0x000004) > 0;
        const hasSampleSize = (flags & 0x000200) > 0;
        const hasSampleFlags = (flags & 0x000400) > 0;
        const hasSampleCompositionOffset = (flags & 0x000800) > 0;
        const sampleCounts = be4toi(trun, cursor);
        cursor += 4;
        if (hasDataOffset) {
            cursor += 4;
        }
        if (hasFirstSampleFlags) {
            cursor += 4;
        }
        let i = sampleCounts;
        let duration = 0;
        while (i-- > 0) {
            if (hasSampleDuration) {
                duration += be4toi(trun, cursor);
                cursor += 4;
            }
            else {
                duration += defaultDuration;
            }
            if (hasSampleSize) {
                cursor += 4;
            }
            if (hasSampleFlags) {
                cursor += 4;
            }
            if (hasSampleCompositionOffset) {
                cursor += 4;
            }
        }
        completeDuration += duration;
    }
    return completeDuration;
}
/**
 * Get timescale information from a movie header box. Found in init segments.
 * `undefined` if not found or not parsed.
 *
 * This timescale is the default timescale used for segments.
 * @param {Uint8Array} buffer
 * @returns {Number | undefined}
 */
function getMDHDTimescale(buffer) {
    const mdia = getMDIA(buffer);
    if (mdia === null) {
        return undefined;
    }
    const mdhd = getBoxContent(mdia, 0x6D646864 /* "mdhd" */);
    if (mdhd === null) {
        return undefined;
    }
    let cursor = 0;
    const version = mdhd[cursor];
    cursor += 4;
    return version === 1 ? be4toi(mdhd, cursor + 16) :
        version === 0 ? be4toi(mdhd, cursor + 8) :
            undefined;
}
/**
 * Creates a PSSH box with the given systemId and data.
 * @param {Array.<Object>} psshInfo
 * @returns {Uint8Array}
 */
function createPssh({ systemId, privateData }) {
    const _systemId = systemId.replace(/-/g, "");
    assert(_systemId.length === 32);
    return createBox("pssh", concat(4, // 4 initial zeroed bytes
    hexToBytes(_systemId), itobe4(privateData.length), privateData));
}
/**
 * Update ISOBMFF given to add a "pssh" box in the "moov" box for every content
 * protection in the psshList array given.
 * @param {Uint8Array} buf - the ISOBMFF file
 * @param {Array.<Object>} psshList
 * @returns {Uint8Array} - The new ISOBMFF generated.
 */
function patchPssh(buf, psshList) {
    if (psshList == null || psshList.length === 0) {
        return buf;
    }
    const moovOffsets = getBoxOffsets(buf, 0x6D6F6F76 /* = "moov" */);
    if (moovOffsets === null) {
        return buf;
    }
    const moov = buf.subarray(moovOffsets[0], moovOffsets[2]);
    const moovArr = [moov];
    for (let i = 0; i < psshList.length; i++) {
        moovArr.push(createPssh(psshList[i]));
    }
    const newmoov = updateBoxLength(concat(...moovArr));
    return concat(buf.subarray(0, moovOffsets[0]), newmoov, buf.subarray(moovOffsets[2]));
}
/**
 * Returns a new version of the given box with the size updated
 * so it reflects its actual size.
 *
 * You can use this function after modifying a ISOBMFF box so its size is
 * updated.
 *
 * /!\ Please consider that this function might mutate the given Uint8Array
 * in place or might create a new one, depending on the current conditions.
 * @param {Uint8Array} buf - The ISOBMFF box
 * @returns {Uint8Array}
 */
function updateBoxLength(buf) {
    const newLen = buf.length;
    if (newLen < 4) {
        throw new Error("Cannot update box length: box too short");
    }
    const oldSize = be4toi(buf, 0);
    if (oldSize === 0) {
        if (newLen > MAX_32_BIT_INT) {
            const newBox = new Uint8Array(newLen + 8);
            newBox.set(byte_parsing_itobe4(1), 0);
            newBox.set(buf.subarray(4, 8), 4);
            newBox.set(itobe8(newLen + 8), 8);
            newBox.set(buf.subarray(8, newLen), 16);
            return newBox;
        }
        else {
            buf.set(byte_parsing_itobe4(newLen), 0);
            return buf;
        }
    }
    else if (oldSize === 1) {
        if (newLen < 16) {
            throw new Error("Cannot update box length: box too short");
        }
        buf.set(itobe8(newLen), 8);
        return buf;
    }
    else if (newLen <= MAX_32_BIT_INT) {
        buf.set(byte_parsing_itobe4(newLen), 0);
        return buf;
    }
    else {
        const newBox = new Uint8Array(newLen + 8);
        newBox.set(byte_parsing_itobe4(1), 0);
        newBox.set(buf.subarray(4, 8), 4);
        newBox.set(itobe8(newLen + 8), 8);
        newBox.set(buf.subarray(8, newLen), 16);
        return newBox;
    }
}
/**
 * Parse EMSG boxes from ISOBMFF data.
 * @param {Uint8Array} buffer
 * @returns {Array.<Object> | undefined}
 */
function parseEmsgBoxes(buffer) {
    const emsgs = [];
    let offset = 0;
    while (offset < buffer.length) {
        const emsg = getEMSG(buffer, offset);
        if (emsg === null) {
            break;
        }
        const length = emsg.length;
        offset += length;
        const version = emsg[0];
        if (version !== 0) {
            src_log.warn("ISOBMFF: EMSG version " + version.toString() + " not supported.");
        }
        else {
            let position = 4; // skip version + flags
            const { end: schemeIdEnd, string: schemeIdUri } = readNullTerminatedString(emsg, position);
            position = schemeIdEnd; // skip schemeIdUri
            const { end: valueEnd, string: value } = readNullTerminatedString(emsg, position);
            position = valueEnd; // skip value
            const timescale = be4toi(emsg, position);
            position += 4; // skip timescale
            const presentationTimeDelta = be4toi(emsg, position);
            position += 4; // skip presentationTimeDelta
            const eventDuration = be4toi(emsg, position);
            position += 4; // skip eventDuration
            const id = be4toi(emsg, position);
            position += 4; // skip id
            const messageData = emsg.subarray(position, length);
            const emsgData = { schemeIdUri,
                value,
                timescale,
                presentationTimeDelta,
                eventDuration,
                id,
                messageData };
            emsgs.push(emsgData);
        }
    }
    if (emsgs.length === 0) {
        return undefined;
    }
    return emsgs;
}
/**
 * @param {Uint8Array} segment
 * @returns {Uint8Array|null}
 */
function getKeyIdFromInitSegment(segment) {
    const stsd = getChildBox(segment, [0x6D6F6F76 /* moov */,
        0x7472616B /* trak */,
        0x6D646961 /* mdia */,
        0x6D696E66 /* minf */,
        0x7374626C /* stbl */,
        0x73747364 /* stsd */]);
    if (stsd === null) {
        return null;
    }
    const stsdSubBoxes = stsd.subarray(8);
    let encBox = getBoxContent(stsdSubBoxes, 0x656E6376 /* encv */);
    let encContentOffset = 0;
    if (encBox === null) {
        encContentOffset = 8 + // sample entry header
            8 + // reserved
            2 + // channelcount
            2 + // samplesize
            2 + // predefined
            2 + // reserved
            4; // samplerate
        encBox = getBoxContent(stsdSubBoxes, 0x656E6361 /* enca */);
    }
    else {
        encContentOffset = 8 + // sample entry header
            2 + 2 + 12 + // predefined + reserved + predefined
            2 + 2 + // width + height
            4 + 4 + // horizresolution + vertresolution
            4 + // reserved
            2 + // frame_count
            32 +
            2 + // depth
            2; // pre-defined;
    }
    if (encBox === null) {
        // There's no encryption data here
        return null;
    }
    const tenc = getChildBox(encBox.subarray(encContentOffset), [0x73696e66 /* sinf */,
        0x73636869 /* schi */,
        0x74656e63 /* tenc */]);
    if (tenc === null || tenc.byteLength < 24) {
        return null;
    }
    return tenc.subarray(8, 24);
}


;// CONCATENATED MODULE: ./src/parsers/containers/matroska/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const SEGMENT_ID = 0x18538067;
const INFO_ID = 0x1549A966;
const TIMECODESCALE_ID = 0x2AD7B1;
const DURATION_ID = 0x4489;
const CUES_ID = 0x1C53BB6B;
const CUE_POINT_ID = 0xBB;
const CUE_TIME_ID = 0xB3;
const CUE_TRACK_POSITIONS_ID = 0xB7;
const CUE_CLUSTER_POSITIONS_ID = 0xF1;
/**
 * Find the offsets of the value linked to the given element ID.
 * @param {number} elementID - ID for the searched element.
 * @param {Array.<number>} parents - eventual IDs of the parent elements. From
 * top level to lower level (from the furthest to the closest).
 * @param {Uint8Array} buffer - buffer where the ID will be searched
 * @param {Array.<number>} range - start and end offsets in the buffer where the
 * ID will be searched.
 * @returns {Array.<number>|null}
 */
function findNextElement(elementID, parents, buffer, [initialOffset, maxOffset]) {
    let currentOffset = initialOffset;
    while (currentOffset < maxOffset) {
        const parsedID = getEBMLID(buffer, currentOffset);
        if (parsedID == null) {
            return null;
        }
        const { value: ebmlTagID, length: ebmlTagLength } = parsedID;
        const sizeOffset = currentOffset + ebmlTagLength;
        const parsedValue = getEBMLValue(buffer, sizeOffset);
        if (parsedValue == null) {
            return null;
        }
        const { length: valueLengthLength, value: valueLength } = parsedValue;
        const valueOffset = sizeOffset + valueLengthLength;
        const valueEndOffset = valueOffset + valueLength;
        if (ebmlTagID === elementID) {
            return [valueOffset, valueEndOffset];
        }
        else if (parents.length > 0) {
            for (let i = 0; i < parents.length; i++) {
                if (ebmlTagID === parents[i]) {
                    const newParents = parents.slice(i + 1, parents.length);
                    return findNextElement(elementID, newParents, buffer, [valueOffset, valueEndOffset]);
                }
            }
        }
        currentOffset = valueEndOffset;
    }
    return null;
}
/**
 * Return the timecode scale (basically timescale) of the whole file.
 * @param {Uint8Array} buffer
 * @param {number} initialOffset
 * @returns {number|null}
 */
function getTimeCodeScale(buffer, initialOffset) {
    const timeCodeScaleOffsets = findNextElement(TIMECODESCALE_ID, [SEGMENT_ID, INFO_ID], buffer, [initialOffset, buffer.length]);
    if (timeCodeScaleOffsets == null) {
        return null;
    }
    const length = timeCodeScaleOffsets[1] - timeCodeScaleOffsets[0];
    return 1e9 / bytesToNumber(buffer, timeCodeScaleOffsets[0], length);
}
/**
 * Return the duration of the concerned media.
 * @param {Uint8Array} buffer
 * @param {number} initialOffset
 * @returns {number|null}
 */
function getDuration(buffer, initialOffset) {
    const timeCodeScaleOffsets = findNextElement(DURATION_ID, [SEGMENT_ID, INFO_ID], buffer, [initialOffset, buffer.length]);
    if (timeCodeScaleOffsets == null) {
        return null;
    }
    const length = timeCodeScaleOffsets[1] - timeCodeScaleOffsets[0];
    if (length === 4) {
        return get_IEEE754_32Bits(buffer, timeCodeScaleOffsets[0]);
    }
    else if (length === 8) {
        return get_IEEE754_64Bits(buffer, timeCodeScaleOffsets[0]);
    }
    return null;
}
/**
 * @param {Uint8Array} buffer
 * @param {number} initialOffset
 * @returns {Array.<Object>|null}
 */
function getSegmentsFromCues(buffer, initialOffset) {
    const segmentRange = findNextElement(SEGMENT_ID, [], buffer, [initialOffset, buffer.length]);
    if (segmentRange == null) {
        return null;
    }
    const [segmentRangeStart, segmentRangeEnd] = segmentRange;
    const timescale = getTimeCodeScale(buffer, segmentRangeStart);
    if (timescale == null) {
        return null;
    }
    const duration = getDuration(buffer, segmentRangeStart);
    if (duration == null) {
        return null;
    }
    const cuesRange = findNextElement(CUES_ID, [], buffer, [segmentRangeStart, segmentRangeEnd]);
    if (cuesRange == null) {
        return null;
    }
    const rawInfos = [];
    let currentOffset = cuesRange[0];
    while (currentOffset < cuesRange[1]) {
        const cuePointRange = findNextElement(CUE_POINT_ID, [], buffer, [currentOffset, cuesRange[1]]);
        if (cuePointRange == null) {
            break;
        }
        const cueTimeRange = findNextElement(CUE_TIME_ID, [], buffer, [cuePointRange[0], cuePointRange[1]]);
        if (cueTimeRange == null) {
            return null;
        }
        const time = bytesToNumber(buffer, cueTimeRange[0], cueTimeRange[1] - cueTimeRange[0]);
        const cueOffsetRange = findNextElement(CUE_CLUSTER_POSITIONS_ID, [CUE_TRACK_POSITIONS_ID], buffer, [cuePointRange[0], cuePointRange[1]]);
        if (cueOffsetRange == null) {
            return null;
        }
        const rangeStart = bytesToNumber(buffer, cueOffsetRange[0], cueOffsetRange[1] - cueOffsetRange[0]) +
            segmentRangeStart;
        rawInfos.push({ time, rangeStart });
        currentOffset = cuePointRange[1];
    }
    const segments = [];
    for (let i = 0; i < rawInfos.length; i++) {
        const currentSegment = rawInfos[i];
        if (i === rawInfos.length - 1) {
            segments.push({
                time: currentSegment.time,
                timescale,
                duration: i === 0 ? duration :
                    duration - currentSegment.time,
                range: [currentSegment.rangeStart, Infinity],
            });
        }
        else {
            segments.push({
                time: currentSegment.time,
                timescale,
                duration: rawInfos[i + 1].time - currentSegment.time,
                range: [currentSegment.rangeStart, rawInfos[i + 1].rangeStart - 1],
            });
        }
    }
    return segments;
}
function getLength(buffer, offset) {
    for (let length = 1; length <= 8; length++) {
        if (buffer[offset] >= Math.pow(2, 8 - length)) {
            return length;
        }
    }
    return undefined;
}
function getEBMLID(buffer, offset) {
    const length = getLength(buffer, offset);
    if (length == null) {
        src_log.warn("webm: unrepresentable length");
        return null;
    }
    if (offset + length > buffer.length) {
        src_log.warn("webm: impossible length");
        return null;
    }
    let value = 0;
    for (let i = 0; i < length; i++) {
        value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
    }
    return { length, value };
}
function getEBMLValue(buffer, offset) {
    const length = getLength(buffer, offset);
    if (length == null) {
        src_log.warn("webm: unrepresentable length");
        return null;
    }
    if (offset + length > buffer.length) {
        src_log.warn("webm: impossible length");
        return null;
    }
    let value = (buffer[offset] & (1 << (8 - length)) - 1) *
        Math.pow(2, (length - 1) * 8);
    for (let i = 1; i < length; i++) {
        value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
    }
    return { length, value };
}
/**
 * Convert a IEEE754 32 bits floating number as an Uint8Array into its
 * corresponding Number.
 * @param {Uint8Array} buffer
 * @param {number} offset
 * @returns {number}
 */
function get_IEEE754_32Bits(buffer, offset) {
    return new DataView(buffer.buffer).getFloat32(offset);
}
/**
 * Convert a IEEE754 64 bits floating number as an Uint8Array into its
 * corresponding Number.
 * @param {Uint8Array} buffer
 * @param {number} offset
 * @returns {number}
 */
function get_IEEE754_64Bits(buffer, offset) {
    return new DataView(buffer.buffer).getFloat64(offset);
}
function bytesToNumber(buffer, offset, length) {
    let value = 0;
    for (let i = 0; i < length; i++) {
        value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
    }
    return value;
}

;// CONCATENATED MODULE: ./src/transports/utils/get_isobmff_timing_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get precize start and duration of a chunk.
 * @param {UInt8Array} buffer - An ISOBMFF container (at least a `moof` + a
 * `mdat` box.
 * @param {Boolean} isChunked - If true, the whole segment was chunked into
 * multiple parts and buffer is one of them. If false, buffer is the whole
 * segment.
 * @param {Object} segment
 * @param {Array.<Object>|undefined} sidxSegments - Segments from sidx. Here
 * pre-parsed for performance reasons as it is usually available when
 * this function is called.
 * @param {number|undefined} initTimescale
 * @returns {Object}
 */
function getISOBMFFTimingInfos(buffer, isChunked, segment, initTimescale) {
    const baseDecodeTime = getTrackFragmentDecodeTime(buffer);
    if (baseDecodeTime === undefined || initTimescale === undefined) {
        return null;
    }
    let startTime = segment.timestampOffset !== undefined ?
        baseDecodeTime + (segment.timestampOffset * initTimescale) :
        baseDecodeTime;
    let trunDuration = getDurationFromTrun(buffer);
    if (startTime < 0) {
        if (trunDuration !== undefined) {
            trunDuration += startTime; // remove from duration what comes before `0`
        }
        startTime = 0;
    }
    if (isChunked || !segment.complete) {
        if (trunDuration === undefined) {
            src_log.warn("DASH: Chunked segments should indicate a duration through their" +
                " trun boxes");
        }
        return { time: startTime / initTimescale,
            duration: trunDuration !== undefined ? trunDuration / initTimescale :
                undefined };
    }
    let duration;
    const segmentDuration = segment.duration * initTimescale;
    // we could always make a mistake when reading a container.
    // If the estimate is too far from what the segment seems to imply, take
    // the segment infos instead.
    const maxDecodeTimeDelta = Math.min(initTimescale * 0.9, segmentDuration / 4);
    if (trunDuration !== undefined &&
        Math.abs(trunDuration - segmentDuration) <= maxDecodeTimeDelta) {
        duration = trunDuration;
    }
    return { time: startTime / initTimescale,
        duration: duration !== undefined ? duration / initTimescale :
            duration };
}

;// CONCATENATED MODULE: ./src/transports/dash/get_events_out_of_emsgs.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * From an array of EMSGs with manifest validity scheme id,
 * tells if the manifest needs to be refreshed.
 * @param {Array.<Object>} emsgs
 * @param {Object} segment
 * @param {number} manifestPublishTime
 * @returns {boolean}
 */
function manifestNeedsToBeRefreshed(emsgs, manifestPublishTime) {
    if (emsgs.length <= 0) {
        return false;
    }
    const len = emsgs.length;
    for (let i = 0; i < len; i++) {
        const manifestRefreshEventFromEMSGs = emsgs[i];
        const currentManifestPublishTime = manifestPublishTime;
        const { messageData } = manifestRefreshEventFromEMSGs;
        const strPublishTime = utf8ToStr(messageData);
        const eventManifestPublishTime = Date.parse(strPublishTime);
        if (currentManifestPublishTime === undefined ||
            eventManifestPublishTime === undefined ||
            isNaN(eventManifestPublishTime) ||
            // DASH-if 4.3 tells (4.5.2.1) :
            // "The media presentation time beyond the event time (indicated
            // time by presentation_time_delta) is correctly described only
            // by MPDs with publish time greater than indicated value in the
            // message_data field."
            //
            // Here, if the current manifest has its publish time inferior or
            // identical to the event manifest publish time, then the manifest needs
            // to be updated
            eventManifestPublishTime >= currentManifestPublishTime) {
            return true;
        }
    }
    return false;
}
/**
 * Get wrapped inband events and manifest refresh event from
 * parsed ISOBMFF EMSG boxes.
 * @param {Array.<Object>} parsedEMSGs
 * @param {undefined | number} manifestPublishTime
 * @returns {Object}
 */
function getEventsOutOfEMSGs(parsedEMSGs, manifestPublishTime) {
    if (parsedEMSGs.length === 0) {
        return undefined;
    }
    const { manifestRefreshEventsFromEMSGs, EMSGs } = parsedEMSGs
        .reduce((acc, val) => {
        // Scheme that signals manifest update
        if (val.schemeIdUri === "urn:mpeg:dash:event:2012" &&
            // TODO support value 2 and 3
            val.value === "1") {
            if (acc.manifestRefreshEventsFromEMSGs === undefined) {
                acc.manifestRefreshEventsFromEMSGs = [];
            }
            acc.manifestRefreshEventsFromEMSGs.push(val);
        }
        else {
            if (acc.EMSGs === undefined) {
                acc.EMSGs = [];
            }
            acc.EMSGs.push(val);
        }
        return acc;
    }, { manifestRefreshEventsFromEMSGs: undefined,
        EMSGs: undefined });
    const inbandEvents = EMSGs === null || EMSGs === void 0 ? void 0 : EMSGs.map((evt) => ({ type: "emsg",
        value: evt }));
    const needsManifestRefresh = (manifestPublishTime === undefined ||
        manifestRefreshEventsFromEMSGs === undefined) ?
        false :
        manifestNeedsToBeRefreshed(manifestRefreshEventsFromEMSGs, manifestPublishTime);
    return { inbandEvents, needsManifestRefresh };
}

;// CONCATENATED MODULE: ./src/transports/dash/segment_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * @param {Object} config
 * @returns {Function}
 */
function generateAudioVideoSegmentParser({ __priv_patchLastSegmentInSidx }) {
    return function audioVideoSegmentParser(loadedSegment, content, initTimescale) {
        var _a;
        const { period, adaptation, representation, segment, manifest } = content;
        const { data, isChunked } = loadedSegment;
        const appendWindow = [period.start, period.end];
        if (data === null) {
            if (segment.isInit) {
                return { segmentType: "init",
                    initializationData: null,
                    initializationDataSize: 0,
                    protectionDataUpdate: false,
                    initTimescale: undefined };
            }
            return { segmentType: "media",
                chunkData: null,
                chunkSize: 0,
                chunkInfos: null,
                chunkOffset: 0,
                protectionDataUpdate: false,
                appendWindow };
        }
        const chunkData = data instanceof Uint8Array ? data :
            new Uint8Array(data);
        const containerType = inferSegmentContainer(adaptation.type, representation);
        // TODO take a look to check if this is an ISOBMFF/webm?
        const seemsToBeMP4 = containerType === "mp4" || containerType === undefined;
        let protectionDataUpdate = false;
        if (seemsToBeMP4) {
            const psshInfo = takePSSHOut(chunkData);
            let keyId;
            if (segment.isInit) {
                keyId = (_a = getKeyIdFromInitSegment(chunkData)) !== null && _a !== void 0 ? _a : undefined;
            }
            if (psshInfo.length > 0 || keyId !== undefined) {
                protectionDataUpdate = representation._addProtectionData("cenc", keyId, psshInfo);
            }
        }
        if (!segment.isInit) {
            const chunkInfos = seemsToBeMP4 ? getISOBMFFTimingInfos(chunkData, isChunked, segment, initTimescale) :
                null; // TODO extract time info from webm
            const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
            if (seemsToBeMP4) {
                const parsedEMSGs = parseEmsgBoxes(chunkData);
                if (parsedEMSGs !== undefined) {
                    const whitelistedEMSGs = parsedEMSGs.filter((evt) => {
                        if (segment.privateInfos === undefined ||
                            segment.privateInfos.isEMSGWhitelisted === undefined) {
                            return false;
                        }
                        return segment.privateInfos.isEMSGWhitelisted(evt);
                    });
                    const events = getEventsOutOfEMSGs(whitelistedEMSGs, manifest.publishTime);
                    if (events !== undefined) {
                        const { needsManifestRefresh, inbandEvents } = events;
                        return { segmentType: "media",
                            chunkData,
                            chunkSize: chunkData.length,
                            chunkInfos,
                            chunkOffset,
                            appendWindow,
                            inbandEvents,
                            protectionDataUpdate,
                            needsManifestRefresh };
                    }
                }
            }
            return { segmentType: "media",
                chunkData,
                chunkSize: chunkData.length,
                chunkInfos,
                chunkOffset,
                protectionDataUpdate,
                appendWindow };
        }
        // we're handling an initialization segment
        const { indexRange } = segment;
        let nextSegments = null;
        if (containerType === "webm") {
            nextSegments = getSegmentsFromCues(chunkData, 0);
        }
        else if (seemsToBeMP4) {
            nextSegments = getSegmentsFromSidx(chunkData, Array.isArray(indexRange) ?
                indexRange[0] :
                0);
            // This is a very specific handling for streams we know have a very
            // specific problem at Canal+: The last reference gives a truncated
            // segment.
            // Sadly, people on the packaging side could not fix all legacy contents.
            // This is an easy-but-ugly fix for those.
            // TODO Cleaner way? I tried to always check the obtained segment after
            // a byte-range request but it leads to a lot of code.
            if (__priv_patchLastSegmentInSidx === true &&
                nextSegments !== null &&
                nextSegments.length > 0) {
                const lastSegment = nextSegments[nextSegments.length - 1];
                if (Array.isArray(lastSegment.range)) {
                    lastSegment.range[1] = Infinity;
                }
            }
        }
        if (representation.index instanceof BaseRepresentationIndex &&
            nextSegments !== null &&
            nextSegments.length > 0) {
            representation.index.initializeIndex(nextSegments);
        }
        const timescale = seemsToBeMP4 ? getMDHDTimescale(chunkData) :
            containerType === "webm" ? getTimeCodeScale(chunkData, 0) :
                undefined;
        const parsedTimescale = isNullOrUndefined(timescale) ? undefined :
            timescale;
        return { segmentType: "init",
            initializationData: chunkData,
            initializationDataSize: chunkData.length,
            protectionDataUpdate,
            initTimescale: parsedTimescale };
    };
}

;// CONCATENATED MODULE: ./src/transports/dash/text_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Perform requests for "text" segments
 * @param {boolean} lowLatencyMode
 * @returns {Function}
 */
function generateTextTrackLoader({ lowLatencyMode, checkMediaSegmentIntegrity }) {
    return checkMediaSegmentIntegrity !== true ? textTrackLoader :
        addSegmentIntegrityChecks(textTrackLoader);
    /**
     * @param {Object|null} wantedCdn
     * @param {Object} content
     * @param {Object} options
     * @param {Object} cancelSignal
     * @param {Object} callbacks
     * @returns {Promise}
     */
    function textTrackLoader(wantedCdn, content, options, cancelSignal, callbacks) {
        const { adaptation, representation, segment } = content;
        const { range } = segment;
        const url = constructSegmentUrl(wantedCdn, segment);
        if (url === null) {
            return Promise.resolve({ resultType: "segment-created",
                resultData: null });
        }
        if (segment.isInit) {
            return initSegmentLoader(url, segment, options, cancelSignal, callbacks);
        }
        const containerType = inferSegmentContainer(adaptation.type, representation);
        const seemsToBeMP4 = containerType === "mp4" || containerType === undefined;
        if (lowLatencyMode && seemsToBeMP4) {
            if (fetchIsSupported()) {
                return lowLatencySegmentLoader(url, content, options, callbacks, cancelSignal);
            }
            else {
                warnOnce("DASH: Your browser does not have the fetch API. You will have " +
                    "a higher chance of rebuffering when playing close to the live edge");
            }
        }
        if (seemsToBeMP4) {
            return utils_request({ url,
                responseType: "arraybuffer",
                headers: Array.isArray(range) ?
                    { Range: byteRange(range) } :
                    null,
                timeout: options.timeout,
                onProgress: callbacks.onProgress,
                cancelSignal })
                .then((data) => ({ resultType: "segment-loaded",
                resultData: data }));
        }
        return utils_request({ url,
            responseType: "text",
            headers: Array.isArray(range) ?
                { Range: byteRange(range) } :
                null,
            timeout: options.timeout,
            onProgress: callbacks.onProgress,
            cancelSignal })
            .then((data) => ({ resultType: "segment-loaded",
            resultData: data }));
    }
}

;// CONCATENATED MODULE: ./src/transports/utils/parse_text_track.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Return plain text text track from the given ISOBMFF.
 * @param {Uint8Array} chunkBytes
 * @returns {string}
 */
function extractTextTrackFromISOBMFF(chunkBytes) {
    const mdat = getMDAT(chunkBytes);
    return mdat === null ? "" :
        utf8ToStr(mdat);
}
/**
 * Returns the a string expliciting the format of a text track when that text
 * track is embedded into a ISOBMFF file.
 * @param {Object} representation
 * @returns {string}
 */
function getISOBMFFTextTrackFormat(representation) {
    const codec = representation.codec;
    if (codec === undefined) {
        throw new Error("Cannot parse subtitles: unknown format");
    }
    switch (codec.toLowerCase()) {
        case "stpp": // stpp === TTML in MP4
        case "stpp.ttml.im1t":
            return "ttml";
        case "wvtt": // wvtt === WebVTT in MP4
            return "vtt";
    }
    throw new Error("The codec used for the subtitles " +
        `"${codec}" is not managed yet.`);
}
/**
 * Returns the a string expliciting the format of a text track in plain text.
 * @param {Object} representation
 * @returns {string}
 */
function getPlainTextTrackFormat(representation) {
    const { mimeType = "" } = representation;
    switch (representation.mimeType) {
        case "application/ttml+xml":
            return "ttml";
        case "application/x-sami":
        case "application/smil":
            return "sami";
        case "text/vtt":
            return "vtt";
    }
    const { codec = "" } = representation;
    const codeLC = codec.toLowerCase();
    if (codeLC === "srt") {
        return "srt";
    }
    throw new Error(`could not find a text-track parser for the type ${mimeType}`);
}
/**
 * @param {Object} content
 * @param {ArrayBuffer|UInt8Array|null} chunkData
 * @param {Object|null} chunkInfos
 * @param {boolean} isChunked
 * @returns {Object|null}
 */
function getISOBMFFEmbeddedTextTrackData({ segment, adaptation, representation }, chunkBytes, chunkInfos, isChunked) {
    if (segment.isInit) {
        return null;
    }
    let startTime;
    let endTime;
    if (chunkInfos === null) {
        if (!isChunked) {
            src_log.warn("Transport: Unavailable time data for current text track.");
        }
        else {
            startTime = segment.time;
            endTime = segment.end;
        }
    }
    else {
        startTime = chunkInfos.time;
        if (chunkInfos.duration !== undefined) {
            endTime = startTime + chunkInfos.duration;
        }
        else if (!isChunked && segment.complete) {
            endTime = startTime + segment.duration;
        }
    }
    const type = getISOBMFFTextTrackFormat(representation);
    const textData = extractTextTrackFromISOBMFF(chunkBytes);
    return { data: textData,
        type,
        language: adaptation.language,
        start: startTime,
        end: endTime };
}
/**
 * @param {Object} content
 * @param {ArrayBuffer|UInt8Array|null} chunkData
 * @param {Object|null} chunkInfos
 * @param {boolean} isChunked
 * @returns {Object|null}
 */
function getPlainTextTrackData({ segment, adaptation, representation }, textTrackData, isChunked) {
    if (segment.isInit) {
        return null;
    }
    let start;
    let end;
    if (isChunked) {
        src_log.warn("Transport: Unavailable time data for current text track.");
    }
    else {
        start = segment.time;
        if (segment.complete) {
            end = segment.time + segment.duration;
        }
    }
    const type = getPlainTextTrackFormat(representation);
    return { data: textTrackData,
        type,
        language: adaptation.language,
        start,
        end };
}

;// CONCATENATED MODULE: ./src/transports/dash/text_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Parse TextTrack data when it is embedded in an ISOBMFF file.
 *
 * @param {ArrayBuffer|Uint8Array|string} data - The segment data.
 * @param {boolean} isChunked - If `true`, the `data` may contain only a
 * decodable subpart of the full data in the linked segment.
 * @param {Object} content - Object describing the context of the given
 * segment's data: of which segment, `Representation`, `Adaptation`, `Period`,
 * `Manifest` it is a part of etc.
 * @param {number|undefined} initTimescale - `timescale` value - encountered
 * in this linked initialization segment (if it exists) - that may also apply
 * to that segment if no new timescale is defined in it.
 * Can be `undefined` if no timescale was defined, if it is not known, or if
 * no linked initialization segment was yet parsed.
 * @param {boolean} __priv_patchLastSegmentInSidx - Enable ugly Canal+-specific
 * fix for an issue people on the content-packaging side could not fix.
 * For more information on that, look at the code using it.
 * @returns {Observable.<Object>}
 */
function parseISOBMFFEmbeddedTextTrack(data, isChunked, content, initTimescale, __priv_patchLastSegmentInSidx) {
    const { period, representation, segment } = content;
    const { isInit, indexRange } = segment;
    const chunkBytes = typeof data === "string" ? strToUtf8(data) :
        data instanceof Uint8Array ? data :
            new Uint8Array(data);
    if (isInit) {
        const sidxSegments = getSegmentsFromSidx(chunkBytes, Array.isArray(indexRange) ? indexRange[0] :
            0);
        // This is a very specific handling for streams we know have a very
        // specific problem at Canal+: The last reference gives a truncated
        // segment.
        // Sadly, people on the packaging side could not fix all legacy contents.
        // This is an easy-but-ugly fix for those.
        // TODO Cleaner way? I tried to always check the obtained segment after
        // a byte-range request but it leads to a lot of code.
        if (__priv_patchLastSegmentInSidx === true &&
            sidxSegments !== null &&
            sidxSegments.length > 0) {
            const lastSegment = sidxSegments[sidxSegments.length - 1];
            if (Array.isArray(lastSegment.range)) {
                lastSegment.range[1] = Infinity;
            }
        }
        const mdhdTimescale = getMDHDTimescale(chunkBytes);
        if (representation.index instanceof BaseRepresentationIndex &&
            sidxSegments !== null &&
            sidxSegments.length > 0) {
            representation.index.initializeIndex(sidxSegments);
        }
        return { segmentType: "init",
            initializationData: null,
            initializationDataSize: 0,
            protectionDataUpdate: false,
            initTimescale: mdhdTimescale };
    }
    const chunkInfos = getISOBMFFTimingInfos(chunkBytes, isChunked, segment, initTimescale);
    const chunkData = getISOBMFFEmbeddedTextTrackData(content, chunkBytes, chunkInfos, isChunked);
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    return { segmentType: "media",
        chunkData,
        chunkSize: chunkBytes.length,
        chunkInfos,
        chunkOffset,
        protectionDataUpdate: false,
        appendWindow: [period.start, period.end] };
}
/**
 * Parse TextTrack data when it is in plain text form.
 *
 * @param {ArrayBuffer|Uint8Array|string} data - The segment data.
 * @param {boolean} isChunked - If `true`, the `data` may contain only a
 * decodable subpart of the full data in the linked segment.
 * @param {Object} content - Object describing the context of the given
 * segment's data: of which segment, `Representation`, `Adaptation`, `Period`,
 * `Manifest` it is a part of etc.
 * @returns {Observable.<Object>}
 */
function parsePlainTextTrack(data, isChunked, content) {
    const { period, segment } = content;
    const { timestampOffset = 0 } = segment;
    if (segment.isInit) {
        return { segmentType: "init",
            initializationData: null,
            initializationDataSize: 0,
            protectionDataUpdate: false,
            initTimescale: undefined };
    }
    let textTrackData;
    let chunkSize;
    if (typeof data !== "string") {
        const bytesData = data instanceof Uint8Array ? data :
            new Uint8Array(data);
        textTrackData = utf8ToStr(bytesData);
        chunkSize = bytesData.length;
    }
    else {
        textTrackData = data;
    }
    const chunkData = getPlainTextTrackData(content, textTrackData, isChunked);
    return { segmentType: "media",
        chunkData,
        chunkSize,
        chunkInfos: null,
        chunkOffset: timestampOffset,
        protectionDataUpdate: false,
        appendWindow: [period.start, period.end] };
}
/**
 * Generate a "segment parser" for DASH text tracks.
 *
 * @param {Object} config
 * @returns {Function}
 */
function generateTextTrackParser({ __priv_patchLastSegmentInSidx }) {
    /**
     * Parse TextTrack data.
     * @param {Object} loadedSegment
     * @param {Object} content
     * @param {number|undefined} initTimescale
     * @returns {Observable.<Object>}
     */
    return function textTrackParser(loadedSegment, content, initTimescale) {
        var _a;
        const { period, adaptation, representation, segment } = content;
        const { data, isChunked } = loadedSegment;
        if (data === null) {
            // No data, just return an empty placeholder object
            return segment.isInit ? { segmentType: "init",
                initializationData: null,
                initializationDataSize: 0,
                protectionDataUpdate: false,
                initTimescale: undefined } :
                { segmentType: "media",
                    chunkData: null,
                    chunkSize: 0,
                    chunkInfos: null,
                    chunkOffset: (_a = segment.timestampOffset) !== null && _a !== void 0 ? _a : 0,
                    protectionDataUpdate: false,
                    appendWindow: [period.start, period.end] };
        }
        const containerType = inferSegmentContainer(adaptation.type, representation);
        // TODO take a look to check if this is an ISOBMFF/webm when undefined?
        if (containerType === "webm") {
            // TODO Handle webm containers
            throw new Error("Text tracks with a WEBM container are not yet handled.");
        }
        else if (containerType === "mp4") {
            return parseISOBMFFEmbeddedTextTrack(data, isChunked, content, initTimescale, __priv_patchLastSegmentInSidx);
        }
        else {
            return parsePlainTextTrack(data, isChunked, content);
        }
    };
}

;// CONCATENATED MODULE: ./src/transports/dash/pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * Returns pipelines used for DASH streaming.
 * @param {Object} options
 * implementation. Used for each generated http request.
 * @returns {Object}
 */
/* harmony default export */ function pipelines(options) {
    const manifestLoader = generateManifestLoader({ customManifestLoader: options.manifestLoader }, mightUseDashWasmFeature() ? "text" :
        "arraybuffer");
    const manifestParser = generateManifestParser(options);
    const segmentLoader = generateSegmentLoader(options);
    const audioVideoSegmentParser = generateAudioVideoSegmentParser(options);
    const textTrackLoader = generateTextTrackLoader(options);
    const textTrackParser = generateTextTrackParser(options);
    return { manifest: { loadManifest: manifestLoader,
            parseManifest: manifestParser },
        audio: { loadSegment: segmentLoader,
            parseSegment: audioVideoSegmentParser },
        video: { loadSegment: segmentLoader,
            parseSegment: audioVideoSegmentParser },
        text: { loadSegment: textTrackLoader,
            parseSegment: textTrackParser },
        image: { loadSegment: imageLoader,
            parseSegment: imageParser } };
}
/**
 * Returns true if the DASH-WASM parser is either initialized or being
 * initialized.
 * @returns {boolean}
 */
function mightUseDashWasmFeature() {
    return src_features.dashParsers.wasm !== null &&
        (src_features.dashParsers.wasm.status === "initialized" ||
            src_features.dashParsers.wasm.status === "initializing");
}

;// CONCATENATED MODULE: ./src/transports/dash/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const dash = (pipelines);

;// CONCATENATED MODULE: ./src/features/list/dash.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Add ability to play DASH contents.
 * @param {Object} features
 */
function addDASHFeature(features) {
    if (features.transports.dash === undefined) {
        features.transports.dash = dash;
    }
    features.dashParsers.js = js_parser;
}

/* harmony default export */ const list_dash = ((/* unused pure expression or super */ null && (addDASHFeature)));

;// CONCATENATED MODULE: ./src/compat/enable_audio_track.ts

/**
 * Enable the audio track at the given index while disabling all others in the
 * `audioTracks` array.
 *
 * Returns false if the given index is not found in the `audioTracks` array.
 * @param {array.<audioTrack>} audioTracks
 * @param {number} indexToEnable
 * @returns {boolean}
 */
function enableAudioTrack(audioTracks, indexToEnable) {
    // Seen on Safari MacOS only (2022-02-14), not disabling ALL audio tracks
    // first (even the wanted one), can lead to the media not playing.
    for (let i = 0; i < audioTracks.length; i++) {
        // However, Tizen just plays no audio if it is disabled then enabled
        // synchronously (2022-10-12)
        if (!isTizen || i !== indexToEnable) {
            audioTracks[i].enabled = false;
        }
    }
    if (indexToEnable < 0 || indexToEnable >= audioTracks.length) {
        return false;
    }
    audioTracks[indexToEnable].enabled = true;
    return true;
}

;// CONCATENATED MODULE: ./src/core/api/tracks_management/media_element_track_choice_manager.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */



/**
 * Check if track array is different from an other one
 * @param {Array.<Object>} oldTrackArray
 * @param {Array.<Object>} newTrackArray
 * @returns {boolean}
 */
function areTrackArraysDifferent(oldTrackArray, newTrackArray) {
    var _a;
    if (newTrackArray.length !== oldTrackArray.length) {
        return true;
    }
    for (let i = 0; i < newTrackArray.length; i++) {
        if (newTrackArray[i].nativeTrack !== ((_a = oldTrackArray[i]) === null || _a === void 0 ? void 0 : _a.nativeTrack)) {
            return true;
        }
    }
    return false;
}
/**
 * Create audio tracks from native audio tracks.
 * @param {AudioTrackList} audioTracks
 * @returns {Array.<Object>}
 */
function createAudioTracks(audioTracks) {
    var _a;
    const newAudioTracks = [];
    const languagesOccurences = {};
    for (let i = 0; i < audioTracks.length; i++) {
        const audioTrack = audioTracks[i];
        const language = audioTrack.language === "" ? "nolang" :
            audioTrack.language;
        const occurences = (_a = languagesOccurences[language]) !== null && _a !== void 0 ? _a : 1;
        const id = "gen_audio_" +
            language +
            "_" +
            occurences.toString();
        languagesOccurences[language] = occurences + 1;
        const track = { language: audioTrack.language,
            id,
            normalized: languages(audioTrack.language),
            audioDescription: audioTrack.kind === "descriptions" ||
                // Safari seem to prefer the non-standard singular
                // version, funnily enough
                audioTrack.kind === "description",
            representations: [] };
        newAudioTracks.push({ track,
            nativeTrack: audioTrack });
    }
    return newAudioTracks;
}
/**
 * Create text tracks from native text tracks.
 * @param {TextTrackList} textTracks
 * @returns {Array.<Object>}
 */
function createTextTracks(textTracks) {
    var _a;
    const newTextTracks = [];
    const languagesOccurences = {};
    for (let i = 0; i < textTracks.length; i++) {
        const textTrack = textTracks[i];
        const language = textTrack.language === "" ? "nolang" :
            textTrack.language;
        const occurences = (_a = languagesOccurences[language]) !== null && _a !== void 0 ? _a : 1;
        const id = "gen_text_" +
            language +
            "_" +
            occurences.toString();
        languagesOccurences[language] = occurences + 1;
        const track = { language: textTrack.language,
            id,
            normalized: languages(textTrack.language),
            closedCaption: textTrack.kind === "captions" };
        newTextTracks.push({ track,
            nativeTrack: textTrack });
    }
    return newTextTracks;
}
/**
 * Create video tracks from native video tracks.
 * @param {VideoTrackList} videoTracks
 * @returns {Array.<Object>}
 */
function createVideoTracks(videoTracks) {
    var _a;
    const newVideoTracks = [];
    const languagesOccurences = {};
    for (let i = 0; i < videoTracks.length; i++) {
        const videoTrack = videoTracks[i];
        const language = videoTrack.language === "" ? "nolang" :
            videoTrack.language;
        const occurences = (_a = languagesOccurences[language]) !== null && _a !== void 0 ? _a : 1;
        const id = "gen_video_" +
            language +
            "_" +
            occurences.toString();
        languagesOccurences[language] = occurences + 1;
        newVideoTracks.push({ track: { id,
                representations: [] },
            nativeTrack: videoTrack });
    }
    return newVideoTracks;
}
/**
 * Manage video, audio and text tracks for current direct file content.
 * @class MediaElementTrackChoiceManager
 */
class MediaElementTrackChoiceManager extends EventEmitter {
    constructor(mediaElement) {
        var _a, _b, _c;
        super();
        this._preferredAudioTracks = [];
        this._preferredTextTracks = [];
        this._preferredVideoTracks = [];
        // TODO In practice, the audio/video/text tracks API are not always implemented on
        // the media element, although Typescript HTMLMediaElement types tend to mean
        // that can't be undefined.
        this._nativeAudioTracks = mediaElement.audioTracks;
        this._nativeVideoTracks = mediaElement.videoTracks;
        this._nativeTextTracks = mediaElement.textTracks;
        this._audioTracks =
            this._nativeAudioTracks !== undefined ? createAudioTracks(this._nativeAudioTracks) :
                [];
        this._videoTracks =
            this._nativeVideoTracks !== undefined ? createVideoTracks(this._nativeVideoTracks) :
                [];
        this._textTracks =
            this._nativeTextTracks !== undefined ? createTextTracks(this._nativeTextTracks) :
                [];
        this._lastEmittedNativeAudioTrack = (_a = this._getPrivateChosenAudioTrack()) === null || _a === void 0 ? void 0 : _a.nativeTrack;
        this._lastEmittedNativeVideoTrack = (_b = this._getPrivateChosenVideoTrack()) === null || _b === void 0 ? void 0 : _b.nativeTrack;
        this._lastEmittedNativeTextTrack = (_c = this._getPrivateChosenTextTrack()) === null || _c === void 0 ? void 0 : _c.nativeTrack;
        this._handleNativeTracksCallbacks();
    }
    /**
     * Set the list of preferred audio tracks, in preference order.
     * @param {Array.<Object>} preferredAudioTracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredAudioTracks(preferredAudioTracks, shouldApply) {
        this._preferredAudioTracks = preferredAudioTracks;
        if (shouldApply) {
            this._applyAudioPreferences();
        }
    }
    /**
     * Set the list of preferred text tracks, in preference order.
     * @param {Array.<Object>} preferredTextTracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredTextTracks(preferredTextTracks, shouldApply) {
        this._preferredTextTracks = preferredTextTracks;
        if (shouldApply) {
            this._applyTextPreferences();
        }
    }
    /**
     * Set the list of preferred video tracks, in preference order.
     * @param {Array.<Object>} preferredVideoTracks
     * @param {boolean} shouldApply - `true` if those preferences should be
     * applied on the currently loaded Period. `false` if it should only
     * be applied to new content.
     */
    setPreferredVideoTracks(preferredVideoTracks, shouldApply) {
        this._preferredVideoTracks = preferredVideoTracks;
        if (shouldApply) {
            this._applyVideoPreferences();
        }
    }
    /**
     * Update the currently active audio track by setting the wanted audio track's
     * ID property.
     * Throws if the wanted audio track is not found.
     * @param {string|number|undefined} id
     */
    setAudioTrackById(id) {
        for (let i = 0; i < this._audioTracks.length; i++) {
            const { track, nativeTrack } = this._audioTracks[i];
            if (track.id === id) {
                this._enableAudioTrackFromIndex(i);
                this._audioTrackLockedOn = nativeTrack;
                return;
            }
        }
        throw new Error("Audio track not found.");
    }
    /**
     * Disable the currently-active text track, if one.
     */
    disableTextTrack() {
        disableTextTracks(this._textTracks);
        this._textTrackLockedOn = null;
    }
    /**
     * Update the currently active text track by setting the wanted text track's
     * ID property.
     * Throws if the wanted text track is not found.
     * @param {string|number|undefined} id
     */
    setTextTrackById(id) {
        let hasSetTrack = false;
        for (let i = 0; i < this._textTracks.length; i++) {
            const { track, nativeTrack } = this._textTracks[i];
            if (track.id === id) {
                nativeTrack.mode = "showing";
                hasSetTrack = true;
                this._textTrackLockedOn = nativeTrack;
            }
            else if (nativeTrack.mode === "showing" || nativeTrack.mode === "hidden") {
                nativeTrack.mode = "disabled";
            }
        }
        if (!hasSetTrack) {
            throw new Error("Text track not found.");
        }
    }
    /**
     * Disable the currently-active video track, if one.
     */
    disableVideoTrack() {
        disableVideoTracks(this._videoTracks);
        this._videoTrackLockedOn = null;
    }
    /**
     * Update the currently active video track by setting the wanted video track's
     * ID property.
     * Throws if the wanted video track is not found.
     * @param {string|number|undefined} id
     */
    setVideoTrackById(id) {
        for (let i = 0; i < this._videoTracks.length; i++) {
            const { track, nativeTrack } = this._videoTracks[i];
            if (track.id === id) {
                nativeTrack.selected = true;
                this._videoTrackLockedOn = nativeTrack;
                return;
            }
        }
        throw new Error("Video track not found.");
    }
    /**
     * Returns the currently active audio track.
     * Returns `null` if no audio track is active.
     * Returns `undefined` if we cannot know which audio track is active.
     * @returns {Object|null|undefined}
     */
    getChosenAudioTrack() {
        const chosenPrivateAudioTrack = this._getPrivateChosenAudioTrack();
        if (chosenPrivateAudioTrack != null) {
            return chosenPrivateAudioTrack.track;
        }
        return chosenPrivateAudioTrack;
    }
    /**
     * Returns the currently active text track.
     * Returns `null` if no text track is active.
     * Returns `undefined` if we cannot know which text track is active.
     * @returns {Object|null|undefined}
     */
    getChosenTextTrack() {
        const chosenPrivateTextTrack = this._getPrivateChosenTextTrack();
        if (chosenPrivateTextTrack != null) {
            return chosenPrivateTextTrack.track;
        }
        return chosenPrivateTextTrack;
    }
    /**
     * Returns the currently active video track.
     * Returns `null` if no video track is active.
     * Returns `undefined` if we cannot know which video track is active.
     * @returns {Object|null|undefined}
     */
    getChosenVideoTrack() {
        const chosenPrivateVideoTrack = this._getPrivateChosenVideoTrack();
        if (chosenPrivateVideoTrack != null) {
            return chosenPrivateVideoTrack.track;
        }
        return chosenPrivateVideoTrack;
    }
    /**
     * Returns a description of every available audio tracks.
     * @returns {Array.<Object>}
     */
    getAvailableAudioTracks() {
        return this._audioTracks.map(({ track, nativeTrack }) => {
            return { id: track.id,
                language: track.language,
                normalized: track.normalized,
                audioDescription: track.audioDescription,
                active: nativeTrack.enabled,
                representations: track.representations };
        });
    }
    /**
     * Returns a description of every available text tracks.
     * @returns {Array.<Object>}
     */
    getAvailableTextTracks() {
        return this._textTracks.map(({ track, nativeTrack }) => {
            return { id: track.id,
                language: track.language,
                normalized: track.normalized,
                closedCaption: track.closedCaption,
                active: nativeTrack.mode === "showing" };
        });
    }
    /**
     * Returns a description of every available video tracks.
     * @returns {Array.<Object>}
     */
    getAvailableVideoTracks() {
        return this._videoTracks.map(({ track, nativeTrack }) => {
            return { id: track.id,
                representations: track.representations,
                active: nativeTrack.selected };
        });
    }
    /**
     * Free the resources used by the MediaElementTrackChoiceManager.
     */
    dispose() {
        if (this._nativeVideoTracks !== undefined) {
            this._nativeVideoTracks.onchange = null;
            this._nativeVideoTracks.onaddtrack = null;
            this._nativeVideoTracks.onremovetrack = null;
        }
        if (this._nativeAudioTracks !== undefined) {
            this._nativeAudioTracks.onchange = null;
            this._nativeAudioTracks.onaddtrack = null;
            this._nativeAudioTracks.onremovetrack = null;
        }
        if (this._nativeTextTracks !== undefined) {
            this._nativeTextTracks.onchange = null;
            this._nativeTextTracks.onaddtrack = null;
            this._nativeTextTracks.onremovetrack = null;
        }
        this.removeEventListener();
    }
    /**
     * Get information about the currently chosen audio track.
     * `undefined` if we cannot know it.
     * `null` if no audio track is chosen.
     * @returns {Object|undefined|null}
     */
    _getPrivateChosenAudioTrack() {
        if (this._nativeAudioTracks === undefined) {
            return undefined;
        }
        for (let i = 0; i < this._audioTracks.length; i++) {
            const audioTrack = this._audioTracks[i];
            if (audioTrack.nativeTrack.enabled) {
                return audioTrack;
            }
        }
        return null;
    }
    /**
     * Get information about the currently chosen video track.
     * `undefined` if we cannot know it.
     * `null` if no video track is chosen.
     * @returns {Object|undefined|null}
     */
    _getPrivateChosenVideoTrack() {
        if (this._nativeVideoTracks === undefined) {
            return undefined;
        }
        for (let i = 0; i < this._videoTracks.length; i++) {
            const videoTrack = this._videoTracks[i];
            if (videoTrack.nativeTrack.selected) {
                return videoTrack;
            }
        }
        return null;
    }
    /**
     * Get information about the currently chosen text track.
     * `undefined` if we cannot know it.
     * `null` if no text track is chosen.
     * @returns {Object|undefined|null}
     */
    _getPrivateChosenTextTrack() {
        if (this._nativeTextTracks === undefined) {
            return undefined;
        }
        for (let i = 0; i < this._textTracks.length; i++) {
            const textTrack = this._textTracks[i];
            if (textTrack.nativeTrack.mode === "showing") {
                return textTrack;
            }
        }
        return null;
    }
    /**
     * Iterate over every available audio tracks on the media element and either:
     *   - if the last manually set audio track is found, set that one.
     *   - if not, set the most preferred one
     *   - if we still do not find an optimal track, let the one chosen by default
     */
    _setOptimalAudioTrack() {
        // First check if the last set track is available, set it if that's the case
        if (this._audioTrackLockedOn !== undefined) {
            for (let i = 0; i < this._audioTracks.length; i++) {
                const { nativeTrack } = this._audioTracks[i];
                if (nativeTrack === this._audioTrackLockedOn) {
                    this._enableAudioTrackFromIndex(i);
                    return;
                }
            }
        }
        this._applyAudioPreferences();
    }
    /**
     * Try to find a track corresponding to the audio track preferences:
     *   - if found, set it as the active track
     *   - if not found, let the chosen audio track by default
     */
    _applyAudioPreferences() {
        // Re-set the last manually set audio track
        this._audioTrackLockedOn = undefined;
        const preferredAudioTracks = this._preferredAudioTracks;
        for (let i = 0; i < preferredAudioTracks.length; i++) {
            const track = preferredAudioTracks[i];
            if (track !== null && track.language !== undefined) {
                const normalized = languages(track.language);
                for (let j = 0; j < this._audioTracks.length; j++) {
                    const audioTrack = this._audioTracks[j];
                    if (audioTrack.track.normalized === normalized &&
                        audioTrack.track.audioDescription === track.audioDescription) {
                        this._enableAudioTrackFromIndex(j);
                        return;
                    }
                }
            }
        }
        // else just let the default one instead
    }
    /**
     * Iterate over every available text tracks on the media element and either:
     *   - if the last manually set text track is found, set that one.
     *   - if not, set the most preferred one
     *   - if we still do not find an optimal track, just disable it.
     */
    _setOptimalTextTrack() {
        // First check if the last set track is available, set it if that's the case
        if (this._textTrackLockedOn === null) {
            disableTextTracks(this._textTracks);
            return;
        }
        else if (this._textTrackLockedOn !== undefined) {
            for (let i = 0; i < this._textTracks.length; i++) {
                const { nativeTrack } = this._textTracks[i];
                if (nativeTrack === this._textTrackLockedOn) {
                    // disable the rest
                    disableAllTextTracksBut(this._textTracks, nativeTrack);
                    if (nativeTrack.mode !== "showing") {
                        nativeTrack.mode = "showing";
                    }
                    return;
                }
            }
        }
        // Else set the preferred one
        this._applyTextPreferences();
    }
    /**
     * Try to find a track corresponding to the text track preferences:
     *   - if found, set it as the active track
     *   - if not found, let the chosen text track by default
     */
    _applyTextPreferences() {
        // Re-set the last manually set audio track
        this._textTrackLockedOn = undefined;
        const preferredTextTracks = this._preferredTextTracks;
        for (let i = 0; i < preferredTextTracks.length; i++) {
            const track = preferredTextTracks[i];
            if (track === null) {
                disableTextTracks(this._textTracks);
                return;
            }
            const normalized = languages(track.language);
            for (let j = 0; j < this._textTracks.length; j++) {
                const textTrack = this._textTracks[j];
                if (textTrack.track.normalized === normalized &&
                    textTrack.track.closedCaption === track.closedCaption) {
                    // disable the rest
                    disableAllTextTracksBut(this._textTracks, textTrack.nativeTrack);
                    if (textTrack.nativeTrack.mode !== "showing") {
                        textTrack.nativeTrack.mode = "showing";
                    }
                    return;
                }
            }
        }
        // Else just disable text tracks
        disableTextTracks(this._textTracks);
    }
    /**
     * Iterate over every available video tracks on the media element and either:
     *   - if the last manually set video track is found, set that one.
     *   - if not, set the most preferred one
     *   - if we still do not find an optimal track, let the one chosen by default
     */
    _setOptimalVideoTrack() {
        // 1. first check if the last set track is available, set it if that's the case
        if (this._videoTrackLockedOn === null) {
            disableVideoTracks(this._videoTracks);
            return;
        }
        else if (this._videoTrackLockedOn !== undefined) {
            for (let i = 0; i < this._videoTracks.length; i++) {
                const { nativeTrack } = this._videoTracks[i];
                if (nativeTrack === this._videoTrackLockedOn) {
                    nativeTrack.selected = true;
                    return;
                }
            }
        }
        // Else set the preferred one
        this._applyVideoPreferences();
    }
    /**
     * Try to find a track corresponding to the text track preferences:
     *   - if found, set it as the active track
     *   - if not found, let the chosen text track by default
     */
    _applyVideoPreferences() {
        // Re-set the last manually set video track
        this._videoTrackLockedOn = undefined;
        // NOTE: As we cannot access either codec information or sign interpretation
        // information easily about the different codecs. It is the same case than
        // if we had only tracks where those were set to undefined.
        // Based on that, we should disable the video track as long as one of the
        // set preferrence is "no video track" (i.e. `null`) as this is the only
        // constraint that we know we can respect.
        // Else, just chose the first track.
        const preferredVideoTracks = this._preferredVideoTracks;
        const hasNullPreference = preferredVideoTracks.some(p => p === null);
        if (hasNullPreference) {
            disableVideoTracks(this._videoTracks);
        }
        // else just let the default one instead
    }
    /**
     * Monitor native tracks add, remove and change callback and trigger the
     * change events.
     */
    _handleNativeTracksCallbacks() {
        if (this._nativeAudioTracks !== undefined) {
            this._nativeAudioTracks.onaddtrack = () => {
                var _a, _b;
                if (this._nativeAudioTracks !== undefined) {
                    const newAudioTracks = createAudioTracks(this._nativeAudioTracks);
                    if (areTrackArraysDifferent(this._audioTracks, newAudioTracks)) {
                        this._audioTracks = newAudioTracks;
                        this._setOptimalAudioTrack();
                        this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
                        const chosenAudioTrack = this._getPrivateChosenAudioTrack();
                        if ((chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== this._lastEmittedNativeAudioTrack) {
                            this.trigger("audioTrackChange", (_a = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.track) !== null && _a !== void 0 ? _a : null);
                            this._lastEmittedNativeAudioTrack = (_b = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
                        }
                    }
                }
            };
            this._nativeAudioTracks.onremovetrack = () => {
                var _a, _b;
                if (this._nativeAudioTracks !== undefined) {
                    const newAudioTracks = createAudioTracks(this._nativeAudioTracks);
                    if (areTrackArraysDifferent(this._audioTracks, newAudioTracks)) {
                        this._audioTracks = newAudioTracks;
                        this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
                        const chosenAudioTrack = this._getPrivateChosenAudioTrack();
                        if ((chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== this._lastEmittedNativeAudioTrack) {
                            this.trigger("audioTrackChange", (_a = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.track) !== null && _a !== void 0 ? _a : null);
                            this._lastEmittedNativeAudioTrack = (_b = chosenAudioTrack === null || chosenAudioTrack === void 0 ? void 0 : chosenAudioTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
                        }
                    }
                }
            };
            this._nativeAudioTracks.onchange = () => {
                if (this._audioTracks !== undefined) {
                    for (let i = 0; i < this._audioTracks.length; i++) {
                        const { track, nativeTrack } = this._audioTracks[i];
                        if (nativeTrack.enabled) {
                            if (nativeTrack !== this._lastEmittedNativeAudioTrack) {
                                this.trigger("audioTrackChange", track);
                                this._lastEmittedNativeAudioTrack = nativeTrack;
                            }
                            return;
                        }
                    }
                }
                if (this._lastEmittedNativeAudioTrack !== null) {
                    this.trigger("audioTrackChange", null);
                    this._lastEmittedNativeAudioTrack = null;
                }
                return;
            };
        }
        if (this._nativeTextTracks !== undefined) {
            this._nativeTextTracks.onaddtrack = () => {
                var _a, _b;
                if (this._nativeTextTracks !== undefined) {
                    const newTextTracks = createTextTracks(this._nativeTextTracks);
                    if (areTrackArraysDifferent(this._textTracks, newTextTracks)) {
                        this._textTracks = newTextTracks;
                        this._setOptimalTextTrack();
                        this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
                        const chosenTextTrack = this._getPrivateChosenTextTrack();
                        if ((chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== this._lastEmittedNativeTextTrack) {
                            this.trigger("textTrackChange", (_a = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.track) !== null && _a !== void 0 ? _a : null);
                            this._lastEmittedNativeTextTrack = (_b = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
                        }
                    }
                }
            };
            this._nativeTextTracks.onremovetrack = () => {
                var _a, _b;
                if (this._nativeTextTracks !== undefined) {
                    const newTextTracks = createTextTracks(this._nativeTextTracks);
                    if (areTrackArraysDifferent(this._textTracks, newTextTracks)) {
                        this._textTracks = newTextTracks;
                        this._setOptimalTextTrack();
                        this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
                        const chosenTextTrack = this._getPrivateChosenTextTrack();
                        if ((chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== this._lastEmittedNativeTextTrack) {
                            this.trigger("textTrackChange", (_a = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.track) !== null && _a !== void 0 ? _a : null);
                            this._lastEmittedNativeTextTrack = (_b = chosenTextTrack === null || chosenTextTrack === void 0 ? void 0 : chosenTextTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
                        }
                    }
                }
            };
            this._nativeTextTracks.onchange = () => {
                if (this._textTracks !== undefined) {
                    for (let i = 0; i < this._textTracks.length; i++) {
                        const { track, nativeTrack } = this._textTracks[i];
                        if (nativeTrack.mode === "showing") {
                            if (nativeTrack !== this._lastEmittedNativeTextTrack) {
                                this.trigger("textTrackChange", track);
                                this._lastEmittedNativeTextTrack = nativeTrack;
                            }
                            return;
                        }
                    }
                }
                if (this._lastEmittedNativeTextTrack !== null) {
                    this.trigger("textTrackChange", null);
                    this._lastEmittedNativeTextTrack = null;
                }
                return;
            };
        }
        if (this._nativeVideoTracks !== undefined) {
            this._nativeVideoTracks.onaddtrack = () => {
                var _a, _b;
                if (this._nativeVideoTracks !== undefined) {
                    const newVideoTracks = createVideoTracks(this._nativeVideoTracks);
                    if (areTrackArraysDifferent(this._videoTracks, newVideoTracks)) {
                        this._videoTracks = newVideoTracks;
                        this._setOptimalVideoTrack();
                        this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks());
                        const chosenVideoTrack = this._getPrivateChosenVideoTrack();
                        if ((chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== this._lastEmittedNativeVideoTrack) {
                            this.trigger("videoTrackChange", (_a = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.track) !== null && _a !== void 0 ? _a : null);
                            this._lastEmittedNativeVideoTrack = (_b = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
                        }
                    }
                }
            };
            this._nativeVideoTracks.onremovetrack = () => {
                var _a, _b;
                if (this._nativeVideoTracks !== undefined) {
                    const newVideoTracks = createVideoTracks(this._nativeVideoTracks);
                    if (areTrackArraysDifferent(this._videoTracks, newVideoTracks)) {
                        this._videoTracks = newVideoTracks;
                        this._setOptimalVideoTrack();
                        this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks());
                        const chosenVideoTrack = this._getPrivateChosenVideoTrack();
                        if ((chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== this._lastEmittedNativeVideoTrack) {
                            this.trigger("videoTrackChange", (_a = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.track) !== null && _a !== void 0 ? _a : null);
                            this._lastEmittedNativeVideoTrack = (_b = chosenVideoTrack === null || chosenVideoTrack === void 0 ? void 0 : chosenVideoTrack.nativeTrack) !== null && _b !== void 0 ? _b : null;
                        }
                    }
                }
            };
            this._nativeVideoTracks.onchange = () => {
                if (this._videoTracks !== undefined) {
                    for (let i = 0; i < this._videoTracks.length; i++) {
                        const { track, nativeTrack } = this._videoTracks[i];
                        if (nativeTrack.selected) {
                            if (nativeTrack !== this._lastEmittedNativeVideoTrack) {
                                this.trigger("videoTrackChange", track);
                                this._lastEmittedNativeVideoTrack = nativeTrack;
                            }
                            return;
                        }
                    }
                }
                if (this._lastEmittedNativeVideoTrack !== null) {
                    this.trigger("videoTrackChange", null);
                    this._lastEmittedNativeVideoTrack = null;
                }
                return;
            };
        }
    }
    /**
     * Enable an audio track (and disable all others), based on its index in the
     * `this._audioTracks` array.
     * @param {number} index}
     */
    _enableAudioTrackFromIndex(index) {
        enableAudioTrack(this._audioTracks.map(({ nativeTrack }) => nativeTrack), index);
    }
}
/**
 * Disable all text track elements in the given array from showing.
 * @param {Array.<Object>} textTracks
 */
function disableTextTracks(textTracks) {
    for (let i = 0; i < textTracks.length; i++) {
        const { nativeTrack } = textTracks[i];
        nativeTrack.mode = "disabled";
    }
}
/**
 * Disable all text track elements in the given array from showing but one which
 * should stay in the same state it was before.
 * @param {Array.<Object>} textTracks
 * @param {TextTrack} track
 */
function disableAllTextTracksBut(textTracks, track) {
    for (let i = 0; i < textTracks.length; i++) {
        const { nativeTrack } = textTracks[i];
        if (nativeTrack !== track &&
            (nativeTrack.mode === "showing" || nativeTrack.mode === "hidden")) {
            nativeTrack.mode = "disabled";
        }
    }
}
/**
 * Disable all video track elements in the given array from showing.
 * Note that browser need to support that use case, which they often do not.
 * @param {Array.<Object>} videoTracks
 */
function disableVideoTracks(videoTracks) {
    for (let i = 0; i < videoTracks.length; i++) {
        const { nativeTrack } = videoTracks[i];
        nativeTrack.selected = false;
    }
}

;// CONCATENATED MODULE: ./src/compat/set_element_src.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Set an URL to the element's src.
 * Emit ``undefined`` when done.
 * Unlink src on unsubscription.
 *
 * @param {HTMLMediaElement} mediaElement
 * @param {string} url
 * @returns {Observable}
 */
function setElementSrc$(mediaElement, url) {
    return new Observable_Observable((observer) => {
        src_log.info("Setting URL to HTMLMediaElement", url);
        mediaElement.src = url;
        observer.next(undefined);
        return () => {
            clearElementSrc(mediaElement);
        };
    });
}

;// CONCATENATED MODULE: ./src/core/init/initialize_directfile.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */









// NOTE As of now (RxJS 7.4.0), RxJS defines `ignoreElements` default
// first type parameter as `any` instead of the perfectly fine `unknown`,
// leading to linter issues, as it forbids the usage of `any`.
// This is why we're disabling the eslint rule.
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/**
 * calculate initial time as a position in seconds.
 * @param {HTMLMediaElement} mediaElement
 * @param {Object|undefined} startAt
 * @returns {number}
 */
function getDirectFileInitialTime(mediaElement, startAt) {
    if (startAt == null) {
        return 0;
    }
    if (startAt.position != null) {
        return startAt.position;
    }
    else if (startAt.wallClockTime != null) {
        return startAt.wallClockTime;
    }
    else if (startAt.fromFirstPosition != null) {
        return startAt.fromFirstPosition;
    }
    const duration = mediaElement.duration;
    if (duration == null || !isFinite(duration)) {
        src_log.warn("startAt.fromLastPosition set but no known duration, " +
            "beginning at 0.");
        return 0;
    }
    if (typeof startAt.fromLastPosition === "number") {
        return Math.max(0, duration + startAt.fromLastPosition);
    }
    else if (startAt.percentage != null) {
        const { percentage } = startAt;
        if (percentage >= 100) {
            return duration;
        }
        else if (percentage <= 0) {
            return 0;
        }
        const ratio = +percentage / 100;
        return duration * ratio;
    }
    return 0;
}
/**
 * Launch a content in "Directfile mode".
 * @param {Object} directfileOptions
 * @returns {Observable}
 */
function initializeDirectfileContent({ autoPlay, keySystems, mediaElement, playbackObserver, speed, startAt, url, }) {
    clearElementSrc(mediaElement);
    if (url == null) {
        throw new Error("No URL for a DirectFile content");
    }
    // Start everything! (Just put the URL in the element's src).
    const linkURL$ = setElementSrc$(mediaElement, url);
    const initialTime = () => {
        src_log.debug("Init: Calculating initial time");
        const initTime = getDirectFileInitialTime(mediaElement, startAt);
        src_log.debug("Init: Initial time calculated:", initTime);
        return initTime;
    };
    const { seekAndPlay$ } = initialSeekAndPlay({ mediaElement,
        playbackObserver,
        startTime: initialTime,
        mustAutoPlay: autoPlay });
    /** Initialize decryption capabilities and the HTMLMediaElement's src attribute. */
    const drmEvents$ = linkDrmAndContent(mediaElement, keySystems, EMPTY, linkURL$).pipe(deferSubscriptions(), share());
    // Translate errors coming from the media element into RxPlayer errors
    // through a throwing Observable.
    const mediaError$ = throwOnMediaError(mediaElement);
    const observation$ = playbackObserver.getReference().asObservable();
    /**
     * Observable trying to avoid various stalling situations, emitting "stalled"
     * events when it cannot, as well as "unstalled" events when it get out of one.
     */
    const rebuffer$ = RebufferingController(playbackObserver, null, speed, EMPTY, EMPTY);
    /**
     * Emit a "loaded" events once the initial play has been performed and the
     * media can begin playback.
     * Also emits warning events if issues arise when doing so.
     */
    const loadingEvts$ = drmEvents$.pipe(filter((evt) => evt.type === "decryption-ready" ||
        evt.type === "decryption-disabled"), take(1), mergeMap(() => seekAndPlay$), switchMap((evt) => {
        if (evt.type === "warning") {
            return of(evt);
        }
        return emitLoadedEvent(observation$, mediaElement, null, true);
    }));
    return merge(loadingEvts$, drmEvents$.pipe(ignoreElements()), mediaError$, rebuffer$);
}

;// CONCATENATED MODULE: ./src/features/list/directfile.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line max-len


/**
 * Add ability to play file natively played by the browser
 * (`directfile` transport)
 * @param {Object} features
 */
function addDirectfileFeature(features) {
    features.directfile = { initDirectFile: initializeDirectfileContent,
        mediaElementTrackChoiceManager: MediaElementTrackChoiceManager };
}

/* harmony default export */ const directfile = ((/* unused pure expression or super */ null && (addDirectfileFeature)));

;// CONCATENATED MODULE: ./src/core/decrypt/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */





/* harmony default export */ const decrypt = (ContentDecryptor);


;// CONCATENATED MODULE: ./src/features/list/eme.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to play encrypted contents
 * @param {Object} features
 */
function addEMEFeature(features) {
    features.ContentDecryptor = decrypt;
}

/* harmony default export */ const eme = ((/* unused pure expression or super */ null && (addEMEFeature)));

;// CONCATENATED MODULE: ./src/parsers/texttracks/sami/html.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// __VERY__ simple SAMI parser, based on ugly-but-working REGEXP:
//   - the text, start and end times are correctly parsed.
//   - only text for the given language is parsed.
//   - only the CSS style associated to the P element is set.
//   - we should be safe for any XSS.
// The language indicated to the parser should be present in the CSS and the
// corresponding Class should be on the P elements. If we fail to find the
// language in a "lang" property of a CSS class, the parser will throw.
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

const HTML_ENTITIES = /&#([0-9]+);/g;
const BR = /<br>/gi;
const STYLE = /<style[^>]*>([\s\S]*?)<\/style[^>]*>/i;
const PARAG = /\s*<p (?:class=([^>]+))?>(.*)/i;
const START = /<sync[^>]+?start="?([0-9]*)"?[^0-9]/i;
/**
 * Returns classnames for every languages.
 * @param {string} str
 * @returns {Object}
 */
function getClassNameByLang(str) {
    const ruleRe = /\.(\S+)\s*{([^}]*)}/gi;
    const langs = {};
    let m = ruleRe.exec(str);
    while (m !== null) {
        const name = m[1];
        const lang = getCSSProperty(m[2], "lang");
        if (name != null && lang != null) {
            langs[lang] = name;
        }
        m = ruleRe.exec(str);
    }
    return langs;
}
/**
 * Returns the rules defined for the P element.
 * Empty string if not found.
 * @param {string} str - The entire styling part.
 * @returns {string}
 */
function getPCSSRules(str) {
    const pRuleRegex = /p\s*{([^}]*)}/gi;
    const rule = pRuleRegex.exec(str);
    if (rule === null) {
        return "";
    }
    return rule[1];
}
/**
 * @param {string} str - entire CSS rule
 * @param {string} name - name of the property
 * @returns {string|null} - value of the property. Null if not found.
 */
function getCSSProperty(str, name) {
    const matches = (new RegExp("\\s*" + name + ":\\s*(\\S+);", "i")).exec(str);
    return Array.isArray(matches) ? matches[1] :
        null;
}
/**
 * @param {string} text
 * @returns {string}
 */
function decodeEntities(text) {
    return text
        .replace(HTML_ENTITIES, (_, $1) => String.fromCharCode(Number($1)));
}
/**
 * Because sami is not really html... we have to use
 * some kind of regular expressions to parse it...
 * the cthulhu way :)
 * The specification being quite clunky, this parser
 * may not work for every sami input.
 *
 * @param {string} smi
 * @param {Number} timeOffset
 * @param {string} lang
 */
function parseSami(smi, timeOffset, lang) {
    const syncOpen = /<sync[ >]/ig;
    const syncClose = /<sync[ >]|<\/body>/ig;
    const subs = [];
    const styleMatches = STYLE.exec(smi);
    const css = Array.isArray(styleMatches) ? styleMatches[1] :
        "";
    let up;
    let to;
    // FIXME Is that wanted?
    // previously written as let to = SyncClose.exec(smi); but never used
    syncClose.exec(smi);
    const langs = getClassNameByLang(css);
    const pCSS = getPCSSRules(css);
    let klass;
    if (isNonEmptyString(lang)) {
        klass = langs[lang];
        if (klass === undefined) {
            throw new Error(`sami: could not find lang ${lang} in CSS`);
        }
    }
    while (true) {
        up = syncOpen.exec(smi);
        to = syncClose.exec(smi);
        if (up === null && to === null) {
            break;
        }
        if (up === null || to === null || up.index >= to.index) {
            throw new Error("parse error");
        }
        const str = smi.slice(up.index, to.index);
        const tim = START.exec(str);
        if (!Array.isArray(tim)) {
            throw new Error("parse error (sync time attribute)");
        }
        const start = +tim[1];
        if (isNaN(start)) {
            throw new Error("parse error (sync time attribute NaN)");
        }
        appendToSubs(str.split("\n"), start / 1000);
    }
    return subs;
    function appendToSubs(lines, start) {
        let i = lines.length;
        while (--i >= 0) {
            const paragraphInfos = PARAG.exec(lines[i]);
            if (!Array.isArray(paragraphInfos)) {
                continue;
            }
            const [, className, txt] = paragraphInfos;
            if (klass !== className) {
                continue;
            }
            if (txt === "&nbsp;") {
                subs[subs.length - 1].end = start;
            }
            else {
                const wrapperEl = document.createElement("DIV");
                wrapperEl.className = "rxp-texttrack-region";
                const divEl = document.createElement("DIV");
                divEl.className = "rxp-texttrack-div";
                divEl.style.position = "absolute";
                divEl.style.bottom = "0";
                divEl.style.width = "100%";
                divEl.style.color = "#fff";
                divEl.style.textShadow = "-1px -1px 0 #000," +
                    "1px -1px 0 #000," +
                    "-1px 1px 0 #000," +
                    "1px 1px 0 #000";
                const pEl = document.createElement("div");
                pEl.className = "rxp-texttrack-p";
                if (isNonEmptyString(pCSS)) {
                    pEl.style.cssText = pCSS;
                }
                const textEls = txt.split(BR);
                for (let j = 0; j < textEls.length; j++) {
                    if (j !== 0) {
                        pEl.appendChild(document.createElement("BR"));
                    }
                    const spanEl = document.createElement("SPAN");
                    spanEl.className = "rxp-texttrack-span";
                    spanEl.textContent = decodeEntities(textEls[j]);
                    pEl.appendChild(spanEl);
                }
                divEl.appendChild(pEl);
                wrapperEl.appendChild(divEl);
                subs.push({ element: wrapperEl,
                    start: start + timeOffset,
                    end: -1 /* Will be updated on a following iteration */ });
            }
        }
    }
}
/* harmony default export */ const html = (parseSami);

;// CONCATENATED MODULE: ./src/features/list/html_sami_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to parse SAMI text tracks in an HTML textrack mode.
 * @param {Object} features
 */
function addHTMLSAMIFeature(features) {
    features.htmlTextTracksParsers.sami = html;
}

/* harmony default export */ const html_sami_parser = ((/* unused pure expression or super */ null && (addHTMLSAMIFeature)));

;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/find_end_of_cue_block.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the first line that is not apart of the given cue block.
 * The index given can be anywhere in a known cue block.
 *
 * This function is extra-resilient due to observed real-life malformed
 * subtitles.
 * Basically, it allows some deviation from the specification as long as the
 * intent is pretty clear.
 * @param {Array<string>} linified - Whole srt. Line by line.
 * @param {number} startIndex - Index in `linified` of the first line within the
 * block.
 * @returns {number}
 */
function findEndOfCueBlock(linified, startIndex) {
    let firstEmptyLineIndex = startIndex + 1;
    // continue incrementing i until either:
    //   - an empty line
    //   - the end
    while (isNonEmptyString(linified[firstEmptyLineIndex])) {
        firstEmptyLineIndex++;
    }
    return firstEmptyLineIndex;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/get_cue_blocks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get cue blocks from a srt file.
 * @param {Array.<string>} linified - Whole srt file. Each new element in this
 * array is a new line.
 * @returns {Array.<Array.<string>>}
 */
function getCueBlocks(linified) {
    const cueBlocks = [];
    for (let i = 0; i < linified.length; i++) {
        if (isNonEmptyString(linified[i])) {
            const endOfCue = findEndOfCueBlock(linified, i);
            const cueBlockCandidate = linified.slice(i, endOfCue);
            if (cueBlockCandidate.length > 0) {
                if (cueBlockCandidate.length === 1) {
                    if (cueBlockCandidate[0].indexOf("-->") >= 0) {
                        cueBlocks.push(cueBlockCandidate);
                    }
                }
                else {
                    if (cueBlockCandidate[1].indexOf("-->") >= 0 ||
                        cueBlockCandidate[0].indexOf("-->") >= 0) {
                        cueBlocks.push(cueBlockCandidate);
                    }
                }
            }
            i = endOfCue;
        }
    }
    return cueBlocks;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/parse_timestamp.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a single srt timestamp into seconds
 * @param {string} timestampString
 * @returns {Number|undefined}
 */
function parseTimestamp(timestampString) {
    const splittedTS = timestampString.split(":");
    if (isNonEmptyString(splittedTS[2])) {
        const hours = parseInt(splittedTS[0], 10);
        const minutes = parseInt(splittedTS[1], 10);
        const seconds = parseFloat(splittedTS[2].replace(",", "."));
        if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
            return undefined;
        }
        return hours * 60 * 60 + minutes * 60 + seconds;
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/parse_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse cue block into a cue object which contains:
 *   - start {number}: the start of the cue as a timestamp in seconds
 *   - end {number}: the end of the cue as a timestamp in seconds
 *   - payload {Array.<string>}: the payload of the cue
 * @param {Array.<string>} cueLines
 * @param {Number} timeOffset
 * @returns {Object}
 */
function parseCueBlock(cueLines, timeOffset) {
    if (cueLines.length === 0) {
        return null;
    }
    let startTimeString;
    let endTimeString;
    let payload = [];
    // normally in srt, the timing is at second position.
    // We still authorize to put it in the first position for resilience
    if (isNonEmptyString(cueLines[1]) && cueLines[1].indexOf("-->") !== -1) {
        [startTimeString, endTimeString] = cueLines[1].split("-->")
            .map(s => s.trim());
        payload = cueLines.slice(2, cueLines.length);
    }
    if (!isNonEmptyString(startTimeString) ||
        !isNonEmptyString(endTimeString)) {
        // Try to see if we find them in the first position
        [startTimeString, endTimeString] = cueLines[0].split("-->")
            .map(s => s.trim());
        payload = cueLines.slice(1, cueLines.length);
    }
    if (!isNonEmptyString(startTimeString) || !isNonEmptyString(endTimeString)) {
        // if the time is still not found, exit
        return null;
    }
    const start = parseTimestamp(startTimeString);
    const end = parseTimestamp(endTimeString);
    if (start === undefined || end === undefined) {
        return null;
    }
    return { start: start + timeOffset,
        end: end + timeOffset,
        payload };
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/srt/html.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */
// Parse SRT subtitles into HTML.
// Done for fun. Understand <b>, <i>, <u> and <font color="#ff0000" /> type
// of tags.


/**
 * @param {string} srtStr
 * @param {Number} timeOffset
 * @returns {Array.<Object>}
 */
function parseSRTStringToHTML(srtStr, timeOffset) {
    // Even if srt only authorize CRLF, we will also take LF or CR as line
    // terminators for resilience
    const lines = srtStr.split(/\r\n|\n|\r/);
    const cueBlocks = getCueBlocks(lines);
    const cues = [];
    for (let i = 0; i < cueBlocks.length; i++) {
        const cueObject = parseCueBlock(cueBlocks[i], timeOffset);
        if (cueObject != null) {
            const htmlCue = toHTML(cueObject);
            if (htmlCue != null) {
                cues.push(htmlCue);
            }
        }
    }
    return cues;
}
/**
 * @param {Array.<string>} cueLines
 * @param {Number} timeOffset
 * @returns {Object|null}
 */
function toHTML(cueObj) {
    const { start, end, payload } = cueObj;
    const pEl = document.createElement("div");
    pEl.className = "rxp-texttrack-p";
    pEl.style.fontSize = "28px";
    pEl.style.position = "absolute";
    pEl.style.bottom = "5%";
    pEl.style.width = "100%";
    pEl.style.textAlign = "center";
    pEl.style.color = "#fff";
    pEl.style.textShadow = "-1px -1px 2px #000," +
        "1px -1px 2px #000," +
        "-1px 1px 2px #000," +
        "1px 1px 2px #000";
    for (let i = 0; i < payload.length; i++) {
        if (i !== 0) {
            pEl.appendChild(document.createElement("br"));
        }
        const span = generateSpansFromSRTText(payload[i]);
        pEl.appendChild(span);
    }
    return {
        start,
        end,
        element: pEl,
    };
}
/**
 * Take a single srt line and convert it into a span with the right style while
 * avoiding XSS.
 * What we do is set a whitelist of authorized tags, and recreate the
 * corresponding tag from scratch.
 * Supported tags:
 *   - <b>: make content bold
 *   - <i>: make content italic
 *   - <u>: draw underline on content
 *   - <font color="x">: add color x to the content
 * @param {string} text
 * @returns {HTMLElement}
 */
function generateSpansFromSRTText(text) {
    const secureDiv = document.createElement("div");
    secureDiv.innerHTML = text;
    const _loop = function (node) {
        const childNodes = node.childNodes;
        const span = document.createElement("span");
        span.className = "rxp-texttrack-span";
        for (let i = 0; i < childNodes.length; i++) {
            const currentNode = childNodes[i];
            if (currentNode.nodeName === "#text") {
                const linifiedText = currentNode.wholeText
                    .split("\n");
                for (let line = 0; line < linifiedText.length; line++) {
                    if (line !== 0) {
                        span.appendChild(document.createElement("br"));
                    }
                    if (linifiedText[line].length > 0) {
                        const textNode = document.createTextNode(linifiedText[line]);
                        span.appendChild(textNode);
                    }
                }
            }
            else if (currentNode.nodeName === "B") {
                const spanChild = _loop(currentNode);
                spanChild.style.fontWeight = "bold";
                span.appendChild(spanChild);
            }
            else if (currentNode.nodeName === "I") {
                const spanChild = _loop(currentNode);
                spanChild.style.fontStyle = "italic";
                span.appendChild(spanChild);
            }
            else if (currentNode.nodeName === "U") {
                const spanChild = _loop(currentNode);
                spanChild.style.textDecoration = "underline";
                span.appendChild(spanChild);
            }
            else if (isNodeFontWithColorProp(currentNode) &&
                typeof currentNode.color === "string") {
                // TODO loop through attributes to find color?
                const spanChild = _loop(currentNode);
                spanChild.style.color = currentNode.color;
                span.appendChild(spanChild);
            }
            else {
                const spanChild = _loop(currentNode);
                span.appendChild(spanChild);
            }
        }
        return span;
    };
    return _loop(secureDiv);
}
/**
 * Returns `true` if the given node is a `<font>` element which contains a
 * `color` attribute.
 * @param {Node} node
 * @returns {boolean}
 */
function isNodeFontWithColorProp(node) {
    return node.nodeName === "FONT" && "color" in node;
}

;// CONCATENATED MODULE: ./src/features/list/html_srt_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to parse SRT text tracks in an HTML textrack mode.
 * @param {Object} features
 */
function addHTMLSRTFeature(features) {
    features.htmlTextTracksParsers.srt = parseSRTStringToHTML;
}

/* harmony default export */ const html_srt_parser = ((/* unused pure expression or super */ null && (addHTMLSRTFeature)));

;// CONCATENATED MODULE: ./src/compat/on_height_width_change.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
const _ResizeObserver = is_node ? undefined :
    window.ResizeObserver;
/* eslint-enable @typescript-eslint/no-unsafe-member-access */
/* eslint-enable @typescript-eslint/no-unsafe-assignment */
/**
 * Emit the current height and width of the given `element` each time it
 * changes.
 *
 * On some browsers, we might not be able to rely on a native API to know when
 * it changes, the `interval` argument allow us to provide us an inverval in
 * milliseconds at which we should query that element's size.
 * @param {HTMLElement} element
 * @param {number} interval
 * @returns {Observable}
 */
function onHeightWidthChange(element, interval, cancellationSignal) {
    const { height: initHeight, width: initWidth } = element.getBoundingClientRect();
    const ref = createSharedReference({
        height: initHeight,
        width: initWidth,
    });
    let lastHeight = initHeight;
    let lastWidth = initWidth;
    if (_ResizeObserver !== undefined) {
        const resizeObserver = new _ResizeObserver(entries => {
            if (entries.length === 0) {
                src_log.error("Compat: Resized but no observed element.");
                return;
            }
            const entry = entries[0];
            const { height, width } = entry.contentRect;
            if (height !== lastHeight || width !== lastWidth) {
                lastHeight = height;
                lastWidth = width;
                ref.setValue({ height, width });
            }
        });
        resizeObserver.observe(element);
        cancellationSignal.register(() => {
            resizeObserver.disconnect();
        });
    }
    else {
        const intervalId = setInterval(() => {
            const { height, width } = element.getBoundingClientRect();
            if (height !== lastHeight || width !== lastWidth) {
                lastHeight = height;
                lastWidth = width;
                ref.setValue({ height, width });
            }
        }, interval);
        cancellationSignal.register(() => {
            clearInterval(intervalId);
        });
    }
    return ref;
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/utils/manual_time_ranges.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Simulate TimeRanges as returned by SourceBuffer.prototype.buffered.
 * Add an "insert" and "remove" methods to manually update it.
 * @class ManualTimeRanges
 */
class ManualTimeRanges {
    constructor() {
        this._ranges = [];
        this.length = 0;
    }
    insert(start, end) {
        if (false) {}
        insertInto(this._ranges, { start, end });
        this.length = this._ranges.length;
    }
    remove(start, end) {
        if (false) {}
        const rangesToIntersect = [];
        if (start > 0) {
            rangesToIntersect.push({ start: 0, end: start });
        }
        if (end < Infinity) {
            rangesToIntersect.push({ start: end, end: Infinity });
        }
        this._ranges = keepRangeIntersection(this._ranges, rangesToIntersect);
        this.length = this._ranges.length;
    }
    start(index) {
        if (index >= this._ranges.length) {
            throw new Error("INDEX_SIZE_ERROR");
        }
        return this._ranges[index].start;
    }
    end(index) {
        if (index >= this._ranges.length) {
            throw new Error("INDEX_SIZE_ERROR");
        }
        return this._ranges[index].end;
    }
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/parsers.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Convert text track data into timed HTML Cues.
 * @param {string} type - Text track format wanted
 * @param {string} data - Text track data
 * @param {Number} timestampOffset - offset to apply to every timed text
 * @param {string} [language] - language of the text tracks
 * @returns {Array.<Object>}
 * @throws Error - Throw if no parser is found for the given type
 */
function parseTextTrackToElements(type, data, timestampOffset, language) {
    src_log.debug("HTSB: Finding parser for html text tracks:", type);
    const parser = src_features.htmlTextTracksParsers[type];
    if (typeof parser !== "function") {
        throw new Error("no parser found for the given text track");
    }
    src_log.debug("HTSB: Parser found, parsing...");
    const parsed = parser(data, timestampOffset, language);
    src_log.debug("HTTB: Parsed successfully!", parsed.length);
    return parsed;
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Maximum time difference, in seconds, between two text segment's start times
 * and/or end times for them to be considered the same in the
 * HTMLTextSegmentBuffer (used for the "html" textTrackMode).
 *
 * For example for two segments s1 and s2 which have a start time respectively
 * of st1 and st2 and end time of et1 and et2:
 *   - if both the absolute difference between st1 and st2 AND the one between
 *     et1 and et2 is inferior or equal to the MAX_DELTA_BUFFER_TIME, s1 and s2
 *     are considered to target the exact same time. As a consequence, if s2 is
 *     added after s1 in the buffer, s1 will be completely replaced by it and
 *     vice-versa.
 *   - if only one of the two (absolute difference between st1 and st2 OR et1
 *     and et2) is inferior to the MAX_DELTA_BUFFER_TIME then the last added
 *     is not completely considered the same. It WILL still replace - either
 *     partially or completely (depending on the sign of the other difference) -
 *     the previously added segment.
 *   - if both differences are strictly superior to the MAX_DELTA_BUFFER_TIME,
 *     then they are not considered to have the same start nor the same end.
 *     They can still overlap however, and MIGHT thus still replace partially
 *     or completely each other.
 *
 * Setting a value too low might lead to two segments targeting the same time,
 * both being present in the buffer. In worst case scenarios, this could lead
 * to indicate that an unwanted text track is still here (theorically though,
 * this is a case that should never happen for reasons that might be too long
 * to explain here).
 *
 * Setting a value too high might lead to two segments targeting different times
 * to be wrongly believed to target the same time. In worst case scenarios, this
 * could lead to wanted text tracks being removed.
 * @type Number
 */
const MAX_DELTA_BUFFER_TIME = 0.2;
/**
 * @see MAX_DELTA_BUFFER_TIME
 * @param {Number} a
 * @param {Number} b
 * @returns {Boolean}
 */
function areNearlyEqual(a, b) {
    return Math.abs(a - b) <= MAX_DELTA_BUFFER_TIME;
}
/**
 * Get all cues which have data before the given time.
 * @param {Object} cues
 * @param {Number} time
 * @returns {Array.<Object>}
 */
function getCuesBefore(cues, time) {
    for (let i = cues.length - 1; i >= 0; i--) {
        const cue = cues[i];
        if (cue.start < time) {
            return cues.slice(0, i + 1);
        }
    }
    return [];
}
/**
 * Get all cues which have data after the given time.
 * @param {Object} cues
 * @param {Number} time
 * @returns {Array.<Object>}
 */
function getCuesAfter(cues, time) {
    for (let i = 0; i < cues.length; i++) {
        const cue = cues[i];
        if (cue.end > time) {
            return cues.slice(i, cues.length);
        }
    }
    return [];
}
/**
 * @param {Object} cuesInfos
 * @param {Number} start
 * @param {Number} end
 * @returns {Array.<Object>}
 */
function removeCuesInfosBetween(cuesInfos, start, end) {
    const endCuesInfos1 = Math.max(cuesInfos.start, start);
    const cues1 = getCuesBefore(cuesInfos.cues, start);
    const cuesInfos1 = { start: cuesInfos.start,
        end: endCuesInfos1,
        cues: cues1 };
    const startCuesInfos2 = Math.min(end, cuesInfos.end);
    const cues2 = getCuesAfter(cuesInfos.cues, end);
    const cuesInfos2 = { start: startCuesInfos2,
        end: cuesInfos.end,
        cues: cues2 };
    return [cuesInfos1, cuesInfos2];
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/text_track_cues_store.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Manage the buffer of the HTMLTextSegmentBuffer.
 * Allows to add, remove and recuperate cues at given times.
 * @class TextTrackCuesStore
 */
class TextTrackCuesStore {
    constructor() {
        this._cuesBuffer = [];
    }
    /**
     * Get corresponding cue(s) for the given time.
     * A cue is an object with three properties:
     *   - start {Number}: start time for which the cue should be displayed.
     *   - end {Number}: end time for which the cue should be displayed.
     *   - element {HTMLElement}: The cue to diplay
     *
     * We do not mutate individual cue here.
     * That is, if the ``get`` method returns the same cue's reference than a
     * previous ``get`` call, its properties are guaranteed to have the exact same
     * values than before, if you did not mutate it on your side.
     * The inverse is true, if the values are the same than before, the reference
     * will stay the same (this is useful to easily check if the DOM should be
     * updated, for example).
     *
     * @param {Number} time
     * @returns {Array.<HTMLElement>} - The cues that need to be displayed at that
     * time.
     */
    get(time) {
        const cuesBuffer = this._cuesBuffer;
        const ret = [];
        // begins at the end as most of the time the player will ask for the last
        // CuesGroup
        for (let cueIdx = cuesBuffer.length - 1; cueIdx >= 0; cueIdx--) {
            const segment = cuesBuffer[cueIdx];
            if (time < segment.end && time >= segment.start) {
                const cues = segment.cues;
                for (let j = 0; j < cues.length; j++) {
                    if (time >= cues[j].start && time < cues[j].end) {
                        ret.push(cues[j].element);
                    }
                }
                return ret;
            }
        }
        return [];
    }
    /**
     * Remove cue from a certain range of time.
     * @param {Number} from
     * @param {Number} to
     */
    remove(from, _to) {
        if (false) {}
        const to = Math.max(from, _to);
        const cuesBuffer = this._cuesBuffer;
        for (let cueIdx = 0; cueIdx < cuesBuffer.length; cueIdx++) {
            if (cuesBuffer[cueIdx].end > from) {
                // this cuesInfos is concerned by the remove
                const startCuesInfos = cuesBuffer[cueIdx];
                if (startCuesInfos.start >= to) {
                    // our cuesInfos is strictly after this interval, we have nothing to do
                    return;
                }
                if (startCuesInfos.end >= to) {
                    // our cuesInfos ends after `to`, we have to keep the end of it
                    if (from <= startCuesInfos.start) {
                        // from -> to only remove the start of startCuesInfos
                        startCuesInfos.cues = getCuesAfter(startCuesInfos.cues, to);
                        startCuesInfos.start = to;
                    }
                    else {
                        // from -> to is in the middle part of startCuesInfos
                        const [cuesInfos1, cuesInfos2] = removeCuesInfosBetween(startCuesInfos, from, to);
                        this._cuesBuffer[cueIdx] = cuesInfos1;
                        cuesBuffer.splice(cueIdx + 1, 0, cuesInfos2);
                    }
                    // No cuesInfos can be concerned after this one, we can quit
                    return;
                }
                // Else remove all part after `from`
                if (startCuesInfos.start >= from) {
                    // all the segment is concerned
                    cuesBuffer.splice(cueIdx, 1);
                    cueIdx--; // one less element, we have to decrement the loop
                }
                else {
                    // only the end is concerned
                    startCuesInfos.cues = getCuesBefore(startCuesInfos.cues, from);
                    startCuesInfos.end = Math.max(from, startCuesInfos.start);
                }
            }
        }
    }
    /**
     * Insert new cues in our text buffer.
     * cues is an array of objects with three properties:
     *   - start {Number}: start time for which the cue should be displayed.
     *   - end {Number}: end time for which the cue should be displayed.
     *   - element {HTMLElement}: The cue to diplay
     *
     * @param {Array.<Object>} cues - CuesGroups, array of objects with the
     * following properties:
     *   - start {Number}: the time at which the cue will start to be displayed
     *   - end {Number}: the time at which the cue will end to be displayed
     *   - cue {HTMLElement}: The cue
     * @param {Number} start - Start time at which the CuesGroup applies.
     * This is different than the start of the first cue to display in it, this
     * has more to do with the time at which the _text segment_ starts.
     * @param {Number} end - End time at which the CuesGroup applies.
     * This is different than the end of the last cue to display in it, this
     * has more to do with the time at which the _text segment_ ends.
     *
     * TODO add securities to ensure that:
     *   - the start of a CuesGroup is inferior or equal to the start of the first
     *     cue in it
     *   - the end of a CuesGroup is superior or equal to the end of the last
     *     cue in it
     * If those requirements are not met, we could delete some cues when adding
     * a CuesGroup before/after. Find a solution.
     */
    insert(cues, start, end) {
        const cuesBuffer = this._cuesBuffer;
        const cuesInfosToInsert = { start, end, cues };
        /**
         * Called when we found the index of the next cue relative to the cue we
         * want to insert (that is a cue starting after its start or at the same
         * time but ending strictly after its end).
         * Will insert the cue at the right place and update the next cue
         * accordingly.
         * @param {number} indexOfNextCue
         */
        function onIndexOfNextCueFound(indexOfNextCue) {
            const nextCue = cuesBuffer[indexOfNextCue];
            if (nextCue === undefined || // no cue
                areNearlyEqual(cuesInfosToInsert.end, nextCue.end)) // samey end
             {
                //   ours:            |AAAAA|
                //   the current one: |BBBBB|
                //   Result:          |AAAAA|
                cuesBuffer[indexOfNextCue] = cuesInfosToInsert;
            }
            else if (nextCue.start >= cuesInfosToInsert.end) {
                // Either
                //   ours:            |AAAAA|
                //   the current one:         |BBBBBB|
                //   Result:          |AAAAA| |BBBBBB|
                // Or:
                //   ours:            |AAAAA|
                //   the current one:       |BBBBBB|
                //   Result:          |AAAAA|BBBBBB|
                // Add ours before
                cuesBuffer.splice(indexOfNextCue, 0, cuesInfosToInsert);
            }
            else {
                // Either
                //   ours:            |AAAAA|
                //   the current one: |BBBBBBBB|
                //   Result:          |AAAAABBB|
                // Or:
                //   ours:            |AAAAA|
                //   the current one:    |BBBBB|
                //   Result:          |AAAAABBB|
                nextCue.cues = getCuesAfter(nextCue.cues, cuesInfosToInsert.end);
                nextCue.start = cuesInfosToInsert.end;
                cuesBuffer.splice(indexOfNextCue, 0, cuesInfosToInsert);
            }
        }
        for (let cueIdx = 0; cueIdx < cuesBuffer.length; cueIdx++) {
            let cuesInfos = cuesBuffer[cueIdx];
            if (start < cuesInfos.end) {
                if (areNearlyEqual(start, cuesInfos.start)) {
                    if (areNearlyEqual(end, cuesInfos.end)) {
                        // exact same segment
                        //   ours:            |AAAAA|
                        //   the current one: |BBBBB|
                        //   Result:          |AAAAA|
                        // Which means:
                        //   1. replace the current cue with ours
                        cuesBuffer[cueIdx] = cuesInfosToInsert;
                        return;
                    }
                    else if (end < cuesInfos.end) {
                        // our cue overlaps with the current one:
                        //   ours:            |AAAAA|
                        //   the current one: |BBBBBBBB|
                        //   Result:          |AAAAABBB|
                        // Which means:
                        //   1. remove some cues at the start of the current one
                        //   2. update start of current one
                        //   3. add ours before the current one
                        cuesInfos.cues = getCuesAfter(cuesInfos.cues, end);
                        cuesInfos.start = end;
                        cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                        return;
                    }
                    // our cue goes beyond the current one:
                    //   ours:            |AAAAAAA|
                    //   the current one: |BBBB|...
                    //   Result:          |AAAAAAA|
                    // Here we have to delete any cuesInfos which end before ours end,
                    // and see about the following one.
                    do {
                        cuesBuffer.splice(cueIdx, 1);
                        cuesInfos = cuesBuffer[cueIdx];
                    } while (cuesInfos !== undefined && end > cuesInfos.end);
                    onIndexOfNextCueFound(cueIdx);
                    return;
                }
                else if (start < cuesInfos.start) {
                    if (end < cuesInfos.start) {
                        // our cue goes strictly before the current one:
                        //   ours:            |AAAAAAA|
                        //   the current one:           |BBBB|
                        //   Result:          |AAAAAAA| |BBBB|
                        // Which means:
                        //   - add ours before the current one
                        cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                        return;
                    }
                    else if (areNearlyEqual(end, cuesInfos.start)) {
                        // our cue goes just before the current one:
                        //   ours:            |AAAAAAA|
                        //   the current one:         |BBBB|
                        //   Result:          |AAAAAAA|BBBB|
                        // Which means:
                        //   - update start time of the current one to be sure
                        //   - add ours before the current one
                        cuesInfos.start = end;
                        cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                        return;
                    }
                    else if (areNearlyEqual(end, cuesInfos.end)) {
                        //   ours:            |AAAAAAA|
                        //   the current one:    |BBBB|
                        //   Result:          |AAAAAAA|
                        // Replace
                        cuesBuffer.splice(cueIdx, 1, cuesInfosToInsert);
                        return;
                    }
                    else if (end < cuesInfos.end) {
                        //   ours:            |AAAAAAA|
                        //   the current one:     |BBBBB|
                        //   Result:          |AAAAAAABB|
                        cuesInfos.cues = getCuesAfter(cuesInfos.cues, end);
                        cuesInfos.start = end;
                        cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                        return;
                    }
                    //   ours:            |AAAAAAA|
                    //   the current one:   |BBB|...
                    //   Result:          |AAAAAAA|...
                    do {
                        cuesBuffer.splice(cueIdx, 1);
                        cuesInfos = cuesBuffer[cueIdx];
                    } while (cuesInfos !== undefined && end > cuesInfos.end);
                    onIndexOfNextCueFound(cueIdx);
                    return;
                }
                // else -> start > cuesInfos.start
                if (areNearlyEqual(cuesInfos.end, end)) {
                    //   ours:              |AAAAAA|
                    //   the current one: |BBBBBBBB|
                    //   Result:          |BBAAAAAA|
                    cuesInfos.cues = getCuesBefore(cuesInfos.cues, start);
                    cuesInfos.end = start;
                    cuesBuffer.splice(cueIdx + 1, 0, cuesInfosToInsert);
                    return;
                }
                else if (cuesInfos.end > end) {
                    //   ours:              |AAAAAA|
                    //   the current one: |BBBBBBBBBBB|
                    //   Result:          |BBAAAAAABBB|
                    const [cuesInfos1, cuesInfos2] = removeCuesInfosBetween(cuesInfos, start, end);
                    this._cuesBuffer[cueIdx] = cuesInfos1;
                    cuesBuffer.splice(cueIdx + 1, 0, cuesInfosToInsert);
                    cuesBuffer.splice(cueIdx + 2, 0, cuesInfos2);
                    return;
                }
                else {
                    //   ours:              |AAAAAA|
                    //   the current one: |BBBBB|...
                    //   Result:          |BBAAAAAA|...
                    cuesInfos.cues = getCuesBefore(cuesInfos.cues, start);
                    cuesInfos.end = start;
                    const nextCueIdx = cueIdx + 1;
                    cuesInfos = cuesBuffer[nextCueIdx];
                    while (cuesInfos !== undefined && end > cuesInfos.end) {
                        cuesBuffer.splice(nextCueIdx, 1);
                        cuesInfos = cuesBuffer[nextCueIdx];
                    }
                    onIndexOfNextCueFound(nextCueIdx);
                    return;
                }
            }
        }
        // no cues group has the end after our current start.
        // These cues should be the last one
        cuesBuffer.push(cuesInfosToInsert);
    }
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/update_proportional_elements.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Update size of element which are proportional to the current text track
 * element.
 * Returns `true` if at least a single styling information is proportional,
 * `false` otherwise.
 * @param {number} currentHeight
 * @param {number} currentWidth
 * @param {Object} resolution
 * @param {HTMLElement} textTrackElement
 * @returns {boolean}
 */
function updateProportionalElements(currentHeight, currentWidth, resolution, textTrackElement) {
    const cellUnit = [currentWidth / resolution.columns,
        currentHeight / resolution.rows];
    const proportElts = textTrackElement.getElementsByClassName("proportional-style");
    for (let eltIdx = 0; eltIdx < proportElts.length; eltIdx++) {
        const elt = proportElts[eltIdx];
        if (elt instanceof HTMLElement) {
            const fontSizeVal = elt.getAttribute("data-proportional-font-size");
            if (fontSizeVal !== null && !isNaN(+fontSizeVal)) {
                elt.style.fontSize = String(+fontSizeVal * cellUnit[1]) + "px";
            }
            const widthVal = elt.getAttribute("data-proportional-width");
            if (widthVal !== null && !isNaN(+widthVal)) {
                elt.style.width = String(+widthVal * cellUnit[0]) + "px";
            }
            const heightVal = elt.getAttribute("data-proportional-height");
            if (heightVal !== null && !isNaN(+heightVal)) {
                elt.style.height = String(+heightVal * cellUnit[1]) + "px";
            }
            const lineHeightVal = elt.getAttribute("data-proportional-line-height");
            if (lineHeightVal !== null && !isNaN(+lineHeightVal)) {
                elt.style.lineHeight = String(+lineHeightVal * cellUnit[1]) + "px";
            }
            const leftVal = elt.getAttribute("data-proportional-left");
            if (leftVal !== null && !isNaN(+leftVal)) {
                elt.style.left = String(+leftVal * cellUnit[0]) + "px";
            }
            const topVal = elt.getAttribute("data-proportional-top");
            if (topVal !== null && !isNaN(+topVal)) {
                elt.style.top = String(+topVal * cellUnit[1]) + "px";
            }
            const paddingTopVal = elt.getAttribute("data-proportional-padding-top");
            if (paddingTopVal !== null && !isNaN(+paddingTopVal)) {
                elt.style.paddingTop = String(+paddingTopVal * cellUnit[1]) + "px";
            }
            const paddingBottomVal = elt.getAttribute("data-proportional-padding-bottom");
            if (paddingBottomVal !== null && !isNaN(+paddingBottomVal)) {
                elt.style.paddingBottom = String(+paddingBottomVal * cellUnit[1]) + "px";
            }
            const paddingLeftVal = elt.getAttribute("data-proportional-padding-left");
            if (paddingLeftVal !== null && !isNaN(+paddingLeftVal)) {
                elt.style.paddingLeft = String(+paddingLeftVal * cellUnit[0]) + "px";
            }
            const paddingRightVal = elt.getAttribute("data-proportional-padding-right");
            if (paddingRightVal !== null && !isNaN(+paddingRightVal)) {
                elt.style.paddingRight = String(+paddingRightVal * cellUnit[0]) + "px";
            }
        }
    }
    return proportElts.length > 0;
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/html_text_segment_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









const { onEnded: html_text_segment_buffer_onEnded, onSeeked: html_text_segment_buffer_onSeeked, onSeeking: html_text_segment_buffer_onSeeking } = event_listeners_namespaceObject;
/**
 * @param {Element} element
 * @param {Element} child
 */
function safelyRemoveChild(element, child) {
    try {
        element.removeChild(child);
    }
    catch (_error) {
        src_log.warn("HTSB: Can't remove text track: not in the element.");
    }
}
/**
 * @param {HTMLElement} element
 * @returns {Object|null}
 */
function getElementResolution(element) {
    const strRows = element.getAttribute("data-resolution-rows");
    const strColumns = element.getAttribute("data-resolution-columns");
    if (strRows === null || strColumns === null) {
        return null;
    }
    const rows = parseInt(strRows, 10);
    const columns = parseInt(strColumns, 10);
    if (rows === null || columns === null) {
        return null;
    }
    return { rows, columns };
}
/**
 * SegmentBuffer implementation which display buffered TextTracks in the given
 * HTML element.
 * @class HTMLTextSegmentBuffer
 */
class HTMLTextSegmentBuffer extends SegmentBuffer {
    /**
     * @param {HTMLMediaElement} videoElement
     * @param {HTMLElement} textTrackElement
     */
    constructor(videoElement, textTrackElement) {
        src_log.debug("HTSB: Creating HTMLTextSegmentBuffer");
        super();
        this.bufferType = "text";
        this._buffered = new ManualTimeRanges();
        this._videoElement = videoElement;
        this._textTrackElement = textTrackElement;
        this._sizeUpdateCanceller = new TaskCanceller();
        this._canceller = new TaskCanceller();
        this._buffer = new TextTrackCuesStore();
        this._currentCues = [];
        this.autoRefreshSubtitles(this._canceller.signal);
    }
    /**
     * Push segment on Subscription.
     * @param {Object} infos
     * @returns {Promise}
     */
    pushChunk(infos) {
        try {
            this.pushChunkSync(infos);
        }
        catch (err) {
            return Promise.reject(err);
        }
        return Promise.resolve();
    }
    /**
     * Remove buffered data.
     * @param {number} start - start position, in seconds
     * @param {number} end - end position, in seconds
     * @returns {Promise}
     */
    removeBuffer(start, end) {
        this.removeBufferSync(start, end);
        return Promise.resolve();
    }
    /**
     * @param {Object} infos
     * @returns {Promise}
     */
    endOfSegment(infos) {
        this._segmentInventory.completeSegment(infos, this._buffered);
        return Promise.resolve();
    }
    /**
     * Returns the currently buffered data, in a TimeRanges object.
     * @returns {TimeRanges}
     */
    getBufferedRanges() {
        return this._buffered;
    }
    dispose() {
        src_log.debug("HTSB: Disposing HTMLTextSegmentBuffer");
        this._disableCurrentCues();
        this._buffer.remove(0, Infinity);
        this._buffered.remove(0, Infinity);
        this._canceller.cancel();
    }
    /**
     * Push the text track contained in `data` to the HTMLTextSegmentBuffer
     * synchronously.
     * Returns a boolean:
     *   - `true` if text tracks have been added the the HTMLTextSegmentBuffer's
     *     buffer after that segment has been added.
     *   - `false` if no text tracks have been added the the
     *     HTMLTextSegmentBuffer's buffer (e.g. empty text-track, incoherent times
     *     etc.)
     *
     * /!\ This method won't add any data to the linked inventory.
     * Please use the `pushChunk` method for most use-cases.
     * @param {Object} infos
     * @returns {boolean}
     */
    pushChunkSync(infos) {
        var _a, _b;
        src_log.debug("HTSB: Appending new html text tracks");
        const { timestampOffset, appendWindow, chunk } = infos.data;
        if (chunk === null) {
            return;
        }
        assertChunkIsTextTrackSegmentData(chunk);
        const { start: startTime, end: endTime, data: dataString, type, language } = chunk;
        const appendWindowStart = (_a = appendWindow[0]) !== null && _a !== void 0 ? _a : 0;
        const appendWindowEnd = (_b = appendWindow[1]) !== null && _b !== void 0 ? _b : Infinity;
        const cues = parseTextTrackToElements(type, dataString, timestampOffset, language);
        if (appendWindowStart !== 0 && appendWindowEnd !== Infinity) {
            // Removing before window start
            let i = 0;
            while (i < cues.length && cues[i].end <= appendWindowStart) {
                i++;
            }
            cues.splice(0, i);
            i = 0;
            while (i < cues.length && cues[i].start < appendWindowStart) {
                cues[i].start = appendWindowStart;
                i++;
            }
            // Removing after window end
            i = cues.length - 1;
            while (i >= 0 && cues[i].start >= appendWindowEnd) {
                i--;
            }
            cues.splice(i, cues.length);
            i = cues.length - 1;
            while (i >= 0 && cues[i].end > appendWindowEnd) {
                cues[i].end = appendWindowEnd;
                i--;
            }
        }
        let start;
        if (startTime !== undefined) {
            start = Math.max(appendWindowStart, startTime);
        }
        else {
            if (cues.length <= 0) {
                src_log.warn("HTSB: Current text tracks have no cues nor start time. Aborting");
                return;
            }
            src_log.warn("HTSB: No start time given. Guessing from cues.");
            start = cues[0].start;
        }
        let end;
        if (endTime !== undefined) {
            end = Math.min(appendWindowEnd, endTime);
        }
        else {
            if (cues.length <= 0) {
                src_log.warn("HTSB: Current text tracks have no cues nor end time. Aborting");
                return;
            }
            src_log.warn("HTSB: No end time given. Guessing from cues.");
            end = cues[cues.length - 1].end;
        }
        if (end <= start) {
            src_log.warn("HTSB: Invalid text track appended: ", "the start time is inferior or equal to the end time.");
            return;
        }
        if (infos.inventoryInfos !== null) {
            this._segmentInventory.insertChunk(infos.inventoryInfos);
        }
        this._buffer.insert(cues, start, end);
        this._buffered.insert(start, end);
    }
    /**
     * Remove buffer data between the given start and end, synchronously.
     * @param {number} start
     * @param {number} end
     */
    removeBufferSync(start, end) {
        src_log.debug("HTSB: Removing html text track data", start, end);
        this._buffer.remove(start, end);
        this._buffered.remove(start, end);
    }
    /**
     * Remove the current cue from being displayed.
     */
    _disableCurrentCues() {
        this._sizeUpdateCanceller.cancel();
        if (this._currentCues.length > 0) {
            for (let i = 0; i < this._currentCues.length; i++) {
                safelyRemoveChild(this._textTrackElement, this._currentCues[i].element);
            }
            this._currentCues = [];
        }
    }
    /**
     * Display a new Cue. If one was already present, it will be replaced.
     * @param {HTMLElement} elements
     */
    _displayCues(elements) {
        const nothingChanged = this._currentCues.length === elements.length &&
            this._currentCues.every((current, index) => current.element === elements[index]);
        if (nothingChanged) {
            return;
        }
        // Remove and re-display everything
        // TODO More intelligent handling
        this._sizeUpdateCanceller.cancel();
        for (let i = 0; i < this._currentCues.length; i++) {
            safelyRemoveChild(this._textTrackElement, this._currentCues[i].element);
        }
        this._currentCues = [];
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            const resolution = getElementResolution(element);
            this._currentCues.push({ element, resolution });
            this._textTrackElement.appendChild(element);
        }
        const proportionalCues = this._currentCues
            .filter((cue) => cue.resolution !== null);
        if (proportionalCues.length > 0) {
            this._sizeUpdateCanceller = new TaskCanceller({ cancelOn: this._canceller.signal });
            const { TEXT_TRACK_SIZE_CHECKS_INTERVAL } = src_config.getCurrent();
            // update propertionally-sized elements periodically
            const heightWidthRef = onHeightWidthChange(this._textTrackElement, TEXT_TRACK_SIZE_CHECKS_INTERVAL, this._sizeUpdateCanceller.signal);
            heightWidthRef.onUpdate(({ height, width }) => {
                for (let i = 0; i < proportionalCues.length; i++) {
                    const { resolution, element } = proportionalCues[i];
                    updateProportionalElements(height, width, resolution, element);
                }
            }, { clearSignal: this._sizeUpdateCanceller.signal,
                emitCurrentValue: true });
        }
    }
    /**
     * Auto-refresh the display of subtitles according to the media element's
     * position and events.
     * @param {Object} cancellationSignal
     */
    autoRefreshSubtitles(cancellationSignal) {
        let autoRefreshCanceller = null;
        const { MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL } = src_config.getCurrent();
        const startAutoRefresh = () => {
            stopAutoRefresh();
            autoRefreshCanceller = new TaskCanceller({ cancelOn: cancellationSignal });
            const intervalId = setInterval(() => this.refreshSubtitles(), MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL);
            autoRefreshCanceller.signal.register(() => {
                clearInterval(intervalId);
            });
            this.refreshSubtitles();
        };
        html_text_segment_buffer_onSeeking(this._videoElement, () => {
            stopAutoRefresh();
            this._disableCurrentCues();
        }, cancellationSignal);
        html_text_segment_buffer_onSeeked(this._videoElement, startAutoRefresh, cancellationSignal);
        html_text_segment_buffer_onEnded(this._videoElement, startAutoRefresh, cancellationSignal);
        startAutoRefresh();
        function stopAutoRefresh() {
            if (autoRefreshCanceller !== null) {
                autoRefreshCanceller.cancel();
                autoRefreshCanceller = null;
            }
        }
    }
    /**
     * Refresh current subtitles according to the current media element's
     * position.
     */
    refreshSubtitles() {
        const { MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL } = src_config.getCurrent();
        let time;
        if (this._videoElement.paused || this._videoElement.playbackRate <= 0) {
            time = this._videoElement.currentTime;
        }
        else {
            // to spread the time error, we divide the regular chosen interval.
            time = Math.max(this._videoElement.currentTime +
                (MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL / 1000) / 2, 0);
        }
        const cues = this._buffer.get(time);
        if (cues.length === 0) {
            this._disableCurrentCues();
        }
        else {
            this._displayCues(cues);
        }
    }
}
/**
 * Throw if the given input is not in the expected format.
 * Allows to enforce runtime type-checking as compile-time type-checking here is
 * difficult to enforce.
 * @param {Object} chunk
 */
function assertChunkIsTextTrackSegmentData(chunk) {
    if (true) {
        return;
    }
    if (typeof chunk !== "object" ||
        chunk === null ||
        typeof chunk.data !== "string" ||
        typeof chunk.type !== "string" ||
        (chunk.language !== undefined &&
            typeof chunk.language !== "string") ||
        (chunk.start !== undefined &&
            typeof chunk.start !== "number") ||
        (chunk.end !== undefined &&
            typeof chunk.end !== "number")) {
        throw new Error("Invalid format given to a NativeTextSegmentBuffer");
    }
}
/*
 * The following ugly code is here to provide a compile-time check that an
 * `INativeTextTracksBufferSegmentData` (type of data pushed to a
 * `NativeTextSegmentBuffer`) can be derived from a `ITextTrackSegmentData`
 * (text track data parsed from a segment).
 *
 * It doesn't correspond at all to real code that will be called. This is just
 * a hack to tell TypeScript to perform that check.
 */
if (false) {}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/text/html/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const text_html = (HTMLTextSegmentBuffer);

;// CONCATENATED MODULE: ./src/features/list/html_text_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to display text tracks in an HTML textrack mode.
 * @param {Object} features
 */
function addHTMLTextBuffer(features) {
    features.htmlTextTracksBuffer = text_html;
}

/* harmony default export */ const html_text_buffer = ((/* unused pure expression or super */ null && (addHTMLTextBuffer)));

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/get_parameters.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const CELL_RESOLUTION_REGEXP = /(\d+) (\d+)/;
/**
 * Returns global parameters from a TTML Document
 * @param {Element} tt - <tt> node
 * @throws Error - Throws if the spacing style is invalid.
 * @returns {Object}
 */
function getParameters(tt) {
    const parsedFrameRate = tt.getAttribute("ttp:frameRate");
    const parsedSubFrameRate = tt.getAttribute("ttp:subFramRate");
    const parsedTickRate = tt.getAttribute("ttp:tickRate");
    const parsedFrameRateMultiplier = tt.getAttribute("ttp:frameRateMultiplier");
    const parsedSpaceStyle = tt.getAttribute("xml:space");
    const parsedCellResolution = tt.getAttribute("ttp:cellResolution");
    let cellResolution = { columns: 32,
        rows: 15 };
    if (parsedCellResolution !== null) {
        const extractedData = CELL_RESOLUTION_REGEXP.exec(parsedCellResolution);
        if (extractedData === null || extractedData.length < 3) {
            src_log.warn("TTML Parser: Invalid cellResolution");
        }
        else {
            const columns = parseInt(extractedData[1], 10);
            const rows = parseInt(extractedData[2], 10);
            if (isNaN(columns) || isNaN(rows)) {
                src_log.warn("TTML Parser: Invalid cellResolution");
            }
            else {
                cellResolution = { columns, rows };
            }
        }
    }
    if (isNonEmptyString(parsedSpaceStyle) &&
        parsedSpaceStyle !== "default" &&
        parsedSpaceStyle !== "preserve") {
        throw new Error("Invalid spacing style");
    }
    let nbFrameRate = Number(parsedFrameRate);
    if (isNaN(nbFrameRate) || nbFrameRate <= 0) {
        nbFrameRate = 30;
    }
    let nbSubFrameRate = Number(parsedSubFrameRate);
    if (isNaN(nbSubFrameRate) || nbSubFrameRate <= 0) {
        nbSubFrameRate = 1;
    }
    let nbTickRate = Number(parsedTickRate);
    if (isNaN(nbTickRate) || nbTickRate <= 0) {
        nbTickRate = undefined;
    }
    let frameRate = nbFrameRate;
    const subFrameRate = nbSubFrameRate != null ? nbSubFrameRate :
        1;
    const spaceStyle = parsedSpaceStyle !== null ? parsedSpaceStyle :
        "default";
    const tickRate = nbTickRate !== undefined ? nbTickRate :
        nbFrameRate * nbSubFrameRate;
    if (parsedFrameRateMultiplier !== null) {
        const multiplierResults = /^(\d+) (\d+)$/g.exec(parsedFrameRateMultiplier);
        if (multiplierResults !== null) {
            const numerator = Number(multiplierResults[1]);
            const denominator = Number(multiplierResults[2]);
            const multiplierNum = numerator / denominator;
            frameRate = nbFrameRate * multiplierNum;
        }
    }
    return { cellResolution,
        tickRate,
        frameRate,
        subFrameRate,
        spaceStyle };
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/get_styling.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Retrieve the attributes given in arguments in the given nodes and their
 * associated style(s)/region.
 * The first notion of the attribute encountered will be taken (by looping
 * through the given nodes in order).
 *
 * TODO manage IDREFS (plural) for styles and regions, that is, multiple one
 * @param {Array.<string>} attributes
 * @param {Array.<Node>} nodes
 * @param {Array.<Object>} styles
 * @param {Array.<Object>} regions
 * @returns {Object}
 */
function getStylingAttributes(attributes, nodes, styles, regions) {
    const currentStyle = {};
    const leftAttributes = attributes.slice();
    for (let i = 0; i <= nodes.length - 1; i++) {
        const node = nodes[i];
        if (node !== undefined) {
            let styleID;
            let regionID;
            // 1. the style is directly set on a "tts:" attribute
            if (node.nodeType === Node.ELEMENT_NODE) {
                const element = node;
                for (let j = 0; j <= element.attributes.length - 1; j++) {
                    const attribute = element.attributes[j];
                    const name = attribute.name;
                    if (name === "style") {
                        styleID = attribute.value;
                    }
                    else if (name === "region") {
                        regionID = attribute.value;
                    }
                    else {
                        const nameWithoutTTS = name.substring(4);
                        if (arrayIncludes(leftAttributes, nameWithoutTTS)) {
                            currentStyle[nameWithoutTTS] = attribute.value;
                            leftAttributes.splice(j, 1);
                            if (leftAttributes.length === 0) {
                                return currentStyle;
                            }
                        }
                    }
                }
            }
            // 2. the style is referenced on a "style" attribute
            if (isNonEmptyString(styleID)) {
                const style = arrayFind(styles, (x) => x.id === styleID);
                if (style !== undefined) {
                    for (let j = 0; j <= leftAttributes.length - 1; j++) {
                        const attribute = leftAttributes[j];
                        if (!isNonEmptyString(currentStyle[attribute])) {
                            if (isNonEmptyString(style.style[attribute])) {
                                currentStyle[attribute] = style.style[attribute];
                                leftAttributes.splice(j, 1);
                                if (leftAttributes.length === 0) {
                                    return currentStyle;
                                }
                                j--;
                            }
                        }
                    }
                }
            }
            // 3. the node reference a region (which can have a value for the
            //    corresponding style)
            if (isNonEmptyString(regionID)) {
                const region = arrayFind(regions, (x) => x.id === regionID);
                if (region !== undefined) {
                    for (let j = 0; j <= leftAttributes.length - 1; j++) {
                        const attribute = leftAttributes[j];
                        if (!isNonEmptyString(currentStyle[attribute])) {
                            if (isNonEmptyString(region.style[attribute])) {
                                currentStyle[attribute] = region.style[attribute];
                                leftAttributes.splice(j, 1);
                                if (leftAttributes.length === 0) {
                                    return currentStyle;
                                }
                                j--;
                            }
                        }
                    }
                }
            }
        }
    }
    return currentStyle;
}
/**
 * Returns the styling directly linked to an element.
 * @param {Node} node
 * @returns {Object}
 */
function getStylingFromElement(node) {
    if (node.nodeType !== Node.ELEMENT_NODE) {
        return {};
    }
    const element = node;
    const currentStyle = {};
    for (let i = 0; i <= element.attributes.length - 1; i++) {
        const styleAttribute = element.attributes[i];
        if (startsWith(styleAttribute.name, "tts")) {
            const nameWithoutTTS = styleAttribute.name.substring(4);
            currentStyle[nameWithoutTTS] = styleAttribute.value;
        }
    }
    return currentStyle;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/resolve_styles_inheritance.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Transform all styles inheriting from other styles to the same styles but with
 * the inheritance removed (by resolving those inheritance here).
 *
 * Note that the original style object is directly mutated with every
 * inheritance they had resolved and removed.
 *
 * To make a pseudo-code analogy this would be equivalent to transform those
 * two classes:
 * ```
 * class A {
 *   methodA() {}
 * }
 *
 * class B extends A {
 *   method B() {}
 * }
 * ```
 * into the same two classes without inheritance:
 * ```
 * class A {
 *   methodA() {}
 * }
 * class B {
 *   methodA() {} // inherited from class A
 *   methodB() {}
 * }
 * ```
 *
 * Doing this here allows to simplify further treatment of those styles.
 * @param {Array.<Object>} styles
 */
function resolveStylesInheritance(styles) {
    // keep track of all the indexes parsed to avoid infinite loops
    const recursivelyBrowsedIndexes = [];
    function resolveStyleInheritance(styleElt, index) {
        recursivelyBrowsedIndexes.push(index);
        for (let j = 0; j < styleElt.extendsStyles.length; j++) {
            const extendedStyleID = styleElt.extendsStyles[j];
            const extendedStyleIndex = arrayFindIndex(styles, (x) => x.id === extendedStyleID);
            if (extendedStyleIndex < 0) {
                src_log.warn("TTML Parser: unknown style inheritance: " + extendedStyleID);
            }
            else {
                const extendedStyle = styles[extendedStyleIndex];
                if (arrayIncludes(recursivelyBrowsedIndexes, extendedStyleIndex)) {
                    src_log.warn("TTML Parser: infinite style inheritance loop avoided");
                }
                else {
                    resolveStyleInheritance(extendedStyle, extendedStyleIndex);
                }
                styleElt.style = object_assign({}, extendedStyle.style, styleElt.style);
            }
        }
        styleElt.extendsStyles.length = 0;
    }
    for (let i = 0; i < styles.length; i++) {
        resolveStyleInheritance(styles[i], i);
        recursivelyBrowsedIndexes.length = 0; // reset
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/xml_utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns the parent elements which have the given tagName, by order of
 * closeness relative to our element.
 * @param {Element|Node} element
 * @param {string} tagName
 * @returns {Array.<Element>}
 */
function getParentElementsByTagName(element, tagName) {
    if (!(element.parentNode instanceof Element)) {
        return [];
    }
    function constructArray(_element) {
        const elements = [];
        if (_element.tagName.toLowerCase() === tagName.toLowerCase()) {
            elements.push(_element);
        }
        const parentNode = _element.parentNode;
        if (parentNode instanceof Element) {
            elements.push(...constructArray(parentNode));
        }
        return elements;
    }
    return constructArray(element.parentNode);
}
/**
 * Returns the parent elements which have the given tagName, by order of
 * closeness relative to our element.
 * @param {Element|Node} element
 * @returns {Array.<Element>}
 */
function getParentDivElements(element) {
    let divs = getParentElementsByTagName(element, "div");
    if (divs.length === 0) {
        const ttDivs = getParentElementsByTagName(element, "tt:div");
        if (ttDivs.length > 0) {
            divs = ttDivs;
        }
    }
    return divs;
}
/**
 * Returns the first notion of the attribute encountered in the list of elemnts
 * given.
 * @param {string} attribute
 * @param {Array.<Element>} elements
 * @returns {string|undefined}
 */
function getAttributeInElements(attribute, elements) {
    for (let i = 0; i <= elements.length - 1; i++) {
        const element = elements[i];
        if (element !== undefined) {
            const directAttrValue = element.getAttribute(attribute);
            if (directAttrValue != null) {
                return directAttrValue;
            }
        }
    }
}
/**
 * @param {Element} tt
 * @returns {Element}
 */
function getBodyNode(tt) {
    const bodyNodes = tt.getElementsByTagName("body");
    if (bodyNodes.length > 0) {
        return bodyNodes[0];
    }
    const namespacedBodyNodes = tt.getElementsByTagName("tt:body");
    if (namespacedBodyNodes.length > 0) {
        return namespacedBodyNodes[0];
    }
    return null;
}
/**
 * @param {Element} tt - <tt> node
 * @returns {Array.<Element>}
 */
function getStyleNodes(tt) {
    const styleNodes = tt.getElementsByTagName("style");
    if (styleNodes.length > 0) {
        return styleNodes;
    }
    const namespacedStyleNodes = tt.getElementsByTagName("tt:style");
    if (namespacedStyleNodes.length > 0) {
        return namespacedStyleNodes;
    }
    return styleNodes;
}
/**
 * @param {Element} tt - <tt> node
 * @returns {Array.<Element>}
 */
function getRegionNodes(tt) {
    const regionNodes = tt.getElementsByTagName("region");
    if (regionNodes.length > 0) {
        return regionNodes;
    }
    const namespacedRegionNodes = tt.getElementsByTagName("tt:region");
    if (namespacedRegionNodes.length > 0) {
        return namespacedRegionNodes;
    }
    return regionNodes;
}
/**
 * @param {Element} tt - <tt> node
 * @returns {Array.<Element>}
 */
function getTextNodes(tt) {
    const pNodes = tt.getElementsByTagName("p");
    if (pNodes.length > 0) {
        return pNodes;
    }
    const namespacedPNodes = tt.getElementsByTagName("tt:p");
    if (namespacedPNodes.length > 0) {
        return namespacedPNodes;
    }
    return pNodes;
}
/**
 * Returns true if the given node corresponds to a TTML line break element.
 * @param {Node} node
 * @returns {boolean}
 */
function isLineBreakElement(node) {
    return node.nodeName === "br" || node.nodeName === "tt:br";
}
/**
 * Returns true if the given node corresponds to a TTML span element.
 * @param {Node} node
 * @returns {boolean}
 */
function isSpanElement(node) {
    return node.nodeName === "span" || node.nodeName === "tt:span";
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/parse_ttml.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







const STYLE_ATTRIBUTES = ["align",
    "backgroundColor",
    "color",
    "direction",
    "display",
    "displayAlign",
    "extent",
    "fontFamily",
    "fontSize",
    "fontStyle",
    "fontWeight",
    "lineHeight",
    "opacity",
    "origin",
    "overflow",
    "padding",
    "textAlign",
    "textDecoration",
    "textOutline",
    "unicodeBidi",
    "visibility",
    "wrapOption",
    "writingMode",
    // Not managed anywhere for now
    // "showBackground",
    // "zIndex",
];
/**
 * Create array of objects which should represent the given TTML text track.
 * TODO TTML parsing is still pretty heavy on the CPU.
 * Optimizations have been done, principally to avoid using too much XML APIs,
 * but we can still do better.
 * @param {string} str
 * @param {Number} timeOffset
 * @returns {Array.<Object>}
 */
function parseTTMLString(str, timeOffset) {
    const cues = [];
    const xml = new DOMParser().parseFromString(str, "text/xml");
    if (xml !== null && xml !== undefined) {
        const tts = xml.getElementsByTagName("tt");
        let tt = tts[0];
        if (tt === undefined) {
            // EBU-TT sometimes namespaces tt, by "tt:"
            // Just catch all namespaces to play it safe
            const namespacedTT = xml.getElementsByTagNameNS("*", "tt");
            tt = namespacedTT[0];
            if (tt === undefined) {
                throw new Error("invalid XML");
            }
        }
        const body = getBodyNode(tt);
        const styleNodes = getStyleNodes(tt);
        const regionNodes = getRegionNodes(tt);
        const paragraphNodes = getTextNodes(tt);
        const ttParams = getParameters(tt);
        // construct idStyles array based on the xml as an optimization
        const idStyles = [];
        for (let i = 0; i <= styleNodes.length - 1; i++) {
            const styleNode = styleNodes[i];
            if (styleNode instanceof Element) {
                const styleID = styleNode.getAttribute("xml:id");
                if (styleID !== null) {
                    const subStyles = styleNode.getAttribute("style");
                    const extendsStyles = subStyles === null ? [] :
                        subStyles.split(" ");
                    idStyles.push({ id: styleID,
                        style: getStylingFromElement(styleNode),
                        extendsStyles });
                }
            }
        }
        resolveStylesInheritance(idStyles);
        // construct regionStyles array based on the xml as an optimization
        const regionStyles = [];
        for (let i = 0; i <= regionNodes.length - 1; i++) {
            const regionNode = regionNodes[i];
            if (regionNode instanceof Element) {
                const regionID = regionNode.getAttribute("xml:id");
                if (regionID !== null) {
                    let regionStyle = getStylingFromElement(regionNode);
                    const associatedStyleID = regionNode.getAttribute("style");
                    if (isNonEmptyString(associatedStyleID)) {
                        const style = arrayFind(idStyles, (x) => x.id === associatedStyleID);
                        if (style !== undefined) {
                            regionStyle = object_assign({}, style.style, regionStyle);
                        }
                    }
                    regionStyles.push({ id: regionID,
                        style: regionStyle,
                        // already handled
                        extendsStyles: [] });
                }
            }
        }
        // Computing the style takes a lot of ressources.
        // To avoid too much re-computation, let's compute the body style right
        // now and do the rest progressively.
        // TODO Compute corresponding CSS style here (as soon as we now the TTML
        // style) to speed up the process even more.
        const bodyStyle = getStylingAttributes(STYLE_ATTRIBUTES, body !== null ? [body] : [], idStyles, regionStyles);
        const bodySpaceAttribute = body !== null ? body.getAttribute("xml:space") :
            undefined;
        const shouldTrimWhiteSpaceOnBody = bodySpaceAttribute === "default" ||
            ttParams.spaceStyle === "default";
        for (let i = 0; i < paragraphNodes.length; i++) {
            const paragraph = paragraphNodes[i];
            if (paragraph instanceof Element) {
                const divs = getParentDivElements(paragraph);
                const paragraphStyle = object_assign({}, bodyStyle, getStylingAttributes(STYLE_ATTRIBUTES, [paragraph,
                    ...divs], idStyles, regionStyles));
                const paragraphSpaceAttribute = paragraph.getAttribute("xml:space");
                const shouldTrimWhiteSpace = isNonEmptyString(paragraphSpaceAttribute) ?
                    paragraphSpaceAttribute === "default" :
                    shouldTrimWhiteSpaceOnBody;
                const cue = { paragraph,
                    timeOffset,
                    idStyles,
                    regionStyles,
                    body,
                    paragraphStyle,
                    ttParams,
                    shouldTrimWhiteSpace };
                if (cue !== null) {
                    cues.push(cue);
                }
            }
        }
    }
    return cues;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_default_ttml_paragraph_style.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Return true if no style has been already declared and no conflict is
 * detected with current cue style.
 *
 * No position, orientation and dimension style should have been set to
 * avoid any conflict.
 * @param {object} paragraphStyle
 * @returns {boolean}
 */
function shouldApplyDefaultTTMLStyle(paragraphStyle) {
    return paragraphStyle.extent === undefined &&
        paragraphStyle.origin === undefined &&
        paragraphStyle.displayAlign === undefined &&
        paragraphStyle.display === undefined &&
        paragraphStyle.textAlign === undefined &&
        paragraphStyle.fontSize === undefined;
}
/**
 * Apply a default style to TTML cue.
 *
 * The default style propose to set the cue at the bottom, centered
 * and lightly spaced apart from the edges :
 *
 *        -----------------------------------------------
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |                                             |
 *        |            subtitle is displayed            |
 *        |                    here                     |
 *        -----------------------------------------------
 *
 * @param {Object} cue
 * TODO This code can be seen as risky because we might not predict every
 * possible styles that can enter in conflict.
 * A better solution should be found in the future
 */
function applyDefaultTTMLStyle(paragraphStyle) {
    paragraphStyle.extent = "70% 20%";
    paragraphStyle.fontSize = "1c";
    paragraphStyle.origin = "15% 80%";
    paragraphStyle.displayAlign = "before";
    paragraphStyle.textAlign = "center";
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/regexps.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// examples: 00:00:40:07 (7 frames) or 00:00:40:07.1 (7 frames, 1 subframe)
const REGXP_TIME_COLON_FRAMES = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;
// examples: 00:00:40:07 (7 frames) or 00:00:40:07.1 (7 frames, 1 subframe)
const REGXP_TIME_COLON = /^(?:(\d{2,}):)?(\d{2}):(\d{2})$/;
// examples: 01:02:43.0345555 or 02:43.03
const REGXP_TIME_COLON_MS = /^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/;
// examples: 75f or 75.5f
const REGXP_TIME_FRAMES = /^(\d*\.?\d*)f$/;
// examples: 50t or 50.5t
const REGXP_TIME_TICK = /^(\d*\.?\d*)t$/;
// examples: 3.45h, 3m or 4.20s
const REGXP_TIME_HMS = /^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/;
// examples: 50% 10%
const REGXP_PERCENT_VALUES = /^(\d{1,2}|100)% (\d{1,2}|100)%$/;
const REGXP_LENGTH = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%|rh|rw)$/;
const REGXP_8_HEX_COLOR = /^#([0-9A-f]{2})([0-9A-f]{2})([0-9A-f]{2})([0-9A-f]{2})$/;
const REGXP_4_HEX_COLOR = /^#([0-9A-f])([0-9A-f])([0-9A-f])([0-9A-f])$/;
const REGXP_RGB_COLOR = /^rgb\( *(\d+) *, *(\d+) *, *(\d+) *\)/;
const REGXP_RGBA_COLOR = /^rgba\( *(\d+) *, *(\d+) *, *(\d+) *, *(\d+) *\)/;


;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/time_parsing.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parses a TTML time into seconds.
 * @param {string} text
 * @param {Object} ttParams
 * @returns {Number|undefined}
 */
function parseTime(text, ttParams) {
    if (REGXP_TIME_COLON_FRAMES.test(text)) {
        return parseColonTimeWithFrames(ttParams, text);
    }
    else if (REGXP_TIME_COLON.test(text)) {
        return parseTimeFromRegExp(REGXP_TIME_COLON, text);
    }
    else if (REGXP_TIME_COLON_MS.test(text)) {
        return parseTimeFromRegExp(REGXP_TIME_COLON_MS, text);
    }
    else if (REGXP_TIME_FRAMES.test(text)) {
        return parseFramesTime(ttParams, text);
    }
    else if (REGXP_TIME_TICK.test(text)) {
        return parseTickTime(ttParams, text);
    }
    else if (REGXP_TIME_HMS.test(text)) {
        return parseTimeFromRegExp(REGXP_TIME_HMS, text);
    }
}
/**
 * Parses a TTML time in frame format
 * @param {Object} ttParams
 * @param {string} text
 * @returns {Number}
 */
function parseFramesTime(ttParams, text) {
    // 75f or 75.5f
    // (We cast as we're sure the regexp is respected here)
    const results = REGXP_TIME_FRAMES.exec(text);
    const frames = Number(results[1]);
    return frames / ttParams.frameRate;
}
/**
 * Parses a TTML time in tick format
 * @param {Object} ttParams
 * @param {string} text
 * @returns {Number}
 */
function parseTickTime(ttParams, text) {
    // 50t or 50.5t
    // (We cast as we're sure the regexp is respected here)
    const results = REGXP_TIME_TICK.exec(text);
    const ticks = Number(results[1]);
    return ticks / ttParams.tickRate;
}
/**
 * Parses a TTML colon formatted time containing frames
 * @param {Object} ttParams
 * @param {string} text
 * @returns {Number}
 */
function parseColonTimeWithFrames(ttParams, text) {
    // 01:02:43:07 ("07" is frames) or 01:02:43:07.1 (subframes)
    // (We cast as we're sure the regexp is respected here)
    const results = REGXP_TIME_COLON_FRAMES.exec(text);
    const hours = Number(results[1]);
    const minutes = Number(results[2]);
    let seconds = Number(results[3]);
    let frames = Number(results[4]);
    let subframes = Number(results[5]);
    if (isNaN(subframes)) {
        subframes = 0;
    }
    frames += subframes / ttParams.subFrameRate;
    seconds += frames / ttParams.frameRate;
    return seconds + (minutes * 60) + (hours * 3600);
}
/**
 * Parses a TTML time with a given regex. Expects regex to be some
 * sort of a time-matcher to match hours, minutes, seconds and milliseconds
 *
 * @param {RegExp} regex
 * @param {string} text
 * @returns {number|null}
 */
function parseTimeFromRegExp(regex, text) {
    const results = regex.exec(text);
    if (results === null || results[0] === "") {
        return null;
    }
    // This capture is optional, but will still be in the array as undefined,
    // default to 0.
    let hours = Number(results[1]);
    if (isNaN(hours)) {
        hours = 0;
    }
    let minutes = Number(results[2]);
    if (isNaN(minutes)) {
        minutes = 0;
    }
    let seconds = Number(results[3]);
    if (isNaN(seconds)) {
        seconds = 0;
    }
    let milliseconds = Number(results[4]);
    if (isNaN(milliseconds)) {
        milliseconds = 0;
    }
    return (milliseconds / 1000) + seconds + (minutes * 60) + (hours * 3600);
}
/* harmony default export */ const time_parsing = (parseTime);

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/get_time_delimiters.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get start and end time of an element.
 * @param {Element} element
 * @param {Object} ttParams
 * @returns {Object}
 */
function getTimeDelimiters(element, ttParams) {
    const beginAttr = element.getAttribute("begin");
    const durationAttr = element.getAttribute("dur");
    const endAttr = element.getAttribute("end");
    const start = isNonEmptyString(beginAttr) ? time_parsing(beginAttr, ttParams) :
        null;
    const duration = isNonEmptyString(durationAttr) ? time_parsing(durationAttr, ttParams) :
        null;
    const parsedEnd = isNonEmptyString(endAttr) ? time_parsing(endAttr, ttParams) :
        null;
    if (start == null || (parsedEnd == null && duration == null)) {
        throw new Error("Invalid text cue");
    }
    // Huh? Is TypeScript that dumb here?
    const end = parsedEnd == null ? start + duration :
        parsedEnd;
    return { start, end };
}

;// CONCATENATED MODULE: ./src/compat/add_class_name.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let hasClassList;
/**
 * Add className to an HTMLElement. Do nothing if the className was already
 * added.
 * @param {HTMLElement} elt
 * @param {string} className
 */
function addClassName(elt, className) {
    if (hasClassList === undefined) {
        hasClassList = elt.classList !== undefined &&
            /* eslint-disable @typescript-eslint/unbound-method */
            typeof elt.classList.add === "function";
        /* eslint-enable @typescript-eslint/unbound-method */
    }
    if (hasClassList) {
        elt.classList.add(className);
    }
    else {
        const classNamesWithSpaces = " " + elt.className + " ";
        if (classNamesWithSpaces.indexOf(" " + className + " ") < 0) {
            elt.className += " " + className;
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_extent.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Apply `tts:extent` styling to an HTML element.
 * @param {HTMLElement} element
 * @param {string} extent
 */
function applyExtent(element, extent) {
    const trimmedExtent = extent.trim();
    if (trimmedExtent === "auto") {
        return;
    }
    const splittedExtent = trimmedExtent.split(" ");
    if (splittedExtent.length !== 2) {
        return;
    }
    const firstExtent = REGXP_LENGTH.exec(splittedExtent[0]);
    const secondExtent = REGXP_LENGTH.exec(splittedExtent[1]);
    if (firstExtent !== null && secondExtent !== null) {
        if (firstExtent[2] === "px" ||
            firstExtent[2] === "%" ||
            firstExtent[2] === "em") {
            element.style.width = firstExtent[1] + firstExtent[2];
        }
        else if (firstExtent[2] === "c") {
            addClassName(element, "proportional-style");
            element.setAttribute("data-proportional-width", firstExtent[1]);
        }
        else {
            src_log.warn("TTML Parser: unhandled extent unit:", firstExtent[2]);
        }
        if (secondExtent[2] === "px" ||
            secondExtent[2] === "%" ||
            secondExtent[2] === "em") {
            element.style.height = secondExtent[1] + secondExtent[2];
        }
        else if (secondExtent[2] === "c") {
            addClassName(element, "proportional-style");
            element.setAttribute("data-proportional-height", secondExtent[1]);
        }
        else {
            src_log.warn("TTML Parser: unhandled extent unit:", secondExtent[2]);
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_font_size.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Apply `tts:fontSize` styling to an HTML element.
 * @param {HTMLElement} element
 * @param {string} fontSize
 */
function applyFontSize(element, fontSize) {
    const trimmedFontSize = fontSize.trim();
    const splittedFontSize = trimmedFontSize.split(" ");
    if (splittedFontSize.length === 0) {
        return;
    }
    const firstFontSize = REGXP_LENGTH.exec(splittedFontSize[0]);
    if (firstFontSize === null) {
        return;
    }
    if (firstFontSize[2] === "px" ||
        firstFontSize[2] === "em") {
        element.style.fontSize = firstFontSize[1] + firstFontSize[2];
    }
    else if (firstFontSize[2] === "c") {
        element.style.position = "relative";
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-font-size", firstFontSize[1]);
    }
    else if (firstFontSize[2] === "%") {
        const toNum = Number(firstFontSize[1]);
        if (isNaN(toNum)) {
            src_log.warn("TTML Parser: could not parse fontSize value \"" +
                firstFontSize[1] +
                "\" into a number");
        }
        else {
            element.style.position = "relative";
            addClassName(element, "proportional-style");
            element.setAttribute("data-proportional-font-size", String(toNum / 100));
        }
    }
    else {
        src_log.warn("TTML Parser: unhandled fontSize unit:", firstFontSize[2]);
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_line_height.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {HTMLElement} element
 * @param {string} lineHeight
 */
function applyLineHeight(element, lineHeight) {
    const trimmedLineHeight = lineHeight.trim();
    if (trimmedLineHeight === "auto") {
        return;
    }
    const firstLineHeight = REGXP_LENGTH.exec(trimmedLineHeight[0]);
    if (firstLineHeight === null) {
        return;
    }
    if (firstLineHeight[2] === "px" ||
        firstLineHeight[2] === "%" ||
        firstLineHeight[2] === "em") {
        element.style.lineHeight = firstLineHeight[1] + firstLineHeight[2];
    }
    else if (firstLineHeight[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-line-height", firstLineHeight[1]);
    }
    else {
        src_log.warn("TTML Parser: unhandled lineHeight unit:", firstLineHeight[2]);
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_origin.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {HTMLElement} element
 * @param {string} origin
 */
function applyOrigin(element, origin) {
    const trimmedOrigin = origin.trim();
    if (trimmedOrigin === "auto") {
        return;
    }
    const splittedOrigin = trimmedOrigin.split(" ");
    if (splittedOrigin.length !== 2) {
        return;
    }
    const firstOrigin = REGXP_LENGTH.exec(splittedOrigin[0]);
    const secondOrigin = REGXP_LENGTH.exec(splittedOrigin[1]);
    if (firstOrigin !== null && secondOrigin !== null) {
        if (firstOrigin[2] === "px" ||
            firstOrigin[2] === "%" ||
            firstOrigin[2] === "em") {
            element.style.left = firstOrigin[1] + firstOrigin[2];
        }
        else if (firstOrigin[2] === "c") {
            addClassName(element, "proportional-style");
            element.setAttribute("data-proportional-left", firstOrigin[1]);
        }
        else {
            src_log.warn("TTML Parser: unhandled origin unit:", firstOrigin[2]);
        }
        if (secondOrigin[2] === "px" ||
            secondOrigin[2] === "%" ||
            secondOrigin[2] === "em") {
            element.style.top = secondOrigin[1] + secondOrigin[2];
        }
        else if (secondOrigin[2] === "c") {
            addClassName(element, "proportional-style");
            element.setAttribute("data-proportional-top", secondOrigin[1]);
        }
        else {
            src_log.warn("TTML Parser: unhandled origin unit:", secondOrigin[2]);
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/apply_padding.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {HTMLElement} element
 * @param {string} padding
 */
function applyPadding(element, padding) {
    const trimmedPadding = padding.trim();
    const splittedPadding = trimmedPadding.split(" ");
    if (splittedPadding.length < 1) {
        return;
    }
    const firstPadding = REGXP_LENGTH.exec(splittedPadding[0]);
    if (firstPadding === null) {
        return;
    }
    if (firstPadding[2] === "px" ||
        firstPadding[2] === "%" ||
        firstPadding[2] === "em") {
        const firstPaddingValue = firstPadding[1] + firstPadding[2];
        if (splittedPadding.length === 1) {
            element.style.padding = firstPaddingValue;
        }
        else if (splittedPadding.length === 2) {
            element.style.paddingTop = firstPaddingValue;
            element.style.paddingBottom = firstPaddingValue;
        }
        else {
            element.style.paddingTop = firstPaddingValue;
        }
    }
    else if (firstPadding[2] === "c") {
        addClassName(element, "proportional-style");
        if (splittedPadding.length === 1) {
            element.setAttribute("data-proportional-padding-top", firstPadding[1]);
            element.setAttribute("data-proportional-padding-bottom", firstPadding[1]);
            element.setAttribute("data-proportional-padding-left", firstPadding[1]);
            element.setAttribute("data-proportional-padding-right", firstPadding[1]);
        }
        else if (splittedPadding.length === 2) {
            element.setAttribute("data-proportional-padding-top", firstPadding[1]);
            element.setAttribute("data-proportional-padding-bottom", firstPadding[1]);
        }
        else {
            element.setAttribute("data-proportional-padding-top", firstPadding[1]);
        }
    }
    else {
        src_log.warn("TTML Parser: unhandled padding unit:", firstPadding[2]);
    }
    if (splittedPadding.length === 1) {
        return;
    }
    const secondPadding = REGXP_LENGTH.exec(splittedPadding[1]);
    if (secondPadding === null) {
        return;
    }
    if (secondPadding[2] === "px" ||
        secondPadding[2] === "%" ||
        secondPadding[2] === "em") {
        const secondPaddingValue = secondPadding[1] + secondPadding[2];
        if (splittedPadding.length < 4) {
            element.style.paddingLeft = secondPaddingValue;
            element.style.paddingRight = secondPaddingValue;
        }
        else {
            element.style.paddingRight = secondPaddingValue;
        }
    }
    else if (secondPadding[2] === "c") {
        addClassName(element, "proportional-style");
        if (splittedPadding.length < 4) {
            element.setAttribute("data-proportional-padding-left", secondPadding[1]);
            element.setAttribute("data-proportional-padding-right", secondPadding[1]);
        }
        else {
            element.setAttribute("data-proportional-padding-right", secondPadding[1]);
        }
    }
    else {
        src_log.warn("TTML Parser: unhandled padding unit:", secondPadding[2]);
    }
    if (splittedPadding.length === 2) {
        return;
    }
    const thirdPadding = REGXP_LENGTH.exec(splittedPadding[2]);
    if (thirdPadding === null) {
        return;
    }
    if (thirdPadding[2] === "px" ||
        thirdPadding[2] === "%" ||
        thirdPadding[2] === "em") {
        const thirdPaddingValue = thirdPadding[1] + thirdPadding[2];
        element.style.paddingBottom = thirdPaddingValue;
    }
    else if (thirdPadding[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-padding-bottom", thirdPadding[1]);
    }
    else {
        src_log.warn("TTML Parser: unhandled padding unit:", thirdPadding[2]);
    }
    if (splittedPadding.length === 3) {
        return;
    }
    const fourthPadding = REGXP_LENGTH.exec(splittedPadding[3]);
    if (fourthPadding === null) {
        return;
    }
    if (fourthPadding[2] === "px" ||
        fourthPadding[2] === "%" ||
        fourthPadding[2] === "em") {
        const fourthPaddingValue = fourthPadding[1] + fourthPadding[2];
        element.style.paddingLeft = fourthPaddingValue;
    }
    else if (fourthPadding[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-padding-left", fourthPadding[1]);
    }
    else {
        src_log.warn("TTML Parser: unhandled padding unit:", fourthPadding[2]);
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/generate_css_test_outline.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Try to replicate the textOutline TTML style property into CSS.
 *
 * We mock it throught the text-shadow property, translating the TTML thickness
 * into blur radius and the blur-radius into... nothing.
 *
 * @param {string} color
 * @param {string|number} thickness
 * @returns {string}
 */
function generateCSSTextOutline(color, thickness) {
    let thick = thickness;
    if (isNonEmptyString(thickness) && thickness.trim().endsWith("%")) {
        // As em and % are basically equivalent in CSS
        // (they both are relative to the font-size
        // of the current element)
        // We convert the non supported % into the supported em
        thick = thickness.trim().slice(0, -1);
        thick = (parseInt(thick, 10) / 100).toString() + "em";
    }
    return `-1px -1px ${thick} ${color},` +
        `1px -1px ${thick} ${color},` +
        `-1px 1px ${thick} ${color},` +
        `1px 1px ${thick} ${color}`;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/ttml_color_to_css_color.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Translate a color indicated in TTML-style to a CSS-style color.
 * @param {string} color
 * @returns {string} color
 */
function ttmlColorToCSSColor(color) {
    // TODO check all possible color fomats
    let regRes;
    regRes = REGXP_8_HEX_COLOR.exec(color);
    if (regRes != null) {
        return "rgba(" +
            String(parseInt(regRes[1], 16)) + "," +
            String(parseInt(regRes[2], 16)) + "," +
            String(parseInt(regRes[3], 16)) + "," +
            String(parseInt(regRes[4], 16) / 255) + ")";
    }
    regRes = REGXP_4_HEX_COLOR.exec(color);
    if (regRes != null) {
        return "rgba(" +
            String(parseInt(regRes[1] + regRes[1], 16)) + "," +
            String(parseInt(regRes[2] + regRes[2], 16)) + "," +
            String(parseInt(regRes[3] + regRes[3], 16)) + "," +
            String(parseInt(regRes[4] + regRes[4], 16) / 255) + ")";
    }
    regRes = REGXP_RGB_COLOR.exec(color);
    if (regRes != null) {
        return "rgb(" +
            String(+regRes[1]) + "," +
            String(+regRes[2]) + "," +
            String(+regRes[3]) + ")";
    }
    regRes = REGXP_RGBA_COLOR.exec(color);
    if (regRes != null) {
        return "rgba(" +
            String(+regRes[1]) + "," +
            String(+regRes[2]) + "," +
            String(+regRes[3]) + "," +
            String(+regRes[4] / 255) + ")";
    }
    return color;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/create_element.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */












// Styling which can be applied to <span> from any level upper.
// Added here as an optimization
const SPAN_LEVEL_ATTRIBUTES = ["color",
    "direction",
    "display",
    "fontFamily",
    "fontSize",
    "fontStyle",
    "fontWeight",
    "textDecoration",
    "textOutline",
    "unicodeBidi",
    "visibility",
    "wrapOption"];
// TODO
// tts:showBackground (applies to region)
// tts:zIndex (applies to region)
/**
 * Apply style set for a singular text span of the current cue.
 * @param {HTMLElement} element - The text span
 * @param {Object} style - The style to apply
 */
function applyTextStyle(element, style, shouldTrimWhiteSpace) {
    // applies to span
    const color = style.color;
    if (isNonEmptyString(color)) {
        element.style.color = ttmlColorToCSSColor(color);
    }
    // applies to body, div, p, region, span
    const backgroundColor = style.backgroundColor;
    if (isNonEmptyString(backgroundColor)) {
        element.style.backgroundColor = ttmlColorToCSSColor(backgroundColor);
    }
    // applies to span
    const textOutline = style.textOutline;
    if (isNonEmptyString(textOutline)) {
        const outlineData = textOutline
            .trim()
            .replace(/\s+/g, " ")
            .split(" ");
        const len = outlineData.length;
        if (len === 3) {
            const outlineColor = ttmlColorToCSSColor(outlineData[0]);
            const thickness = outlineData[1];
            element.style.textShadow =
                generateCSSTextOutline(outlineColor, thickness);
        }
        else if (isNonEmptyString(color) && len === 1) {
            const thickness = outlineData[0];
            element.style.textShadow = generateCSSTextOutline(color, thickness);
        }
        else if (len === 2) {
            const isFirstArgAColor = /^[#A-Z]/i.test(outlineData[0]);
            const isFirstArgANumber = /^[0-9]/.test(outlineData[0]);
            // XOR-ing to be sure we get what we have
            if (isFirstArgAColor !== isFirstArgANumber) {
                if (isFirstArgAColor) {
                    const outlineColor = ttmlColorToCSSColor(outlineData[0]);
                    const thickness = outlineData[1];
                    element.style.textShadow = generateCSSTextOutline(outlineColor, thickness);
                }
                else if (isNonEmptyString(color)) {
                    const thickness = outlineData[0];
                    element.style.textShadow = generateCSSTextOutline(color, thickness);
                }
            }
        }
    }
    // applies to span
    const textDecoration = style.textDecoration;
    if (isNonEmptyString(textDecoration)) {
        switch (textDecoration) {
            case "noUnderline":
            case "noLineThrough":
            case "noOverline":
                element.style.textDecoration = "none";
                break;
            case "lineThrough":
                element.style.textDecoration = "line-through";
                break;
            default:
                element.style.textDecoration = textDecoration;
                break;
        }
    }
    // applies to span
    const fontFamily = style.fontFamily;
    if (isNonEmptyString(fontFamily)) {
        switch (fontFamily) {
            case "proportionalSansSerif":
                element.style.fontFamily =
                    "Arial, Helvetica, Liberation Sans, sans-serif";
                break;
            // TODO monospace or sans-serif or font with both?
            case "monospaceSansSerif":
            case "sansSerif":
                element.style.fontFamily = "sans-serif";
                break;
            case "monospaceSerif":
            case "default":
                element.style.fontFamily = "Courier New, Liberation Mono, monospace";
                break;
            // TODO font with both?
            case "proportionalSerif":
                element.style.fontFamily = "serif";
                break;
            default:
                element.style.fontFamily = fontFamily;
        }
    }
    // applies to span
    const fontStyle = style.fontStyle;
    if (isNonEmptyString(fontStyle)) {
        element.style.fontStyle = fontStyle;
    }
    // applies to span
    const fontWeight = style.fontWeight;
    if (isNonEmptyString(fontWeight)) {
        element.style.fontWeight = fontWeight;
    }
    // applies to span
    const fontSize = style.fontSize;
    if (isNonEmptyString(fontSize)) {
        applyFontSize(element, fontSize);
    }
    else {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-font-size", "1");
    }
    // applies to p, span
    const direction = style.direction;
    if (isNonEmptyString(direction)) {
        element.style.direction = direction;
    }
    // applies to p, span
    const unicodeBidi = style.unicodeBidi;
    if (isNonEmptyString(unicodeBidi)) {
        switch (unicodeBidi) {
            case "bidiOverride":
                element.style.unicodeBidi = "bidi-override";
                break;
            case "embed":
                element.style.unicodeBidi = "embed";
                break;
            default:
                element.style.unicodeBidi = "normal";
        }
    }
    // applies to body, div, p, region, span
    const visibility = style.visibility;
    if (isNonEmptyString(visibility)) {
        element.style.visibility = visibility;
    }
    // applies to body, div, p, region, span
    const display = style.display;
    if (display === "none") {
        element.style.display = "none";
    }
    // applies to body, div, p, region, span
    const wrapOption = style.wrapOption;
    element.style.whiteSpace = wrapOption === "noWrap" ?
        (shouldTrimWhiteSpace ? "nowrap" : "pre") :
        (shouldTrimWhiteSpace ? "normal" : "pre-wrap");
}
/**
 * Apply style for the general text track div.
 * @param {HTMLElement} element - The <div> the style will be applied on.
 * @param {Object} style - The general style object of the paragraph.
 */
function applyGeneralStyle(element, style) {
    // Set default text color. It can be overrided by text element color.
    element.style.color = "white";
    element.style.position = "absolute";
    // applies to tt, region
    const extent = style.extent;
    if (isNonEmptyString(extent)) {
        applyExtent(element, extent);
    }
    // applies to region
    const writingMode = style.writingMode;
    if (isNonEmptyString(writingMode)) {
        // TODO
    }
    // applies to region
    const overflow = style.overflow;
    element.style.overflow = isNonEmptyString(overflow) ? overflow :
        "hidden";
    // applies to region
    const padding = style.padding;
    if (isNonEmptyString(padding)) {
        applyPadding(element, padding);
    }
    // applies to region
    const origin = style.origin;
    if (isNonEmptyString(origin)) {
        applyOrigin(element, origin);
    }
    // applies to region
    const displayAlign = style.displayAlign;
    if (isNonEmptyString(displayAlign)) {
        element.style.display = "flex";
        element.style.flexDirection = "column";
        switch (displayAlign) {
            case "before":
                element.style.justifyContent = "flex-start";
                break;
            case "center":
                element.style.justifyContent = "center";
                break;
            case "after":
                element.style.justifyContent = "flex-end";
                break;
        }
    }
    // applies to region
    const opacity = style.opacity;
    if (isNonEmptyString(opacity)) {
        element.style.opacity = opacity;
    }
    // applies to body, div, p, region, span
    const visibility = style.visibility;
    if (isNonEmptyString(visibility)) {
        element.style.visibility = visibility;
    }
    // applies to body, div, p, region, span
    const display = style.display;
    if (display === "none") {
        element.style.display = "none";
    }
}
/**
 * Apply style set for a <p> element
 * @param {HTMLElement} element - The <p> element
 * @param {Object} style - The general style object of the paragraph.
 */
function applyPStyle(element, style) {
    element.style.margin = "0px";
    // applies to body, div, p, region, span
    const paragraphBackgroundColor = style.backgroundColor;
    if (isNonEmptyString(paragraphBackgroundColor)) {
        element.style.backgroundColor = ttmlColorToCSSColor(paragraphBackgroundColor);
    }
    // applies to p
    const lineHeight = style.lineHeight;
    if (isNonEmptyString(lineHeight)) {
        applyLineHeight(element, lineHeight);
    }
    // applies to p
    const textAlign = style.textAlign;
    if (isNonEmptyString(textAlign)) {
        switch (textAlign) {
            case "center":
                element.style.textAlign = "center";
                break;
            case "left":
            case "start":
                // TODO check what start means (difference with left, writing direction?)
                element.style.textAlign = "left";
                break;
            case "right":
            case "end":
                // TODO check what end means (difference with right, writing direction?)
                element.style.textAlign = "right";
                break;
        }
    }
}
/**
 * Creates span of text for the given #text element, with the right style.
 *
 * TODO create text elements as string? Might help performances.
 * @param {Element} el - the #text element, which text content should be
 * displayed
 * @param {Object} style - the style object for the given text
 * @param {Boolean} shouldTrimWhiteSpace - True if the space should be
 * trimmed.
 * @returns {HTMLElement}
 */
function createTextElement(el, style, shouldTrimWhiteSpace) {
    const textElement = document.createElement("span");
    let textContent = el.textContent === null ? "" :
        el.textContent;
    if (shouldTrimWhiteSpace) {
        // 1. Trim leading and trailing whitespace.
        // 2. Collapse multiple spaces into one.
        let trimmed = textContent.trim();
        trimmed = trimmed.replace(/\s+/g, " ");
        textContent = trimmed;
    }
    const textNode = document.createTextNode(textContent);
    textElement.appendChild(textNode);
    textElement.className = "rxp-texttrack-span";
    applyTextStyle(textElement, style, shouldTrimWhiteSpace);
    return textElement;
}
/**
 * Generate every text elements to display in a given paragraph.
 * @param {Element} paragraph - The <p> tag.
 * @param {Array.<Object>} regions
 * @param {Array.<Object>} styles
 * @param {Object} paragraphStyle - The general style object of the paragraph.
 * @param {Boolean} shouldTrimWhiteSpace
 * @returns {Array.<HTMLElement>}
 */
function generateTextContent(paragraph, regions, styles, paragraphStyle, shouldTrimWhiteSpace) {
    /**
     * Recursive function, taking a node in argument and returning the
     * corresponding array of HTMLElement in order.
     * @param {Node} node - the node in question
     * @param {Object} style - the current state of the style for the node.
     * /!\ The style object can be mutated, provide a copy of it.
     * @param {Array.<Element>} spans - The spans parent of this node.
     * @param {Boolean} shouldTrimWhiteSpaceFromParent - True if the space should be
     * trimmed by default. From the parent xml:space parameter.
     * @returns {Array.<HTMLElement>}
     */
    function loop(node, style, spans, shouldTrimWhiteSpaceFromParent) {
        const childNodes = node.childNodes;
        const elements = [];
        for (let i = 0; i < childNodes.length; i++) {
            const currentNode = childNodes[i];
            if (currentNode.nodeName === "#text") {
                const { backgroundColor } = getStylingAttributes(["backgroundColor"], spans, styles, regions);
                if (isNonEmptyString(backgroundColor)) {
                    style.backgroundColor = backgroundColor;
                }
                else {
                    delete style.backgroundColor;
                }
                const el = createTextElement(currentNode, style, shouldTrimWhiteSpaceFromParent);
                elements.push(el);
            }
            else if (isLineBreakElement(currentNode)) {
                const br = document.createElement("BR");
                elements.push(br);
            }
            else if (isSpanElement(currentNode) &&
                currentNode.nodeType === Node.ELEMENT_NODE &&
                currentNode.childNodes.length > 0) {
                const spaceAttribute = currentNode.getAttribute("xml:space");
                const shouldTrimWhiteSpaceOnSpan = isNonEmptyString(spaceAttribute) ? spaceAttribute === "default" :
                    shouldTrimWhiteSpaceFromParent;
                // compute the new applyable style
                const newStyle = object_assign({}, style, getStylingAttributes(SPAN_LEVEL_ATTRIBUTES, [currentNode], styles, regions));
                elements.push(...loop(currentNode, newStyle, [currentNode, ...spans], shouldTrimWhiteSpaceOnSpan));
            }
        }
        return elements;
    }
    return loop(paragraph, object_assign({}, paragraphStyle), [], shouldTrimWhiteSpace);
}
/**
 * @param {Element} paragraph
 * @param {Element} body
 * @param {Array.<Object>} regions
 * @param {Array.<Object>} styles
 * @param {Object} paragraphStyle
 * @param {Object}
 * @returns {HTMLElement}
 */
function createElement(paragraph, body, regions, styles, paragraphStyle, { cellResolution, shouldTrimWhiteSpace }) {
    const divs = getParentDivElements(paragraph);
    const parentElement = document.createElement("DIV");
    parentElement.className = "rxp-texttrack-region";
    parentElement.setAttribute("data-resolution-columns", String(cellResolution.columns));
    parentElement.setAttribute("data-resolution-rows", String(cellResolution.rows));
    applyGeneralStyle(parentElement, paragraphStyle);
    if (body !== null) {
        // applies to body, div, p, region, span
        const { bodyBackgroundColor } = getStylingAttributes(["backgroundColor"], [...divs, body], styles, regions);
        if (isNonEmptyString(bodyBackgroundColor)) {
            parentElement.style.backgroundColor = ttmlColorToCSSColor(bodyBackgroundColor);
        }
    }
    const pElement = document.createElement("p");
    pElement.className = "rxp-texttrack-p";
    applyPStyle(pElement, paragraphStyle);
    const textContent = generateTextContent(paragraph, regions, styles, paragraphStyle, shouldTrimWhiteSpace);
    for (let i = 0; i < textContent.length; i++) {
        pElement.appendChild(textContent[i]);
    }
    // NOTE:
    // The following code is for the inclusion of div elements. This has no
    // advantage for now, and might only with future evolutions.
    // (This is only an indication of what the base of the code could look like).
    // if (divs.length) {
    //   let container = parentElement;
    //   for (let i = divs.length - 1; i >= 0; i--) {
    //     // TODO manage style at div level?
    //     // They are: visibility, display and backgroundColor
    //     // All these do not have any difference if applied to the <p> element
    //     // instead of the div.
    //     // The advantage might only be for multiple <p> elements dispatched
    //     // in multiple div Which we do not manage anyway for now.
    //     const divEl = document.createElement("DIV");
    //     divEl.className = "rxp-texttrack-div";
    //     container.appendChild(divEl);
    //     container = divEl;
    //   }
    //   container.appendChild(pElement);
    //   parentElement.appendChild(container);
    // } else {
    //   parentElement.appendChild(pElement);
    // }
    parentElement.appendChild(pElement);
    return parentElement;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/parse_cue.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Object} parsedCue
 * @returns {Object|null}
 */
function parseCue(parsedCue) {
    const { paragraph, ttParams, body, regionStyles, idStyles, paragraphStyle, timeOffset, shouldTrimWhiteSpace, } = parsedCue;
    // Disregard empty elements:
    // TTML allows for empty elements like <div></div>.
    // If paragraph has neither time attributes, nor
    // non-whitespace text, don't try to make a cue out of it.
    if (!paragraph.hasAttribute("begin") &&
        !paragraph.hasAttribute("end") &&
        /^\s*$/.test(paragraph.textContent === null ? "" : paragraph.textContent)) {
        return null;
    }
    const { cellResolution } = ttParams;
    const { start, end } = getTimeDelimiters(paragraph, ttParams);
    const element = createElement(paragraph, body, regionStyles, idStyles, paragraphStyle, { cellResolution, shouldTrimWhiteSpace });
    return { start: start + timeOffset,
        end: end + timeOffset,
        element };
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/parse_ttml_to_div.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Create array of objects which should represent the given TTML text track.
 * These objects have the following structure
 *   - start {Number}: start time, in seconds, at which the cue should
 *     be displayed
 *   - end {Number}: end time, in seconds, at which the cue should
 *     be displayed
 *   - element {HTMLElement}: <div> element representing the cue, with the
 *     right style. This div should then be appended to an element having
 *     the exact size of the wanted region the text track provide cues for.
 *
 * TODO TTML parsing is still pretty heavy on the CPU.
 * Optimizations have been done, principally to avoid using too much XML APIs,
 * but we can still do better.
 * @param {string} str
 * @param {number} timeOffset
 */
function parseTTMLToDiv(str, timeOffset) {
    const parsedCues = parseTTMLString(str, timeOffset);
    const cues = [];
    for (let i = 0; i < parsedCues.length; i++) {
        const { paragraphStyle } = parsedCues[i];
        if (shouldApplyDefaultTTMLStyle(paragraphStyle)) {
            applyDefaultTTMLStyle(paragraphStyle);
        }
        const cue = parseCue(parsedCues[i]);
        if (cue !== null) {
            cues.push(cue);
        }
    }
    return cues;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/ttml/html/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const ttml_html = (parseTTMLToDiv);

;// CONCATENATED MODULE: ./src/features/list/html_ttml_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to parse TTML text tracks in an HTML textrack mode.
 * @param {Object} features
 */
function addHTMLTTMLFeature(features) {
    features.htmlTextTracksParsers.ttml = ttml_html;
}

/* harmony default export */ const html_ttml_parser = ((/* unused pure expression or super */ null && (addHTMLTTMLFeature)));

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns first line after the WEBVTT header.
 * That is, the line after the first blank line after the first line!
 * @param {Array.<string>} linified
 * @returns {Number}
 */
function getFirstLineAfterHeader(linified) {
    let i = 0;
    while (i < linified.length) {
        if (linified[i] === "") {
            return i + 1;
        }
        i++;
    }
    return i;
}
/**
 * Returns true if the given line looks like the beginning of a Style block.
 * @param {string} text
 * @returns {Boolean}
 */
function isStartOfStyleBlock(lines, index) {
    return typeof lines[index] === "string" &&
        /^STYLE( .*)?$/g.test(lines[index]) &&
        // A cue identifer can also contain "STYLE". Check that we have no timings
        // on the second line
        (lines[index + 1] === undefined || lines[index + 1].indexOf("-->") < 0);
}
/**
 * Returns true if the given line looks like the beginning of a comment block.
 * @param {string} text
 * @returns {Boolean}
 */
function isStartOfNoteBlock(lines, index) {
    return typeof lines[index] === "string" &&
        /^NOTE( .*)?$/g.test(lines[index]) &&
        // A cue identifer can also contain "NOTE". Check that we have no timings
        // on the second line
        (lines[index + 1] === undefined || lines[index + 1].indexOf("-->") < 0);
}
/**
 * Returns true if the given line looks like the beginning of a region block.
 * @param {string} text
 * @returns {Boolean}
 */
function isStartOfRegionBlock(lines, index) {
    return typeof lines[index] === "string" &&
        /^REGION( .*)?$/g.test(lines[index]) &&
        // A cue identifer can also contain "REGION". Check that we have no timings
        // on the second line
        (lines[index + 1] === undefined || lines[index + 1].indexOf("-->") < 0);
}
/**
 * Returns true if the line given looks like the beginning of a cue.
 * You should provide to this function only lines following "empty" lines.
 * @param {Array.<string>} lines
 * @param {number} index
 * @returns {Boolean}
 */
function isStartOfCueBlock(lines, index) {
    // checked cases:
    //   - empty lines
    //   - start of a comment
    //   - start of a region
    //   - start of a style
    // Anything else whose first or second line is a timestamp line is a cue.
    const firstLine = lines[index];
    if (firstLine === undefined ||
        firstLine === "" ||
        isStartOfStyleBlock(lines, index) ||
        isStartOfRegionBlock(lines, index) ||
        isStartOfNoteBlock(lines, index)) {
        return false;
    }
    if (firstLine.indexOf("-->") >= 0) {
        return true;
    }
    const secondLine = lines[index + 1];
    return secondLine !== undefined && secondLine.indexOf("-->") >= 0;
}
/**
 * Find end of current WebVTT cue block.
 * @param {Array<string>} linified
 * @param {number} startOfCueBlock
 * @returns {number}
 */
function utils_findEndOfCueBlock(linified, startOfCueBlock) {
    let firstEmptyLineIndex = startOfCueBlock + 1;
    // continue incrementing i until either:
    //   - empty line
    //   - end
    while (isNonEmptyString(linified[firstEmptyLineIndex])) {
        firstEmptyLineIndex++;
    }
    return firstEmptyLineIndex;
}


;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/get_cue_blocks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get cue blocks from a WebVTT file.
 * @param {Array.<string>} linified - Whole WebVTT file. Each new element in
 * this array is a new line.
 * @param {number} headerOffset - index of the first line after the header.
 * Used to avoid taking the header into consideration.
 * @returns {Array.<Array.<string>>}
 */
function get_cue_blocks_getCueBlocks(linified, headerOffset) {
    const cueBlocks = [];
    for (let i = headerOffset; i < linified.length; i++) {
        if (isStartOfCueBlock(linified, i)) {
            const endOfCue = utils_findEndOfCueBlock(linified, i);
            cueBlocks.push(linified.slice(i, endOfCue));
            i = endOfCue;
        }
        else if (isNonEmptyString(linified[i])) {
            // continue incrementing i until either:
            //   - empty line
            //   - end
            while (isNonEmptyString(linified[i])) {
                i++;
            }
        }
    }
    return cueBlocks;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/get_style_blocks.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Get cue blocks from a WebVTT file.
 * @param {Array.<string>} linified - Whole WebVTT file. Each new element in
 * this array is a new line.
 * @param {number} headerOffset - index of the first line after the header.
 * Used to avoid taking the header into consideration.
 * @returns {Array.<Array.<string>>}
 */
function getStyleBlocks(linified, headerOffset) {
    const styleBlocks = [];
    for (let i = headerOffset; i < linified.length; i++) { //
        if (isStartOfStyleBlock(linified, i)) {
            const startOfStyleBlock = i;
            i++;
            // continue incrementing i until either:
            //   - empty line
            //   - end of file
            while (isNonEmptyString(linified[i])) {
                i++;
            }
            const styleBlock = linified.slice(startOfStyleBlock, i);
            styleBlocks.push(styleBlock);
        }
        else if (isNonEmptyString(linified[i])) {
            // continue incrementing i until either:
            //   - empty line
            //   - end
            while (isNonEmptyString(linified[i])) {
                i++;
            }
        }
    }
    return styleBlocks;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/parse_timestamp.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse a single webvtt timestamp into seconds
 * @param {string} timestampString
 * @returns {Number|undefined}
 */
function parse_timestamp_parseTimestamp(timestampString) {
    const splittedTS = timestampString.split(":").reverse();
    if (isNonEmptyString(splittedTS[2]) || isNonEmptyString(splittedTS[1])) {
        const hours = isNonEmptyString(splittedTS[2]) ? parseInt(splittedTS[2], 10) :
            0;
        const minutes = parseInt(splittedTS[1], 10);
        const seconds = parseFloat(splittedTS[0].replace(",", "."));
        if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
            return undefined;
        }
        return hours * 60 * 60 + minutes * 60 + seconds;
    }
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/parse_cue_block.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse the settings part of a cue, into key-value object.
 * @param {string} settingsString
 * @returns {Object}
 */
function parseSettings(settingsString) {
    const splittedSettings = settingsString.split(/ |\t/);
    return splittedSettings
        .reduce((acc, setting) => {
        const splittedSetting = setting.split(":");
        if (splittedSetting.length === 2) {
            acc[splittedSetting[0]] = splittedSetting[1];
        }
        return acc;
    }, {});
}
/**
 * Parse the line containing the timestamp and settings in a cue.
 * The returned object has the following properties:
 *   - start {Number}: start of the cue, in seconds
 *   - end {Number}: end of the cue, in seconds
 *   - settings {Object}: settings for the cue as a key-value object.
 * @param {string} timeString
 * @returns {Object|null}
 */
function parseTimeAndSettings(timeString) {
    // RegExp for the timestamps + settings line.
    // Capture groups:
    //   1 -> start timestamp
    //   2 -> end timestamp
    //   3 - settings
    const lineRegex = /^([\d:.]+)[ |\t]+-->[ |\t]+([\d:.]+)[ |\t]*(.*)$/;
    const matches = lineRegex.exec(timeString);
    if (matches === null) {
        return null;
    }
    const start = parse_timestamp_parseTimestamp(matches[1]);
    const end = parse_timestamp_parseTimestamp(matches[2]);
    if (start == null || end == null) {
        return null;
    }
    const settings = parseSettings(matches[3]);
    return { start,
        end,
        settings };
}
/**
 * Parse cue block into a cue object which contains:
 *   - start {number}: the start of the cue as a timestamp in seconds
 *   - end {number}: the end of the cue as a timestamp in seconds
 *   - header {string|undefined}: The optional cue identifier
 *   - payload {Array.<string>}: the payload of the cue
 * @param {Array.<string>} cueLines
 * @param {Number} timeOffset
 * @returns {Object}
 */
function parse_cue_block_parseCueBlock(cueLines, timeOffset) {
    const timingRegexp = /-->/;
    let timeString;
    let payload;
    let header;
    if (!timingRegexp.test(cueLines[0])) {
        if (!timingRegexp.test(cueLines[1])) {
            // not a cue
            return null;
        }
        header = cueLines[0];
        timeString = cueLines[1];
        payload = cueLines.slice(2, cueLines.length);
    }
    else {
        timeString = cueLines[0];
        payload = cueLines.slice(1, cueLines.length);
    }
    const timeAndSettings = parseTimeAndSettings(timeString);
    if (timeAndSettings === null) {
        return null;
    }
    const { start, end, settings } = timeAndSettings;
    return { start: start + timeOffset,
        end: end + timeOffset,
        settings,
        payload,
        header };
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/create_default_style_elements.ts
/**
 * Creates default classes defined in the W3 specification
 *
 * https://www.w3.org/TR/webvtt1/#default-classes
 */
const colorMap = {
    white: "#ffffff",
    lime: "#00ff00",
    cyan: "#00ffff",
    red: "#ff0000",
    yellow: "#ffff00",
    magenta: "#ff00ff",
    blue: "#0000ff",
    black: "#000000",
};
function createDefaultStyleElements() {
    return Object.keys(colorMap).reduce((result, key) => {
        result[key] = `color: ${colorMap[key]};`;
        result[`bg_${key}`] = `background-color: ${colorMap[key]};`;
        return result;
    }, {});
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/parse_style_block.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Parse style element from WebVTT.
 * @param {Array.<Array.<string>>} styleBlocks
 * @return {Object}
 */
function parseStyleBlocks(styleBlocks) {
    const classes = createDefaultStyleElements();
    let global = "";
    styleBlocks.forEach((styleBlock) => {
        if (styleBlock.length >= 2) {
            for (let index = 1; index < styleBlock.length; index++) {
                let line = styleBlock[index];
                if (Array.isArray(/::cue {/.exec(line))) {
                    line = styleBlock[++index];
                    while (isNonEmptyString(line) && (!(Array.isArray(/}/.exec(line)) ||
                        line.length === 0))) {
                        global += line;
                        line = styleBlock[++index];
                    }
                }
                else {
                    const classNames = [];
                    let cueClassLine = /::cue\(\.?(.*?)\)(?:,| {)/.exec(line);
                    while (isNonEmptyString(line) && Array.isArray(cueClassLine)) {
                        classNames.push(cueClassLine[1]);
                        line = styleBlock[++index];
                        cueClassLine = /::cue\(\.?(.*?)\)(?:,| {)/.exec(line);
                    }
                    let styleContent = "";
                    while (isNonEmptyString(line) && (!(Array.isArray(/}/.exec(line)) ||
                        line.length === 0))) {
                        styleContent += line;
                        line = styleBlock[++index];
                    }
                    classNames.forEach((className) => {
                        const styleElement = classes[className];
                        if (styleElement === undefined) {
                            classes[className] = styleContent;
                        }
                        else {
                            classes[className] += styleContent;
                        }
                    });
                }
            }
        }
    });
    return { classes, global };
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/create_styled_element.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Construct an HTMLElement/TextNode representing the given node and apply
 * the right styling on it.
 * @param {Node} baseNode
 * @param {Array.<Object>} styleElements
 * @param {Array.<string>} styleClasses
 * @returns {Node}
 */
function createStyledElement(baseNode, styleElements) {
    const HTMLTags = ["u", "i", "b"];
    const authorizedNodeNames = ["u", "i", "b", "c", "#text"];
    const mainNodeName = baseNode.nodeName.toLowerCase().split(".")[0];
    let nodeWithStyle;
    if (arrayIncludes(authorizedNodeNames, mainNodeName)) {
        if (mainNodeName === "#text") {
            const linifiedText = baseNode.wholeText
                .split("\n");
            nodeWithStyle = document.createElement("span");
            for (let i = 0; i < linifiedText.length; i++) {
                if (i > 0) {
                    nodeWithStyle.appendChild(document.createElement("br"));
                }
                if (linifiedText[i].length > 0) {
                    const textNode = document.createTextNode(linifiedText[i]);
                    nodeWithStyle.appendChild(textNode);
                }
            }
        }
        else {
            const nodeClasses = baseNode.nodeName.toLowerCase().split(".");
            const styleContents = [];
            nodeClasses.forEach(nodeClass => {
                if (isNonEmptyString(styleElements[nodeClass])) {
                    styleContents.push(styleElements[nodeClass]);
                }
            });
            if (styleContents.length !== 0) { // If style must be applied
                const attr = document.createAttribute("style");
                styleContents.forEach((styleContent) => {
                    attr.value += styleContent;
                });
                const nameClass = arrayIncludes(HTMLTags, mainNodeName) ?
                    mainNodeName : "span";
                nodeWithStyle = document.createElement(nameClass);
                nodeWithStyle.setAttributeNode(attr);
            }
            else { // If style mustn't be applied. Rebuild element with tag name
                const elementTag = !arrayIncludes(HTMLTags, mainNodeName) ?
                    "span" : mainNodeName;
                nodeWithStyle = document.createElement(elementTag);
            }
            for (let j = 0; j < baseNode.childNodes.length; j++) {
                const child = createStyledElement(baseNode.childNodes[j], styleElements);
                nodeWithStyle.appendChild(child);
            }
        }
    }
    else {
        nodeWithStyle = document.createElement("span");
        for (let j = 0; j < baseNode.childNodes.length; j++) {
            const child = createStyledElement(baseNode.childNodes[j], styleElements);
            nodeWithStyle.appendChild(child);
        }
    }
    return nodeWithStyle;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/convert_payload_to_html.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {string} text
 * @param {Array.<Object>} styleElements
 * @returns {Array.<HTMLElement>}
 */
function convertPayloadToHTML(text, styleElements) {
    const filteredText = text
        // Remove timestamp tags
        .replace(/<[0-9]{2}:[0-9]{2}.[0-9]{3}>/, "")
        // Remove tag content or attributes (e.g. <b dfgfdg> => <b>)
        .replace(/<([u,i,b,c])(\..*?)?(?: .*?)?>(.*?)<\/\1>/g, "<$1$2>$3</$1$2>");
    const parsedWebVTT = new DOMParser().parseFromString(filteredText, "text/html");
    const nodes = parsedWebVTT.body.childNodes;
    const styledElements = [];
    for (let i = 0; i < nodes.length; i++) {
        styledElements.push(createStyledElement(nodes[i], styleElements));
    }
    return styledElements;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/create_style_attribute.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Construct a DOM attribute reflecting given cue settings
 * @param {Partial<Record<string, string>>} settings
 * @returns {Attr}
 */
function createStyleAttribute(settings) {
    const pAttr = document.createAttribute("style");
    pAttr.value = getAttrValue(settings);
    return pAttr;
}
const getAttrValue = (settings) => {
    const hasSettings = settings !== undefined && object_values(settings).length !== 0;
    if (!hasSettings) {
        return "text-align:center";
    }
    const xPositioning = getPositioningX(settings);
    const yPositioning = getPositioningY(settings);
    return ("position: absolute;" +
        "margin: 0;" +
        `transform: translate(${xPositioning.offset}%,${yPositioning.offset}%);` +
        `width: ${getSizePercentage(settings.size)}%;` +
        `left: ${xPositioning.position}%;` +
        `top: ${yPositioning.position !== null ? `${yPositioning.position}%` : "auto"};` +
        `text-align: ${getAlignValue(settings.align)};`);
};
var PositionAlignment;
(function (PositionAlignment) {
    PositionAlignment["LINE_LEFT"] = "line-left";
    PositionAlignment["CENTER"] = "center";
    PositionAlignment["LINE_RIGHT"] = "line-right";
})(PositionAlignment || (PositionAlignment = {}));
var Align;
(function (Align) {
    Align["LEFT"] = "left";
    Align["CENTER"] = "center";
    Align["RIGHT"] = "right";
})(Align || (Align = {}));
var LineAlignment;
(function (LineAlignment) {
    LineAlignment["START"] = "start";
    LineAlignment["CENTER"] = "center";
    LineAlignment["END"] = "end";
})(LineAlignment || (LineAlignment = {}));
const getPositioningX = (settings) => {
    return {
        position: getXPositionPercentage(settings),
        offset: getXOffsetPercentage(settings),
    };
};
const getXPositionPercentage = (settings) => {
    const positionPercentage = getPercentageValue(settings.position);
    if (positionPercentage !== null) {
        return positionPercentage;
    }
    const align = getAlignValue(settings.align);
    const alignMap = {
        [Align.LEFT]: 0,
        [Align.CENTER]: 50,
        [Align.RIGHT]: 100,
    };
    return alignMap[align];
};
const getXOffsetPercentage = (settings) => {
    const getPositionAlignment = (positionSetting) => {
        const positionRegex = /,(line-left|line-right|center)/;
        const matches = positionRegex.exec(positionSetting);
        if (!Array.isArray(matches) || matches.length < 2) {
            return null;
        }
        return matches[1];
    };
    const positionAlignmentMap = {
        [PositionAlignment.LINE_LEFT]: 0,
        [PositionAlignment.CENTER]: -50,
        [PositionAlignment.LINE_RIGHT]: -100,
    };
    const positionAlignment = settings.position !== undefined ?
        getPositionAlignment(settings.position) :
        null;
    if (positionAlignment !== null) {
        return positionAlignmentMap[positionAlignment];
    }
    const alignMap = {
        [Align.LEFT]: 0,
        [Align.CENTER]: -50,
        [Align.RIGHT]: -100,
    };
    const align = settings.align !== undefined ?
        getAlignValue(settings.align)
        : Align.CENTER;
    return alignMap[align];
};
const getPositioningY = (settings) => {
    return {
        position: getYPositionPercentage(settings.line),
        offset: getYOffsetPercentage(settings.line),
    };
};
const getYPositionPercentage = (lineSetting) => {
    return getPercentageValue(lineSetting);
};
const getYOffsetPercentage = (lineSetting) => {
    const getLineAlignment = (line) => {
        const positionRegex = /,(start|center|end)/;
        const matches = positionRegex.exec(line);
        if (!Array.isArray(matches) || matches.length < 2) {
            return null;
        }
        return matches[1];
    };
    const lineAlignmentMap = {
        [LineAlignment.START]: 0,
        [LineAlignment.CENTER]: -50,
        [LineAlignment.END]: -100,
    };
    if (lineSetting === undefined) {
        return lineAlignmentMap[LineAlignment.START];
    }
    const lineAlignment = getLineAlignment(lineSetting);
    return lineAlignment !== null ?
        lineAlignmentMap[lineAlignment] :
        lineAlignmentMap[LineAlignment.START];
};
const getAlignValue = (alignSetting) => {
    switch (alignSetting) {
        case "left":
        case "start":
            return "left";
        case "right":
        case "end":
            return "right";
        default:
            return "center";
    }
};
const getSizePercentage = (sizeSetting) => {
    const defaultSize = 100;
    return getPercentageValueOrDefault(sizeSetting, defaultSize);
};
const getPercentageValueOrDefault = (percentageString, defaultValue) => {
    const value = getPercentageValue(percentageString);
    return value !== null ?
        value :
        defaultValue;
};
const getPercentageValue = (percentageString) => {
    if (percentageString === undefined) {
        return null;
    }
    const percentageValueRegex = /^([\d.]+)%/;
    const matches = percentageValueRegex.exec(percentageString);
    if (!Array.isArray(matches) || matches.length < 2) {
        return null;
    }
    return parseInt(matches[1], 10);
};

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/to_html.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Parse cue block into an object with the following properties:
 *   - start {number}: start time at which the cue should be displayed
 *   - end {number}: end time at which the cue should be displayed
 *   - element {HTMLElement}: the cue text, translated into an HTMLElement
 *
 * Returns undefined if the cue block could not be parsed.
 * @param {Array.<string>} cueBlock
 * @param {Number} timeOffset
 * @param {Array.<Object>} classes
 * @returns {Object|undefined}
 */
function to_html_toHTML(cueObj, styling) {
    const { start, end, settings, header, payload } = cueObj;
    const region = document.createElement("div");
    const regionAttr = document.createAttribute("style");
    regionAttr.value =
        "width:100%;" +
            "height:100%;" +
            "display:flex;" +
            "flex-direction:column;" +
            "justify-content:flex-end;" +
            "align-items:center;";
    region.setAttributeNode(regionAttr);
    // Get content, format and apply style.
    const pElement = document.createElement("p");
    const pAttr = createStyleAttribute(settings);
    pElement.setAttributeNode(pAttr);
    const spanElement = document.createElement("span");
    const attr = document.createAttribute("style");
    // set color and background-color default values, as indicated in:
    // https://www.w3.org/TR/webvtt1/#applying-css-properties
    attr.value =
        "background-color:rgba(0,0,0,0.8);" +
            "color:white;";
    spanElement.setAttributeNode(attr);
    const { global, classes } = styling;
    const localStyle = isNonEmptyString(header) ? classes[header] :
        undefined;
    const styles = [global, localStyle]
        .filter((s) => s !== undefined)
        .join("");
    attr.value += styles;
    spanElement.setAttributeNode(attr);
    convertPayloadToHTML(payload.join("\n"), classes)
        .forEach(element => {
        spanElement.appendChild(element);
    });
    region.appendChild(pElement);
    pElement.appendChild(spanElement);
    return { start,
        end,
        element: region };
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/parse_webvtt_to_div.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * Parse WebVTT from text. Returns an array with:
 * - start : start of current cue, in seconds
 * - end : end of current cue, in seconds
 * - content : HTML formatted cue.
 *
 * Global style is parsed and applied to div element.
 * Specific style is parsed and applied to class element.
 *
 * @throws Error - Throws if the given WebVTT string is invalid.
 * @param {string} text - The whole webvtt subtitles to parse
 * @param {Number} timeOffset - Offset to add to start and end times, in seconds
 * @return {Array.<Object>}
 */
function parseWebVTT(text, timeOffset) {
    const newLineChar = /\r\n|\n|\r/g; // CRLF|LF|CR
    const linified = text.split(newLineChar);
    const cuesArray = [];
    if (/^WEBVTT( |\t|\n|\r|$)/.exec(linified[0]) === null) {
        throw new Error("Can't parse WebVTT: Invalid File.");
    }
    const firstLineAfterHeader = getFirstLineAfterHeader(linified);
    const styleBlocks = getStyleBlocks(linified, firstLineAfterHeader);
    const cueBlocks = get_cue_blocks_getCueBlocks(linified, firstLineAfterHeader);
    const styles = parseStyleBlocks(styleBlocks);
    for (let i = 0; i < cueBlocks.length; i++) {
        const cueObject = parse_cue_block_parseCueBlock(cueBlocks[i], timeOffset);
        if (cueObject != null) {
            const htmlCue = to_html_toHTML(cueObject, styles);
            cuesArray.push(htmlCue);
        }
    }
    return cuesArray;
}

;// CONCATENATED MODULE: ./src/parsers/texttracks/webvtt/html/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const webvtt_html = (parseWebVTT);

;// CONCATENATED MODULE: ./src/features/list/html_vtt_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to parse WebVTT text tracks in an HTML textrack mode.
 * @param {Object} features
 */
function addHTMLVTTFeature(features) {
    features.htmlTextTracksParsers.vtt = webvtt_html;
}

/* harmony default export */ const html_vtt_parser = ((/* unused pure expression or super */ null && (addHTMLVTTFeature)));

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/image/image_segment_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Image SegmentBuffer implementation.
 * @class ImageSegmentBuffer
 */
class ImageSegmentBuffer extends SegmentBuffer {
    constructor() {
        src_log.debug("ISB: Creating ImageSegmentBuffer");
        super();
        this.bufferType = "image";
        this._buffered = new ManualTimeRanges();
    }
    /**
     * @param {Object} data
     * @returns {Promise}
     */
    pushChunk(infos) {
        var _a, _b;
        src_log.debug("ISB: appending new data.");
        if (infos.data.chunk === null) {
            return Promise.resolve();
        }
        const { appendWindow, chunk } = infos.data;
        // The following check is ugly. I don't care, the image buffer is there
        // due to an ugly deprecated API that will soon disappear
        const { start, end, timescale } = chunk;
        const appendWindowStart = (_a = appendWindow[0]) !== null && _a !== void 0 ? _a : 0;
        const appendWindowEnd = (_b = appendWindow[1]) !== null && _b !== void 0 ? _b : Infinity;
        const timescaledStart = start / timescale;
        const timescaledEnd = end / timescale;
        const startTime = Math.max(appendWindowStart, timescaledStart);
        const endTime = Math.min(appendWindowEnd, timescaledEnd);
        try {
            this._buffered.insert(startTime, endTime);
            if (infos.inventoryInfos !== null) {
                this._segmentInventory.insertChunk(infos.inventoryInfos);
            }
        }
        catch (err) {
            return Promise.reject(err);
        }
        return Promise.resolve();
    }
    /**
     * @param {Number} from
     * @param {Number} to
     * @returns {Promise}
     */
    removeBuffer(start, end) {
        src_log.info("ISB: ignored image data remove order", start, end);
        // Logic removed as it caused more problems than it resolved:
        // Image thumbnails are always downloaded as a single BIF file, meaning that
        // any removing might necessitate to re-load the whole file in the future
        // which seems pointless.
        // In any case, image handling through the regular RxPlayer APIs has been
        // completely deprecated now for several reasons, and should disappear in
        // the next major version.
        return Promise.resolve();
    }
    /**
     * Indicate that every chunks from a Segment has been given to pushChunk so
     * far.
     * This will update our internal Segment inventory accordingly.
     * The returned Observable will emit and complete successively once the whole
     * segment has been pushed and this indication is acknowledged.
     * @param {Object} infos
     * @returns {Promise}
     */
    endOfSegment(_infos) {
        this._segmentInventory.completeSegment(_infos, this._buffered);
        return Promise.resolve();
    }
    /**
     * Returns the currently buffered data, in a TimeRanges object.
     * @returns {TimeRanges}
     */
    getBufferedRanges() {
        return this._buffered;
    }
    dispose() {
        src_log.debug("ISB: disposing image SegmentBuffer");
        this._buffered.remove(0, Infinity);
    }
}

;// CONCATENATED MODULE: ./src/core/segment_buffers/implementations/image/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const implementations_image = (ImageSegmentBuffer);

;// CONCATENATED MODULE: ./src/features/list/image_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to display image tracks.
 * @param {Object} features
 */
function addImageBufferFeature(features) {
    features.imageBuffer = implementations_image;
}

/* harmony default export */ const image_buffer = ((/* unused pure expression or super */ null && (addImageBufferFeature)));

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/add_segment_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add a new segment to the index.
 *
 * /!\ Mutate the given index
 * @param {Object} index
 * @param {Object} newSegment
 * @param {Object} currentSegment
 * @returns {Boolean} - true if the segment has been added
 */
function add_segment_infos_addSegmentInfos(index, newSegment, currentSegment) {
    const { timeline, timescale } = index;
    const timelineLength = timeline.length;
    const last = timeline[timelineLength - 1];
    const scaledNewSegment = newSegment.timescale === timescale ?
        { time: newSegment.time,
            duration: newSegment.duration } :
        { time: (newSegment.time / newSegment.timescale) * timescale,
            duration: (newSegment.duration / newSegment.timescale) * timescale };
    // in some circumstances, the new segment information are only duration
    // information that we could use to deduct the start of the next segment.
    // This is the case where the new segment are associated to a current
    // segment and have the same start.
    // However, we prefer to be sure of the duration of the new segments
    // before adding such segments.
    const shouldDeductNextSegment = currentSegment.time === scaledNewSegment.time;
    if (shouldDeductNextSegment) {
        return false;
    }
    else if (scaledNewSegment.time >= getIndexSegmentEnd(last, null)) {
        // if the given timing has a timestamp after the timeline end we
        // just need to push a new element in the timeline, or increase
        // the @r attribute of the last element.
        if (last.duration === scaledNewSegment.duration) {
            last.repeatCount++;
        }
        else {
            index.timeline.push({ duration: scaledNewSegment.duration,
                start: scaledNewSegment.time,
                repeatCount: 0 });
        }
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/tokens.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {string} url
 * @param {string|number} bitrate
 * @returns {string}
 */
function replaceRepresentationSmoothTokens(url, bitrate, customAttributes) {
    return url
        .replace(/\{bitrate\}/g, String(bitrate))
        .replace(/{CustomAttributes}/g, customAttributes.length > 0 ? customAttributes[0] :
        "");
}
/**
 * @param {string} url
 * @param {number} time
 * @returns {string}
 */
function replaceSegmentSmoothTokens(url, time) {
    return url.replace(/\{start time\}/g, String(time));
}


;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









/**
 * @param {Number} start
 * @param {Number} up
 * @param {Number} duration
 * @returns {Number}
 */
function getSegmentNumber(start, up, duration) {
    const diff = up - start;
    return diff > 0 ? Math.floor(diff / duration) :
        0;
}
/**
 * Convert second-based start time and duration to the timescale of the
 * manifest's index.
 * @param {Object} index
 * @param {Number} start
 * @param {Number} duration
 * @returns {Object} - Object with two properties:
 *   - up {Number}: timescaled timestamp of the beginning time
 *   - to {Number}: timescaled timestamp of the end time (start time + duration)
 */
function normalizeRange(index, start, duration) {
    const timescale = index.timescale === undefined ||
        index.timescale === 0 ? 1 :
        index.timescale;
    return { up: start * timescale,
        to: (start + duration) * timescale };
}
/**
 * Calculate the number of times a segment repeat based on the next segment.
 * @param {Object} segment
 * @param {Object} nextSegment
 * @returns {Number}
 */
function representation_index_calculateRepeat(segment, nextSegment) {
    let repeatCount = segment.repeatCount;
    // A negative value of the @r attribute of the S element indicates
    // that the duration indicated in @d attribute repeats until the
    // start of the next S element, the end of the Period or until the
    // next MPD update.
    // TODO Also for SMOOTH????
    if (segment.duration != null && repeatCount < 0) {
        const repeatEnd = nextSegment !== undefined ? nextSegment.start :
            Infinity;
        repeatCount = Math.ceil((repeatEnd - segment.start) / segment.duration) - 1;
    }
    return repeatCount;
}
/**
 * RepresentationIndex implementation for Smooth Manifests.
 *
 * Allows to interact with the index to create new Segments.
 *
 * @class SmoothRepresentationIndex
 */
class SmoothRepresentationIndex {
    /**
     * Creates a new `SmoothRepresentationIndex`.
     * @param {Object} index
     * @param {Object} options
     */
    constructor(index, options) {
        const { aggressiveMode, isLive, segmentPrivateInfos, timeShiftBufferDepth } = options;
        const estimatedReceivedTime = options.manifestReceivedTime == null ?
            performance.now() :
            options.manifestReceivedTime;
        this._index = index;
        this._indexValidityTime = estimatedReceivedTime;
        this._timeShiftBufferDepth = timeShiftBufferDepth;
        this._initSegmentInfos = { bitsPerSample: segmentPrivateInfos.bitsPerSample,
            channels: segmentPrivateInfos.channels,
            codecPrivateData: segmentPrivateInfos.codecPrivateData,
            packetSize: segmentPrivateInfos.packetSize,
            samplingRate: segmentPrivateInfos.samplingRate,
            timescale: index.timescale,
            protection: segmentPrivateInfos.protection };
        this._isAggressiveMode = aggressiveMode;
        this._isLive = isLive;
        if (index.timeline.length !== 0) {
            const lastItem = index.timeline[index.timeline.length - 1];
            const scaledEnd = getIndexSegmentEnd(lastItem, null);
            this._initialScaledLastPosition = scaledEnd;
            if (isLive) {
                const scaledReceivedTime = (estimatedReceivedTime / 1000) * index.timescale;
                this._scaledLiveGap = scaledReceivedTime - scaledEnd;
            }
        }
    }
    /**
     * Construct init Segment compatible with a Smooth Manifest.
     * @returns {Object}
     */
    getInitSegment() {
        return { id: "init",
            isInit: true,
            privateInfos: { smoothInitSegment: this._initSegmentInfos },
            url: null,
            time: 0,
            end: 0,
            duration: 0,
            timescale: 1,
            complete: true };
    }
    /**
     * Generate a list of Segments for a particular period of time.
     *
     * @param {Number} from
     * @param {Number} dur
     * @returns {Array.<Object>}
     */
    getSegments(from, dur) {
        this._refreshTimeline();
        const { up, to } = normalizeRange(this._index, from, dur);
        const { timeline, timescale, media } = this._index;
        const isAggressive = this._isAggressiveMode;
        let currentNumber;
        const segments = [];
        const timelineLength = timeline.length;
        const maxPosition = this._scaledLiveGap == null ?
            undefined :
            ((performance.now() / 1000) * timescale) - this._scaledLiveGap;
        for (let i = 0; i < timelineLength; i++) {
            const segmentRange = timeline[i];
            const { duration, start } = segmentRange;
            const repeat = representation_index_calculateRepeat(segmentRange, timeline[i + 1]);
            let segmentNumberInCurrentRange = getSegmentNumber(start, up, duration);
            let segmentTime = start + segmentNumberInCurrentRange * duration;
            const timeToAddToCheckMaxPosition = isAggressive ? 0 :
                duration;
            while (segmentTime < to &&
                segmentNumberInCurrentRange <= repeat &&
                (maxPosition == null ||
                    (segmentTime + timeToAddToCheckMaxPosition) <= maxPosition)) {
                const time = segmentTime;
                const number = currentNumber != null ?
                    currentNumber + segmentNumberInCurrentRange :
                    undefined;
                const segment = { id: String(segmentTime),
                    isInit: false,
                    time: time / timescale,
                    end: (time + duration) / timescale,
                    duration: duration / timescale,
                    timescale: 1,
                    number,
                    url: replaceSegmentSmoothTokens(media, time),
                    complete: true,
                    privateInfos: { smoothMediaSegment: { time,
                            duration } } };
                segments.push(segment);
                // update segment number and segment time for the next segment
                segmentNumberInCurrentRange++;
                segmentTime = start + segmentNumberInCurrentRange * duration;
            }
            if (segmentTime >= to) {
                // we reached ``to``, we're done
                return segments;
            }
            if (currentNumber != null) {
                currentNumber += repeat + 1;
            }
        }
        return segments;
    }
    /**
     * Returns true if, based on the arguments, the index should be refreshed.
     * (If we should re-fetch the manifest)
     * @param {Number} up
     * @param {Number} to
     * @returns {Boolean}
     */
    shouldRefresh(up, to) {
        this._refreshTimeline();
        if (!this._isLive) {
            return false;
        }
        const { timeline, timescale } = this._index;
        const lastSegmentInCurrentTimeline = timeline[timeline.length - 1];
        if (lastSegmentInCurrentTimeline === undefined) {
            return false;
        }
        const repeat = lastSegmentInCurrentTimeline.repeatCount;
        const endOfLastSegmentInCurrentTimeline = lastSegmentInCurrentTimeline.start + (repeat + 1) *
            lastSegmentInCurrentTimeline.duration;
        if (to * timescale < endOfLastSegmentInCurrentTimeline) {
            return false;
        }
        if (up * timescale >= endOfLastSegmentInCurrentTimeline) {
            return true;
        }
        // ----
        const startOfLastSegmentInCurrentTimeline = lastSegmentInCurrentTimeline.start + repeat *
            lastSegmentInCurrentTimeline.duration;
        return (up * timescale) > startOfLastSegmentInCurrentTimeline;
    }
    /**
     * Returns first position available in the index.
     * @returns {Number|null}
     */
    getFirstAvailablePosition() {
        this._refreshTimeline();
        const index = this._index;
        if (index.timeline.length === 0) {
            return null;
        }
        return index.timeline[0].start / index.timescale;
    }
    /**
     * Returns last position available in the index.
     * @returns {Number}
     */
    getLastAvailablePosition() {
        this._refreshTimeline();
        const index = this._index;
        if (this._scaledLiveGap == null) {
            const lastTimelineElement = index.timeline[index.timeline.length - 1];
            return getIndexSegmentEnd(lastTimelineElement, null) / index.timescale;
        }
        for (let i = index.timeline.length - 1; i >= 0; i--) {
            const timelineElt = index.timeline[i];
            const timescaledNow = (performance.now() / 1000) * index.timescale;
            const { start, duration, repeatCount } = timelineElt;
            for (let j = repeatCount; j >= 0; j--) {
                const end = start + (duration * (j + 1));
                const positionToReach = this._isAggressiveMode ? end - duration :
                    end;
                if (positionToReach <= timescaledNow - this._scaledLiveGap) {
                    return end / index.timescale;
                }
            }
        }
        return undefined;
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        if (!this._isLive) {
            return this.getLastAvailablePosition();
        }
        return undefined;
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     * @param {number} start
     * @param {number} end
     * @returns {boolean|undefined}
     */
    awaitSegmentBetween(start, end) {
        var _a;
        assert_assert(start <= end);
        if (this.isFinished()) {
            return false;
        }
        const lastAvailablePosition = this.getLastAvailablePosition();
        if (lastAvailablePosition !== undefined && end < lastAvailablePosition) {
            return false;
        }
        return end > ((_a = this.getFirstAvailablePosition()) !== null && _a !== void 0 ? _a : 0) ? undefined :
            false;
    }
    /**
     * Checks if `timeSec` is in a discontinuity.
     * That is, if there's no segment available for the `timeSec` position.
     * @param {number} timeSec - The time to check if it's in a discontinuity, in
     * seconds.
     * @returns {number | null} - If `null`, no discontinuity is encountered at
     * `time`. If this is a number instead, there is one and that number is the
     * position for which a segment is available in seconds.
     */
    checkDiscontinuity(timeSec) {
        this._refreshTimeline();
        return checkDiscontinuity(this._index, timeSec, undefined);
    }
    /**
     * Returns `true` if a Segment returned by this index is still considered
     * available.
     * Returns `false` if it is not available anymore.
     * Returns `undefined` if we cannot know whether it is still available or not.
     * @param {Object} segment
     * @returns {Boolean|undefined}
     */
    isSegmentStillAvailable(segment) {
        if (segment.isInit) {
            return true;
        }
        this._refreshTimeline();
        const { timeline, timescale } = this._index;
        return isSegmentStillAvailable(segment, timeline, timescale, 0);
    }
    /**
     * @param {Error} error
     * @returns {Boolean}
     */
    canBeOutOfSyncError(error) {
        if (!this._isLive) {
            return false;
        }
        return error instanceof NetworkError &&
            (error.isHttpError(404) || error.isHttpError(412));
    }
    /**
     * Replace this RepresentationIndex by a newly downloaded one.
     * Check if the old index had more information about new segments and re-add
     * them if that's the case.
     * @param {Object} newIndex
     */
    _replace(newIndex) {
        const oldTimeline = this._index.timeline;
        const newTimeline = newIndex._index.timeline;
        const oldTimescale = this._index.timescale;
        const newTimescale = newIndex._index.timescale;
        this._index = newIndex._index;
        this._initialScaledLastPosition = newIndex._initialScaledLastPosition;
        this._indexValidityTime = newIndex._indexValidityTime;
        this._scaledLiveGap = newIndex._scaledLiveGap;
        if (oldTimeline.length === 0 ||
            newTimeline.length === 0 ||
            oldTimescale !== newTimescale) {
            return; // don't take risk, if something is off, take the new one
        }
        const lastOldTimelineElement = oldTimeline[oldTimeline.length - 1];
        const lastNewTimelineElement = newTimeline[newTimeline.length - 1];
        const newEnd = getIndexSegmentEnd(lastNewTimelineElement, null);
        if (getIndexSegmentEnd(lastOldTimelineElement, null) <= newEnd) {
            return;
        }
        for (let i = 0; i < oldTimeline.length; i++) {
            const oldTimelineRange = oldTimeline[i];
            const oldEnd = getIndexSegmentEnd(oldTimelineRange, null);
            if (oldEnd === newEnd) { // just add the supplementary segments
                this._index.timeline = this._index.timeline.concat(oldTimeline.slice(i + 1));
                return;
            }
            if (oldEnd > newEnd) { // adjust repeatCount + add supplementary segments
                if (oldTimelineRange.duration !== lastNewTimelineElement.duration) {
                    return;
                }
                const rangeDuration = newEnd - oldTimelineRange.start;
                if (rangeDuration === 0) {
                    src_log.warn("Smooth Parser: a discontinuity detected in the previous manifest" +
                        " has been resolved.");
                    this._index.timeline = this._index.timeline.concat(oldTimeline.slice(i));
                    return;
                }
                if (rangeDuration < 0 || rangeDuration % oldTimelineRange.duration !== 0) {
                    return;
                }
                const repeatWithOld = (rangeDuration / oldTimelineRange.duration) - 1;
                const relativeRepeat = oldTimelineRange.repeatCount - repeatWithOld;
                if (relativeRepeat < 0) {
                    return;
                }
                lastNewTimelineElement.repeatCount += relativeRepeat;
                const supplementarySegments = oldTimeline.slice(i + 1);
                this._index.timeline = this._index.timeline.concat(supplementarySegments);
                return;
            }
        }
    }
    /**
     * Update the current index with a new, partial, version.
     * This method might be use to only add information about new segments.
     * @param {Object} newIndex
     */
    _update(newIndex) {
        updateSegmentTimeline(this._index.timeline, newIndex._index.timeline);
        this._initialScaledLastPosition = newIndex._initialScaledLastPosition;
        this._indexValidityTime = newIndex._indexValidityTime;
        this._scaledLiveGap = newIndex._scaledLiveGap;
    }
    /**
     * Returns `true` if the last segments in this index have already been
     * generated.
     * Returns `false` if the index is still waiting on future segments to be
     * generated.
     *
     * For Smooth, it should only depend on whether the content is a live content
     * or not.
     * TODO What about Smooth live content that finishes at some point?
     * @returns {boolean}
     */
    isFinished() {
        return !this._isLive;
    }
    /**
     * @returns {Boolean}
     */
    isInitialized() {
        return true;
    }
    /**
     * Add new segments to a `SmoothRepresentationIndex`.
     * @param {Array.<Object>} nextSegments - The segment information parsed.
     * @param {Object} segment - Information on the segment which contained that
     * new segment information.
     */
    addNewSegments(nextSegments, currentSegment) {
        this._refreshTimeline();
        for (let i = 0; i < nextSegments.length; i++) {
            add_segment_infos_addSegmentInfos(this._index, nextSegments[i], currentSegment);
        }
    }
    /**
     * Clean-up timeline to remove segment information which should not be
     * available due to the timeshift window
     */
    _refreshTimeline() {
        // clean segments before time shift buffer depth
        if (this._initialScaledLastPosition == null) {
            return;
        }
        const index = this._index;
        const timeShiftBufferDepth = this._timeShiftBufferDepth;
        const timeSinceLastRealUpdate = (performance.now() -
            this._indexValidityTime) / 1000;
        const lastPositionEstimate = timeSinceLastRealUpdate +
            this._initialScaledLastPosition / index.timescale;
        if (timeShiftBufferDepth != null) {
            const minimumPosition = (lastPositionEstimate - timeShiftBufferDepth) *
                index.timescale;
            clearTimelineFromPosition(index.timeline, minimumPosition);
        }
    }
}

;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/create_box.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Speed up string to bytes conversion by memorizing the result
 *
 * The keys here are ISOBMFF box names. The values are the corresponding
 * bytes conversion for putting as an ISOBMFF boxes.
 *
 * Used by the boxName method.
 * @type {Object}
 */
const boxNamesMem = {};
/**
 * Convert the string name of an ISOBMFF box into the corresponding bytes.
 * Has a memorization mechanism to speed-up if you want to translate the
 * same string multiple times.
 * @param {string} str
 * @returns {Uint8Array}
 */
function boxName(str) {
    if (boxNamesMem[str] != null) {
        return boxNamesMem[str];
    }
    const nameInBytes = strToUtf8(str);
    boxNamesMem[str] = nameInBytes;
    return nameInBytes;
}
/**
 * Create a new ISOBMFF "box" with the given name.
 * @param {string} name - name of the box you want to create, must always
 * be 4 characters (uuid boxes not supported)
 * @param {Uint8Array} buff - content of the box
 * @returns {Uint8Array} - The entire ISOBMFF box (length+name+content)
 */
function create_box_createBox(name, buff) {
    const len = buff.length + 8;
    return len <= MAX_32_BIT_INT ? byte_parsing_concat(byte_parsing_itobe4(len), boxName(name), buff) :
        byte_parsing_concat(byte_parsing_itobe4(1), boxName(name), itobe8(len + 8), buff);
}
/**
 * @param {string} name
 * @param {Array.<Uint8Array>} children
 * @returns {Uint8Array}
 */
function createBoxWithChildren(name, children) {
    return create_box_createBox(name, byte_parsing_concat(...children));
}


;// CONCATENATED MODULE: ./src/parsers/manifest/utils/check_manifest_ids.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Ensure that no two periods, adaptations from the same period and
 * representations from the same adaptation, have the same ID.
 *
 * Log and mutate their ID if not until this is verified.
 *
 * @param {Object} manifest
 */
function checkManifestIDs(manifest) {
    const periodIDS = [];
    manifest.periods.forEach((period) => {
        const periodID = period.id;
        if (arrayIncludes(periodIDS, periodID)) {
            src_log.warn("Two periods with the same ID found. Updating.");
            const newID = periodID + "-dup";
            period.id = newID;
            checkManifestIDs(manifest);
            periodIDS.push(newID);
        }
        else {
            periodIDS.push(periodID);
        }
        const { adaptations } = period;
        const adaptationIDs = [];
        Object.keys(adaptations).forEach((type) => {
            const adaptationsForType = adaptations[type];
            if (adaptationsForType === undefined) {
                return;
            }
            adaptationsForType.forEach(adaptation => {
                const adaptationID = adaptation.id;
                if (arrayIncludes(adaptationIDs, adaptationID)) {
                    src_log.warn("Two adaptations with the same ID found. Updating.", adaptationID);
                    const newID = adaptationID + "-dup";
                    adaptation.id = newID;
                    checkManifestIDs(manifest);
                    adaptationIDs.push(newID);
                }
                else {
                    adaptationIDs.push(adaptationID);
                }
                const representationIDs = [];
                adaptation.representations.forEach(representation => {
                    const representationID = representation.id;
                    if (arrayIncludes(representationIDs, representationID)) {
                        src_log.warn("Two representations with the same ID found. Updating.", representationID);
                        const newID = `${representationID}-dup`;
                        representation.id = newID;
                        checkManifestIDs(manifest);
                        representationIDs.push(newID);
                    }
                    else {
                        representationIDs.push(representationID);
                    }
                });
            });
        });
    });
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/get_codecs.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {string} codecPrivateData
 * @param {string|undefined} fourCC
 * @returns {string}
 */
function getAudioCodecs(codecPrivateData, fourCC) {
    let mpProfile;
    if (fourCC === "AACH") {
        mpProfile = 5; // High Efficiency AAC Profile
    }
    else {
        mpProfile = isNonEmptyString(codecPrivateData) ?
            (parseInt(codecPrivateData.substring(0, 2), 16) & 0xF8) >> 3 :
            2;
    }
    if (mpProfile === 0) {
        // Return default audio codec
        return "mp4a.40.2";
    }
    return `mp4a.40.${mpProfile}`;
}
/**
 * @param {string} codecPrivateData
 * @returns {string}
 */
function getVideoCodecs(codecPrivateData) {
    // we can extract codes only if fourCC is on of "H264", "X264", "DAVC", "AVC1"
    const arr = /00000001\d7([0-9a-fA-F]{6})/.exec(codecPrivateData);
    if (arr === null || !isNonEmptyString(arr[1])) {
        // Return default video codec
        return "avc1.4D401E";
    }
    return "avc1." + arr[1];
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/parse_C_nodes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parse C nodes to build index timeline.
 * @param {Element} nodes
 */
function parseCNodes(nodes) {
    return nodes.reduce((timeline, node, i) => {
        const dAttr = node.getAttribute("d");
        const tAttr = node.getAttribute("t");
        const rAttr = node.getAttribute("r");
        const repeatCount = rAttr !== null ? +rAttr - 1 : 0;
        let start = tAttr !== null ? +tAttr : undefined;
        let duration = dAttr !== null ? +dAttr : undefined;
        if (i === 0) { // first node
            start = start === undefined || isNaN(start) ? 0 :
                start;
        }
        else { // from second node to the end
            const prev = timeline[i - 1];
            if (start == null || isNaN(start)) {
                if (prev.duration == null || isNaN(prev.duration)) {
                    throw new Error("Smooth: Invalid CNodes. Missing timestamp.");
                }
                start = prev.start + prev.duration * (prev.repeatCount + 1);
            }
        }
        if (duration == null || isNaN(duration)) {
            const nextNode = nodes[i + 1];
            if (nextNode !== undefined) {
                const nextTAttr = nextNode.getAttribute("t");
                const nextStart = isNonEmptyString(nextTAttr) ? +nextTAttr :
                    null;
                if (nextStart === null) {
                    throw new Error("Can't build index timeline from Smooth Manifest.");
                }
                duration = nextStart - start;
            }
            else {
                return timeline;
            }
        }
        timeline.push({ duration, start, repeatCount });
        return timeline;
    }, []);
}

;// CONCATENATED MODULE: ./src/parsers/containers/isobmff/drm/playready.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Parse PlayReady privateData to get its Hexa-coded KeyID.
 * @param {Uint8Array} privateData
 * @returns {string}
 */
function getPlayReadyKIDFromPrivateData(data) {
    const xmlLength = le2toi(data, 8);
    const xml = utf16LEToStr(data.subarray(10, xmlLength + 10));
    const doc = new DOMParser().parseFromString(xml, "application/xml");
    const kidElement = doc.querySelector("KID");
    if (kidElement === null) {
        throw new Error("Cannot parse PlayReady private data: invalid XML");
    }
    const b64guidKid = kidElement.textContent === null ? "" :
        kidElement.textContent;
    const uuidKid = guidToUuid(base64ToBytes(b64guidKid));
    return bytesToHex(uuidKid).toLowerCase();
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/parse_protection_node.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * @param {Uint8Array} keyIdBytes
 * @returns {Array.<Object>}
 */
function createWidevineKeySystem(keyIdBytes) {
    return [{ systemId: "edef8ba9-79d6-4ace-a3c8-27dcd51d21ed",
            privateData: byte_parsing_concat([0x08, 0x01, 0x12, 0x10], keyIdBytes) }];
}
/**
 * Parse "Protection" Node, which contains DRM information
 * @param {Element} protectionNode
 * @returns {Object}
 */
function parseProtectionNode(protectionNode, keySystemCreator = createWidevineKeySystem) {
    if (protectionNode.firstElementChild === null ||
        protectionNode.firstElementChild.nodeName !== "ProtectionHeader") {
        throw new Error("Protection should have ProtectionHeader child");
    }
    const header = protectionNode.firstElementChild;
    const privateData = base64ToBytes(header.textContent === null ? "" :
        header.textContent);
    const keyIdHex = getPlayReadyKIDFromPrivateData(privateData);
    const keyIdBytes = string_parsing_hexToBytes(keyIdHex);
    // remove possible braces
    const systemIdAttr = header.getAttribute("SystemID");
    const systemId = (systemIdAttr !== null ? systemIdAttr :
        "")
        .toLowerCase()
        .replace(/\{|\}/g, "");
    return {
        keyId: keyIdBytes,
        keySystems: [{
                systemId,
                privateData,
                /* keyIds: [keyIdBytes], */
            }].concat(keySystemCreator(keyIdBytes)),
    };
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/parseBoolean.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {*} parseBoolean
 * @returns {Boolean}
 */
function parseBoolean_parseBoolean(val) {
    if (typeof val === "boolean") {
        return val;
    }
    else if (typeof val === "string") {
        return val.toUpperCase() === "TRUE";
    }
    else {
        return false;
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/utils/reduceChildren.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Reduce implementation for the children of the given element.
 * @param {Element} root
 * @param {Function} fn
 * @param {*} init
 * @returns {*}
 */
function reduceChildren(root, fn, init) {
    let node = root.firstElementChild;
    let accumulator = init;
    while (node !== null) {
        accumulator = fn(accumulator, node.nodeName, node);
        node = node.nextElementSibling;
    }
    return accumulator;
}

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/create_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



















/**
 * Default value for the aggressive `mode`.
 * In this mode, segments will be returned even if we're not sure those had time
 * to be generated.
 */
const DEFAULT_AGGRESSIVE_MODE = false;
const DEFAULT_MIME_TYPES = {
    audio: "audio/mp4",
    video: "video/mp4",
    text: "application/ttml+xml",
};
const MIME_TYPES = {
    AACL: "audio/mp4",
    AVC1: "video/mp4",
    H264: "video/mp4",
    TTML: "application/ttml+xml+mp4",
    DFXP: "application/ttml+xml+mp4",
};
/**
 * @param {Object|undefined} parserOptions
 * @returns {Function}
 */
function createSmoothStreamingParser(parserOptions = {}) {
    const referenceDateTime = parserOptions.referenceDateTime === undefined ?
        Date.UTC(1970, 0, 1, 0, 0, 0, 0) / 1000 :
        parserOptions.referenceDateTime;
    const minRepresentationBitrate = parserOptions.minRepresentationBitrate === undefined ?
        0 :
        parserOptions.minRepresentationBitrate;
    const { serverSyncInfos } = parserOptions;
    const serverTimeOffset = serverSyncInfos !== undefined ?
        serverSyncInfos.serverTimestamp - serverSyncInfos.clientTime :
        undefined;
    /**
     * @param {Element} q
     * @param {string} streamType
     * @return {Object}
     */
    function parseQualityLevel(q, streamType) {
        const customAttributes = reduceChildren(q, (acc, qName, qNode) => {
            if (qName === "CustomAttributes") {
                acc.push(...reduceChildren(qNode, (cAttrs, cName, cNode) => {
                    if (cName === "Attribute") {
                        const name = cNode.getAttribute("Name");
                        const value = cNode.getAttribute("Value");
                        if (name !== null && value !== null) {
                            cAttrs.push(name + "=" + value);
                        }
                    }
                    return cAttrs;
                }, []));
            }
            return acc;
        }, []);
        /**
         * @param {string} name
         * @returns {string|undefined}
         */
        function getAttribute(name) {
            const attr = q.getAttribute(name);
            return attr == null ? undefined : attr;
        }
        switch (streamType) {
            case "audio": {
                const audiotag = getAttribute("AudioTag");
                const bitsPerSample = getAttribute("BitsPerSample");
                const channels = getAttribute("Channels");
                const codecPrivateData = getAttribute("CodecPrivateData");
                const fourCC = getAttribute("FourCC");
                const packetSize = getAttribute("PacketSize");
                const samplingRate = getAttribute("SamplingRate");
                const bitrateAttr = getAttribute("Bitrate");
                const bitrate = bitrateAttr === undefined ? 0 :
                    isNaN(parseInt(bitrateAttr, 10)) ? 0 :
                        parseInt(bitrateAttr, 10);
                if ((fourCC !== undefined &&
                    MIME_TYPES[fourCC] === undefined) ||
                    codecPrivateData === undefined) {
                    src_log.warn("Smooth parser: Unsupported audio codec. Ignoring quality level.");
                    return null;
                }
                const codecs = getAudioCodecs(codecPrivateData, fourCC);
                return {
                    audiotag: audiotag !== undefined ? parseInt(audiotag, 10) : audiotag,
                    bitrate,
                    bitsPerSample: bitsPerSample !== undefined ?
                        parseInt(bitsPerSample, 10) : bitsPerSample,
                    channels: channels !== undefined ? parseInt(channels, 10) : channels,
                    codecPrivateData,
                    codecs,
                    customAttributes,
                    mimeType: fourCC !== undefined ? MIME_TYPES[fourCC] : fourCC,
                    packetSize: packetSize !== undefined ?
                        parseInt(packetSize, 10) :
                        packetSize,
                    samplingRate: samplingRate !== undefined ?
                        parseInt(samplingRate, 10) :
                        samplingRate,
                };
            }
            case "video": {
                const codecPrivateData = getAttribute("CodecPrivateData");
                const fourCC = getAttribute("FourCC");
                const width = getAttribute("MaxWidth");
                const height = getAttribute("MaxHeight");
                const bitrateAttr = getAttribute("Bitrate");
                const bitrate = bitrateAttr === undefined ? 0 :
                    isNaN(parseInt(bitrateAttr, 10)) ? 0 :
                        parseInt(bitrateAttr, 10);
                if ((fourCC !== undefined &&
                    MIME_TYPES[fourCC] === undefined) ||
                    codecPrivateData === undefined) {
                    src_log.warn("Smooth parser: Unsupported video codec. Ignoring quality level.");
                    return null;
                }
                const codecs = getVideoCodecs(codecPrivateData);
                return {
                    bitrate,
                    customAttributes,
                    mimeType: fourCC !== undefined ? MIME_TYPES[fourCC] : fourCC,
                    codecPrivateData,
                    codecs,
                    width: width !== undefined ? parseInt(width, 10) : undefined,
                    height: height !== undefined ? parseInt(height, 10) : undefined,
                };
            }
            case "text": {
                const codecPrivateData = getAttribute("CodecPrivateData");
                const fourCC = getAttribute("FourCC");
                const bitrateAttr = getAttribute("Bitrate");
                const bitrate = bitrateAttr === undefined ? 0 :
                    isNaN(parseInt(bitrateAttr, 10)) ? 0 :
                        parseInt(bitrateAttr, 10);
                return { bitrate,
                    customAttributes,
                    mimeType: fourCC !== undefined ? MIME_TYPES[fourCC] :
                        fourCC,
                    codecPrivateData: takeFirstSet(codecPrivateData, "") };
            }
            default:
                src_log.error("Smooth Parser: Unrecognized StreamIndex type: " + streamType);
                return null;
        }
    }
    /**
     * Parse the adaptations (<StreamIndex>) tree containing
     * representations (<QualityLevels>) and timestamp indexes (<c>).
     * Indexes can be quite huge, and this function needs to
     * to be optimized.
     * @param {Object} args
     * @returns {Object}
     */
    function parseAdaptation(args) {
        const { root, timescale, baseUrl, protections, timeShiftBufferDepth, manifestReceivedTime, isLive } = args;
        const timescaleAttr = root.getAttribute("Timescale");
        const _timescale = timescaleAttr === null ? timescale :
            isNaN(+timescaleAttr) ? timescale :
                +timescaleAttr;
        const typeAttribute = root.getAttribute("Type");
        if (typeAttribute === null) {
            throw new Error("StreamIndex without type.");
        }
        if (!arrayIncludes(SUPPORTED_ADAPTATIONS_TYPE, typeAttribute)) {
            src_log.warn("Smooth Parser: Unrecognized adaptation type:", typeAttribute);
        }
        const adaptationType = typeAttribute;
        const subType = root.getAttribute("Subtype");
        const language = root.getAttribute("Language");
        const UrlAttr = root.getAttribute("Url");
        const UrlPathWithTokens = UrlAttr === null ? "" :
            UrlAttr;
        if (false) {}
        const { qualityLevels, cNodes } = reduceChildren(root, (res, _name, node) => {
            switch (_name) {
                case "QualityLevel":
                    const qualityLevel = parseQualityLevel(node, adaptationType);
                    if (qualityLevel === null) {
                        return res;
                    }
                    // filter out video qualityLevels with small bitrates
                    if (adaptationType !== "video" ||
                        qualityLevel.bitrate > minRepresentationBitrate) {
                        res.qualityLevels.push(qualityLevel);
                    }
                    break;
                case "c":
                    res.cNodes.push(node);
                    break;
            }
            return res;
        }, { qualityLevels: [], cNodes: [] });
        const index = { timeline: parseCNodes(cNodes),
            timescale: _timescale };
        // we assume that all qualityLevels have the same
        // codec and mimeType
        assert_assert(qualityLevels.length !== 0, "Adaptation should have at least one playable representation.");
        const adaptationID = adaptationType +
            (isNonEmptyString(language) ? ("_" + language) :
                "");
        const representations = qualityLevels.map((qualityLevel) => {
            const repIndex = {
                timeline: index.timeline,
                timescale: index.timescale,
                media: replaceRepresentationSmoothTokens(UrlPathWithTokens, qualityLevel.bitrate, qualityLevel.customAttributes),
            };
            const mimeType = isNonEmptyString(qualityLevel.mimeType) ?
                qualityLevel.mimeType :
                DEFAULT_MIME_TYPES[adaptationType];
            const codecs = qualityLevel.codecs;
            const id = adaptationID + "_" +
                (adaptationType != null ? adaptationType + "-" :
                    "") +
                (mimeType != null ? mimeType + "-" :
                    "") +
                (codecs != null ? codecs + "-" :
                    "") +
                String(qualityLevel.bitrate);
            const keyIDs = [];
            let firstProtection;
            if (protections.length > 0) {
                firstProtection = protections[0];
                protections.forEach((protection) => {
                    const keyId = protection.keyId;
                    protection.keySystems.forEach((keySystem) => {
                        keyIDs.push({ keyId,
                            systemId: keySystem.systemId });
                    });
                });
            }
            const segmentPrivateInfos = { bitsPerSample: qualityLevel.bitsPerSample,
                channels: qualityLevel.channels,
                codecPrivateData: qualityLevel.codecPrivateData,
                packetSize: qualityLevel.packetSize,
                samplingRate: qualityLevel.samplingRate,
                // TODO set multiple protections here
                // instead of the first one
                protection: firstProtection != null ? {
                    keyId: firstProtection.keyId,
                } : undefined };
            const aggressiveMode = parserOptions.aggressiveMode == null ?
                DEFAULT_AGGRESSIVE_MODE :
                parserOptions.aggressiveMode;
            const reprIndex = new SmoothRepresentationIndex(repIndex, { aggressiveMode,
                isLive,
                manifestReceivedTime,
                segmentPrivateInfos,
                timeShiftBufferDepth });
            const representation = object_assign({}, qualityLevel, { index: reprIndex,
                cdnMetadata: [
                    { baseUrl },
                ],
                mimeType,
                codecs,
                id });
            if (keyIDs.length > 0 || firstProtection !== undefined) {
                const initDataValues = firstProtection === undefined ?
                    [] :
                    firstProtection.keySystems.map((keySystemData) => {
                        const { systemId, privateData } = keySystemData;
                        const cleanedSystemId = systemId.replace(/-/g, "");
                        const pssh = createPSSHBox(cleanedSystemId, privateData);
                        return { systemId: cleanedSystemId, data: pssh };
                    });
                if (initDataValues.length > 0) {
                    const initData = [{ type: "cenc", values: initDataValues }];
                    representation.contentProtections = { keyIds: keyIDs, initData };
                }
                else {
                    representation.contentProtections = { keyIds: keyIDs, initData: [] };
                }
            }
            return representation;
        });
        // TODO(pierre): real ad-insert support
        if (subType === "ADVT") {
            return null;
        }
        const parsedAdaptation = { id: adaptationID,
            type: adaptationType,
            representations,
            language: language == null ?
                undefined :
                language };
        if (adaptationType === "text" && subType === "DESC") {
            parsedAdaptation.closedCaption = true;
        }
        return parsedAdaptation;
    }
    function parseFromDocument(doc, url, manifestReceivedTime) {
        let baseUrl = "";
        if (url !== undefined) {
            const filenameIdx = getFilenameIndexInUrl(url);
            baseUrl = url.substring(0, filenameIdx);
        }
        const root = doc.documentElement;
        if (root == null || root.nodeName !== "SmoothStreamingMedia") {
            throw new Error("document root should be SmoothStreamingMedia");
        }
        const majorVersionAttr = root.getAttribute("MajorVersion");
        const minorVersionAttr = root.getAttribute("MinorVersion");
        if (majorVersionAttr === null || minorVersionAttr === null ||
            !/^[2]-[0-2]$/.test(majorVersionAttr + "-" + minorVersionAttr)) {
            throw new Error("Version should be 2.0, 2.1 or 2.2");
        }
        const timescaleAttr = root.getAttribute("Timescale");
        const timescale = !isNonEmptyString(timescaleAttr) ? 10000000 :
            isNaN(+timescaleAttr) ? 10000000 :
                +timescaleAttr;
        const { protections, adaptationNodes, } = reduceChildren(root, (res, name, node) => {
            switch (name) {
                case "Protection": {
                    res.protections.push(parseProtectionNode(node, parserOptions.keySystems));
                    break;
                }
                case "StreamIndex":
                    res.adaptationNodes.push(node);
                    break;
            }
            return res;
        }, {
            adaptationNodes: [],
            protections: [],
        });
        const initialAdaptations = {};
        const isLive = parseBoolean_parseBoolean(root.getAttribute("IsLive"));
        let timeShiftBufferDepth;
        if (isLive) {
            const dvrWindowLength = root.getAttribute("DVRWindowLength");
            if (dvrWindowLength != null &&
                !isNaN(+dvrWindowLength) &&
                +dvrWindowLength !== 0) {
                timeShiftBufferDepth = +dvrWindowLength / timescale;
            }
        }
        const adaptations = adaptationNodes
            .reduce((acc, node) => {
            const adaptation = parseAdaptation({ root: node,
                baseUrl,
                timescale,
                protections,
                isLive,
                timeShiftBufferDepth,
                manifestReceivedTime });
            if (adaptation === null) {
                return acc;
            }
            const type = adaptation.type;
            const adaps = acc[type];
            if (adaps === undefined) {
                acc[type] = [adaptation];
            }
            else {
                adaps.push(adaptation);
            }
            return acc;
        }, initialAdaptations);
        let suggestedPresentationDelay;
        let availabilityStartTime;
        let minimumTime;
        let timeshiftDepth = null;
        let maximumTimeData;
        const firstVideoAdaptation = adaptations.video !== undefined ?
            adaptations.video[0] :
            undefined;
        const firstAudioAdaptation = adaptations.audio !== undefined ?
            adaptations.audio[0] :
            undefined;
        /** Minimum time that can be reached regardless of the StreamIndex chosen. */
        let safeMinimumTime;
        /** Maximum time that can be reached regardless of the StreamIndex chosen. */
        let safeMaximumTime;
        /** Maximum time that can be reached in absolute on the content. */
        let unsafeMaximumTime;
        if (firstVideoAdaptation !== undefined || firstAudioAdaptation !== undefined) {
            const firstTimeReferences = [];
            const lastTimeReferences = [];
            if (firstVideoAdaptation !== undefined) {
                const firstVideoRepresentation = firstVideoAdaptation.representations[0];
                if (firstVideoRepresentation !== undefined) {
                    const firstVideoTimeReference = firstVideoRepresentation.index.getFirstAvailablePosition();
                    const lastVideoTimeReference = firstVideoRepresentation.index.getLastAvailablePosition();
                    if (firstVideoTimeReference != null) {
                        firstTimeReferences.push(firstVideoTimeReference);
                    }
                    if (lastVideoTimeReference != null) {
                        lastTimeReferences.push(lastVideoTimeReference);
                    }
                }
            }
            if (firstAudioAdaptation !== undefined) {
                const firstAudioRepresentation = firstAudioAdaptation.representations[0];
                if (firstAudioRepresentation !== undefined) {
                    const firstAudioTimeReference = firstAudioRepresentation.index.getFirstAvailablePosition();
                    const lastAudioTimeReference = firstAudioRepresentation.index.getLastAvailablePosition();
                    if (firstAudioTimeReference != null) {
                        firstTimeReferences.push(firstAudioTimeReference);
                    }
                    if (lastAudioTimeReference != null) {
                        lastTimeReferences.push(lastAudioTimeReference);
                    }
                }
            }
            if (firstTimeReferences.length > 0) {
                safeMinimumTime = Math.max(...firstTimeReferences);
            }
            if (lastTimeReferences.length > 0) {
                safeMaximumTime = Math.min(...lastTimeReferences);
                unsafeMaximumTime = Math.max(...lastTimeReferences);
            }
        }
        const manifestDuration = root.getAttribute("Duration");
        const duration = (manifestDuration !== null && +manifestDuration !== 0) ?
            (+manifestDuration / timescale) : undefined;
        if (isLive) {
            suggestedPresentationDelay = parserOptions.suggestedPresentationDelay;
            availabilityStartTime = referenceDateTime;
            minimumTime = safeMinimumTime !== null && safeMinimumTime !== void 0 ? safeMinimumTime : availabilityStartTime;
            let livePosition = unsafeMaximumTime;
            if (livePosition === undefined) {
                livePosition = (Date.now() / 1000 - availabilityStartTime);
            }
            let maximumSafePosition = safeMaximumTime;
            if (maximumSafePosition === undefined) {
                maximumSafePosition = livePosition;
            }
            maximumTimeData = { isLinear: true,
                maximumSafePosition,
                livePosition,
                time: performance.now() };
            timeshiftDepth = timeShiftBufferDepth !== null && timeShiftBufferDepth !== void 0 ? timeShiftBufferDepth : null;
        }
        else {
            minimumTime = safeMinimumTime !== null && safeMinimumTime !== void 0 ? safeMinimumTime : 0;
            const maximumTime = safeMaximumTime !== undefined ? safeMaximumTime :
                duration !== undefined ? minimumTime + duration :
                    Infinity;
            maximumTimeData = { isLinear: false,
                maximumSafePosition: maximumTime,
                livePosition: undefined,
                time: performance.now() };
        }
        const periodStart = isLive ? 0 :
            minimumTime;
        const periodEnd = isLive ? undefined :
            maximumTimeData.maximumSafePosition;
        const manifest = {
            availabilityStartTime: availabilityStartTime === undefined ?
                0 :
                availabilityStartTime,
            clockOffset: serverTimeOffset,
            isLive,
            isDynamic: isLive,
            isLastPeriodKnown: true,
            timeBounds: { minimumSafePosition: minimumTime,
                timeshiftDepth,
                maximumTimeData },
            periods: [{ adaptations,
                    duration: periodEnd !== undefined ?
                        periodEnd - periodStart : duration,
                    end: periodEnd,
                    id: "gen-smooth-period-0",
                    start: periodStart }],
            suggestedPresentationDelay,
            transportType: "smooth",
            uris: url == null ? [] : [url],
        };
        checkManifestIDs(manifest);
        return manifest;
    }
    return parseFromDocument;
}
/**
 * @param {string} systemId - Hex string representing the CDM, 16 bytes.
 * @param {Uint8Array|undefined} privateData - Data associated to protection
 * specific system.
 * @returns {Uint8Array}
 */
function createPSSHBox(systemId, privateData) {
    if (systemId.length !== 32) {
        throw new Error("HSS: wrong system id length");
    }
    const version = 0;
    return create_box_createBox("pssh", byte_parsing_concat([version, 0, 0, 0], string_parsing_hexToBytes(systemId), 
    /** To put there KIDs if it exists (necessitate PSSH v1) */
    byte_parsing_itobe4(privateData.length), privateData));
}
/* harmony default export */ const create_parser = (createSmoothStreamingParser);

;// CONCATENATED MODULE: ./src/parsers/manifest/smooth/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const smooth = (create_parser);


;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/parse_tfrf.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Uint8Array} traf
 * @returns {Array.<Object>}
 */
function parseTfrf(traf) {
    const tfrf = getUuidContent(traf, 0xD4807EF2, 0xCA394695, 0x8E5426CB, 0x9E46A79F);
    if (tfrf === undefined) {
        return [];
    }
    const frags = [];
    const version = tfrf[0];
    const fragCount = tfrf[4];
    for (let i = 0; i < fragCount; i++) {
        let duration;
        let time;
        if (version === 1) {
            time = be8toi(tfrf, i * 16 + 5);
            duration = be8toi(tfrf, i * 16 + 5 + 8);
        }
        else {
            time = be4toi(tfrf, i * 8 + 5);
            duration = be4toi(tfrf, i * 8 + 5 + 4);
        }
        frags.push({
            time,
            duration,
        });
    }
    return frags;
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/parse_tfxd.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param {Uint8Array} traf
 * @returns {Object|undefined}
 */
function parseTfxd(traf) {
    const tfxd = getUuidContent(traf, 0x6D1D9B05, 0x42D544E6, 0x80E2141D, 0xAFF757B2);
    if (tfxd === undefined) {
        return undefined;
    }
    return {
        duration: be8toi(tfxd, 12),
        time: be8toi(tfxd, 4),
    };
}

;// CONCATENATED MODULE: ./src/transports/smooth/extract_timings_infos.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Try to obtain time information from the given data.
 * @param {Uint8Array} data
 * @param {boolean} isChunked
 * @param {Object} segment
 * @param {boolean} isLive
 * @returns {Object}
 */
function extractTimingsInfos(data, isChunked, initTimescale, segment, isLive) {
    var _a;
    const nextSegments = [];
    let chunkInfos;
    let tfxdSegment;
    let tfrfSegments;
    if (isLive) {
        const traf = getTRAF(data);
        if (traf !== null) {
            tfrfSegments = parseTfrf(traf);
            tfxdSegment = parseTfxd(traf);
        }
        else {
            src_log.warn("smooth: could not find traf atom");
        }
    }
    if (tfrfSegments !== undefined) {
        for (let i = 0; i < tfrfSegments.length; i++) {
            nextSegments.push({ time: tfrfSegments[i].time,
                duration: tfrfSegments[i].duration,
                timescale: initTimescale });
        }
    }
    if (tfxdSegment !== undefined) {
        chunkInfos = { time: tfxdSegment.time / initTimescale,
            duration: tfxdSegment.duration / initTimescale };
        return { nextSegments,
            chunkInfos,
            scaledSegmentTime: tfxdSegment.time };
    }
    if (isChunked || !segment.complete) {
        return { nextSegments,
            chunkInfos: null,
            scaledSegmentTime: undefined };
    }
    const segmentDuration = segment.duration * initTimescale;
    // we could always make a mistake when reading a container.
    // If the estimate is too far from what the segment seems to imply, take
    // the segment infos instead.
    const maxDecodeTimeDelta = Math.min(initTimescale * 0.9, segmentDuration / 4);
    const trunDuration = getDurationFromTrun(data);
    const scaledSegmentTime = ((_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.smoothMediaSegment) !== undefined ?
        segment.privateInfos.smoothMediaSegment.time :
        Math.round(segment.time * initTimescale);
    if (trunDuration !== undefined &&
        Math.abs(trunDuration - segmentDuration) <= maxDecodeTimeDelta) {
        chunkInfos = { time: segment.time,
            duration: trunDuration / initTimescale };
    }
    else {
        chunkInfos = { time: segment.time,
            duration: segment.duration };
    }
    return { nextSegments, chunkInfos, scaledSegmentTime };
}

;// CONCATENATED MODULE: ./src/compat/can_patch_isobmff.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TODO(pierre): fix patchSegmentInPlace to work with IE11. Maybe
 * try to put free atom inside traf children
 *
 * Returns true if the current target is tolerant enough for us to
 * simply be able to "patch" an ISOBMFF segment or if we have to create a
 * new one from scratch instead.
 * @returns {Boolean}
 */
function canPatchISOBMFFSegment() {
    return !isIEOrEdge;
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_boxes.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} hRes - horizontal resolution, eg 72
 * @param {Number} vRes - vertical resolution, eg 72
 * @param {string} encDepth
 * @param {Number} colorDepth - eg 24
 * @param {Uint8Array} avcc - Uint8Array representing the avcC atom
 * @returns {Uint8Array}
 */
function createAVC1Box(width, height, hRes, vRes, encName, colorDepth, avcc) {
    return create_box_createBox("avc1", byte_parsing_concat(6, // 6 bytes reserved
    itobe2(1), 16, // drefIdx + QuickTime reserved, zeroes
    itobe2(width), // size 2 w
    itobe2(height), // size 2 h
    itobe2(hRes), 2, // reso 4 h
    itobe2(vRes), 2 + 4, // reso 4 v + QuickTime reserved, zeroes
    [0, 1, encName.length], // frame count (default 1)
    strToUtf8(encName), // 1byte len + encoder name str
    (31 - encName.length), // + padding
    itobe2(colorDepth), // color depth
    [0xFF, 0xFF], // reserved ones
    avcc // avcc atom,
    ));
}
/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} hRes - horizontal resolution, eg 72
 * @param {Number} vRes - vertical resolution, eg 72
 * @param {string} encDepth
 * @param {Number} colorDepth - eg 24
 * @param {Uint8Array} avcc - Uint8Array representing the avcC atom
 * @param {Uint8Array} sinf - Uint8Array representing the sinf atom
 * @returns {Uint8Array}
 */
function createENCVBox(width, height, hRes, vRes, encName, colorDepth, avcc, sinf) {
    return create_box_createBox("encv", byte_parsing_concat(6, // 6 bytes reserved
    itobe2(1), 16, // drefIdx + QuickTime reserved, zeroes
    itobe2(width), // size 2 w
    itobe2(height), // size 2 h
    itobe2(hRes), 2, // reso 4 h
    itobe2(vRes), 2 + 4, // reso 4 v + QuickTime reserved, zeroes
    [0, 1, encName.length], // frame count (default 1)
    strToUtf8(encName), // 1byte len + encoder name str
    (31 - encName.length), // + padding
    itobe2(colorDepth), // color depth
    [0xFF, 0xFF], // reserved ones
    avcc, // avcc atom,
    sinf));
}
/**
 * @param {Number} drefIdx
 * @param {Number} channelsCount
 * @param {Number} sampleSize
 * @param {Number} packetSize
 * @param {Number} sampleRate
 * @param {Uint8Array} esds - Uint8Array representing the esds atom
 * @param {Uint8Array} [sinf] - Uint8Array representing the sinf atom,
 * only if name == "enca"
 * @returns {Uint8Array}
 */
function createMP4ABox(drefIdx, channelsCount, sampleSize, packetSize, sampleRate, esds) {
    return create_box_createBox("mp4a", byte_parsing_concat(6, itobe2(drefIdx), 8, itobe2(channelsCount), itobe2(sampleSize), 2, itobe2(packetSize), itobe2(sampleRate), 2, esds));
}
/**
 * @param {Number} drefIdx
 * @param {Number} channelsCount
 * @param {Number} sampleSize
 * @param {Number} packetSize
 * @param {Number} sampleRate
 * @param {Uint8Array} esds - Uint8Array representing the esds atom
 * @param {Uint8Array} [sinf] - Uint8Array representing the sinf atom,
 * only if name == "enca"
 * @returns {Uint8Array}
 */
function createENCABox(drefIdx, channelsCount, sampleSize, packetSize, sampleRate, esds, sinf) {
    return create_box_createBox("enca", byte_parsing_concat(6, itobe2(drefIdx), 8, itobe2(channelsCount), itobe2(sampleSize), 2, itobe2(packetSize), itobe2(sampleRate), 2, esds, sinf));
}
/**
 * @param {url} Uint8Array
 * @returns {Uint8Array}
 */
function createDREFBox(url) {
    // only one description here... FIXME
    return create_box_createBox("dref", byte_parsing_concat(7, [1], url));
}
/**
 * @param {string} majorBrand
 * @param {Array.<string>} brands
 * @returns {Uint8Array}
 */
function createFTYPBox(majorBrand, brands) {
    const content = byte_parsing_concat(...[strToUtf8(majorBrand),
        [0, 0, 0, 1]].concat(brands.map(strToUtf8)));
    return create_box_createBox("ftyp", content);
}
/**
 * @param {string} schemeType - four letters (eg "cenc" for Common Encryption)
 * @param {Number} schemeVersion - eg 65536
 * @returns {Uint8Array}
 */
function createSCHMBox(schemeType, schemeVersion) {
    return create_box_createBox("schm", byte_parsing_concat(4, strToUtf8(schemeType), byte_parsing_itobe4(schemeVersion)));
}
/**
 * Create tfdt box from a decoding time.
 * @param {number} decodeTime
 * @returns {Uint8Array}
 */
function createTfdtBox(decodeTime) {
    return create_box_createBox("tfdt", byte_parsing_concat([1, 0, 0, 0], itobe8(decodeTime)));
}
/**
 * @returns {Uint8Array}
 */
function createVMHDBox() {
    const arr = new Uint8Array(12);
    arr[3] = 1; // QuickTime...
    return create_box_createBox("vmhd", arr);
}
/**
 * @param {Number} trackId
 * @returns {Uint8Array}
 */
function createTREXBox(trackId) {
    // default sample desc idx = 1
    return create_box_createBox("trex", byte_parsing_concat(4, byte_parsing_itobe4(trackId), [0, 0, 0, 1], 12));
}
/**
 * @param {Number} length
 * @returns {Uint8Array}
 */
function createFreeBox(length) {
    return create_box_createBox("free", new Uint8Array(length - 8));
}
/**
 * @param {Number} stream
 * @param {string} codecPrivateData - hex string
 * @returns {Uint8Array}
 */
function createESDSBox(stream, codecPrivateData) {
    return create_box_createBox("esds", byte_parsing_concat(4, [0x03, 0x19], itobe2(stream), [0x00, 0x04, 0x11, 0x40, 0x15], 11, [0x05, 0x02], string_parsing_hexToBytes(codecPrivateData), [0x06, 0x01, 0x02]));
}
/**
 * @param {string} dataFormat - four letters (eg "avc1")
 * @returns {Uint8Array}
 */
function createFRMABox(dataFormat) {
    return create_box_createBox("frma", strToUtf8(dataFormat));
}
/**
 * @param {Uint8Array} sps
 * @param {Uint8Array} pps
 * @param {Number} nalLen - NAL Unit length: 1, 2 or 4 bytes
 * eg: avcc(0x4d, 0x40, 0x0d, 4, 0xe1, "674d400d96560c0efcb80a70505050a0",
 * 1, "68ef3880")
 * @returns {Uint8Array}
 */
function createAVCCBox(sps, pps, nalLen) {
    const nal = (nalLen === 2) ? 0x1 :
        (nalLen === 4) ? 0x3 :
            0x0;
    // Deduce AVC Profile from SPS
    const h264Profile = sps[1];
    const h264CompatibleProfile = sps[2];
    const h264Level = sps[3];
    return create_box_createBox("avcC", byte_parsing_concat([
        1,
        h264Profile,
        h264CompatibleProfile,
        h264Level,
        (0x3F << 2 | nal),
        (0xE0 | 1),
    ], itobe2(sps.length), sps, [1], itobe2(pps.length), pps));
}
/**
 * @param {string} type - "video"/"audio"/"hint"
 * @returns {Uint8Array}
 */
function createHDLRBox(type) {
    let name;
    let handlerName;
    switch (type) {
        case "video":
            name = "vide";
            handlerName = "VideoHandler";
            break;
        case "audio":
            name = "soun";
            handlerName = "SoundHandler";
            break;
        default:
            name = "hint";
            handlerName = "";
            break;
    }
    return create_box_createBox("hdlr", byte_parsing_concat(8, strToUtf8(name), 12, strToUtf8(handlerName), 1 // handler name is C-style string (0 terminated)
    ));
}
/**
 * @param {number} timescale
 * @returns {Uint8Array}
 */
function createMDHDBox(timescale) {
    return create_box_createBox("mdhd", byte_parsing_concat(12, byte_parsing_itobe4(timescale), 8));
}
/**
 * @param {Number} timescale
 * @param {Number} trackId
 * @returns {Uint8Array}
 */
function createMVHDBox(timescale, trackId) {
    return create_box_createBox("mvhd", byte_parsing_concat(12, byte_parsing_itobe4(timescale), 4, [0, 1], 2, // we assume rate = 1;
    [1, 0], 10, // we assume volume = 100%;
    [0, 1], 14, // default matrix
    [0, 1], 14, // default matrix
    [64, 0, 0, 0], 26, itobe2(trackId + 1) // next trackId (=trackId + 1);
    ));
}
/**
 * @param {Uint8Array} mfhd
 * @param {Uint8Array} tfhd
 * @param {Uint8Array} tfdt
 * @param {Uint8Array} trun
 * @returns {Uint8Array}
 */
function createSAIOBox(mfhd, tfhd, tfdt, trun) {
    return create_box_createBox("saio", byte_parsing_concat(4, [0, 0, 0, 1], // ??
    byte_parsing_itobe4(mfhd.length +
        tfhd.length +
        tfdt.length +
        trun.length +
        8 + 8 + 8 + 8)));
}
/**
 * @param {Uint8Array} sencContent - including 8 bytes flags and entries count
 * @returns {Uint8Array}
 */
function createSAIZBox(sencContent) {
    if (sencContent.length === 0) {
        return create_box_createBox("saiz", new Uint8Array(0));
    }
    const flags = be4toi(sencContent, 0);
    const entries = be4toi(sencContent, 4);
    const arr = new Uint8Array(entries + 9);
    arr.set(byte_parsing_itobe4(entries), 5);
    let i = 9;
    let j = 8;
    let pairsCnt;
    let pairsLen;
    while (j < sencContent.length) {
        j += 8; // assuming IV is 8 bytes TODO handle 16 bytes IV
        // if we have extradata for each entry
        if ((flags & 0x2) === 0x2) {
            pairsLen = 2;
            pairsCnt = be2toi(sencContent, j);
            j += (pairsCnt * 6) + 2;
        }
        else {
            pairsCnt = 0;
            pairsLen = 0;
        }
        arr[i] = pairsCnt * 6 + 8 + pairsLen;
        i++;
    }
    return create_box_createBox("saiz", arr);
}
/**
 * @returns {Uint8Array}
 */
function createSMHDBox() {
    return create_box_createBox("smhd", new Uint8Array(8));
}
/**
 * @param {Array.<Uint8Array>} representations - arrays of Uint8Array,
 * typically [avc1] or [encv, avc1]
 * @returns {Uint8Array}
 */
function createSTSDBox(reps) {
    // only one description here... FIXME
    const arrBase = [7, [reps.length]];
    return create_box_createBox("stsd", byte_parsing_concat(...arrBase.concat(reps)));
}
/**
 * @param {Number} width
 * @param {Number} height
 * @param {Number} trackId
 * @returns {Uint8Array}
 */
function createTKHDBox(width, height, trackId) {
    return create_box_createBox("tkhd", byte_parsing_concat(byte_parsing_itobe4(1 + 2 + 4), 8, // we assume track is enabled,
    // in media and in preview.
    byte_parsing_itobe4(trackId), 20, // we assume trackId = 1;
    [1, 0, 0, 0], // we assume volume = 100%;
    [0, 1, 0, 0], 12, // default matrix
    [0, 1, 0, 0], 12, // default matrix
    [64, 0, 0, 0], // ??
    itobe2(width), 2, // width (TODO handle fixed)
    itobe2(height), 2 // height (TODO handle fixed)
    ));
}
/**
 * @param {Number} algId - eg 1
 * @param {Number} ivSize - eg 8
 * @param {string} keyId - Hex KID 93789920e8d6520098577df8f2dd5546
 * @returns {Uint8Array}
 */
function createTENCBox(algId, ivSize, keyId) {
    return create_box_createBox("tenc", byte_parsing_concat(6, [algId, ivSize], keyId));
}


;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_traf_box.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function createTrafBox(tfhd, tfdt, trun, mfhd, senc) {
    const trafs = [tfhd, tfdt, trun];
    if (senc !== undefined) {
        trafs.push(create_box_createBox("senc", senc), createSAIZBox(senc), createSAIOBox(mfhd, tfhd, tfdt, trun));
    }
    return createBoxWithChildren("traf", trafs);
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/patch_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Update ISOBMFF Segment downloaded in Smooth Streaming so it is playable on
 * the browser.
 * @param {Uint8Array} segment
 * @param {Number} decodeTime
 * @return {Uint8Array}
 */
function patchSegment(segment, decodeTime) {
    const oldMoofOffsets = get_box_getBoxOffsets(segment, 0x6D6F6F66 /* moof */);
    if (oldMoofOffsets === null) {
        throw new Error("Smooth: Invalid ISOBMFF given");
    }
    const oldMoofContent = segment.subarray(oldMoofOffsets[1], oldMoofOffsets[2]);
    const mfhdBox = getBox(oldMoofContent, 0x6D666864 /* mfhd */);
    const trafContent = getBoxContent(oldMoofContent, 0x74726166 /* traf */);
    if (trafContent === null || mfhdBox === null) {
        throw new Error("Smooth: Invalid ISOBMFF given");
    }
    const tfhdOffsets = get_box_getBoxOffsets(trafContent, 0x74666864 /* tfhd */);
    const oldTrunOffsets = get_box_getBoxOffsets(trafContent, 0x7472756E /* trun */);
    if (tfhdOffsets === null || oldTrunOffsets === null) {
        throw new Error("Smooth: Invalid ISOBMFF given");
    }
    const tfhdBox = trafContent.subarray(tfhdOffsets[0], tfhdOffsets[2]);
    const oldTrunBox = trafContent.subarray(oldTrunOffsets[0], oldTrunOffsets[2]);
    // force trackId=1 since trackIds are not always reliable...
    tfhdBox.set([0, 0, 0, 1], tfhdOffsets[1] - tfhdOffsets[0] + 4 /* version + flags */);
    const tfdtBox = createTfdtBox(decodeTime);
    const newTrunBox = updateTrunDataOffset(oldTrunBox, oldTrunOffsets[1] - oldTrunOffsets[0]);
    const sencContent = getUuidContent(trafContent, 0xA2394F52, 0x5A9B4F14, 0xA2446C42, 0x7C648DF4);
    const newTrafBox = createTrafBox(tfhdBox, tfdtBox, newTrunBox, mfhdBox, sencContent);
    const newMoof = createBoxWithChildren("moof", [mfhdBox, newTrafBox]);
    const newMoofOffsets = get_box_getBoxOffsets(newMoof, 0x6D6F6F66 /* moof */);
    const newTrafOffsets = get_box_getBoxOffsets(newTrafBox, 0x74726166 /* traf */);
    const newTrunOffsets = get_box_getBoxOffsets(newTrunBox, 0x7472756E /* trun */);
    if (newMoofOffsets === null || newTrafOffsets === null || newTrunOffsets === null) {
        throw new Error("Smooth: Invalid moof, trun or traf generation");
    }
    /** index of the `data_offset` property from the trun box in the whole "moof". */
    const indexOfTrunDataOffsetInMoof = (newMoofOffsets[1] - newMoofOffsets[0]) +
        mfhdBox.length +
        /* new traf size + name */
        (newTrafOffsets[1] - newTrafOffsets[0]) +
        tfhdBox.length +
        tfdtBox.length +
        /* new trun size + name */
        (newTrunOffsets[1] - newTrunOffsets[0]) +
        8 /* trun version + flags + `sample_count` */;
    const oldMoofLength = oldMoofOffsets[2] - oldMoofOffsets[0];
    const newMoofSizeDiff = newMoof.length - oldMoofLength;
    const oldMdatOffset = get_box_getBoxOffsets(segment, 0x6D646174 /* "mdat" */);
    if (oldMdatOffset === null) {
        throw new Error("Smooth: Invalid ISOBMFF given");
    }
    if (canPatchISOBMFFSegment() && (newMoofSizeDiff === 0 || newMoofSizeDiff <= -8)) {
        // patch trun data_offset
        const mdatContentOffset = oldMdatOffset[1];
        newMoof.set(byte_parsing_itobe4(mdatContentOffset), indexOfTrunDataOffsetInMoof);
        segment.set(newMoof, oldMoofOffsets[0]);
        // add "free" box for the remaining space
        if (newMoofSizeDiff <= -8) {
            segment.set(createFreeBox(-newMoofSizeDiff), newMoof.length);
        }
        return segment;
    }
    else {
        // patch trun data_offset
        const mdatContentOffset = oldMdatOffset[1] + newMoofSizeDiff;
        newMoof.set(byte_parsing_itobe4(mdatContentOffset), indexOfTrunDataOffsetInMoof);
        const newSegment = new Uint8Array(segment.length + newMoofSizeDiff);
        const beforeMoof = segment.subarray(0, oldMoofOffsets[0]);
        const afterMoof = segment.subarray(oldMoofOffsets[2], segment.length);
        newSegment.set(beforeMoof, 0);
        newSegment.set(newMoof, beforeMoof.length);
        newSegment.set(afterMoof, beforeMoof.length + newMoof.length);
        return newSegment;
    }
}
/**
 * Update `trun` box given or create a new one from it to add a data offset
 * flag and the corresponding space to set a data offset.
 * Do not do anything if the flag is already set.
 *
 * Note that the `oldTrunBox` given should not be mutated by this function but
 * the returned value CAN point to the exact same `Uint8Array`.
 *
 * @param {Uint8Array} oldTrunBox - The whole original trun box
 * @param {number} initialDataOffset - Offset at which the first value of the
 * "trun" box (the "version") is set.
 * @returns {Uint8Array}
 */
function updateTrunDataOffset(oldTrunBox, initialDataOffset) {
    const trunHasDataOffset = (oldTrunBox[initialDataOffset + 3 /* last flag */] & 0x01) > 0;
    if (trunHasDataOffset) {
        return oldTrunBox;
    }
    // If no data_offset is present, we create another "trun" with one
    const newTrunBox = new Uint8Array(oldTrunBox.length + 4);
    // copy size + name + version=1 + flags=3 + sample_count=4
    newTrunBox.set(oldTrunBox.subarray(0, initialDataOffset + 8), 0);
    // add data_offset flag
    newTrunBox[initialDataOffset + 3] = newTrunBox[initialDataOffset + 3] | 0x01;
    newTrunBox.set([0, 0, 0, 0], initialDataOffset + 8); // add data offset
    // add the rest
    newTrunBox.set(oldTrunBox.subarray(initialDataOffset + 8, oldTrunBox.length), initialDataOffset + 12);
    return updateBoxLength(newTrunBox); // update the trun box's length
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @param {Uint8Array} mvhd
 * @param {Uint8Array} mvex
 * @param {Uint8Array} trak
 * @returns {Array.<Uint8Array>}
 */
function createMOOVBox(mvhd, mvex, trak) {
    const children = [mvhd, mvex, trak];
    return createBoxWithChildren("moov", children);
}
/**
 * Create an initialization segment with the information given.
 * @param {Number} timescale
 * @param {string} type
 * @param {Uint8Array} stsd
 * @param {Uint8Array} mhd
 * @param {Number} width
 * @param {Number} height
 * @param {Array.<Object>} pssList - List of dict, example:
 * {systemId: "DEADBEEF", codecPrivateData: "DEAFBEEF}
 * @returns {Uint8Array}
 */
function createInitSegment(timescale, type, stsd, mhd, width, height) {
    const stbl = createBoxWithChildren("stbl", [
        stsd,
        create_box_createBox("stts", new Uint8Array(0x08)),
        create_box_createBox("stsc", new Uint8Array(0x08)),
        create_box_createBox("stsz", new Uint8Array(0x0C)),
        create_box_createBox("stco", new Uint8Array(0x08)),
    ]);
    const url = create_box_createBox("url ", new Uint8Array([0, 0, 0, 1]));
    const dref = createDREFBox(url);
    const dinf = createBoxWithChildren("dinf", [dref]);
    const minf = createBoxWithChildren("minf", [mhd, dinf, stbl]);
    const hdlr = createHDLRBox(type);
    const mdhd = createMDHDBox(timescale); // this one is really important
    const mdia = createBoxWithChildren("mdia", [mdhd, hdlr, minf]);
    const tkhd = createTKHDBox(width, height, 1);
    const trak = createBoxWithChildren("trak", [tkhd, mdia]);
    const trex = createTREXBox(1);
    const mvex = createBoxWithChildren("mvex", [trex]);
    const mvhd = createMVHDBox(timescale, 1); // in fact, we don't give a sh** about
    // this value :O
    const moov = createMOOVBox(mvhd, mvex, trak);
    const ftyp = createFTYPBox("isom", ["isom", "iso2", "iso6", "avc1", "dash"]);
    return byte_parsing_concat(ftyp, moov);
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_video_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Return full video Init segment as Uint8Array
 * @param {Number} timescale - lowest number, this one will be set into mdhd
 * *10000 in mvhd, e.g. 1000
 * @param {Number} width
 * @param {Number} height
 * @param {Number} hRes
 * @param {Number} vRes
 * @param {Number} nalLength (1, 2 or 4)
 * @param {string} codecPrivateData
 * @param {Uint8Array} [keyId]
 * @returns {Uint8Array}
 */
function createVideoInitSegment(timescale, width, height, hRes, vRes, nalLength, codecPrivateData, keyId) {
    const [, spsHex, ppsHex] = codecPrivateData.split("00000001");
    if (spsHex === undefined || ppsHex === undefined) {
        throw new Error("Smooth: unsupported codec private data.");
    }
    const sps = string_parsing_hexToBytes(spsHex);
    const pps = string_parsing_hexToBytes(ppsHex);
    // TODO NAL length is forced to 4
    const avcc = createAVCCBox(sps, pps, nalLength);
    let stsd;
    if (keyId === undefined) {
        const avc1 = createAVC1Box(width, height, hRes, vRes, "AVC Coding", 24, avcc);
        stsd = createSTSDBox([avc1]);
    }
    else {
        const tenc = createTENCBox(1, 8, keyId);
        const schi = createBoxWithChildren("schi", [tenc]);
        const schm = createSCHMBox("cenc", 65536);
        const frma = createFRMABox("avc1");
        const sinf = createBoxWithChildren("sinf", [frma, schm, schi]);
        const encv = createENCVBox(width, height, hRes, vRes, "AVC Coding", 24, avcc, sinf);
        stsd = createSTSDBox([encv]);
    }
    return createInitSegment(timescale, "video", stsd, createVMHDBox(), width, height);
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/get_aaces_header.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Sampling frequencies defined in MPEG-4 Audio.
 * @type {Array.<Number>}
 */
const SAMPLING_FREQUENCIES = [
    96000,
    88200,
    64000,
    48000,
    44100,
    32000,
    24000,
    22050,
    16000,
    12000,
    11025,
    8000,
    7350,
];
/**
 * Return AAC ES Header (hexstr form)
 *
 * @param {Number} type
 *          1 = AAC Main
 *          2 = AAC LC
 *          cf http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio
 * @param {Number} frequency
 * @param {Number} chans (1 or 2)
 * @returns {string}
 */
function getAacesHeader(type, frequency, chans) {
    const freq = SAMPLING_FREQUENCIES.indexOf(frequency); // TODO : handle Idx = 15...
    let val;
    val = (type & 0x3F) << 0x4;
    val = (val | (freq & 0x1F)) << 0x4;
    val = (val | (chans & 0x1F)) << 0x3;
    return bytesToHex(itobe2(val));
}

;// CONCATENATED MODULE: ./src/transports/smooth/isobmff/create_audio_init_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Return full audio initialization segment as Uint8Array.
 * @param {Number} timescale
 * @param {Number} channelsCount
 * @param {Number} sampleSize
 * @param {Number} packetSize
 * @param {Number} sampleRate
 * @param {string} codecPrivateData
 * @param {Uint8Array} keyId - hex string representing the key Id, 32 chars.
 * eg. a800dbed49c12c4cb8e0b25643844b9b
 * @param {Array.<Object>} [pssList]
 * @returns {Uint8Array}
 */
function createAudioInitSegment(timescale, channelsCount, sampleSize, packetSize, sampleRate, codecPrivateData, keyId) {
    const _codecPrivateData = codecPrivateData.length === 0 ?
        getAacesHeader(2, sampleRate, channelsCount) :
        codecPrivateData;
    const esds = createESDSBox(1, _codecPrivateData);
    const stsd = (() => {
        if (keyId === undefined) {
            const mp4a = createMP4ABox(1, channelsCount, sampleSize, packetSize, sampleRate, esds);
            return createSTSDBox([mp4a]);
        }
        const tenc = createTENCBox(1, 8, keyId);
        const schi = createBoxWithChildren("schi", [tenc]);
        const schm = createSCHMBox("cenc", 65536);
        const frma = createFRMABox("mp4a");
        const sinf = createBoxWithChildren("sinf", [frma, schm, schi]);
        const enca = createENCABox(1, channelsCount, sampleSize, packetSize, sampleRate, esds, sinf);
        return createSTSDBox([enca]);
    })();
    return createInitSegment(timescale, "audio", stsd, createSMHDBox(), 0, 0);
}

;// CONCATENATED MODULE: ./src/transports/smooth/utils.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const ISM_REG = /(\.isml?)(\?token=\S+)?$/;
const TOKEN_REG = /\?token=(\S+)/;
/**
 * TODO Remove this logic completely from the player
 * @param {Document} doc
 * @returns {string|null}
 */
function extractISML(doc) {
    return doc.getElementsByTagName("media")[0].getAttribute("src");
}
/**
 * Returns string corresponding to the token contained in the url's querystring.
 * Empty string if no token is found.
 * @param {string} url
 * @returns {string}
 */
function extractToken(url) {
    const tokenMatch = TOKEN_REG.exec(url);
    if (tokenMatch !== null) {
        const match = tokenMatch[1];
        if (match !== undefined) {
            return match;
        }
    }
    return "";
}
/**
 * Replace/Remove token from the url's querystring
 * @param {string} url
 * @param {string} [token]
 * @returns {string}
 */
function replaceToken(url, token) {
    if (isNonEmptyString(token)) {
        return url.replace(TOKEN_REG, "?token=" + token);
    }
    else {
        return url.replace(TOKEN_REG, "");
    }
}
/**
 * @param {string} url
 * @returns {string}
 */
function resolveManifest(url) {
    if (ISM_REG.test(url)) {
        warnOnce("Giving a isml URL to loadVideo is deprecated." +
            " Please give the Manifest URL directly");
        return url.replace(ISM_REG, "$1/manifest$2");
    }
    return url;
}
/**
 * Returns `true` if the given Representation refers to segments in an MP4
 * container
 * @param {Representation} representation
 * @returns {Boolean}
 */
function isMP4EmbeddedTrack(representation) {
    return typeof representation.mimeType === "string" &&
        representation.mimeType.indexOf("mp4") >= 0;
}
function utils_constructSegmentUrl(wantedCdn, segment) {
    return wantedCdn === null ? null :
        segment.url === null ? wantedCdn.baseUrl :
            resolveURL(wantedCdn.baseUrl, segment.url);
}


;// CONCATENATED MODULE: ./src/transports/smooth/segment_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Segment loader triggered if there was no custom-defined one in the API.
 * @param {string} url
 * @param {Object} content
 * @param {Object} loaderOptions
 * @param {Object} callbacks
 * @param {Object} cancelSignal
 * @param {boolean} checkMediaSegmentIntegrity
 * @returns {Promise}
 */
function segment_loader_regularSegmentLoader(url, content, callbacks, loaderOptions, cancelSignal, checkMediaSegmentIntegrity) {
    let headers;
    const range = content.segment.range;
    if (Array.isArray(range)) {
        headers = { Range: byteRange(range) };
    }
    return utils_request({ url,
        responseType: "arraybuffer",
        headers,
        timeout: loaderOptions.timeout,
        cancelSignal,
        onProgress: callbacks.onProgress })
        .then((data) => {
        const isMP4 = isMP4EmbeddedTrack(content.representation);
        if (!isMP4 || checkMediaSegmentIntegrity !== true) {
            return { resultType: "segment-loaded",
                resultData: data };
        }
        const dataU8 = new Uint8Array(data.responseData);
        checkISOBMFFIntegrity(dataU8, content.segment.isInit);
        return { resultType: "segment-loaded",
            resultData: Object.assign(Object.assign({}, data), { responseData: dataU8 }) };
    });
}
/**
 * Defines the url for the request, load the right loader (custom/default
 * one).
 */
const segment_loader_generateSegmentLoader = ({ checkMediaSegmentIntegrity, customSegmentLoader, }) => (url, content, loaderOptions, cancelSignal, callbacks) => {
    const { segment, manifest, period, adaptation, representation } = content;
    if (segment.isInit) {
        if (segment.privateInfos === undefined ||
            segment.privateInfos.smoothInitSegment === undefined) {
            throw new Error("Smooth: Invalid segment format");
        }
        const smoothInitPrivateInfos = segment.privateInfos.smoothInitSegment;
        let responseData;
        const { codecPrivateData, timescale, protection = { keyId: undefined,
            keySystems: undefined } } = smoothInitPrivateInfos;
        if (codecPrivateData === undefined) {
            throw new Error("Smooth: no codec private data.");
        }
        switch (adaptation.type) {
            case "video": {
                const { width = 0, height = 0 } = representation;
                responseData = createVideoInitSegment(timescale, width, height, 72, 72, 4, // vRes, hRes, nal
                codecPrivateData, protection.keyId);
                break;
            }
            case "audio": {
                const { channels = 0, bitsPerSample = 0, packetSize = 0, samplingRate = 0 } = smoothInitPrivateInfos;
                responseData = createAudioInitSegment(timescale, channels, bitsPerSample, packetSize, samplingRate, codecPrivateData, protection.keyId);
                break;
            }
            default:
                if (false) {}
                responseData = new Uint8Array(0);
        }
        return Promise.resolve({ resultType: "segment-created",
            resultData: responseData });
    }
    else if (url === null) {
        return Promise.resolve({ resultType: "segment-created",
            resultData: null });
    }
    else {
        const args = { adaptation,
            manifest,
            period,
            representation,
            segment,
            transport: "smooth",
            timeout: loaderOptions.timeout,
            url };
        if (typeof customSegmentLoader !== "function") {
            return segment_loader_regularSegmentLoader(url, content, callbacks, loaderOptions, cancelSignal, checkMediaSegmentIntegrity);
        }
        return new Promise((res, rej) => {
            /** `true` when the custom segmentLoader should not be active anymore. */
            let hasFinished = false;
            /**
             * Callback triggered when the custom segment loader has a response.
             * @param {Object} args
             */
            const resolve = (_args) => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                const isMP4 = isMP4EmbeddedTrack(content.representation);
                if (!isMP4 || checkMediaSegmentIntegrity !== true) {
                    res({ resultType: "segment-loaded",
                        resultData: { responseData: _args.data,
                            size: _args.size,
                            requestDuration: _args.duration } });
                }
                const dataU8 = _args.data instanceof Uint8Array ? _args.data :
                    new Uint8Array(_args.data);
                checkISOBMFFIntegrity(dataU8, content.segment.isInit);
                res({ resultType: "segment-loaded",
                    resultData: { responseData: dataU8,
                        size: _args.size,
                        requestDuration: _args.duration } });
            };
            /**
             * Callback triggered when the custom segment loader fails
             * @param {*} err - The corresponding error encountered
             */
            const reject = (err) => {
                var _a, _b, _c;
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                // Format error and send it
                const castedErr = err;
                const message = (_a = castedErr === null || castedErr === void 0 ? void 0 : castedErr.message) !== null && _a !== void 0 ? _a : "Unknown error when fetching a Smooth segment through a " +
                    "custom segmentLoader.";
                const emittedErr = new CustomLoaderError(message, (_b = castedErr === null || castedErr === void 0 ? void 0 : castedErr.canRetry) !== null && _b !== void 0 ? _b : false, (_c = castedErr === null || castedErr === void 0 ? void 0 : castedErr.isOfflineError) !== null && _c !== void 0 ? _c : false, castedErr === null || castedErr === void 0 ? void 0 : castedErr.xhr);
                rej(emittedErr);
            };
            const progress = (_args) => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                callbacks.onProgress({ duration: _args.duration,
                    size: _args.size,
                    totalSize: _args.totalSize });
            };
            const fallback = () => {
                if (hasFinished || cancelSignal.isCancelled) {
                    return;
                }
                hasFinished = true;
                cancelSignal.deregister(abortCustomLoader);
                segment_loader_regularSegmentLoader(url, content, callbacks, loaderOptions, cancelSignal, checkMediaSegmentIntegrity)
                    .then(res, rej);
            };
            const customCallbacks = { reject, resolve, fallback, progress };
            const abort = customSegmentLoader(args, customCallbacks);
            cancelSignal.register(abortCustomLoader);
            /**
             * The logic to run when the custom loader is cancelled while pending.
             * @param {Error} err
             */
            function abortCustomLoader(err) {
                if (hasFinished) {
                    return;
                }
                hasFinished = true;
                if (!hasFinished && typeof abort === "function") {
                    abort();
                }
                rej(err);
            }
        });
    }
};
/* harmony default export */ const segment_loader = (segment_loader_generateSegmentLoader);

;// CONCATENATED MODULE: ./src/transports/smooth/pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */














const WSX_REG = /\.wsx?(\?token=\S+)?/;
/**
 * @param {Object} adaptation
 * @param {Object} dlSegment
 * @param {Object} nextSegments
 */
function addNextSegments(adaptation, nextSegments, dlSegment) {
    var _a;
    src_log.debug("Smooth Parser: update segments information.");
    const representations = adaptation.representations;
    for (let i = 0; i < representations.length; i++) {
        const representation = representations[i];
        if (representation.index instanceof SmoothRepresentationIndex &&
            ((_a = dlSegment === null || dlSegment === void 0 ? void 0 : dlSegment.privateInfos) === null || _a === void 0 ? void 0 : _a.smoothMediaSegment) !== undefined) {
            representation.index.addNewSegments(nextSegments, dlSegment.privateInfos.smoothMediaSegment);
        }
        else {
            src_log.warn("Smooth Parser: should only encounter SmoothRepresentationIndex");
        }
    }
}
/* harmony default export */ function smooth_pipelines(transportOptions) {
    const smoothManifestParser = smooth(transportOptions);
    const segmentLoader = segment_loader(transportOptions);
    const manifestLoaderOptions = { customManifestLoader: transportOptions.manifestLoader };
    const manifestLoader = generateManifestLoader(manifestLoaderOptions, "text");
    const manifestPipeline = {
        // TODO (v4.x.x) Remove that function
        resolveManifestUrl(url, cancelSignal) {
            if (url === undefined) {
                return Promise.resolve(undefined);
            }
            let resolving;
            if (WSX_REG.test(url)) {
                warnOnce("Giving WSX URL to loadVideo is deprecated." +
                    " You should only give Manifest URLs.");
                resolving = utils_request({ url: replaceToken(url, ""),
                    responseType: "document",
                    cancelSignal })
                    .then(value => {
                    const extractedURL = extractISML(value.responseData);
                    if (extractedURL === null || extractedURL.length === 0) {
                        throw new Error("Invalid ISML");
                    }
                    return extractedURL;
                });
            }
            else {
                resolving = Promise.resolve(url);
            }
            const token = extractToken(url);
            return resolving.then((_url) => replaceToken(resolveManifest(_url), token));
        },
        loadManifest: manifestLoader,
        parseManifest(manifestData, parserOptions) {
            var _a;
            const url = (_a = manifestData.url) !== null && _a !== void 0 ? _a : parserOptions.originalUrl;
            const { receivedTime: manifestReceivedTime, responseData } = manifestData;
            const documentData = typeof responseData === "string" ?
                new DOMParser().parseFromString(responseData, "text/xml") :
                responseData; // TODO find a way to check if Document?
            const parserResult = smoothManifestParser(documentData, url, manifestReceivedTime);
            const manifest = new src_manifest(parserResult, {
                representationFilter: transportOptions.representationFilter,
                supplementaryImageTracks: transportOptions.supplementaryImageTracks,
                supplementaryTextTracks: transportOptions.supplementaryTextTracks,
            });
            return { manifest, url };
        },
    };
    /**
     * Export functions allowing to load and parse audio and video smooth
     * segments.
     */
    const audioVideoPipeline = {
        /**
         * Load a Smooth audio/video segment.
         * @param {Object|null} wantedCdn
         * @param {Object} content
         * @param {Object} loaderOptions
         * @param {Object} cancelSignal
         * @param {Object} callbacks
         * @returns {Promise}
         */
        loadSegment(wantedCdn, content, loaderOptions, cancelSignal, callbacks) {
            const url = utils_constructSegmentUrl(wantedCdn, content.segment);
            return segmentLoader(url, content, loaderOptions, cancelSignal, callbacks);
        },
        parseSegment(loadedSegment, content, initTimescale) {
            var _a, _b;
            const { segment, adaptation, manifest } = content;
            const { data, isChunked } = loadedSegment;
            if (data === null) {
                if (segment.isInit) {
                    return { segmentType: "init",
                        initializationData: null,
                        initializationDataSize: 0,
                        protectionDataUpdate: false,
                        initTimescale: undefined };
                }
                return { segmentType: "media",
                    chunkData: null,
                    chunkInfos: null,
                    chunkOffset: 0,
                    chunkSize: 0,
                    protectionDataUpdate: false,
                    appendWindow: [undefined, undefined] };
            }
            const responseBuffer = data instanceof Uint8Array ? data :
                new Uint8Array(data);
            if (segment.isInit) {
                const timescale = (_b = (_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.smoothInitSegment) === null || _b === void 0 ? void 0 : _b.timescale;
                return { segmentType: "init",
                    initializationData: data,
                    initializationDataSize: data.byteLength,
                    // smooth init segments are crafted by hand.
                    // Their timescale is the one from the manifest.
                    initTimescale: timescale,
                    protectionDataUpdate: false };
            }
            const timingInfos = initTimescale !== undefined ?
                extractTimingsInfos(responseBuffer, isChunked, initTimescale, segment, manifest.isLive) :
                null;
            if (timingInfos === null ||
                timingInfos.chunkInfos === null ||
                timingInfos.scaledSegmentTime === undefined) {
                throw new Error("Smooth Segment without time information");
            }
            const { nextSegments, chunkInfos, scaledSegmentTime } = timingInfos;
            const chunkData = patchSegment(responseBuffer, scaledSegmentTime);
            if (nextSegments.length > 0) {
                addNextSegments(adaptation, nextSegments, segment);
            }
            return { segmentType: "media",
                chunkData,
                chunkInfos,
                chunkOffset: 0,
                chunkSize: chunkData.length,
                protectionDataUpdate: false,
                appendWindow: [undefined, undefined] };
        },
    };
    const textTrackPipeline = {
        loadSegment(wantedCdn, content, loaderOptions, cancelSignal, callbacks) {
            const { segment, representation } = content;
            const url = utils_constructSegmentUrl(wantedCdn, segment);
            if (segment.isInit || url === null) {
                return Promise.resolve({ resultType: "segment-created",
                    resultData: null });
            }
            const isMP4 = isMP4EmbeddedTrack(representation);
            if (!isMP4) {
                return utils_request({ url,
                    responseType: "text",
                    timeout: loaderOptions.timeout,
                    cancelSignal,
                    onProgress: callbacks.onProgress })
                    .then((data) => ({ resultType: "segment-loaded",
                    resultData: data }));
            }
            else {
                return utils_request({ url,
                    responseType: "arraybuffer",
                    timeout: loaderOptions.timeout,
                    cancelSignal,
                    onProgress: callbacks.onProgress })
                    .then((data) => {
                    if (transportOptions.checkMediaSegmentIntegrity !== true) {
                        return { resultType: "segment-loaded",
                            resultData: data };
                    }
                    const dataU8 = new Uint8Array(data.responseData);
                    checkISOBMFFIntegrity(dataU8, content.segment.isInit);
                    return { resultType: "segment-loaded",
                        resultData: Object.assign(Object.assign({}, data), { responseData: dataU8 }) };
                });
            }
        },
        parseSegment(loadedSegment, content, initTimescale) {
            var _a;
            const { manifest, adaptation, representation, segment } = content;
            const { language } = adaptation;
            const isMP4 = isMP4EmbeddedTrack(representation);
            const { mimeType = "", codec = "" } = representation;
            const { data, isChunked } = loadedSegment;
            let chunkSize;
            if (segment.isInit) { // text init segment has no use in HSS
                return { segmentType: "init",
                    initializationData: null,
                    initializationDataSize: 0,
                    protectionDataUpdate: false,
                    initTimescale: undefined };
            }
            if (data === null) {
                return { segmentType: "media",
                    chunkData: null,
                    chunkInfos: null,
                    chunkOffset: 0,
                    chunkSize: 0,
                    protectionDataUpdate: false,
                    appendWindow: [undefined, undefined] };
            }
            let nextSegments;
            let chunkInfos = null;
            let segmentStart;
            let segmentEnd;
            let _sdData;
            let _sdType;
            if (isMP4) {
                let chunkBytes;
                if (typeof data === "string") {
                    chunkBytes = strToUtf8(data);
                }
                else {
                    chunkBytes = data instanceof Uint8Array ? data :
                        new Uint8Array(data);
                }
                chunkSize = chunkBytes.length;
                const timingInfos = initTimescale !== undefined ?
                    extractTimingsInfos(chunkBytes, isChunked, initTimescale, segment, manifest.isLive) :
                    null;
                nextSegments = timingInfos === null || timingInfos === void 0 ? void 0 : timingInfos.nextSegments;
                chunkInfos = (_a = timingInfos === null || timingInfos === void 0 ? void 0 : timingInfos.chunkInfos) !== null && _a !== void 0 ? _a : null;
                if (chunkInfos === null) {
                    if (isChunked) {
                        src_log.warn("Smooth: Unavailable time data for current text track.");
                    }
                    else {
                        segmentStart = segment.time;
                        segmentEnd = segment.end;
                    }
                }
                else {
                    segmentStart = chunkInfos.time;
                    segmentEnd = chunkInfos.duration !== undefined ?
                        chunkInfos.time + chunkInfos.duration :
                        segment.end;
                }
                const lcCodec = codec.toLowerCase();
                if (mimeType === "application/ttml+xml+mp4" ||
                    lcCodec === "stpp" ||
                    lcCodec === "stpp.ttml.im1t") {
                    _sdType = "ttml";
                }
                else if (lcCodec === "wvtt") {
                    _sdType = "vtt";
                }
                else {
                    throw new Error(`could not find a text-track parser for the type ${mimeType}`);
                }
                const mdat = getMDAT(chunkBytes);
                _sdData = mdat === null ? "" :
                    utf8ToStr(mdat);
            }
            else { // not MP4
                segmentStart = segment.time;
                segmentEnd = segment.end;
                let chunkString;
                if (typeof data !== "string") {
                    const bytesData = data instanceof Uint8Array ? data :
                        new Uint8Array(data);
                    chunkSize = bytesData.length;
                    chunkString = utf8ToStr(bytesData);
                }
                else {
                    chunkString = data;
                }
                switch (mimeType) {
                    case "application/x-sami":
                    case "application/smil": // TODO SMIL should be its own format, no?
                        _sdType = "sami";
                        break;
                    case "application/ttml+xml":
                        _sdType = "ttml";
                        break;
                    case "text/vtt":
                        _sdType = "vtt";
                        break;
                }
                if (_sdType === undefined) {
                    const lcCodec = codec.toLowerCase();
                    if (lcCodec === "srt") {
                        _sdType = "srt";
                    }
                    else {
                        throw new Error(`could not find a text-track parser for the type ${mimeType}`);
                    }
                }
                _sdData = chunkString;
            }
            if (chunkInfos !== null &&
                Array.isArray(nextSegments) && nextSegments.length > 0) {
                addNextSegments(adaptation, nextSegments, segment);
            }
            const chunkOffset = segmentStart !== null && segmentStart !== void 0 ? segmentStart : 0;
            return { segmentType: "media",
                chunkData: { type: _sdType,
                    data: _sdData,
                    start: segmentStart,
                    end: segmentEnd,
                    language },
                chunkSize,
                chunkInfos,
                chunkOffset,
                protectionDataUpdate: false,
                appendWindow: [undefined, undefined] };
        },
    };
    const imageTrackPipeline = {
        async loadSegment(wantedCdn, content, loaderOptions, cancelSignal, callbacks) {
            const { segment } = content;
            const url = utils_constructSegmentUrl(wantedCdn, segment);
            if (segment.isInit || url === null) {
                // image do not need an init segment. Passthrough directly to the parser
                return { resultType: "segment-created",
                    resultData: null };
            }
            const data = await utils_request({ url,
                responseType: "arraybuffer",
                timeout: loaderOptions.timeout,
                onProgress: callbacks.onProgress,
                cancelSignal });
            return { resultType: "segment-loaded",
                resultData: data };
        },
        parseSegment(loadedSegment, content, _initTimescale) {
            const { data, isChunked } = loadedSegment;
            if (content.segment.isInit) { // image init segment has no use
                return { segmentType: "init",
                    initializationData: null,
                    initializationDataSize: 0,
                    protectionDataUpdate: false,
                    initTimescale: undefined };
            }
            if (isChunked) {
                throw new Error("Image data should not be downloaded in chunks");
            }
            // TODO image Parsing should be more on the buffer side, no?
            if (data === null || src_features.imageParser === null) {
                return { segmentType: "media",
                    chunkData: null,
                    chunkInfos: null,
                    chunkOffset: 0,
                    chunkSize: 0,
                    protectionDataUpdate: false,
                    appendWindow: [undefined, undefined] };
            }
            const bifObject = src_features.imageParser(new Uint8Array(data));
            const thumbsData = bifObject.thumbs;
            return { segmentType: "media",
                chunkData: { data: thumbsData,
                    start: 0,
                    end: Number.MAX_VALUE,
                    timescale: 1,
                    type: "bif" },
                chunkInfos: { time: 0,
                    duration: Number.MAX_VALUE },
                chunkSize: undefined,
                chunkOffset: 0,
                protectionDataUpdate: false,
                appendWindow: [undefined, undefined] };
        },
    };
    return { manifest: manifestPipeline,
        audio: audioVideoPipeline,
        video: audioVideoPipeline,
        text: textTrackPipeline,
        image: imageTrackPipeline };
}

;// CONCATENATED MODULE: ./src/transports/smooth/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const transports_smooth = (smooth_pipelines);

;// CONCATENATED MODULE: ./src/features/list/smooth.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Add ability to play Microsoft Smooth Streaming contents.
 * @param {Object} features
 */
function addSmoothFeature(features) {
    features.transports.smooth = transports_smooth;
}

/* harmony default export */ const list_smooth = ((/* unused pure expression or super */ null && (addSmoothFeature)));

;// CONCATENATED MODULE: ./src/parsers/manifest/metaplaylist/representation_index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The MetaRepresentationIndex is wrapper for all kind of RepresentationIndex (from
 * dash, smooth, etc)
 *
 * It wraps methods from original RepresentationIndex, while taking into account
 * the time offset introduced by the MetaPlaylist content.
 *
 * It makes a bridge between the MetaPlaylist timeline, and the original
 * timeline of content. (e.g. the segment whose "meta" time is 1500, is actually a
 * segment whose original time is 200, played with an offset of 1300)
 * @class MetaRepresentationIndex
 */
class MetaRepresentationIndex {
    /**
     * Create a new `MetaRepresentationIndex`.
     * @param {Object} wrappedIndex - "Real" RepresentationIndex implementation of
     * the concerned Representation.
     * @param {Array.<number|undefined>} contentBounds - Start time and end time
     * the Representation will be played between, in seconds.
     * @param {string} transport - Transport for the "real" RepresentationIndex
     * (e.g. "dash" or "smooth").
     * @param {Object} baseContentInfos - Various information about the "real"
     * Representation.
     */
    constructor(wrappedIndex, contentBounds, transport, baseContentInfos) {
        this._wrappedIndex = wrappedIndex;
        this._timeOffset = contentBounds[0];
        this._contentEnd = contentBounds[1];
        this._transport = transport;
        this._baseContentInfos = baseContentInfos;
    }
    /**
     * Returns information about the initialization segment.
     */
    getInitSegment() {
        const segment = this._wrappedIndex.getInitSegment();
        if (segment === null) {
            return null;
        }
        return this._cloneWithPrivateInfos(segment);
    }
    /**
     * Returns information about the segments asked.
     * @param {number} up - Starting time wanted, in seconds.
     * @param {Number} duration - Amount of time wanted, in seconds
     * @returns {Array.<Object>}
     */
    getSegments(up, duration) {
        return this._wrappedIndex.getSegments(up - this._timeOffset, duration)
            .map((segment) => {
            const clonedSegment = this._cloneWithPrivateInfos(segment);
            clonedSegment.time += this._timeOffset;
            clonedSegment.end += this._timeOffset;
            return clonedSegment;
        });
    }
    /**
     * Whether this RepresentationIndex should be refreshed now.
     * Returns `false` as MetaPlaylist contents do not support underlying live
     * contents yet.
     * @returns {Boolean}
     */
    shouldRefresh() {
        return false;
    }
    /**
     * Returns first possible position the first segment plays at, in seconds.
     * `undefined` if we do not know this value.
     * @return {Number|undefined}
     */
    getFirstAvailablePosition() {
        const wrappedFirstPosition = this._wrappedIndex.getFirstAvailablePosition();
        return wrappedFirstPosition != null ? wrappedFirstPosition + this._timeOffset :
            undefined;
    }
    /**
     * Returns last possible position the last segment plays at, in seconds.
     * `undefined` if we do not know this value.
     * @return {Number|undefined}
     */
    getLastAvailablePosition() {
        const wrappedLastPosition = this._wrappedIndex.getLastAvailablePosition();
        return wrappedLastPosition != null ? wrappedLastPosition + this._timeOffset :
            undefined;
    }
    /**
     * Returns the absolute end in seconds this RepresentationIndex can reach once
     * all segments are available.
     * @returns {number|null|undefined}
     */
    getEnd() {
        const wrappedEnd = this._wrappedIndex.getEnd();
        return wrappedEnd != null ? wrappedEnd + this._timeOffset :
            undefined;
    }
    /**
     * Returns:
     *   - `true` if in the given time interval, at least one new segment is
     *     expected to be available in the future.
     *   - `false` either if all segments in that time interval are already
     *     available for download or if none will ever be available for it.
     *   - `undefined` when it is not possible to tell.
     * @param {number} start
     * @param {number} end
     * @returns {boolean|undefined}
     */
    awaitSegmentBetween(start, end) {
        return this._wrappedIndex.awaitSegmentBetween(start - this._timeOffset, end - this._timeOffset);
    }
    /**
     * Returns `false` if that segment is not currently available in the Manifest
     * (e.g. it corresponds to a segment which is before the current buffer
     * depth).
     * @param {Object} segment
     * @returns {boolean|undefined}
     */
    isSegmentStillAvailable(segment) {
        var _a;
        if (((_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.metaplaylistInfos) === undefined) {
            return false;
        }
        const { originalSegment } = segment.privateInfos.metaplaylistInfos;
        return this._wrappedIndex.isSegmentStillAvailable(originalSegment);
    }
    /**
     * @param {Error} error
     * @param {Object} segment
     * @returns {Boolean}
     */
    canBeOutOfSyncError(error, segment) {
        var _a;
        if (((_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.metaplaylistInfos) === undefined) {
            return false;
        }
        const { originalSegment } = segment.privateInfos.metaplaylistInfos;
        return this._wrappedIndex.canBeOutOfSyncError(error, originalSegment);
    }
    /**
     *
     * @param {Number} time
     * @returns {Number | null}
     */
    checkDiscontinuity(time) {
        return this._wrappedIndex.checkDiscontinuity(time - this._timeOffset);
    }
    /**
     * @returns {Boolean}
     */
    isFinished() {
        return this._wrappedIndex.isFinished();
    }
    /**
     * @returns {Boolean}
     */
    isInitialized() {
        return this._wrappedIndex.isInitialized();
    }
    /**
     * @param {Object} newIndex
     */
    _replace(newIndex) {
        if (!(newIndex instanceof MetaRepresentationIndex)) {
            throw new Error("A MetaPlaylist can only be replaced with another MetaPlaylist");
        }
        this._wrappedIndex._replace(newIndex._wrappedIndex);
    }
    /**
     * @param {Object} newIndex
     */
    _update(newIndex) {
        if (!(newIndex instanceof MetaRepresentationIndex)) {
            throw new Error("A MetaPlaylist can only be updated with another MetaPlaylist");
        }
        this._wrappedIndex._update(newIndex._wrappedIndex);
    }
    /**
     * Clone the given segment, presumably coming from its original
     * RepresentationIndex, and add the linked metaplaylist privateInfos to it.
     * Return that cloned and enhanced segment.
     * @param {Object} segment
     * @returns {Object}
     */
    _cloneWithPrivateInfos(segment) {
        const clonedSegment = object_assign({}, segment);
        if (clonedSegment.privateInfos === undefined) {
            clonedSegment.privateInfos = {};
        }
        clonedSegment.privateInfos.metaplaylistInfos = {
            transportType: this._transport,
            baseContent: this._baseContentInfos,
            contentStart: this._timeOffset,
            contentEnd: this._contentEnd,
            originalSegment: segment,
        };
        return clonedSegment;
    }
}

;// CONCATENATED MODULE: ./src/parsers/manifest/metaplaylist/metaplaylist_parser.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Parse playlist string to JSON.
 * Returns an array of contents.
 * @param {string} data
 * @param {string} url
 * @returns {Object}
 */
function parseMetaPlaylist(data, parserOptions) {
    let parsedData;
    if (typeof data === "object" && data != null) {
        parsedData = data;
    }
    else if (typeof data === "string") {
        try {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            parsedData = JSON.parse(data);
        }
        catch (error) {
            throw new Error("MPL Parser: Bad MetaPlaylist file. Expected JSON.");
        }
    }
    else {
        throw new Error("MPL Parser: Parser input must be either a string " +
            "or the MetaPlaylist data directly.");
    }
    const { contents, version, type } = parsedData;
    if (type !== "MPL") {
        throw new Error("MPL Parser: Bad MetaPlaylist. " +
            "The `type` property is not set to `MPL`");
    }
    if (version !== "0.1") {
        throw new Error("MPL Parser: Bad MetaPlaylist version");
    }
    // quick checks
    if (contents == null || contents.length === 0) {
        throw new Error("MPL Parser: No content found.");
    }
    const ressources = [];
    for (let i = 0; i < contents.length; i++) {
        const content = contents[i];
        if (content.url == null ||
            content.startTime == null ||
            content.endTime == null ||
            content.transport == null) {
            throw new Error("MPL Parser: Malformed content.");
        }
        ressources.push({ url: content.url, transportType: content.transport });
    }
    const metaPlaylist = parsedData;
    return {
        type: "needs-manifest-loader",
        value: {
            ressources,
            continue: function parseWholeMPL(loadedRessources) {
                const parsedManifest = createManifest(metaPlaylist, loadedRessources, parserOptions);
                return { type: "done", value: parsedManifest };
            },
        },
    };
}
/**
 * From several parsed manifests, generate a single bigger manifest.
 * Each content presents a start and end time, so that periods
 * boudaries could be adapted.
 * @param {Object} mplData
 * @param {Array<Object>} manifest
 * @param {string} url
 * @returns {Object}
 */
function createManifest(mplData, manifests, parserOptions) {
    const { url, serverSyncInfos } = parserOptions;
    const clockOffset = serverSyncInfos !== undefined ?
        serverSyncInfos.serverTimestamp - serverSyncInfos.clientTime :
        undefined;
    const generateAdaptationID = idGenerator();
    const generateRepresentationID = idGenerator();
    const { contents } = mplData;
    const minimumTime = contents.length > 0 ? contents[0].startTime :
        0;
    const maximumTime = contents.length > 0 ? contents[contents.length - 1].endTime :
        0;
    const isDynamic = mplData.dynamic === true;
    let firstStart = null;
    let lastEnd = null;
    const periods = [];
    for (let iMan = 0; iMan < contents.length; iMan++) {
        const content = contents[iMan];
        firstStart = firstStart !== null ? Math.min(firstStart, content.startTime) :
            content.startTime;
        lastEnd = lastEnd !== null ? Math.max(lastEnd, content.endTime) :
            content.endTime;
        const currentManifest = manifests[iMan];
        if (currentManifest.periods.length <= 0) {
            continue;
        }
        const contentOffset = content.startTime - currentManifest.periods[0].start;
        const contentEnd = content.endTime;
        const manifestPeriods = [];
        for (let iPer = 0; iPer < currentManifest.periods.length; iPer++) {
            const currentPeriod = currentManifest.periods[iPer];
            const adaptations = SUPPORTED_ADAPTATIONS_TYPE.reduce((acc, type) => {
                const currentAdaptations = currentPeriod.adaptations[type];
                if (currentAdaptations == null) {
                    return acc;
                }
                const adaptationsForCurrentType = [];
                for (let iAda = 0; iAda < currentAdaptations.length; iAda++) {
                    const currentAdaptation = currentAdaptations[iAda];
                    const representations = [];
                    for (let iRep = 0; iRep < currentAdaptation.representations.length; iRep++) {
                        const currentRepresentation = currentAdaptation.representations[iRep];
                        const contentInfos = {
                            manifest: currentManifest,
                            period: currentPeriod,
                            adaptation: currentAdaptation,
                            representation: currentRepresentation,
                        };
                        const newIndex = new MetaRepresentationIndex(currentRepresentation.index, [contentOffset, contentEnd], content.transport, contentInfos);
                        representations.push({
                            bitrate: currentRepresentation.bitrate,
                            index: newIndex,
                            cdnMetadata: currentRepresentation.cdnMetadata,
                            id: currentRepresentation.id,
                            height: currentRepresentation.height,
                            width: currentRepresentation.width,
                            mimeType: currentRepresentation.mimeType,
                            frameRate: currentRepresentation.frameRate,
                            codecs: currentRepresentation.codec,
                            contentProtections: currentRepresentation.contentProtections,
                        });
                    }
                    adaptationsForCurrentType.push({
                        id: currentAdaptation.id,
                        representations,
                        type: currentAdaptation.type,
                        audioDescription: currentAdaptation.isAudioDescription,
                        closedCaption: currentAdaptation.isClosedCaption,
                        isDub: currentAdaptation.isDub,
                        language: currentAdaptation.language,
                        isSignInterpreted: currentAdaptation.isSignInterpreted,
                    });
                    acc[type] = adaptationsForCurrentType;
                }
                return acc;
            }, {});
            // TODO only first period?
            const textTracks = content.textTracks === undefined ? [] :
                content.textTracks;
            const newTextAdaptations = textTracks.map((track) => {
                const adaptationID = "gen-text-ada-" + generateAdaptationID();
                const representationID = "gen-text-rep-" + generateRepresentationID();
                const indexOfFilename = getFilenameIndexInUrl(track.url);
                const cdnUrl = track.url.substring(0, indexOfFilename);
                const filename = track.url.substring(indexOfFilename);
                return {
                    id: adaptationID,
                    type: "text",
                    language: track.language,
                    closedCaption: track.closedCaption,
                    manuallyAdded: true,
                    representations: [
                        { bitrate: 0,
                            cdnMetadata: [{ baseUrl: cdnUrl }],
                            id: representationID,
                            mimeType: track.mimeType,
                            codecs: track.codecs,
                            index: new StaticRepresentationIndex({ media: filename }),
                        },
                    ],
                };
            }, []);
            if (newTextAdaptations.length > 0) {
                if (adaptations.text == null) {
                    adaptations.text = newTextAdaptations;
                }
                else {
                    adaptations.text.push(...newTextAdaptations);
                }
            }
            const newPeriod = {
                id: formatId(currentManifest.id) + "_" + formatId(currentPeriod.id),
                adaptations,
                duration: currentPeriod.duration,
                start: contentOffset + currentPeriod.start,
            };
            manifestPeriods.push(newPeriod);
        }
        for (let i = manifestPeriods.length - 1; i >= 0; i--) {
            const period = manifestPeriods[i];
            if (period.start >= content.endTime) {
                manifestPeriods.splice(i, 1);
            }
            else if (period.duration != null) {
                if (period.start + period.duration > content.endTime) {
                    period.duration = content.endTime - period.start;
                }
            }
            else if (i === manifestPeriods.length - 1) {
                period.duration = content.endTime - period.start;
            }
        }
        periods.push(...manifestPeriods);
    }
    const time = performance.now();
    const isLastPeriodKnown = !isDynamic ||
        mplData.pollInterval === undefined &&
            (manifests.length <= 0 ||
                manifests[manifests.length - 1].isLastPeriodKnown);
    const manifest = { availabilityStartTime: 0,
        clockOffset,
        suggestedPresentationDelay: 10,
        periods,
        transportType: "metaplaylist",
        isLive: isDynamic,
        isDynamic,
        isLastPeriodKnown,
        uris: url == null ? [] :
            [url],
        // TODO more precize time bounds?
        timeBounds: { minimumSafePosition: minimumTime,
            timeshiftDepth: null,
            maximumTimeData: {
                isLinear: false,
                maximumSafePosition: maximumTime,
                livePosition: undefined,
                time,
            } },
        lifetime: mplData.pollInterval };
    return manifest;
}
function formatId(str) {
    return str.replace(/_/g, "\_");
}

;// CONCATENATED MODULE: ./src/parsers/manifest/metaplaylist/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* harmony default export */ const metaplaylist = (parseMetaPlaylist);

;// CONCATENATED MODULE: ./src/transports/metaplaylist/manifest_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Manifest loader triggered if there was no custom-defined one in the API.
 * @param {string} url
 * @param {Object} loaderOptions
 * @param {Object} cancelSignal
 */
function regularManifestLoader(url, loaderOptions, cancelSignal) {
    if (url === undefined) {
        throw new Error("Cannot perform HTTP(s) request. URL not known");
    }
    return utils_request({ url,
        responseType: "text",
        timeout: loaderOptions.timeout,
        cancelSignal });
}
/**
 * Generate a manifest loader for the application
 * @param {Function} [customManifestLoader]
 * @returns {Function}
 */
function manifest_loader_generateManifestLoader({ customManifestLoader }) {
    return typeof customManifestLoader !== "function" ?
        regularManifestLoader :
        callCustomManifestLoader(customManifestLoader, regularManifestLoader);
}

;// CONCATENATED MODULE: ./src/transports/metaplaylist/pipelines.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/**
 * Get base - real - content from an offseted metaplaylist content.
 * @param {Object} segment
 * @returns {Object}
 */
function getOriginalContent(segment) {
    var _a;
    if (((_a = segment.privateInfos) === null || _a === void 0 ? void 0 : _a.metaplaylistInfos) === undefined) {
        throw new Error("MetaPlaylist: missing private infos");
    }
    const { manifest, period, adaptation, representation } = segment.privateInfos.metaplaylistInfos.baseContent;
    const { originalSegment } = segment.privateInfos.metaplaylistInfos;
    return { manifest,
        period,
        adaptation,
        representation,
        segment: originalSegment };
}
/**
 * @param {Object} transports
 * @param {string} transportName
 * @param {Object} options
 * @returns {Object}
 */
function getTransportPipelines(transports, transportName, options) {
    const initialTransport = transports[transportName];
    if (initialTransport !== undefined) {
        return initialTransport;
    }
    const feature = src_features.transports[transportName];
    if (feature === undefined) {
        throw new Error(`MetaPlaylist: Unknown transport ${transportName}.`);
    }
    const transport = feature(options);
    transports[transportName] = transport;
    return transport;
}
/**
 * @param {Object} segment
 * @returns {Object}
 */
function getMetaPlaylistPrivateInfos(segment) {
    const { privateInfos } = segment;
    if ((privateInfos === null || privateInfos === void 0 ? void 0 : privateInfos.metaplaylistInfos) === undefined) {
        throw new Error("MetaPlaylist: Undefined transport for content for metaplaylist.");
    }
    return privateInfos.metaplaylistInfos;
}
/* harmony default export */ function metaplaylist_pipelines(options) {
    const transports = {};
    const manifestLoader = manifest_loader_generateManifestLoader({
        customManifestLoader: options.manifestLoader,
    });
    // remove some options that we might not want to apply to the
    // other streaming protocols used here
    const otherTransportOptions = object_assign({}, options, { manifestLoader: undefined,
        supplementaryTextTracks: [],
        supplementaryImageTracks: [] });
    const manifestPipeline = {
        loadManifest: manifestLoader,
        parseManifest(manifestData, parserOptions, onWarnings, cancelSignal, scheduleRequest) {
            var _a;
            const url = (_a = manifestData.url) !== null && _a !== void 0 ? _a : parserOptions.originalUrl;
            const { responseData } = manifestData;
            const mplParserOptions = { url,
                serverSyncInfos: options.serverSyncInfos };
            const parsed = metaplaylist(responseData, mplParserOptions);
            return handleParsedResult(parsed);
            function handleParsedResult(parsedResult) {
                if (parsedResult.type === "done") {
                    const manifest = new src_manifest(parsedResult.value, options);
                    return Promise.resolve({ manifest });
                }
                const parsedValue = parsedResult.value;
                const loaderProms = parsedValue.ressources.map((resource) => {
                    const transport = getTransportPipelines(transports, resource.transportType, otherTransportOptions);
                    return scheduleRequest(loadSubManifest)
                        .then((data) => transport.manifest.parseManifest(data, Object.assign(Object.assign({}, parserOptions), { originalUrl: resource.url }), onWarnings, cancelSignal, scheduleRequest));
                    function loadSubManifest() {
                        /*
                         * Whether a ManifestLoader's timeout should be relied on here
                         * is ambiguous.
                         */
                        const manOpts = { timeout: src_config.getCurrent().DEFAULT_REQUEST_TIMEOUT };
                        return transport.manifest.loadManifest(resource.url, manOpts, cancelSignal);
                    }
                });
                return Promise.all(loaderProms).then(parsedReqs => {
                    const loadedRessources = parsedReqs.map(e => e.manifest);
                    return handleParsedResult(parsedResult.value.continue(loadedRessources));
                });
            }
        },
    };
    /**
     * @param {Object} segment
     * @returns {Object}
     */
    function getTransportPipelinesFromSegment(segment) {
        const { transportType } = getMetaPlaylistPrivateInfos(segment);
        return getTransportPipelines(transports, transportType, otherTransportOptions);
    }
    /**
     * @param {number} contentOffset
     * @param {number|undefined} contentEnd
     * @param {Object} segmentResponse
     * @returns {Object}
     */
    function offsetTimeInfos(contentOffset, contentEnd, segmentResponse) {
        const offsetedSegmentOffset = segmentResponse.chunkOffset + contentOffset;
        if (isNullOrUndefined(segmentResponse.chunkData)) {
            return { chunkInfos: segmentResponse.chunkInfos,
                chunkOffset: offsetedSegmentOffset,
                appendWindow: [undefined, undefined] };
        }
        // clone chunkInfos
        const { chunkInfos, appendWindow } = segmentResponse;
        const offsetedChunkInfos = chunkInfos === null ? null :
            object_assign({}, chunkInfos);
        if (offsetedChunkInfos !== null) {
            offsetedChunkInfos.time += contentOffset;
        }
        const offsetedWindowStart = appendWindow[0] !== undefined ?
            Math.max(appendWindow[0] + contentOffset, contentOffset) :
            contentOffset;
        let offsetedWindowEnd;
        if (appendWindow[1] !== undefined) {
            offsetedWindowEnd = contentEnd !== undefined ?
                Math.min(appendWindow[1] + contentOffset, contentEnd) :
                appendWindow[1] + contentOffset;
        }
        else if (contentEnd !== undefined) {
            offsetedWindowEnd = contentEnd;
        }
        return { chunkInfos: offsetedChunkInfos,
            chunkOffset: offsetedSegmentOffset,
            appendWindow: [offsetedWindowStart, offsetedWindowEnd] };
    }
    const audioPipeline = {
        loadSegment(wantedCdn, content, loaderOptions, cancelToken, callbacks) {
            const { segment } = content;
            const { audio } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            return audio.loadSegment(wantedCdn, ogContent, loaderOptions, cancelToken, callbacks);
        },
        parseSegment(loadedSegment, content, initTimescale) {
            const { segment } = content;
            const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
            const { audio } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            const parsed = audio.parseSegment(loadedSegment, ogContent, initTimescale);
            if (parsed.segmentType === "init") {
                return parsed;
            }
            const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
            return object_assign({}, parsed, timeInfos);
        },
    };
    const videoPipeline = {
        loadSegment(wantedCdn, content, loaderOptions, cancelToken, callbacks) {
            const { segment } = content;
            const { video } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            return video.loadSegment(wantedCdn, ogContent, loaderOptions, cancelToken, callbacks);
        },
        parseSegment(loadedSegment, content, initTimescale) {
            const { segment } = content;
            const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
            const { video } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            const parsed = video.parseSegment(loadedSegment, ogContent, initTimescale);
            if (parsed.segmentType === "init") {
                return parsed;
            }
            const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
            return object_assign({}, parsed, timeInfos);
        },
    };
    const textTrackPipeline = {
        loadSegment(wantedCdn, content, loaderOptions, cancelToken, callbacks) {
            const { segment } = content;
            const { text } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            return text.loadSegment(wantedCdn, ogContent, loaderOptions, cancelToken, callbacks);
        },
        parseSegment(loadedSegment, content, initTimescale) {
            const { segment } = content;
            const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
            const { text } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            const parsed = text.parseSegment(loadedSegment, ogContent, initTimescale);
            if (parsed.segmentType === "init") {
                return parsed;
            }
            const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
            return object_assign({}, parsed, timeInfos);
        },
    };
    const imageTrackPipeline = {
        loadSegment(wantedCdn, content, loaderOptions, cancelToken, callbacks) {
            const { segment } = content;
            const { image } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            return image.loadSegment(wantedCdn, ogContent, loaderOptions, cancelToken, callbacks);
        },
        parseSegment(loadedSegment, content, initTimescale) {
            const { segment } = content;
            const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
            const { image } = getTransportPipelinesFromSegment(segment);
            const ogContent = getOriginalContent(segment);
            const parsed = image.parseSegment(loadedSegment, ogContent, initTimescale);
            if (parsed.segmentType === "init") {
                return parsed;
            }
            const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
            return object_assign({}, parsed, timeInfos);
        },
    };
    return { manifest: manifestPipeline,
        audio: audioPipeline,
        video: videoPipeline,
        text: textTrackPipeline,
        image: imageTrackPipeline };
}

;// CONCATENATED MODULE: ./src/transports/metaplaylist/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * /!\ This file is feature-switchable.
 * It always should be imported through the `features` object.
 */

/* harmony default export */ const transports_metaplaylist = (metaplaylist_pipelines);

;// CONCATENATED MODULE: ./src/experimental/features/metaplaylist.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function addMetaPlaylistFeature(features) {
    features.transports.metaplaylist = transports_metaplaylist;
}

/* harmony default export */ const features_metaplaylist = ((/* unused pure expression or super */ null && (addMetaPlaylistFeature)));

;// CONCATENATED MODULE: ./demo/full/scripts/modules/player/fromPlayerEvent.js


/**
 * Simple utils converting an Event-listener-based player event into an
 * Observable.
 * @param {RxPlayer} player
 * @param {string} event
 * @returns {Observable}
 */
function fromPlayerEvent(player, event) {
  return new Observable_Observable(function (obs) {
    var func = function func(payload) {
      return obs.next(payload);
    };
    player.addEventListener(event, func);
    return function () {
      player.removeEventListener(event, func);
    };
  });
}
;// CONCATENATED MODULE: ./demo/full/scripts/modules/player/events.js


var POSITION_UPDATES_INTERVAL = 100;
var BUFFERED_DATA_UPDATES_INTERVAL = 100;

/**
 * Add event listeners to the RxPlayer to update the module's state at the right
 * time.
 * Unsubscribe when $destroy emit.
 * @param {RxPlayer} player
 * @param {Subject} state
 * @param {Subject} $destroy
 */
var linkPlayerEventsToState = function linkPlayerEventsToState(player, state, $destroy) {
  var linkPlayerEventToState = function linkPlayerEventToState(event, stateItem) {
    return fromPlayerEvent(player, event).pipe(takeUntil($destroy)).subscribe(function (arg) {
      var _state$set;
      return state.set((_state$set = {}, _state$set[stateItem] = arg, _state$set));
    });
  };
  linkPlayerEventToState("textTrackChange", "subtitle");
  linkPlayerEventToState("audioTrackChange", "language");
  linkPlayerEventToState("videoTrackChange", "videoTrack");
  linkPlayerEventToState("videoBitrateChange", "videoBitrate");
  linkPlayerEventToState("audioBitrateChange", "audioBitrate");
  linkPlayerEventToState("error", "error");
  linkPlayerEventToState("volumeChange", "volume");
  linkPlayerEventToState("availableAudioTracksChange", "availableLanguages");
  linkPlayerEventToState("availableVideoTracksChange", "availableVideoTracks");
  linkPlayerEventToState("availableTextTracksChange", "availableSubtitles");
  linkPlayerEventToState("availableAudioBitratesChange", "availableAudioBitrates");
  linkPlayerEventToState("availableVideoBitratesChange", "availableVideoBitrates");
  fromPlayerEvent(player, "imageTrackUpdate").pipe(distinctUntilChanged(), takeUntil($destroy), map(function (_ref) {
    var data = _ref.data;
    return data;
  })).subscribe(function (images) {
    return state.set({
      images: images
    });
  });

  // use an interval for current position
  // TODO Only active for content playback
  interval(POSITION_UPDATES_INTERVAL).pipe(map(function () {
    var position = player.getPosition();
    var duration = player.getVideoDuration();
    var videoTrack = player.getVideoTrack();
    return {
      currentTime: player.getPosition(),
      wallClockDiff: player.getWallClockTime() - position,
      bufferGap: player.getVideoLoadedTime() - player.getVideoPlayedTime(),
      duration: Number.isNaN(duration) ? undefined : duration,
      minimumPosition: player.getMinimumPosition(),
      maximumPosition: player.getMaximumPosition(),
      liveGap: player.getMaximumPosition() - player.getPosition(),
      playbackPosition: player.getPlaybackRate(),
      videoTrackHasTrickMode: videoTrack !== null && videoTrack !== undefined && videoTrack.trickModeTracks !== undefined && videoTrack.trickModeTracks.length > 0
    };
  }), takeUntil($destroy)).subscribe(function (arg) {
    state.set(arg);
  });
  fromPlayerEvent(player, "playerStateChange").pipe(distinctUntilChanged(), takeUntil($destroy)).subscribe(function (arg) {
    var stateUpdates = {
      cannotLoadMetadata: false,
      hasEnded: arg === "ENDED",
      hasCurrentContent: !["STOPPED", "LOADING"].includes(arg),
      isContentLoaded: !["STOPPED", "LOADING", "RELOADING"].includes(arg),
      isBuffering: arg === "BUFFERING",
      isLoading: arg === "LOADING",
      isReloading: arg === "RELOADING",
      isSeeking: arg === "SEEKING",
      isStopped: arg === "STOPPED"
    };
    switch (arg) {
      case "ENDED":
        stateUpdates.autoPlayBlocked = false;
        stateUpdates.isPaused = true;
        break;
      case "PAUSED":
        stateUpdates.isPaused = true;
        break;
      case "PLAYING":
        stateUpdates.autoPlayBlocked = false;
        stateUpdates.isPaused = false;
        break;
      case "LOADED":
        stateUpdates.isPaused = true;
        stateUpdates.isLive = player.isLive();
        break;
      case "STOPPED":
        stateUpdates.audioBitrate = undefined;
        stateUpdates.autoPlayBlocked = false;
        stateUpdates.videoBitrate = undefined;
        stateUpdates.availableAudioBitrates = [];
        stateUpdates.availableVideoBitrates = [];
        stateUpdates.availableVideoTracks = [];
        stateUpdates.availableLanguages = [];
        stateUpdates.availableSubtitles = [];
        stateUpdates.lowLatencyMode = false;
        stateUpdates.images = [];
        stateUpdates.subtitle = null;
        stateUpdates.language = null;
        stateUpdates.videoTrack = null;
        stateUpdates.currentTime = undefined;
        stateUpdates.wallClockDiff = undefined;
        stateUpdates.bufferGap = undefined;
        stateUpdates.bufferedData = null;
        stateUpdates.duration = undefined;
        stateUpdates.minimumPosition = undefined;
        stateUpdates.maximumPosition = undefined;
        break;
    }
    if (arg !== "STOPPED") {
      // error is never cleaned up
      stateUpdates.error = null;
    }
    state.set(stateUpdates);
  });

  // update bufferedData
  fromPlayerEvent(player, "playerStateChange").pipe(map(function (playerState) {
    return playerState === "STOPPED";
  }), distinctUntilChanged(), takeUntil($destroy), switchMap(function (isStopped) {
    if (isStopped) {
      state.set({
        bufferedData: null
      });
      return EMPTY;
    }
    return interval(BUFFERED_DATA_UPDATES_INTERVAL).pipe(startWith(0), tap(function () {
      var audioContent = player.__priv_getSegmentBufferContent("audio");
      if (Array.isArray(audioContent)) {
        audioContent = audioContent.slice();
      }
      var textContent = player.__priv_getSegmentBufferContent("text");
      if (Array.isArray(textContent)) {
        textContent = textContent.slice();
      }
      var videoContent = player.__priv_getSegmentBufferContent("video");
      if (Array.isArray(videoContent)) {
        videoContent = videoContent.slice();
      }
      state.set({
        bufferedData: {
          audio: audioContent,
          video: videoContent,
          text: textContent
        }
      });
    }));
  })).subscribe();
  fromPlayerEvent(player, "warning").pipe(takeUntil($destroy)).subscribe(function (warning) {
    if (warning === null || warning === undefined) {
      return;
    }
    switch (warning.code) {
      case "MEDIA_ERR_NOT_LOADED_METADATA":
        state.set({
          cannotLoadMetadata: true
        });
        break;
      case "MEDIA_ERR_BLOCKED_AUTOPLAY":
        state.set({
          autoPlayBlocked: true
        });
        break;
    }
  });
};

;// CONCATENATED MODULE: ./demo/full/scripts/modules/player/catchUp.js



// Distance from live edge we try to reach when the catching up button
// is enabled.
var LIVE_GAP_GOAL_WHEN_CATCHING_UP = 3.5;

// Distance from live edge from which we begin to update the playback rate, as
// we're considered too far from the live edge.
var CATCH_UP_CHANGE_RATE_STEP = 6;

// Distance from live edge from which we are considered too far too just
// change the playback rate. In the case the current distance is superior
// to that value, we will seek to a LIVE_GAP_GOAL_WHEN_CATCHING_UP distance
// directly instead.
var CATCH_UP_SEEKING_STEP = 15;

// Maximum playback rate we can set when catching up.
var MAX_RATE = 5;

/**
 * Perform actions when catch-up mode is enabled/disabled.
 *
 * When it is disabled:
 *   - Reset the playback rate if it was catching up
 *   - Disable catching up mode every time it is found to be enabled
 *
 * When it is enabled:
 *   - seek back to live if it is too far from it.
 *   - Update playback rate and `isCatchingUp` if it is far from the live edge
 *     but not enough too trigger the seek
 */
function $handleCatchUpMode($switchCatchUpMode, rxPlayer, state) {
  var isCatchingUp = false;
  function stopCatchingUp() {
    if (!isCatchingUp) {
      return EMPTY;
    }
    rxPlayer.setPlaybackRate(1);
    isCatchingUp = false;
    state.set({
      isCatchingUp: isCatchingUp,
      playbackRate: 1
    });
    return of(false);
  }
  return $switchCatchUpMode.pipe(switchMap(function (isCatchUpEnabled) {
    return fromPlayerEvent(rxPlayer, "playerStateChange").pipe(startWith(rxPlayer.getPlayerState()), distinctUntilChanged(), map(function (playerState) {
      return playerState === "LOADED" || playerState === "PLAYING" || playerState === "PAUSED" || playerState === "BUFFERING" || playerState === "SEEKING";
    }), switchMap(function (canCatchUp) {
      if (!rxPlayer.isLive()) {
        state.set({
          isCatchUpEnabled: false
        });
        return stopCatchingUp();
      }
      state.set({
        isCatchUpEnabled: isCatchUpEnabled
      });
      if (!isCatchUpEnabled || !canCatchUp) {
        return stopCatchingUp();
      }
      return interval(200).pipe(startWith(0), map(function () {
        return [rxPlayer.getMaximumPosition(), rxPlayer.getPosition()];
      }), switchMap(function (_ref) {
        var maximumPosition = _ref[0],
          position = _ref[1];
        var liveGap = maximumPosition - position;
        if (liveGap >= CATCH_UP_SEEKING_STEP) {
          rxPlayer.seekTo(maximumPosition - LIVE_GAP_GOAL_WHEN_CATCHING_UP);
          return stopCatchingUp();
        }
        if (isCatchingUp) {
          if (liveGap <= LIVE_GAP_GOAL_WHEN_CATCHING_UP) {
            return stopCatchingUp();
          }
        } else if (liveGap < CATCH_UP_CHANGE_RATE_STEP) {
          return stopCatchingUp();
        }
        var factor = (liveGap - LIVE_GAP_GOAL_WHEN_CATCHING_UP) / 4;
        var rate = Math.round(Math.min(MAX_RATE, 1.1 + factor) * 10) / 10;
        if (rate <= 1) {
          return stopCatchingUp();
        }
        if (!isCatchingUp) {
          isCatchingUp = true;
          state.set({
            isCatchingUp: true
          });
        }
        state.set({
          playbackRate: rate
        });
        var currentPlaybackRate = rxPlayer.getPlaybackRate();
        if (rate !== currentPlaybackRate) {
          rxPlayer.setPlaybackRate(rate);
        }
        return of(true);
      }));
    }));
  }));
}
;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/load_and_push_segment.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {Object} segmentInfo
 * @param {Object} segmentBuffer
 * @param {Object} segmentFetcher
 * @param {Object} cancelSignal
 * @returns {Promise}
 */
function loadAndPushSegment(segmentInfo, segmentBuffer, segmentFetcher, cancelSignal) {
    const pushOperations = [];
    return segmentFetcher(segmentInfo, {
        onChunk(parseChunk) {
            const parsed = parseChunk(undefined);
            let isIsInitSegment;
            let data;
            let timestampOffset;
            const codec = segmentInfo.representation.getMimeTypeString();
            if (parsed.segmentType === "init") {
                isIsInitSegment = true;
                data = parsed.initializationData;
                timestampOffset = 0;
            }
            else {
                isIsInitSegment = false;
                data = parsed.chunkData;
                timestampOffset = parsed.chunkOffset;
            }
            const pushOperation = segmentBuffer.pushChunk({
                data: { initSegment: isIsInitSegment ? data :
                        null,
                    chunk: isIsInitSegment ? null :
                        data,
                    appendWindow: [segmentInfo.period.start, segmentInfo.period.end],
                    timestampOffset,
                    codec },
                inventoryInfos: null,
            }, cancelSignal);
            pushOperations.push(pushOperation);
        },
        onAllChunksReceived() {
            return;
        },
        onRetry(error) {
            src_log.warn("Retrying segment request", error);
        },
    }, cancelSignal).then(() => Promise.all(pushOperations));
}

;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/prepare_source_buffer.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * Open the media source and create the `AudioVideoSegmentBuffer`.
 * @param {HTMLVideoElement} videoElement
 * @param {string} codec
 * @param {Object} cleanUpSignal
 * @returns {Promise.<Object>}
 */
function prepareSourceBuffer(videoElement, codec, cleanUpSignal) {
    return new Promise((resolve, reject) => {
        if (MediaSource_ == null) {
            throw new Error("No MediaSource Object was found in the current browser.");
        }
        // make sure the media has been correctly reset
        const oldSrc = isNonEmptyString(videoElement.src) ? videoElement.src :
            null;
        resetMediaSource(videoElement, null, oldSrc);
        src_log.info("Init: Creating MediaSource");
        const mediaSource = new MediaSource_();
        const objectURL = URL.createObjectURL(mediaSource);
        src_log.info("Init: Attaching MediaSource URL to the media element", objectURL);
        videoElement.src = objectURL;
        mediaSource.addEventListener("sourceopen", onSourceOpen);
        mediaSource.addEventListener("webkitsourceopen", onSourceOpen);
        cleanUpSignal.register(() => {
            mediaSource.removeEventListener("sourceopen", onSourceOpen);
            mediaSource.removeEventListener("webkitsourceopen", onSourceOpen);
            resetMediaSource(videoElement, mediaSource, objectURL);
        });
        function onSourceOpen() {
            try {
                mediaSource.removeEventListener("sourceopen", onSourceOpen);
                mediaSource.removeEventListener("webkitsourceopen", onSourceOpen);
                resolve(new audio_video("video", codec, mediaSource));
            }
            catch (err) {
                reject(err);
            }
        }
    });
}

;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/remove_buffer_around_time.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Remove buffer around wanted time, considering a margin around
 * it that defines what must be kept :
 * If time is 10 and margin is 2, cleaned ranges will be :
 * [0, 8] and [12, videoElement.duration]
 * @param {HTMLMediaElement} videoElement
 * @param {Object} sourceBuffer
 * @param {Number} time
 * @param {Number|undefined} margin
 * @param {Object} cancelSignal
 * @returns {Observable}
 */
function removeBufferAroundTime(videoElement, sourceBuffer, time, margin, cancelSignal) {
    const removalMargin = margin !== null && margin !== void 0 ? margin : 10 * 60;
    if (videoElement.buffered.length === 0) {
        return Promise.resolve();
    }
    const bufferRemovals = [];
    if ((time - removalMargin) > 0) {
        bufferRemovals.push(sourceBuffer.removeBuffer(0, time - removalMargin, cancelSignal));
    }
    if ((time + removalMargin) < videoElement.duration) {
        bufferRemovals.push(sourceBuffer.removeBuffer(time + removalMargin, videoElement.duration, cancelSignal));
    }
    return Promise.all(bufferRemovals);
}

;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/video_thumbnail_loader_error.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Returned error when rejecting
class VideoThumbnailLoaderError extends Error {
    /**
     * @param {string} code
     * @param {string} message
     */
    constructor(code, message) {
        super();
        Object.setPrototypeOf(this, VideoThumbnailLoaderError.prototype);
        this.name = "VideoThumbnailLoaderError";
        this.code = code;
        this.message = message;
    }
}

;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/video_thumbnail_loader.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */











const MIN_NEEDED_DATA_AFTER_TIME = 2;
const loaders = {};
/**
 * This tool, as a supplement to the RxPlayer, intent to help creating thumbnails
 * from a video source.
 *
 * The tools will extract a "thumbnail track" either from a video track (whose light
 * chunks are adapted from such use case) or direclty from the media content.
 */
class VideoThumbnailLoader {
    constructor(videoElement, player) {
        this._videoElement = videoElement;
        this._player = player;
        this._lastRepresentationInfo = null;
    }
    /**
     * Add imported loader to thumbnail loader loader object.
     * It allows to use it when setting time.
     * @param {function} loaderFunc
     */
    static addLoader(loaderFunc) {
        loaderFunc(loaders);
    }
    /**
     * Set time of thumbnail video media element :
     * - Remove buffer when too much buffered data
     * - Search for thumbnail track element to display
     * - Load data
     * - Append data
     * Resolves when time is set.
     * @param {number} time
     * @returns {Promise}
     */
    setTime(time) {
        const manifest = this._player.getManifest();
        if (manifest === null) {
            if (this._lastRepresentationInfo !== null) {
                this._lastRepresentationInfo.cleaner.cancel();
                this._lastRepresentationInfo = null;
            }
            return Promise.reject(new VideoThumbnailLoaderError("NO_MANIFEST", "No manifest available."));
        }
        const content = getTrickModeInfo(time, manifest);
        if (content === null) {
            if (this._lastRepresentationInfo !== null) {
                this._lastRepresentationInfo.cleaner.cancel();
                this._lastRepresentationInfo = null;
            }
            return Promise.reject(new VideoThumbnailLoaderError("NO_TRACK", "Couldn't find a trickmode track for this time."));
        }
        if (this._lastRepresentationInfo !== null &&
            !areSameRepresentation(this._lastRepresentationInfo.content, content)) {
            this._lastRepresentationInfo.cleaner.cancel();
            this._lastRepresentationInfo = null;
        }
        const neededSegments = content.representation.index
            .getSegments(time, MIN_NEEDED_DATA_AFTER_TIME);
        if (neededSegments.length === 0) {
            if (this._lastRepresentationInfo !== null) {
                this._lastRepresentationInfo.cleaner.cancel();
                this._lastRepresentationInfo = null;
            }
            return Promise.reject(new VideoThumbnailLoaderError("NO_THUMBNAIL", "Couldn't find any thumbnail for the given time."));
        }
        // Check which of `neededSegments` are already buffered
        for (let j = 0; j < neededSegments.length; j++) {
            const { time: stime, duration, timescale } = neededSegments[j];
            const start = stime / timescale;
            const end = start + (duration / timescale);
            for (let i = 0; i < this._videoElement.buffered.length; i++) {
                if (this._videoElement.buffered.start(i) - 0.001 <= start &&
                    this._videoElement.buffered.end(i) + 0.001 >= end) {
                    neededSegments.splice(j, 1);
                    j--;
                    break;
                }
            }
        }
        if (neededSegments.length === 0) {
            this._videoElement.currentTime = time;
            src_log.debug("VTL: Thumbnails already loaded.", time);
            return Promise.resolve(time);
        }
        if (src_log.hasLevel("DEBUG")) {
            src_log.debug("VTL: Found thumbnail for time", time, neededSegments.map(s => `start: ${s.time} - end: ${s.end}`).join(", "));
        }
        const loader = loaders[content.manifest.transport];
        if (loader === undefined) {
            if (this._lastRepresentationInfo !== null) {
                this._lastRepresentationInfo.cleaner.cancel();
                this._lastRepresentationInfo = null;
            }
            return Promise.reject(new VideoThumbnailLoaderError("NO_LOADER", "VideoThumbnailLoaderError: No imported loader for this transport type: " +
                content.manifest.transport));
        }
        let lastRepInfo;
        if (this._lastRepresentationInfo === null) {
            const cleaner = new TaskCanceller();
            const segmentFetcher = createSegmentFetcher("video", loader.video, null, 
            // We don't care about the SegmentFetcher's lifecycle events
            {}, { baseDelay: 0,
                maxDelay: 0,
                maxRetryOffline: 0,
                maxRetryRegular: 0,
                requestTimeout: src_config.getCurrent().DEFAULT_REQUEST_TIMEOUT });
            const segmentBufferProm = prepareSourceBuffer(this._videoElement, content.representation.getMimeTypeString(), cleaner.signal).then(async (segmentBuffer) => {
                const initSegment = content.representation.index.getInitSegment();
                if (initSegment === null) {
                    return segmentBuffer;
                }
                const segmentInfo = object_assign({ segment: initSegment }, content);
                await loadAndPushSegment(segmentInfo, segmentBuffer, lastRepInfo.segmentFetcher, cleaner.signal);
                return segmentBuffer;
            });
            lastRepInfo = {
                cleaner,
                segmentBuffer: segmentBufferProm,
                content,
                segmentFetcher,
                pendingRequests: [],
            };
            this._lastRepresentationInfo = lastRepInfo;
        }
        else {
            lastRepInfo = this._lastRepresentationInfo;
        }
        abortUnlistedSegmentRequests(lastRepInfo.pendingRequests, neededSegments);
        const currentTaskCanceller = new TaskCanceller();
        return lastRepInfo.segmentBuffer
            .catch((err) => {
            if (this._lastRepresentationInfo !== null) {
                this._lastRepresentationInfo.cleaner.cancel();
                this._lastRepresentationInfo = null;
            }
            throw new VideoThumbnailLoaderError("LOADING_ERROR", "VideoThumbnailLoaderError: Error when initializing buffers: " +
                String(err));
        })
            .then(async (segmentBuffer) => {
            abortUnlistedSegmentRequests(lastRepInfo.pendingRequests, neededSegments);
            src_log.debug("VTL: Removing buffer around time.", time);
            await removeBufferAroundTime(this._videoElement, segmentBuffer, time, undefined, currentTaskCanceller.signal);
            abortUnlistedSegmentRequests(lastRepInfo.pendingRequests, neededSegments);
            const promises = [];
            for (const segment of neededSegments) {
                const pending = arrayFind(lastRepInfo.pendingRequests, ({ segmentId }) => segmentId === segment.id);
                if (pending !== undefined) {
                    promises.push(pending.promise);
                }
                else {
                    const requestCanceller = new TaskCanceller({
                        cancelOn: lastRepInfo.cleaner.signal,
                    });
                    const segmentInfo = object_assign({ segment }, content);
                    const prom = loadAndPushSegment(segmentInfo, segmentBuffer, lastRepInfo.segmentFetcher, requestCanceller.signal);
                    const newReq = {
                        segmentId: segment.id,
                        canceller: requestCanceller,
                        promise: prom,
                    };
                    lastRepInfo.pendingRequests.push(newReq);
                    const removePendingRequest = () => {
                        const indexOf = lastRepInfo.pendingRequests.indexOf(newReq);
                        if (indexOf >= 0) {
                            lastRepInfo.pendingRequests.splice(indexOf, 1);
                        }
                    };
                    prom.then(removePendingRequest, removePendingRequest);
                    promises.push(prom);
                }
            }
            await Promise.all(promises);
            this._videoElement.currentTime = time;
            return time;
        })
            .catch((err) => {
            if (err instanceof CancellationError) {
                throw new VideoThumbnailLoaderError("ABORTED", "VideoThumbnailLoaderError: Aborted job.");
            }
            throw err;
        });
    }
    /**
     * Dispose thumbnail loader.
     * @returns {void}
     */
    dispose() {
        if (this._lastRepresentationInfo !== null) {
            this._lastRepresentationInfo.cleaner.cancel();
            this._lastRepresentationInfo = null;
        }
    }
}
/**
 * @param {Object} contentInfo1
 * @param {Object} contentInfo2
 * @returns {Boolean}
 */
function areSameRepresentation(contentInfo1, contentInfo2) {
    return (contentInfo1.representation.id === contentInfo2.representation.id &&
        contentInfo1.adaptation.id === contentInfo2.adaptation.id &&
        contentInfo1.period.id === contentInfo2.period.id &&
        contentInfo1.manifest.id === contentInfo2.manifest.id);
}
/**
 * From a given time, find the trickmode representation and return
 * the content information.
 * @param {number} time
 * @param {Object} manifest
 * @returns {Object|null}
 */
function getTrickModeInfo(time, manifest) {
    var _a, _b;
    const period = manifest.getPeriodForTime(time);
    if (period === undefined ||
        period.adaptations.video === undefined ||
        period.adaptations.video.length === 0) {
        return null;
    }
    for (const videoAdaptation of period.adaptations.video) {
        const representation = (_b = (_a = videoAdaptation.trickModeTracks) === null || _a === void 0 ? void 0 : _a[0].representations) === null || _b === void 0 ? void 0 : _b[0];
        if (!isNullOrUndefined(representation)) {
            return { manifest,
                period,
                adaptation: videoAdaptation,
                representation };
        }
    }
    return null;
}
function abortUnlistedSegmentRequests(pendingRequests, neededSegments) {
    pendingRequests
        .filter(req => !neededSegments.some(({ id }) => id === req.segmentId))
        .forEach(req => {
        req.canceller.cancel();
    });
}



;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/index.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* harmony default export */ const tools_VideoThumbnailLoader = (VideoThumbnailLoader);

;// CONCATENATED MODULE: ./src/experimental/tools/VideoThumbnailLoader/features/dash.ts
/**
 * Copyright 2015 CANAL+ Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function addDashFeature(loaders) {
    const transports = dash({ lowLatencyMode: false });
    loaders.dash = transports;
}

;// CONCATENATED MODULE: ./demo/full/scripts/modules/player/index.js
/**
 * # Player Module
 *
 * Instanciate a new RxPlayer, link its state and this module's state, provide
 * actions to allow easy interactions with the player to the rest of the
 * application.
 */








MinimalPlayer.addFeatures([addBIFParserFeature, addDASHFeature, addDirectfileFeature, addEMEFeature, addHTMLSAMIFeature, addHTMLSRTFeature, addHTMLTextBuffer, addHTMLTTMLFeature, addHTMLVTTFeature, addImageBufferFeature, addSmoothFeature, addMetaPlaylistFeature]);

/* eslint-disable no-undef */
if (false) {}
tools_VideoThumbnailLoader.addLoader(addDashFeature);
var PLAYER = function PLAYER(_ref, initOpts) {
  var $destroy = _ref.$destroy,
    state = _ref.state;
  var textTrackElement = initOpts.textTrackElement;
  var player = new MinimalPlayer(initOpts);

  // facilitate DEV mode
  window.RxPlayer = MinimalPlayer;
  window.player = window.rxPlayer = player;

  // initial state. Written here to easily showcase it exhaustively
  state.set({
    audioBitrate: undefined,
    audioBitrateAuto: true,
    autoPlayBlocked: false,
    availableAudioBitrates: [],
    availableLanguages: [],
    availableSubtitles: [],
    availableVideoBitrates: [],
    availableVideoTracks: [],
    bufferGap: undefined,
    bufferedData: null,
    cannotLoadMetadata: false,
    currentTime: undefined,
    duration: undefined,
    error: null,
    hasCurrentContent: false,
    hasEnded: false,
    images: [],
    isBuffering: false,
    isCatchUpEnabled: false,
    isCatchingUp: false,
    isContentLoaded: false,
    isLive: false,
    isLoading: false,
    isPaused: false,
    isReloading: false,
    isSeeking: false,
    isStopped: true,
    language: undefined,
    liveGap: undefined,
    loadedVideo: null,
    lowLatencyMode: false,
    maximumPosition: undefined,
    minimumPosition: undefined,
    playbackRate: player.getPlaybackRate(),
    subtitle: undefined,
    videoBitrate: undefined,
    videoBitrateAuto: true,
    videoTrackId: undefined,
    volume: player.getVolume(),
    wallClockDiff: undefined,
    /**
     * If `true`, the currently set video track has a linked "trickmode" track.
     * @type {boolean}
     */
    videoTrackHasTrickMode: false,
    /**
     * Either `null` when no VideoThumbnailLoader is instanciated.
     * Either an object containing two property:
     *   - `videoThumbnailLoader`: The VideoThumbnailLoader instance
     *   - `videoElement`: The video element on which thumbnails are displayed
     * @type {Object|null}
     */
    videoThumbnailsData: null
  });
  linkPlayerEventsToState(player, state, $destroy);
  var $switchCatchUpMode = new Subject();
  $handleCatchUpMode($switchCatchUpMode, player, state).pipe(takeUntil($destroy)).subscribe();

  // dispose of the RxPlayer when destroyed
  $destroy.subscribe(function () {
    return player.dispose();
  });
  function dettachVideoThumbnailLoader() {
    var _state$get = state.get(),
      videoThumbnailsData = _state$get.videoThumbnailsData;
    if (videoThumbnailsData !== null) {
      videoThumbnailsData.videoThumbnailLoader.dispose();
      state.set({
        videoThumbnailsData: null
      });
    }
  }
  return {
    ATTACH_VIDEO_THUMBNAIL_LOADER: function ATTACH_VIDEO_THUMBNAIL_LOADER() {
      var prevVideoThumbnailsData = state.get().videoThumbnailsData;
      if (prevVideoThumbnailsData !== null) {
        prevVideoThumbnailsData.videoThumbnailLoader.dispose();
      }
      var thumbnailVideoElement = document.createElement("video");
      var videoThumbnailLoader = new tools_VideoThumbnailLoader(thumbnailVideoElement, player);
      state.set({
        videoThumbnailsData: {
          videoThumbnailLoader: videoThumbnailLoader,
          videoElement: thumbnailVideoElement
        }
      });
    },
    SET_VOLUME: function SET_VOLUME(volume) {
      player.setVolume(volume);
    },
    LOAD: function LOAD(arg) {
      dettachVideoThumbnailLoader();
      player.loadVideo(Object.assign({
        textTrackElement: textTrackElement,
        transportOptions: {
          checkMediaSegmentIntegrity: true
        }
      }, arg));
      state.set({
        loadedVideo: arg,
        lowLatencyMode: arg.lowLatencyMode === true
      });
    },
    PLAY: function PLAY() {
      player.play();
      var _state$get2 = state.get(),
        isStopped = _state$get2.isStopped,
        hasEnded = _state$get2.hasEnded;
      if (!isStopped && !hasEnded) {
        state.set({
          isPaused: false
        });
      }
    },
    PAUSE: function PAUSE() {
      player.pause();
      var _state$get3 = state.get(),
        isStopped = _state$get3.isStopped,
        hasEnded = _state$get3.hasEnded;
      if (!isStopped && !hasEnded) {
        state.set({
          isPaused: true
        });
      }
    },
    STOP: function STOP() {
      dettachVideoThumbnailLoader();
      player.stop();
    },
    SEEK: function SEEK(position) {
      player.seekTo({
        position: position
      });
    },
    MUTE: function MUTE() {
      player.mute();
    },
    UNMUTE: function UNMUTE() {
      player.unMute();
    },
    SET_AUDIO_BITRATE: function SET_AUDIO_BITRATE(bitrate) {
      player.setAudioBitrate(bitrate || -1);
      state.set({
        audioBitrateAuto: !bitrate
      });
    },
    SET_VIDEO_BITRATE: function SET_VIDEO_BITRATE(bitrate) {
      player.setVideoBitrate(bitrate || -1);
      state.set({
        videoBitrateAuto: !bitrate
      });
    },
    SET_AUDIO_TRACK: function SET_AUDIO_TRACK(track) {
      player.setAudioTrack(track.id);
    },
    SET_VIDEO_TRACK: function SET_VIDEO_TRACK(track) {
      player.setVideoTrack(track.id);
    },
    DISABLE_VIDEO_TRACK: function DISABLE_VIDEO_TRACK() {
      player.disableVideoTrack();
    },
    SET_SUBTITLES_TRACK: function SET_SUBTITLES_TRACK(track) {
      player.setTextTrack(track.id);
    },
    DISABLE_SUBTITLES_TRACK: function DISABLE_SUBTITLES_TRACK() {
      player.disableTextTrack();
    },
    SET_PLAYBACK_RATE: function SET_PLAYBACK_RATE(rate) {
      player.setPlaybackRate(rate);
      state.set({
        playbackRate: rate
      });
    },
    ENABLE_LIVE_CATCH_UP: function ENABLE_LIVE_CATCH_UP() {
      $switchCatchUpMode.next(true);
    },
    DISABLE_LIVE_CATCH_UP: function DISABLE_LIVE_CATCH_UP() {
      $switchCatchUpMode.next(false);
    }
  };
};
/* harmony default export */ const modules_player = (PLAYER);
;// CONCATENATED MODULE: ./demo/full/scripts/lib/withModulesState.jsx
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


/**
 * Higher Order component which link module(s) state to your component's prop.
 *
 * The module(s) concerned should be in your component's prop, named as you
 * wish.
 *
 * The state listened to and the corresponding prop passed to your component
 * is done when calling withModuleState.
 *
 * @example
 * ```js
 * import MyComponent from "./MyComponent.js";
 *
 * const MyEnhancedComponent = withModuleState({
 *   moduleA: {
 *     name_of_the_wanted_state_in_module_A: "wanted_resulting_prop_name",
 *     stateA1: "stateA1Prop",
 *     stateA2: "stateA2Prop",
 *   },
 *
 *   moduleB: {
 *     // Most of the time you might want to name them the same
 *     stateB1: "stateB1",
 *     stateB2: "stateB2",
 *   },
 * })(MyComponent);
 *
 * ReactDOM.render(
 *   <MyEnhancedComponent
 *     moduleA={moduleA}
 *     moduleB={moduleB}
 *   />, el);
 *
 * // in __MyComponent__, the corresponding state will be available in
 * // this.props (example: this.props.stateA1Prop). Those will be binded to the
 * // module's state, so updates will be repercuted on your module.
 *
 * // Note that module can be removed and added to the MyEnhancedComponent props
 * // component without problems. State subscriptions will be unlinked/relinked.
 * ```
 * @param {Object} moduleState
 * @returns {Function}
 */
var withModulesState = function withModulesState(modulesState) {
  return function (Comp) {
    var modulesProps = Object.keys(modulesState);
    var modulesSubscriptions = {};
    return /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(_class, _React$Component);
      function _class() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.state = {};
        modulesProps.forEach(function (moduleProp) {
          if (!_this.props[moduleProp]) {
            return;
          }
          var translations = modulesState[modulesProps];
          var module = _this.props[moduleProp];
          var wantedProps = Object.keys(modulesState[moduleProp]);
          wantedProps.forEach(function (state) {
            _this.state[translations[state]] = module.get(state);
          });
        });
        return _this;
      }
      var _proto = _class.prototype;
      _proto.componentDidMount = function componentDidMount() {
        var _this2 = this;
        modulesProps.forEach(function (moduleProp) {
          if (!_this2.props[moduleProp]) {
            return;
          }
          modulesSubscriptions[moduleProp] = [];
          var translations = modulesState[modulesProps];
          var module = _this2.props[moduleProp];
          var wantedProps = Object.keys(modulesState[moduleProp]);
          wantedProps.forEach(function (state) {
            var sub = module.$get(state).subscribe(function (val) {
              var _this2$setState;
              return _this2.setState((_this2$setState = {}, _this2$setState[translations[state]] = val, _this2$setState));
            });
            modulesSubscriptions[moduleProp].push(sub);
          });
        });
      };
      _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
        var _this3 = this;
        modulesProps.forEach(function (moduleProp) {
          if (!Object.prototype.hasOwnProperty.call(nextProps, moduleProp) || nextProps[moduleProp] !== _this3.props[moduleProp]) {
            if (modulesSubscriptions[moduleProp]) {
              modulesSubscriptions[moduleProp].forEach(function (sub) {
                return sub.unsubscribe();
              });
              delete modulesSubscriptions[moduleProp];
            }
          }
          if (Object.prototype.hasOwnProperty.call(nextProps, moduleProp) && !modulesSubscriptions[moduleProp]) {
            modulesSubscriptions[moduleProp] = [];
            var translations = modulesState[modulesProps];
            var module = nextProps[moduleProp];
            var wantedProps = Object.keys(modulesState[moduleProp]);
            wantedProps.forEach(function (state) {
              var sub = module.$get(state).subscribe(function (val) {
                var _this3$setState;
                return _this3.setState((_this3$setState = {}, _this3$setState[translations[state]] = val, _this3$setState));
              });
              modulesSubscriptions[moduleProp].push(sub);
            });
          }
        });
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        Object.keys(modulesSubscriptions).forEach(function (moduleProp) {
          modulesSubscriptions[moduleProp].forEach(function (sub) {
            return sub.unsubscribe();
          });
          delete modulesSubscriptions[moduleProp];
        });
      };
      _proto.render = function render() {
        var newProps = Object.assign({}, this.props, this.state);
        return /*#__PURE__*/react.createElement(Comp, newProps);
      };
      return _class;
    }(react.Component);
  };
};
/* harmony default export */ const lib_withModulesState = (withModulesState);
;// CONCATENATED MODULE: ./demo/full/scripts/components/Button.jsx


/**
 * Generic Button React component.
 * @param {Object} props
 * @returns {Object}
 */
function Button(_ref) {
  var ariaLabel = _ref.ariaLabel,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    onClick = _ref.onClick,
    value = _ref.value,
    disabled = _ref.disabled,
    title = _ref.title;
  if (disabled) {
    return /*#__PURE__*/react.createElement("button", {
      "aria-label": ariaLabel,
      disabled: true,
      className: className + " disabled",
      title: title
    }, value);
  }
  return /*#__PURE__*/react.createElement("button", {
    "aria-label": ariaLabel,
    className: className,
    onClick: onClick,
    title: title
  }, value);
}
/* harmony default export */ const components_Button = (/*#__PURE__*/react.memo(Button));
;// CONCATENATED MODULE: ./demo/full/scripts/lib/time.js
var toSeconds = function toSeconds(timeInSeconds) {
  var toInt = parseInt(timeInSeconds);
  if (!toInt) {
    // TODO differentiate NaN from 0?
    return "00";
  }
  return String(toInt).padStart(2, "0");
};
var toMinutes = function toMinutes(timeInSeconds) {
  var toInt = parseInt(timeInSeconds);
  if (!toInt) {
    // TODO differentiate NaN from 0?
    return "00:00";
  }
  if (toInt < 60) {
    var str = String(toInt);
    return "00:" + str.padStart(2, "0");
  }
  var numberOfMinutes = parseInt(toInt / 60);
  var numberOfSecondsRemaining = toInt % 60;
  return String(numberOfMinutes).padStart(2, "0") + ":" + String(numberOfSecondsRemaining).padStart(2, "0");
};
var toHours = function toHours(timeInSeconds) {
  var toInt = parseInt(timeInSeconds);
  if (!toInt) {
    // TODO differentiate NaN from 0?
    return "00:00";
  }
  if (toInt < 60) {
    var str = String(toInt);
    return "00:" + str.padStart(2, "0");
  }
  var numberOfMinutes = parseInt(toInt / 60);
  var numberOfSecondsRemaining = toInt % 60;
  if (numberOfMinutes < 60) {
    return String(numberOfMinutes).padStart(2, "0") + ":" + String(numberOfSecondsRemaining).padStart(2, "0");
  }
  var numberOfHours = parseInt(numberOfMinutes / 60);
  var numberOfMinutesRemaining = numberOfMinutes % 60;
  return String(numberOfHours).padStart(2, "0") + ":" + String(numberOfMinutesRemaining).padStart(2, "0") + ":" + String(numberOfSecondsRemaining).padStart(2, "0");
};

;// CONCATENATED MODULE: ./demo/full/scripts/components/PositionInfos.jsx



/**
 * Text with the following structure:
 *   CURRENT_POSITION / DURATION
 * @param {Object} props
 * @returns {Object}
 */
function PositionInfos(_ref) {
  var _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? 0 : _ref$position,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 0 : _ref$duration;
  var convertTime = duration >= 60 * 60 ? toHours : toMinutes;
  return /*#__PURE__*/react.createElement("div", {
    className: "position-infos " + className
  }, /*#__PURE__*/react.createElement("span", {
    className: "current-position"
  }, convertTime(position)), /*#__PURE__*/react.createElement("span", {
    className: "separator"
  }, " / "), /*#__PURE__*/react.createElement("span", {
    className: "duration"
  }, convertTime(duration)));
}
/* harmony default export */ const components_PositionInfos = (/*#__PURE__*/react.memo(PositionInfos));
;// CONCATENATED MODULE: ./demo/full/scripts/components/LivePosition.jsx


/**
 * For now, only written "Live" (we will see for timeshifting and such)
 * @param {Object} props
 * @returns {Object}
 */
function LivePosition(_ref) {
  var _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className;
  return /*#__PURE__*/react.createElement("div", {
    className: "position-infos live " + className
  }, "Live");
}
/* harmony default export */ const components_LivePosition = (/*#__PURE__*/react.memo(LivePosition));
;// CONCATENATED MODULE: ./demo/full/scripts/components/StickToLiveEdgeButton.jsx

function StickToLiveEdgeButton(_ref) {
  var isStickingToTheLiveEdge = _ref.isStickingToTheLiveEdge,
    changeStickToLiveEdge = _ref.changeStickToLiveEdge;
  return /*#__PURE__*/react.createElement("button", {
    className: "running" + (isStickingToTheLiveEdge ? " clicked" : ""),
    "aria-label": "Stay close to the live edge",
    title: "Stick to the live edge",
    onClick: function onClick() {
      return changeStickToLiveEdge(!isStickingToTheLiveEdge);
    }
  }, /*#__PURE__*/react.createElement("svg", {
    version: "1.1",
    viewBox: "0 0 21.803 21.803"
  }, /*#__PURE__*/react.createElement("path", {
    d: "m18.374 16.605l-4.076-2.101-1.107-1.773-0.757-4.503 2.219 1.092-0.375 1.494c-0.13 0.519 0.185 1.041 0.699 1.17 0.077 0.021 0.157 0.03 0.235 0.03 0.432-2e-3 0.823-0.293 0.935-0.729l0.565-2.25c0.11-0.439-0.103-0.897-0.511-1.101 0 0-5.303-2.603-5.328-2.612-0.406-0.188-0.868-0.267-1.342-0.198-0.625 0.088-1.158 0.407-1.528 0.86-0.029 0.027-2.565 3.15-2.565 3.15l-1.95 0.525c-0.514 0.141-0.818 0.668-0.679 1.184 0.116 0.43 0.505 0.713 0.93 0.713 0.083 0 0.168-0.011 0.252-0.033l2.252-0.606c0.196-0.055 0.37-0.167 0.498-0.324l1.009-1.247 0.725 4.026-1.27 1.01c-0.379 0.304-0.541 0.802-0.411 1.269l1.469 5.271c0.148 0.532 0.633 0.881 1.16 0.881 0.107 0 0.216-0.015 0.324-0.045 0.641-0.178 1.016-0.842 0.837-1.482l-1.254-4.502 1.948-1.498 1.151 1.791c0.115 0.186 0.277 0.334 0.471 0.436l4.371 2.25c0.177 0.092 0.363 0.135 0.552 0.135 0.438 0 0.856-0.238 1.072-0.653 0.303-0.6 0.07-1.325-0.521-1.63z"
  }), /*#__PURE__*/react.createElement("circle", {
    cx: "8.602",
    cy: "2.568",
    r: "2.568"
  })));
}
/* harmony default export */ const components_StickToLiveEdgeButton = (/*#__PURE__*/react.memo(StickToLiveEdgeButton));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/PlayPauseButton.jsx




/**
 * Play/Pause button.
 * Triggers the right callback on click.
 *
 * Needs 2 props:
 *   - {Object} player: the player module.
 *   - {string} [className]: An optional className to add to the
 *     button
 *
 * @param {Object} props
 * @returns {Object}
 */
function PlayPauseButton(_ref) {
  var cannotLoadMetadata = _ref.cannotLoadMetadata,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    player = _ref.player,
    isPaused = _ref.isPaused,
    isContentLoaded = _ref.isContentLoaded,
    hasEnded = _ref.hasEnded;
  var disabled = !isContentLoaded && !cannotLoadMetadata;
  var displayPause = !isPaused && isContentLoaded && !hasEnded;
  var completeClassName = "play-pause-button " + className + (disabled ? " disabled" : "");
  var play = function play() {
    return player.dispatch("PLAY");
  };
  var pause = function pause() {
    player.dispatch("DISABLE_LIVE_CATCH_UP");
    player.dispatch("PAUSE");
  };
  return /*#__PURE__*/react.createElement(components_Button, {
    ariaLabel: "Pause/Resume the content",
    className: completeClassName,
    disabled: disabled,
    onClick: displayPause ? pause : play,
    value: String.fromCharCode(displayPause ? 0xf04c : 0xf04b)
  });
}
/* harmony default export */ const controllers_PlayPauseButton = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    cannotLoadMetadata: "cannotLoadMetadata",
    isPaused: "isPaused",
    isContentLoaded: "isContentLoaded",
    hasEnded: "hasEnded",
    stopAtEnd: "stopAtEnd"
  }
})(PlayPauseButton)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/FullScreenButton.jsx




/**
 * Add the given callback as an event listener of any "fullscreenchange" event.
 * @param {Function} listener
 */
function addFullscreenListener(listener) {
  document.addEventListener("webkitfullscreenchange", listener, false);
  document.addEventListener("mozfullscreenchange", listener, false);
  document.addEventListener("fullscreenchange", listener, false);
  document.addEventListener("MSFullscreenChange", listener, false);
}

/**
 * Remove the given callback from event listeners of any "fullscreenchange"
 * event.
 * @param {Function} listener
 */
function removeFullscreenListener(listener) {
  document.removeEventListener("webkitfullscreenchange", listener, false);
  document.removeEventListener("mozfullscreenchange", listener, false);
  document.removeEventListener("fullscreenchange", listener, false);
  document.removeEventListener("MSFullscreenChange", listener, false);
}

/**
 * Returns true if an element in the document is being displayed in fullscreen
 * mode;
 * otherwise it's false.
 * @returns {boolean}
 */
function FullScreenButton_isFullscreen() {
  return !!(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement);
}

/**
 * Request fullScreen action on a given element.
 * @paras {HTMLElement} elt
 * rs-detect)
 */
function FullScreenButton_requestFullscreen(elt) {
  if (!FullScreenButton_isFullscreen()) {
    if (elt.requestFullscreen) {
      elt.requestFullscreen();
    } else if (elt.msRequestFullscreen) {
      elt.msRequestFullscreen();
    } else if (elt.mozRequestFullScreen) {
      elt.mozRequestFullScreen();
    } else if (elt.webkitRequestFullscreen) {
      // TODO Open issue in TypeScript?
      elt.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  }
}

/**
 * Exit fullscreen if an element is currently in fullscreen.
 * TODO this exit fullscreen mode even if any element in the document is in
 * fullscreen, is it really what we want?
 */
function FullScreenButton_exitFullscreen() {
  if (FullScreenButton_isFullscreen()) {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }
}

/**
 * Simple fullscreen button.
 * Triggers the right callback on click.
 *
 * Needs the following props:
 *   - {Object} player: the player module.
 *   - {HTMLElement} videoElement: the element in fullscreen mode
 *   - {string} [className]: An optional className to add to the
 *     button
 *
 * @param {Object} props
 * @returns {Object}
 */
function FullscreenButton(_ref) {
  var videoElement = _ref.videoElement,
    hasCurrentContent = _ref.hasCurrentContent,
    className = _ref.className;
  var isInitiallyFullscreen = (0,react.useMemo)(function () {
    return FullScreenButton_isFullscreen();
  }, []);
  var _useState = (0,react.useState)(isInitiallyFullscreen),
    isCurrentlyFullScreen = _useState[0],
    setFullscreenValue = _useState[1];
  (0,react.useEffect)(function () {
    var fullscreenListener = function fullscreenListener() {
      var isInFullscreen = FullScreenButton_isFullscreen();
      if (!isInFullscreen) {
        videoElement.classList.remove("fullscreen");
      }
      setFullscreenValue(isInFullscreen);
    };
    addFullscreenListener(fullscreenListener);
    return function () {
      removeFullscreenListener(fullscreenListener);
    };
  }, [videoElement]);
  var setFullscreen = (0,react.useCallback)(function () {
    FullScreenButton_requestFullscreen(videoElement);
    videoElement.classList.add("fullscreen");
  }, [isCurrentlyFullScreen, videoElement]);
  return /*#__PURE__*/react.createElement(components_Button, {
    ariaLabel: "Go/Quit fullscreen",
    className: "fullscreen-button " + className,
    onClick: isCurrentlyFullScreen ? FullScreenButton_exitFullscreen : setFullscreen,
    disabled: !hasCurrentContent,
    value: String.fromCharCode(isCurrentlyFullScreen ? 0xf066 : 0xf065)
  });
}
/* harmony default export */ const FullScreenButton = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    hasCurrentContent: "hasCurrentContent"
  }
})(FullscreenButton)));
;// CONCATENATED MODULE: ./demo/full/scripts/components/ImageThumbnail.jsx


/**
 * React Component which Displays an Image thumbnail centered and on top of the
 * position wanted.
 *
 * Takes 2 parameters:
 *   - {Blob|string} Image - The image blob to display
 *   - {Number} xPosition - The position on the horizontal axis where you
 *     want the image to be centered to.
 *
 * @function ImageThumbnail
 * @param {Object}
 */
function ImageThumbnail(_ref) {
  var image = _ref.image,
    xPosition = _ref.xPosition;
  var wrapperEl = (0,react.useRef)(null);
  var _useState = (0,react.useState)(""),
    imageUrl = _useState[0],
    setImageUrl = _useState[1];
  (0,react.useEffect)(function () {
    var blob = new Blob([image], {
      type: "image/jpeg"
    });
    var url = URL.createObjectURL(blob);
    setImageUrl(url);
    return function () {
      URL.revokeObjectURL(url);
    };
  }, [image]);
  (0,react.useEffect)(function () {
    if (isNaN(+xPosition) || wrapperEl.current === null) {
      return null;
    }
    wrapperEl.current.style.transform = "translate(" + xPosition + "px, -136px)";
  }, [xPosition]);
  return /*#__PURE__*/react.createElement("div", {
    className: "thumbnail-wrapper",
    ref: wrapperEl
  }, /*#__PURE__*/react.createElement("img", {
    className: "thumbnail",
    src: imageUrl
  }));
}
/* harmony default export */ const components_ImageThumbnail = (/*#__PURE__*/react.memo(ImageThumbnail));
;// CONCATENATED MODULE: ./demo/full/scripts/components/ProgressBar.jsx


/**
 * Horizontal (left-to-right) progress bar component which:
 *
 *   - represents the current position and the buffer relatively to the
 *     minimum / maximum position.
 *
 *   - triggers a seek function with the clicked position on click
 *
 *   - call a onMouseMove function with the hovered position and the event when
 *     the mouse hover the component
 *
 *   - call a onMouseOut when it stops hovering it
 *
 * @param {Object} props
 * @returns {Object}
 */
function ProgressBar(_ref) {
  var seek = _ref.seek,
    position = _ref.position,
    bufferGap = _ref.bufferGap,
    minimumPosition = _ref.minimumPosition,
    maximumPosition = _ref.maximumPosition,
    onMouseOut = _ref.onMouseOut,
    _onMouseMove = _ref.onMouseMove;
  var element;
  var duration = Math.max(maximumPosition - minimumPosition, 0);
  var getMousePosition = function getMousePosition(event) {
    var rect = element.getBoundingClientRect();
    var point0 = rect.left;
    var clickPosPx = Math.max(event.clientX - point0, 0);
    var endPointPx = Math.max(rect.right - point0, 0);
    if (!endPointPx) {
      return 0;
    }
    return clickPosPx / endPointPx * duration + minimumPosition;
  };

  // weird rx-player design decision. Should be fixed (or done in the
  // module)
  var bufferGapHotFix = isFinite(bufferGap) ? bufferGap : 0;
  var relativePosition = Math.max(position - minimumPosition, 0);
  var percentBuffered = Math.min((bufferGapHotFix + relativePosition) / duration, 1) * 100;
  var percentPosition = Math.min(relativePosition / duration, 1) * 100;
  return /*#__PURE__*/react.createElement("div", {
    className: "progress-bar-wrapper",
    ref: function ref(el) {
      return element = el;
    },
    onClick: function onClick(event) {
      return seek(getMousePosition(event));
    },
    onMouseOut: onMouseOut,
    onMouseMove: function onMouseMove(evt) {
      return _onMouseMove(getMousePosition(evt), evt);
    }
  }, /*#__PURE__*/react.createElement("div", {
    className: "progress-bar-current",
    style: {
      "width": percentPosition + "%"
    }
  }), /*#__PURE__*/react.createElement("div", {
    className: "progress-bar-buffered",
    style: {
      "width": percentBuffered + "%"
    }
  }));
}
/* harmony default export */ const components_ProgressBar = (/*#__PURE__*/react.memo(ProgressBar));
;// CONCATENATED MODULE: ./demo/full/scripts/components/ToolTip.jsx


/**
 * Props:
 *   - className {string}
 *   - timeText {number}
 *   - xPosition {number}
 * @class ToolTip
 */
function ToolTip(_ref) {
  var className = _ref.className,
    offset = _ref.offset,
    text = _ref.text,
    xPosition = _ref.xPosition;
  var wrapperEl = (0,react.useRef)(null);
  (0,react.useEffect)(function () {
    if (isNaN(+xPosition) || !wrapperEl.current) {
      return null;
    }
    var rect = wrapperEl.current.getBoundingClientRect();
    var width = rect.width;
    var height = rect.height;
    var toSlideY = -height - 11;
    var toSlideX = xPosition - offset - width / 2;
    wrapperEl.current.style.transform = "translate(" + toSlideX + "px, " + toSlideY + "px)";
  });
  return /*#__PURE__*/react.createElement("div", {
    className: "tooltip-wrapper",
    ref: wrapperEl
  }, /*#__PURE__*/react.createElement("pre", {
    className: "tooltip " + className
  }, text));
}
/* harmony default export */ const components_ToolTip = (/*#__PURE__*/react.memo(ToolTip));
;// CONCATENATED MODULE: ./demo/full/scripts/components/VideoThumbnail.jsx
function VideoThumbnail_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; VideoThumbnail_setPrototypeOf(subClass, superClass); }
function VideoThumbnail_setPrototypeOf(o, p) { VideoThumbnail_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return VideoThumbnail_setPrototypeOf(o, p); }



/**
 * React Component which Displays a video thumbnail centered and on top
 * of the position wanted.
 *
 * Takes 2 props:
 *   - {Object} Adaptation - The adaptation that carries the thumbnail track
 *   - {number} Image time - The media time of the image to display
 *
 * @class VideoThumbnailTip
 */
var VideoThumbnail = /*#__PURE__*/function (_React$Component) {
  VideoThumbnail_inheritsLoose(VideoThumbnail, _React$Component);
  function VideoThumbnail() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this._isMounted = true;

    /**
     * Timeout before loading a thumbnail, to avoid triggering to many requests
     * in a row.
     */
    _this._loadThumbnailTimeout = null;

    /**
     * Timeout before displaying the spinner, for when loading a thumbnail takes
     * too much time.
     */
    _this._spinnerTimeout = null;
    _this.positionIsCorrected = false;
    _this.state = {
      style: {},
      divSpinnerStyle: {
        "backgroundColor": "gray",
        "position": "absolute",
        "width": "100%",
        "height": "100%",
        "opacity": "50%",
        "display": "flex",
        "justifyContent": "center",
        "alignItems": "center"
      },
      spinnerStyle: {
        "width": "50%",
        "margin": "auto"
      },
      displaySpinner: true
    };
    _this.lastSetTime = undefined;
    if (_this.props.videoThumbnailsData === null) {
      _this.props.player.dispatch("ATTACH_VIDEO_THUMBNAIL_LOADER");
    }
    _this.element = /*#__PURE__*/react.createRef();
    return _this;
  }
  var _proto = VideoThumbnail.prototype;
  _proto.correctImagePosition = function correctImagePosition() {
    if (this.positionIsCorrected) {
      return;
    }
    var xPosition = this.props.xPosition;
    if (isNaN(+xPosition) || this.element.current === null) {
      return null;
    }
    var style = {
      transform: "translate(" + xPosition + "px, -136px)"
    };
    this.positionIsCorrected = true;
    this.setState({
      style: style
    });
  }

  /**
   * Display a spinner after some delay if `stopSpinnerTimeout` hasn't been
   * called since.
   * This function allows to schedule a spinner if the request to display a
   * thumbnail takes too much time.
   */;
  _proto.startSpinnerTimeoutIfNotAlreadyStarted = function startSpinnerTimeoutIfNotAlreadyStarted() {
    var _this2 = this;
    if (this._spinnerTimeout !== null) {
      return;
    }

    // Wait a little before displaying spinner, to
    // be sure loading takes time
    this._spinnerTimeout = setTimeout(function () {
      _this2._spinnerTimeout = null;
      if (_this2.state.displaySpinner !== true) {
        _this2.setState({
          displaySpinner: true
        });
      }
    }, 150);
  }

  /**
   * Hide the spinner if one is active and stop the last started spinner
   * timeout.
   * Allow to avoid showing a spinner when the thumbnail we were waiting for
   * was succesfully loaded.
   */;
  _proto.hideSpinner = function hideSpinner() {
    if (this._spinnerTimeout !== null) {
      clearTimeout(this._spinnerTimeout);
      this._spinnerTimeout = null;
    }
    if (this.state.displaySpinner !== false) {
      this.setState({
        displaySpinner: false
      });
    }
  }

  // TODO think about what to do about that one now
  // (This function was there as is a very long time ago and I did not keep up
  // to date with React to know what the new idiomatic way is).
  // Nothing unsafe about this though
  ;
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps() {
    this.positionIsCorrected = false;
  };
  _proto.componentDidMount = function componentDidMount() {
    this._placeVideoThumbnail();
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    this._placeVideoThumbnail();
  };
  _proto._placeVideoThumbnail = function _placeVideoThumbnail() {
    if (this.props.videoThumbnailsData !== null && this.element.current !== null) {
      this.element.current.appendChild(this.props.videoThumbnailsData.videoElement);
    }
    this.correctImagePosition();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.hideSpinner();
    this._isMounted = false;
  };
  _proto.render = function render() {
    var _this3 = this;
    var _this$state = this.state,
      style = _this$state.style,
      divSpinnerStyle = _this$state.divSpinnerStyle,
      spinnerStyle = _this$state.spinnerStyle;
    var thumbnailsData = this.props.videoThumbnailsData;
    var time = this.props.time;
    var roundedTime = Math.round(time);
    if (thumbnailsData !== null && this.lastSetTime !== roundedTime) {
      this.startSpinnerTimeoutIfNotAlreadyStarted();
      if (this._loadThumbnailTimeout !== null) {
        clearTimeout(this._loadThumbnailTimeout);
      }

      // load thumbnail after a 40ms timer to avoid doing too many requests
      // when the user quickly moves its pointer or whatever is calling this
      this._loadThumbnailTimeout = setTimeout(function () {
        _this3._loadThumbnailTimeout = null;
        thumbnailsData.videoThumbnailLoader.setTime(roundedTime)["catch"](function (err) {
          if (typeof err === "object" && err !== null && err.code === "ABORTED") {
            return;
          } else {
            /* eslint-disable-next-line no-console */
            console.error("Error while loading thumbnails:", err);
          }
        })["finally"](function () {
          if (time !== _this3.props.time || !_this3._isMounted) {
            return;
          }
          _this3.hideSpinner();
        });
      }, 40);
    }
    return /*#__PURE__*/react.createElement("div", {
      className: "thumbnail-wrapper",
      style: style,
      ref: this.element
    }, this.state.displaySpinner ? /*#__PURE__*/react.createElement("div", {
      style: divSpinnerStyle
    }, /*#__PURE__*/react.createElement("img", {
      src: "./assets/spinner.gif",
      style: spinnerStyle
    })) : null);
  };
  return VideoThumbnail;
}(react.Component);
/* harmony default export */ const components_VideoThumbnail = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    videoThumbnailsData: "videoThumbnailsData"
  }
})(VideoThumbnail)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/ProgressBar.jsx
function ProgressBar_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; ProgressBar_setPrototypeOf(subClass, superClass); }
function ProgressBar_setPrototypeOf(o, p) { ProgressBar_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ProgressBar_setPrototypeOf(o, p); }






var Progressbar = /*#__PURE__*/function (_React$Component) {
  ProgressBar_inheritsLoose(Progressbar, _React$Component);
  function Progressbar() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.thumbnailsElement = [];
    _this.subscription = null;
    _this.state = {
      timeIndicatorVisible: false,
      timeIndicatorPosition: 0,
      timeIndicatorText: "",
      thumbnailIsVisible: false,
      tipPosition: 0,
      image: null,
      imageTime: null
    };
    return _this;
  }
  var _proto = Progressbar.prototype;
  _proto.showTimeIndicator = function showTimeIndicator(wallClockTime, clientX, isLive) {
    var hours;
    var minutes;
    var seconds;
    if (isLive) {
      var date = new Date(wallClockTime * 1000);
      hours = date.getHours();
      minutes = date.getMinutes();
      seconds = date.getSeconds();
    } else {
      hours = Math.floor(wallClockTime / 3600);
      minutes = Math.floor((wallClockTime - hours * 3600) / 60);
      seconds = Math.floor(wallClockTime - (minutes * 60 + hours * 3600));
    }
    var currentReadableTime = hours.toString().padStart(2, "0") + ":" + minutes.toString().padStart(2, "0") + ":" + seconds.toString().padStart(2, "0");
    this.setState({
      timeIndicatorVisible: true,
      timeIndicatorPosition: clientX,
      timeIndicatorText: currentReadableTime
    });
  };
  _proto.hideTimeIndicator = function hideTimeIndicator() {
    this.setState({
      timeIndicatorVisible: false,
      timeIndicatorPosition: 0,
      timeIndicatorText: ""
    });
  };
  _proto.showVideoTumbnail = function showVideoTumbnail(ts, clientX) {
    var timestampToMs = ts;
    this.setState({
      thumbnailIsVisible: true,
      tipPosition: clientX,
      imageTime: timestampToMs
    });
  };
  _proto.showImageThumbnail = function showImageThumbnail(ts, clientX) {
    var images = this.props.images;
    if (!images || !images.length) {
      return;
    }
    var timestampToMs = ts * 1000;
    var imageIndex = images.findIndex(function (i) {
      return i && i.ts > timestampToMs;
    });
    var image = imageIndex === -1 ? images[images.length - 1] : images[imageIndex - 1];
    if (!image) {
      return;
    }
    this.setState({
      thumbnailIsVisible: true,
      tipPosition: clientX,
      image: image.data
    });
  };
  _proto.showThumbnail = function showThumbnail(ts, clientX, enableVideoThumbnails) {
    if (enableVideoThumbnails) {
      this.showVideoTumbnail(ts, clientX);
    } else {
      this.showImageThumbnail(ts, clientX);
    }
  };
  _proto.hideTumbnail = function hideTumbnail() {
    this.setState({
      thumbnailIsVisible: false,
      tipPosition: 0,
      imageTime: null,
      image: null
    });
  };
  _proto.render = function render() {
    var _this2 = this;
    var _this$state = this.state,
      thumbnailIsVisible = _this$state.thumbnailIsVisible,
      tipPosition = _this$state.tipPosition,
      image = _this$state.image,
      timeIndicatorVisible = _this$state.timeIndicatorVisible,
      timeIndicatorPosition = _this$state.timeIndicatorPosition,
      timeIndicatorText = _this$state.timeIndicatorText,
      imageTime = _this$state.imageTime;
    var _this$props = this.props,
      currentTime = _this$props.currentTime,
      minimumPosition = _this$props.minimumPosition,
      maximumPosition = _this$props.maximumPosition,
      isContentLoaded = _this$props.isContentLoaded,
      isLive = _this$props.isLive,
      bufferGap = _this$props.bufferGap,
      player = _this$props.player,
      enableVideoThumbnails = _this$props.enableVideoThumbnails;
    var seek = function seek(position) {
      return player.dispatch("SEEK", position);
    };
    var hideToolTips = function hideToolTips() {
      _this2.hideTimeIndicator();
      _this2.hideTumbnail();
    };
    var onMouseMove = function onMouseMove(position, event) {
      var wallClockDiff = player.get("wallClockDiff");
      var wallClockTime = position + wallClockDiff;
      _this2.showTimeIndicator(wallClockTime, event.clientX, isLive);
      _this2.showThumbnail(position, event.clientX, enableVideoThumbnails);
    };
    var toolTipOffset = this.wrapperElement ? this.wrapperElement.getBoundingClientRect().left : 0;
    if (!isContentLoaded) {
      return /*#__PURE__*/react.createElement("div", {
        className: "progress-bar-parent",
        ref: function ref(el) {
          return _this2.wrapperElement = el;
        }
      }, /*#__PURE__*/react.createElement("div", {
        className: "progress-bar-wrapper"
      }));
    }
    var xThumbnailPosition = tipPosition - toolTipOffset;
    var thumbnailElement = null;
    if (thumbnailIsVisible) {
      thumbnailElement = enableVideoThumbnails ? /*#__PURE__*/react.createElement(components_VideoThumbnail, {
        xPosition: xThumbnailPosition,
        time: imageTime,
        player: player
      }) : /*#__PURE__*/react.createElement(components_ImageThumbnail, {
        image: image,
        xPosition: xThumbnailPosition
      });
    }
    return /*#__PURE__*/react.createElement("div", {
      className: "progress-bar-parent",
      ref: function ref(el) {
        return _this2.wrapperElement = el;
      }
    }, timeIndicatorVisible ? /*#__PURE__*/react.createElement(components_ToolTip, {
      className: "progress-tip",
      text: timeIndicatorText,
      xPosition: timeIndicatorPosition,
      offset: toolTipOffset
    }) : null, thumbnailElement, /*#__PURE__*/react.createElement(components_ProgressBar, {
      seek: seek,
      onMouseOut: hideToolTips,
      onMouseMove: onMouseMove,
      position: currentTime,
      minimumPosition: minimumPosition,
      maximumPosition: maximumPosition,
      bufferGap: bufferGap
    }));
  };
  return Progressbar;
}(react.Component);
/* harmony default export */ const controllers_ProgressBar = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    bufferGap: "bufferGap",
    currentTime: "currentTime",
    images: "images",
    isContentLoaded: "isContentLoaded",
    isLive: "isLive",
    minimumPosition: "minimumPosition",
    maximumPosition: "maximumPosition"
  }
})(Progressbar)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/VolumeButton.jsx




/**
 * Simple volume button.
 * Triggers the right callback on click.
 *
 * Needs 2 props:
 *   - {Object} player: the player module.
 *   - {string} [className]: An optional className to add to the
 *     button
 *
 * @param {Object} props
 * @returns {Object}
 */
function VolumeButton(_ref) {
  var _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    player = _ref.player,
    volume = _ref.volume;
  var volumeLevelClass;
  var charCode;
  if (volume === 0) {
    volumeLevelClass = "muted";
    charCode = 0xf026;
  } else if (volume <= 0.5) {
    volumeLevelClass = "low";
    charCode = 0xf027;
  } else {
    volumeLevelClass = "high";
    charCode = 0xf028;
  }
  return /*#__PURE__*/react.createElement(components_Button, {
    ariaLabel: "Mute/Unmute audio",
    className: "volume-button " + className + " " + volumeLevelClass,
    onClick: volume === 0 ? function () {
      return player.dispatch("UNMUTE");
    } : function () {
      return player.dispatch("MUTE");
    },
    value: String.fromCharCode(charCode)
  });
}
/* harmony default export */ const controllers_VolumeButton = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    volume: "volume"
  }
})(VolumeButton)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/VolumeBar.jsx



/**
 * Horizontal (left-to-right) volume indication component which:
 *
 *   - represents the current volume relatively to the max and min.
 *
 *   - triggers a setVolume function with the clicked volume percentage on click
 * @param {Object} props
 * @returns {Object}
 */
function VolumeBar(_ref) {
  var player = _ref.player,
    volume = _ref.volume;
  var element;
  var getMouseVolume = function getMouseVolume(event) {
    var rect = element.getBoundingClientRect();
    var point0 = rect.left;
    var clickPosPx = Math.max(event.clientX - point0, 0);
    var endPointPx = Math.max(rect.right - point0, 0);
    if (!endPointPx) {
      return 0;
    }
    return Math.min(clickPosPx / endPointPx, 1);
  };
  return /*#__PURE__*/react.createElement("div", {
    className: "volume-bar-wrapper",
    ref: function ref(el) {
      return element = el;
    },
    onClick: function onClick(evt) {
      return player.dispatch("SET_VOLUME", getMouseVolume(evt));
    }
  }, /*#__PURE__*/react.createElement("div", {
    className: "volume-bar-current",
    style: {
      "width": volume * 100 + "%"
    }
  }));
}
/* harmony default export */ const controllers_VolumeBar = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    volume: "volume"
  }
})(VolumeBar)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/ControlBar.jsx











function ControlBar(_ref) {
  var currentTime = _ref.currentTime,
    duration = _ref.duration,
    isCatchUpEnabled = _ref.isCatchUpEnabled,
    isCatchingUp = _ref.isCatchingUp,
    isContentLoaded = _ref.isContentLoaded,
    isLive = _ref.isLive,
    isPaused = _ref.isPaused,
    isStopped = _ref.isStopped,
    liveGap = _ref.liveGap,
    lowLatencyMode = _ref.lowLatencyMode,
    enableVideoThumbnails = _ref.enableVideoThumbnails,
    maximumPosition = _ref.maximumPosition,
    playbackRate = _ref.playbackRate,
    player = _ref.player,
    stopVideo = _ref.stopVideo,
    toggleSettings = _ref.toggleSettings,
    videoElement = _ref.videoElement;
  var _changeStickToLiveEdge = (0,react.useCallback)(function (shouldStick) {
    if (shouldStick) {
      player.dispatch("ENABLE_LIVE_CATCH_UP");
    } else {
      player.dispatch("DISABLE_LIVE_CATCH_UP");
    }
  }, [player]);
  var isCloseToLive = undefined;
  if (isLive && lowLatencyMode != null && liveGap != null) {
    isCloseToLive = lowLatencyMode ? liveGap < 7 : liveGap < 18;
  }
  var positionElement = (0,react.useMemo)(function () {
    if (!isContentLoaded) {
      return null;
    } else if (isLive) {
      return /*#__PURE__*/react.createElement(components_LivePosition, null);
    } else {
      return /*#__PURE__*/react.createElement(components_PositionInfos, {
        position: currentTime,
        duration: duration
      });
    }
  }, [isContentLoaded, isLive, currentTime, duration]);
  var isAtLiveEdge = isLive && isCloseToLive && !isCatchingUp;
  return /*#__PURE__*/react.createElement("div", {
    className: "controls-bar-container"
  }, /*#__PURE__*/react.createElement(controllers_ProgressBar, {
    player: player,
    enableVideoThumbnails: enableVideoThumbnails,
    onSeek: function onSeek() {
      return _changeStickToLiveEdge(false);
    }
  }), /*#__PURE__*/react.createElement("div", {
    className: "controls-bar"
  }, /*#__PURE__*/react.createElement(controllers_PlayPauseButton, {
    className: "control-button",
    player: player
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: "control-button",
    ariaLabel: "Stop playback",
    onClick: stopVideo,
    value: String.fromCharCode(0xf04d),
    disabled: isStopped
  }), isContentLoaded && isLive && lowLatencyMode ? /*#__PURE__*/react.createElement(components_StickToLiveEdgeButton, {
    isStickingToTheLiveEdge: isCatchUpEnabled,
    changeStickToLiveEdge: function changeStickToLiveEdge() {
      return _changeStickToLiveEdge(!isCatchUpEnabled);
    }
  }) : null, positionElement, isLive && isContentLoaded ? /*#__PURE__*/react.createElement(components_Button, {
    ariaLabel: isAtLiveEdge ? undefined : "Go back to live",
    className: "dot" + (isAtLiveEdge ? " live" : ""),
    onClick: function onClick() {
      if (!isAtLiveEdge) {
        player.dispatch("SEEK", maximumPosition - (lowLatencyMode ? 4 : 10));
      }
    }
  }) : null, /*#__PURE__*/react.createElement("div", {
    className: "controls-right-side"
  }, !isPaused && isCatchingUp && playbackRate > 1 ? /*#__PURE__*/react.createElement("div", {
    className: "catch-up"
  }, "Catch-up playback rate: " + playbackRate) : null, /*#__PURE__*/react.createElement(components_Button, {
    ariaLabel: "Display/Hide controls",
    disabled: !isContentLoaded,
    className: "control-button",
    onClick: toggleSettings,
    value: String.fromCharCode(0xf013)
  }), /*#__PURE__*/react.createElement("div", {
    className: "volume"
  }, /*#__PURE__*/react.createElement(controllers_VolumeButton, {
    className: "control-button",
    player: player
  }), /*#__PURE__*/react.createElement(controllers_VolumeBar, {
    className: "control-button",
    player: player
  })), /*#__PURE__*/react.createElement(FullScreenButton, {
    className: "control-button",
    player: player,
    videoElement: videoElement
  }))));
}
/* harmony default export */ const controllers_ControlBar = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    currentTime: "currentTime",
    duration: "duration",
    isCatchUpEnabled: "isCatchUpEnabled",
    isCatchingUp: "isCatchingUp",
    isContentLoaded: "isContentLoaded",
    isLive: "isLive",
    isPaused: "isPaused",
    isStopped: "isStopped",
    liveGap: "liveGap",
    lowLatencyMode: "lowLatencyMode",
    maximumPosition: "maximumPosition",
    playbackRate: "playbackRate"
  }
})(ControlBar)));
;// CONCATENATED MODULE: ./demo/full/scripts/lib/localStorage.js
var _window = window,
  localStorage = _window.localStorage;
var hasLocalStorage = !!localStorage;
if (!hasLocalStorage) {
  /* eslint-disable-next-line no-console */
  console.warn("`localStorage` is not available." + " You will not be able to store content information.");
}

/**
 * If the current browser does not support local storage, contents will be saved
 * locally in that array.
 * @type {Array.<Object>}
 */
var JS_LOCAL_STORAGE = [];

/**
 * Fetch contents saved locally.
 * @returns {Array.<Object>}
 */
function getLocalStorageContents() {
  if (!hasLocalStorage) {
    return JS_LOCAL_STORAGE;
  }
  var localStorageContents = [];
  var localContentItems = localStorage.getItem("rxPlayerLocalContents");
  if (localContentItems) {
    try {
      localStorageContents.push.apply(localStorageContents, JSON.parse(localContentItems));
    } catch (err) {
      /* eslint-disable-next-line */
      console.warn("Demo: Can't parse local storage content.");
    }
  }
  return localStorageContents;
}

/**
 * Save contents locally.
 * @param {Array.<Object>} localStorageContents
 */
function saveLocalStorageContents(localStorageContents) {
  if (!hasLocalStorage) {
    JS_LOCAL_STORAGE = localStorageContents;
    return;
  }
  localStorage.setItem("rxPlayerLocalContents", JSON.stringify(localStorageContents));
}

/**
 * Save a new content to local storage (or just to the state if localStorage
 * is not available.
 * @param {Object} content - content to save
 * @returns {Object} - The content created
 */
function storeContent(content) {
  var localStorageContents = getLocalStorageContents();
  var id = content.id;
  var index;
  if (content.id != null) {
    index = localStorageContents.findIndex(function (e) {
      return e.id === id;
    });
  } else {
    var lastContentID = localStorageContents.reduce(function (acc, val) {
      var contentId = val.id || 0;
      return Math.max(acc, contentId);
    }, 0);
    id = lastContentID + 1;
    index = -1;
  }
  var localContent = {
    drmInfos: content.drmInfos,
    fallbackKeyError: content.fallbackKeyError,
    fallbackLicenseRequest: content.fallbackLicenseRequest,
    id: id,
    localContent: true,
    lowLatency: content.lowLatency,
    name: content.name,
    transport: content.transport,
    url: content.url
  };
  if (index > -1) {
    localStorageContents.splice(index, 1, localContent);
  } else {
    localStorageContents.push(localContent);
  }
  saveLocalStorageContents(localStorageContents);
  return localContent;
}

/**
 * Remove saved content from localStorage if available.
 * @param {string} id - ID of the content you want to remove.
 * @returns {Boolean} - `false` if the object was not found. `true` otherwise.
 */
function removeStoredContent(id) {
  var localStorageContents = getLocalStorageContents();
  var idx = localStorageContents.findIndex(function (e) {
    return e.id === id;
  });
  if (idx < 0) {
    return false;
  }
  localStorageContents.splice(idx, 1);
  saveLocalStorageContents(localStorageContents);
  return true;
}
;// CONCATENATED MODULE: ./demo/full/scripts/lib/bytes.js
/**
 * Convert a string to an Uint8Array containing the corresponding UTF-16 code
 * units in little-endian.
 * @param {string} str
 * @returns {Uint8Array}
 */
function strToLeUtf16(str) {
  var buffer = new ArrayBuffer(str.length * 2);
  var res = new Uint8Array(buffer);
  for (var i = 0; i < res.length; i += 2) {
    var value = str.charCodeAt(i / 2);
    res[i] = value & 0xFF;
    res[i + 1] = value >> 8 & 0xFF;
  }
  return res;
}

/**
 * Construct string from the little-endian UTF-16 code units given.
 * @param {Uint8Array} bytes
 * @returns {string}
 */
function leUtf16ToStr(bytes) {
  var str = "";
  for (var i = 0; i < bytes.length; i += 2) {
    str += String.fromCharCode((bytes[i + 1] << 8) + bytes[i]);
  }
  return str;
}

/**
 * Convert a string to an Uint8Array containing the corresponding UTF-8 code
 * units.
 * @param {string} str
 * @returns {Uint8Array}
 */
function bytes_strToUtf8(str) {
  // http://stackoverflow.com/a/13691499 provides an ugly but functional solution.
  // (Note you have to dig deeper to understand it but I have more faith in
  // stackoverflow not going down in the future so I leave that link.)

  // Briefly said, `utf8Str` will contain a version of `str` where every
  // non-ASCII characters will be replaced by an escape sequence of the
  // corresponding representation of those characters in UTF-8.
  // It does sound weird and unnecessarily complicated, but it works!
  //
  // Here is actually what happens with more words. We will rely on two browser
  // APIs:
  //
  //   - `encodeURIComponent` will take a string and convert the non-ASCII
  //     characters in it into the percent-encoded version of the corresponding
  //     UTF-8 bytes
  //     Example: encodeURIComponent("é") => 0xC3 0xA9 => `"%C3%A9"`
  //
  //   - `unescape` unescapes (so far so good) a percent-encoded string. But it
  //     does it in a really simple way: percent-encoded byte by percent-encoded
  //     byte into the corresponding extended ASCII representation on 8 bits.
  //     As a result, we end-up with a string which actually contains instead of
  //     each of its original characters, the UTF-8 code units (8 bits) of
  //     those characters.
  //     Let's take our previous `"é" => "%C3%A9"` example. Here we would get:
  //     unecape("%C3%A9") => "\u00c3\u00a9" === "Ã©" (in extended ASCII)
  //
  // By iterating on the resulting string, we will then be able to generate a
  // Uint8Array containing the UTF-8 representation of that original string, by
  // just calling the charCodeAt API on it.
  var utf8Str;
  var pcStr = encodeURIComponent(str);

  // As "unescape" is a deprecated function we want to declare a fallback in the
  // case a browser decide to not implement it.
  if (typeof window.unescape === "function") {
    utf8Str = unescape(pcStr);
  } else {
    // simple unescape function
    // http://ecma-international.org/ecma-262/9.0/#sec-unescape-string
    var isHexChar = /[0-9a-fA-F]/;
    var pcStrLen = pcStr.length;
    utf8Str = "";
    for (var i = 0; i < pcStr.length; i++) {
      var wasPercentEncoded = false;
      if (pcStr[i] === "%") {
        if (i <= pcStrLen - 6 && pcStr[i + 1] === "u" && isHexChar.test(pcStr[i + 2]) && isHexChar.test(pcStr[i + 3]) && isHexChar.test(pcStr[i + 4]) && isHexChar.test(pcStr[i + 5])) {
          var charCode = parseInt(pcStr.substring(i + 1, i + 6), 16);
          utf8Str += String.fromCharCode(charCode);
          wasPercentEncoded = true;
          i += 5; // Skip the next 5 chars
        } else if (i <= pcStrLen - 3 && isHexChar.test(pcStr[i + 1]) && isHexChar.test(pcStr[i + 2])) {
          var _charCode = parseInt(pcStr.substring(i + 1, i + 3), 16);
          utf8Str += String.fromCharCode(_charCode);
          wasPercentEncoded = true;
          i += 2; // Skip the next 2 chars
        }
      }

      if (!wasPercentEncoded) {
        utf8Str += pcStr[i];
      }
    }
  }

  // Now let's just build our array from every other bytes of that string's
  // UTF-16 representation
  var res = new Uint8Array(utf8Str.length);
  for (var _i = 0; _i < utf8Str.length; _i++) {
    res[_i] = utf8Str.charCodeAt(_i) & 0xFF; // first byte should be 0x00 anyway
  }

  return res;
}

/**
 * Creates a new string from the given array of char codes.
 * @param {Uint8Array} args
 * @returns {string}
 */
function bytes_stringFromCharCodes(args) {
  var max = 16000;
  var ret = "";
  for (var i = 0; i < args.length; i += max) {
    var subArray = args.subarray(i, i + max);
    ret += String.fromCharCode.apply(null, subArray);
  }
  return ret;
}

/**
 * Transform an integer into an hexadecimal string of the given length, padded
 * to the left with `0` if needed.
 * @example
 * ```
 * intToHex(5, 4); // => "0005"
 * intToHex(5, 2); // => "05"
 * intToHex(10, 1); // => "a"
 * intToHex(268, 3); // => "10c"
 * intToHex(4584, 6) // => "0011e8"
 * intToHex(123456, 4); // => "1e240" (we do nothing when going over 4 chars)
 * ```
 * @param {number} num
 * @param {number} size
 * @returns {string}
 */
function bytes_intToHex(num, size) {
  var toStr = num.toString(16);
  return toStr.length >= size ? toStr : new Array(size - toStr.length + 1).join("0") + toStr;
}

/**
 * Creates a string from the given Uint8Array containing utf-8 code units.
 * @param {Uint8Array} bytes
 * @returns {string}
 */
function bytes_utf8ToStr(data) {
  var uint8 = data;

  // If present, strip off the UTF-8 BOM.
  if (uint8[0] === 0xEF && uint8[1] === 0xBB && uint8[2] === 0xBF) {
    uint8 = uint8.subarray(3);
  }

  // We're basically doing strToUtf8 in reverse.
  // You can look at that other function for the whole story.

  // Generate string containing escaped UTF-8 code units
  var utf8Str = bytes_stringFromCharCodes(uint8);
  var escaped;
  if (typeof window.escape !== "function") {
    // Transform UTF-8 escape sequence into percent-encoded escape sequences.
    escaped = escape(utf8Str);
  } else {
    // Let's implement a simple escape function
    // http://ecma-international.org/ecma-262/9.0/#sec-escape-string
    var nonEscapedChar = /[A-Za-z0-9*_+-./]/;
    escaped = "";
    for (var i = 0; i < utf8Str.length; i++) {
      if (nonEscapedChar.test(utf8Str[i])) {
        escaped += utf8Str[i];
      } else {
        var charCode = utf8Str.charCodeAt(i);
        escaped += charCode >= 256 ? "%u" + bytes_intToHex(charCode, 4) : "%" + bytes_intToHex(charCode, 2);
      }
    }
  }

  // Decode the percent-encoded UTF-8 string into the proper JS string.
  // Example: "g#%E3%82%AC" -> "g#€"
  return decodeURIComponent(escaped);
}
;// CONCATENATED MODULE: ./demo/full/scripts/lib/parseDRMConfigurations.js

function parseDRMConfigurations(drmConfigurations) {
  return Promise.all(drmConfigurations.map(function (drmConfig) {
    var drm = drmConfig.drm,
      fallbackKeyError = drmConfig.fallbackKeyError,
      fallbackLicenseRequest = drmConfig.fallbackLicenseRequest,
      licenseServerUrl = drmConfig.licenseServerUrl,
      serverCertificateUrl = drmConfig.serverCertificateUrl;
    if (!licenseServerUrl) {
      return;
    }
    var type = drm.toLowerCase();
    var keySystem = {
      type: type,
      getLicense: generateGetLicense(licenseServerUrl, type, !!fallbackLicenseRequest),
      fallbackOn: {
        keyInternalError: !!fallbackKeyError,
        keyOutputRestricted: !!fallbackKeyError
      }
    };
    if (!serverCertificateUrl) {
      return keySystem;
    }
    return getServerCertificate(serverCertificateUrl).then(function (serverCertificate) {
      keySystem.serverCertificate = serverCertificate;
      return keySystem;
    });
  })).then(function (keySystems) {
    return keySystems.filter(function (ks) {
      return ks;
    });
  });
}
function getServerCertificate(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = function (evt) {
      if (xhr.status >= 200 && xhr.status < 300) {
        var serverCertificate = evt.target.response;
        resolve(serverCertificate);
      } else {
        reject();
      }
    };
    xhr.onerror = function (err) {
      reject(err);
    };
    xhr.send();
  });
}
function formatPlayreadyChallenge(challenge) {
  var str = leUtf16ToStr(challenge);
  var match = /<Challenge encoding="base64encoded">(.*)<\/Challenge>/.exec(str);
  var xml = match ? atob(match[1]) : /* IE11 / EDGE */
  bytes_utf8ToStr(challenge); // Chromecast
  return xml;
}
function generateGetLicense(licenseServerUrl, drmType, fallbackOnLastTry) {
  var isPlayready = drmType.indexOf("playready") !== -1;
  return function (rawChallenge) {
    var challenge = isPlayready ? formatPlayreadyChallenge(rawChallenge) : rawChallenge;
    var xhr = new XMLHttpRequest();
    xhr.open("POST", licenseServerUrl, true);
    return new Promise(function (resolve, reject) {
      xhr.onerror = function () {
        var error = new Error("getLicense's request failed on an error");
        error.fallbackOnLastTry = fallbackOnLastTry;
        reject(error);
      };
      xhr.onload = function (evt) {
        if (xhr.status >= 200 && xhr.status < 300) {
          var license = evt.target.response;
          resolve(license);
        } else {
          var error = new Error("getLicense's request finished with a " + (xhr.status + " HTTP error"));
          error.noRetry = fallbackOnLastTry;
          error.fallbackOnLastTry = fallbackOnLastTry;
          reject(error);
        }
      };
      if (isPlayready) {
        xhr.setRequestHeader("content-type", "text/xml; charset=utf-8");
      } else {
        xhr.responseType = "arraybuffer";
      }
      xhr.send(challenge);
    }).then(function (license) {
      return isPlayready && typeof license === "string" ? bytes_strToUtf8(license) : license;
    });
  };
}
;// CONCATENATED MODULE: ./demo/full/scripts/lib/url_hash.js
/**
 * Parse possible information given through the "hash" part of the URL (what
 * comes after the "#" character).
 *
 * This format was done to be:
 *   - easy to parse in JavaScript
 *   - readable by a human, one should get roughly an idea of the information
 *     given just by looking at that string.
 *   - compact enough to be shareable through e-mails without cluttering it
 *   - possible to copy sub-parts of that string (example an URL contained in
 *     it) and use it without human effort (i.e. no string escaping)
 *
 * Here is how it works:
 * The format is based on a key-value scheme. The type of the key is always a
 * string and two types of value (for the moment?) can be communicated: strings
 * and booleans.
 *
 * The key is designated by a name. This is a string of any length which should
 * not contain any exclamation mark ("!") or underscore ("_") character as those
 * are reserved, but could technically contain any other characters (we are
 * though usually limited here by URL-encoding).
 * Each of those keys are prepended by an exclamation mark ("!") character.
 *
 * To communicate a boolean value, that key is immediately either followed by
 * the next key (which is again, prepended by an exclamation mark character) or
 * by the end of the whole string, which indicates the end of the data.
 * A boolean value encountered is always inferred to be `true`. To set is to
 * `false`, just remove the key from the string. There is no difference between
 * `false` and a not-defined key.
 * Example:
 * http://www.example.com/#!lowLatency!foo
 * => will get you the following JS Object:
 * ```js
 * {
 *   lowLatency: true,
 *   foo: true
 * }
 * ```
 *
 * When the key has a string as a value, things are a little different.
 * The key is followed by an underscore ("_") character and then by the length
 * of the data (the communicated string) in terms of UTF-16 code units (note:
 * a surrogate pairs is 2 code units).
 * That length itself is then converted in a base-36 number (think 0-9 then
 * a-z) to take less space in a URL.
 * Because this length can, depending on the length of the data, need one or
 * more Base-36 numbers, an equal ("=") sign is added to mark the end of this
 * length.
 * The data then starts just after that equal sign and ends at the end of the
 * announced length (followed either by the following field - prepended by an
 * exclamation mark - or the end of the string).
 * Example with both booleans and strings and a `FIELD_LENGTH` of 4:
 * http://www.example.com/#!lowLatency!manifest_1n=http://www.example.com/streaming/dash_contents/Manifest.mpd!foobar
 * => will get you
 * ```js
 * {
 *   lowLatency: true,
 *   manifest: "http://www.example.com/streaming/dash_contents/Manifest.mpd",
 *   foobar: true
 * }
 * ```

 * If any invalid data is encountered, this function returns null.
 * @param {string} hashStr
 * @return {Object|null}
 */
function parseHashInURL(hashStr) {
  if (hashStr.length <= 1) {
    return null;
  }
  var parsed = {};

  // Note a previous version made use of the non-percent-encodable "\" separator
  // instead of the "!" we use today.
  // To still support links done in previous version, we want to detect which
  // of those two separators is used.
  // Fortunately, the first key also starts with a separator. This means that
  // the separator should always be the second character of the hash (after
  // "#").
  var separatorChar = hashStr[1];
  var hashOffset = 2; // initial "#!"

  var hashLen = hashStr.length;
  while (hashOffset + 1 <= hashLen) {
    var unparsedStr = hashStr.substring(hashOffset);
    var nextSeparator = unparsedStr.indexOf(separatorChar);
    var nextUnderscore = unparsedStr.indexOf("_");
    if (nextUnderscore <= 0 || nextSeparator >= 0 && nextUnderscore > nextSeparator) {
      // this is a boolean
      var fieldLength = nextSeparator >= 0 ? nextSeparator : unparsedStr.length;
      var fieldName = unparsedStr.substring(0, fieldLength);
      hashOffset += fieldLength; // skip field name
      parsed[fieldName] = true;
    } else {
      // data in a string form
      var _fieldName = unparsedStr.substring(0, nextUnderscore);
      hashOffset += nextUnderscore + 1; // skip field name and its following
      // underscore

      var splitted = unparsedStr.substring(nextUnderscore + 1).split("=");
      if (!splitted.length) {
        return null;
      }
      var dataLength = splitted[0];
      var dataLengthLen = splitted[0].length + 1; // length + "="
      hashOffset += dataLengthLen;
      var lenNb = parseInt(dataLength, 36);
      if (isNaN(lenNb)) {
        return null;
      }
      var dataStart = hashOffset;
      hashOffset += lenNb;
      var data = hashStr.substring(dataStart, hashOffset);
      parsed[_fieldName] = data;
    }
    hashOffset += 1; // skip next separator
  }

  return parsed;
}

/**
 * Generate URL with hash-string which can be used to reload the page with the
 * current non-stored custom content. This can be used for example to share some
 * content with other people.
 * Returns null if it could not generate an URL for the current content.
 * @param {Object} state - The current ContentList state.
 * @returns {string|null}
 */
function generateLinkForCustomContent(_ref) {
  var chosenDRMType = _ref.chosenDRMType,
    customKeySystem = _ref.customKeySystem,
    fallbackKeyError = _ref.fallbackKeyError,
    fallbackLicenseRequest = _ref.fallbackLicenseRequest,
    licenseServerUrl = _ref.licenseServerUrl,
    lowLatency = _ref.lowLatency,
    manifestURL = _ref.manifestURL,
    serverCertificateUrl = _ref.serverCertificateUrl,
    transport = _ref.transport;
  var urlString = "";
  var transportString = "";
  var licenseServerUrlString = "";
  var serverCertificateUrlString = "";
  var drmTypeString = "";
  var customKeySystemString = "";
  if (manifestURL) {
    urlString = "!manifest_" + manifestURL.length.toString(36) + "=" + manifestURL;
  }
  if (transport) {
    transportString = "!tech_" + transport.length.toString(36) + "=" + transport;
  }
  if (chosenDRMType) {
    drmTypeString = "!drm_" + chosenDRMType.length.toString(36) + "=" + chosenDRMType;
  }
  if (customKeySystem) {
    customKeySystemString = "!customKeySystem_" + customKeySystem.length.toString(36) + "=" + customKeySystem;
  }
  if (licenseServerUrl) {
    licenseServerUrlString = "!licenseServ_" + licenseServerUrl.length.toString(36) + "=" + licenseServerUrl;
  }
  if (serverCertificateUrl) {
    serverCertificateUrlString = "!certServ_" + serverCertificateUrl.length.toString(36) + "=" + serverCertificateUrl;
  }
  if (!transportString) {
    return null;
  }
  return location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + location.pathname + (location.search ? location.search : "") + "#" + (lowLatency ? "!lowLatency" : "") + (fallbackKeyError ? "!fallbackKeyError" : "") + (fallbackLicenseRequest ? "!fallbackLicenseRequest" : "") + transportString + urlString + drmTypeString + customKeySystemString + licenseServerUrlString + serverCertificateUrlString;
}
;// CONCATENATED MODULE: ./demo/full/scripts/components/CheckBox.jsx

function Checkbox(_ref) {
  var ariaLabel = _ref.ariaLabel,
    name = _ref.name,
    checked = _ref.checked,
    onChange = _ref.onChange,
    children = _ref.children,
    className = _ref.className;
  return /*#__PURE__*/react.createElement("div", {
    className: className
  }, /*#__PURE__*/react.createElement("label", {
    className: "input switch"
  }, /*#__PURE__*/react.createElement("input", {
    type: "checkbox",
    "aria-label": ariaLabel,
    name: name,
    id: name,
    checked: checked,
    onChange: onChange
  }), /*#__PURE__*/react.createElement("span", {
    className: "slider round"
  })), /*#__PURE__*/react.createElement("label", {
    htmlFor: name
  }, children));
}
/* harmony default export */ const CheckBox = (Checkbox);
;// CONCATENATED MODULE: ./demo/full/scripts/components/FocusedInput.jsx


/**
 * Simple text input which is focused when mounted.
 * Call `onChange` when updated.
 */
function FocusedInput(_ref) {
  var ariaLabel = _ref.ariaLabel,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    onChange = _ref.onChange,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? "" : _ref$value,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? "" : _ref$placeholder;
  var inputEl = (0,react.useRef)(null);
  (0,react.useEffect)(function () {
    if (inputEl.current != null) {
      inputEl.current.focus();
    }
  }, [] /* trigger only when mounted */);
  return /*#__PURE__*/react.createElement("input", {
    ref: inputEl,
    className: "input " + className,
    "aria-label": ariaLabel,
    type: "text",
    placeholder: placeholder,
    onChange: onChange,
    value: value
  });
}
/* harmony default export */ const components_FocusedInput = (/*#__PURE__*/react.memo(FocusedInput));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Input.jsx


/**
 * Simple text input.
 * Call `onChange` when updated.
 * @param {Object} props
 * @returns {Object}
 */
function Input(_ref) {
  var ariaLabel = _ref.ariaLabel,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    onChange = _ref.onChange,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? "" : _ref$value,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? "" : _ref$placeholder;
  return /*#__PURE__*/react.createElement("input", {
    "aria-label": ariaLabel,
    className: "input " + className,
    type: "text",
    placeholder: placeholder,
    onChange: onChange,
    value: value
  });
}
/* harmony default export */ const components_Input = (/*#__PURE__*/react.memo(Input));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Select.jsx


/**
 * Simple select list. Call the onChange call back on choice with the index of
 * the option chosen in argument.
 * @param {Object} props
 * @returns {Object}
 */
function Select(_ref) {
  var ariaLabel = _ref.ariaLabel,
    children = _ref.children,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    name = _ref.name,
    onChange = _ref.onChange,
    selected = _ref.selected,
    _ref$options = _ref.options,
    options = _ref$options === void 0 ? [] : _ref$options,
    disabled = _ref.disabled;
  function onSelectChange(evt) {
    var index = +evt.target.value;
    var valueObj = options[index];
    var value = typeof valueObj === "object" ? valueObj.name : valueObj;
    onChange({
      index: index,
      value: value
    });
  }
  var selectedIndex = typeof selected.index === "number" ? selected.index : undefined;
  var optionsEl = options.map(function (val, index) {
    var optName;
    var optDisabled = false;
    if (typeof val === "object") {
      optName = val.name;
      optDisabled = val.disabled;
    } else {
      optName = val;
    }
    if (selectedIndex === undefined && selected.value === optName) {
      selectedIndex = index;
    }
    return /*#__PURE__*/react.createElement("option", {
      key: index,
      value: index,
      disabled: optDisabled
    }, optName);
  });
  selectedIndex = selectedIndex || 0;
  var selectEl = disabled ? /*#__PURE__*/react.createElement("select", {
    "aria-label": ariaLabel,
    name: name,
    value: selectedIndex,
    disabled: "disabled",
    onChange: onSelectChange
  }, optionsEl) : /*#__PURE__*/react.createElement("select", {
    name: name,
    "aria-label": ariaLabel,
    value: selectedIndex,
    onChange: onSelectChange
  }, optionsEl);
  if (children) {
    return /*#__PURE__*/react.createElement("section", {
      className: "select " + className
    }, /*#__PURE__*/react.createElement("label", {
      htmlFor: name
    }, children), selectEl);
  }
  return /*#__PURE__*/react.createElement("section", {
    className: "select " + className
  }, selectEl);
}
/* harmony default export */ const components_Select = (/*#__PURE__*/react.memo(Select));
;// CONCATENATED MODULE: ./demo/full/scripts/metaplaylist_url.js
var MetaPlaylistDASHSmooth = {
  "type": "MPL",
  "version": "0.1",
  "dynamic": false,
  "contents": [{
    "url": "https://www.bok.net/dash/tears_of_steel/cleartext/stream.mpd",
    "startTime": 0,
    "endTime": 733.3,
    "transport": "dash"
  }, {
    "url": "https://amssamples.streaming.mediaservices.windows.net/683f7e47-bd83-4427-b0a3-26a6c4547782/BigBuckBunny.ism/manifest",
    "startTime": 733.3,
    "endTime": 1368,
    "transport": "smooth"
  }]
};
var MetaPlaylistDASHSmoothBlob = new Blob([JSON.stringify(MetaPlaylistDASHSmooth)], {
  type: "application/json"
});
/* harmony default export */ const metaplaylist_url = (URL.createObjectURL(MetaPlaylistDASHSmoothBlob));
;// CONCATENATED MODULE: ./demo/full/scripts/contents.js

/* harmony default export */ const contents = ([{
  "name": "Tears of Steel (clear)",
  "url": "https://www.bok.net/dash/tears_of_steel/cleartext/stream.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "BBC - presentationTimeOffset on audio and video",
  "url": "http://rdmedia.bbc.co.uk/dash/ondemand/testcard/1/client_manifest-pto_both-events.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "DASH-IF - Trickmode",
  "url": "https://dash.akamaized.net/dash264/TestCases/9b/qualcomm/1/MultiRate.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "DASH-IF - Multi-Subtitles",
  "url": "https://livesim.dashif.org/dash/vod/testpic_2s/multi_subs.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "BBC - Testcard Audio-only",
  "url": "http://rdmedia.bbc.co.uk/dash/ondemand/testcard/1/client_manifest-audio.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "DASH-IF - Audio-only",
  "url": "https://dash.akamaized.net/dash264/TestCases/3a/fraunhofer/aac-lc_stereo_without_video/Sintel/sintel_audio_only_aaclc_stereo_sidx.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "DASH IF - SegmentTemplate",
  "url": "https://livesim.dashif.org/livesim/testpic_2s/Manifest.mpd",
  "transport": "dash",
  "live": true
}, {
  "name": "DASH IF - SegmentTimeline",
  "url": "https://livesim.dashif.org/livesim/segtimeline_1/testpic_2s/Manifest.mpd",
  "transport": "dash",
  "live": true
}, {
  "name": "Envivio - DASH",
  "url": "http://dash.edgesuite.net/envivio/EnvivioDash3/manifest.mpd",
  "transport": "dash"
}, {
  "name": "Unified Streaming - Timeline - A-Team",
  "url": "https://demo.unified-streaming.com/video/ateam/ateam.ism/ateam.mpd",
  "transport": "dash"
}, {
  "name": "Super SpeedWay",
  "url": "https://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism/Manifest",
  "transport": "smooth"
}, {
  "name": "Big Buck Bunny",
  "url": "https://amssamples.streaming.mediaservices.windows.net/683f7e47-bd83-4427-b0a3-26a6c4547782/BigBuckBunny.ism/manifest",
  "transport": "smooth"
},
// {
//   "name": "Microsoft: XBoxOne Ad",
//   "url": "https://profficialsite.origin.mediaservices.windows.net/9cc5e871-68ec-42c2-9fc7-fda95521f17d/dayoneplayready.ism/manifest",
//   "transport": "smooth",
//   "live": false,
//   "drmInfos": [{
//     "licenseServerUrl": "https://test.playready.microsoft.com/service/rightsmanager.asmx?PlayRight=1&UseSimpleNonPersistentLicense=1",
//     "drm": "Playready",
//   }],
// },
{
  "name": "Smooth Ingest",
  "url": "https://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/manifest",
  "transport": "smooth",
  "live": true
}, {
  "name": "Taxi 3 SoundTrack (Audio-Only)",
  "url": "https://playready.directtaps.net/smoothstreaming/ISMAAACLC/Taxi3_AACLC.ism/Manifest",
  "transport": "smooth"
}, {
  "name": "Multi-Period (5 Periods of 2 min)",
  "url": "https://download.tsi.telecom-paristech.fr/gpac/DASH_CONFORMANCE/TelecomParisTech/mp4-live-periods/mp4-live-periods-mpd.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "Big Buck Bunny WEBM",
  "url": "https://upload.wikimedia.org/wikipedia/commons/transcoded/8/88/Big_Buck_Bunny_alt.webm/Big_Buck_Bunny_alt.webm.360p.webm",
  "transport": "directfile",
  "live": false
}, {
  "name": "Big Buck Bunny MP4",
  "url": "http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4",
  "transport": "directfile",
  "live": false
}, {
  "name": "Wikipedia test OGG (AUDIO ONLY)",
  "url": "https://upload.wikimedia.org/wikipedia/commons/f/f2/Median_test.ogg",
  "transport": "directfile",
  "live": false
}, {
  "name": "Google - Sintel webm only",
  "url": "https://storage.googleapis.com/shaka-demo-assets/sintel-webm-only/dash.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "Multi Video Tracks",
  "url": "https://utils.ssl.cdn.cra.cz/dash/1/manifest.mpd",
  "transport": "dash",
  "live": false
}, {
  "name": "Mix of DASH and Smooth VOD Contents",
  "url": metaplaylist_url,
  "transport": "metaplaylist"
}]);
;// CONCATENATED MODULE: ./demo/full/scripts/components/GenerateLinkURL.jsx


/**
 * @param {Object} props
 * @returns {Object}
 */
function GeneratedLinkURL(_ref) {
  var url = _ref.url;
  if (url === undefined || url === null || url === "") {
    return /*#__PURE__*/react.createElement("span", null, "URL: ", /*#__PURE__*/react.createElement("a", {
      className: "generated-url-link none"
    }, "Not a valid content!"));
  }
  return /*#__PURE__*/react.createElement("span", null, "URL: ", /*#__PURE__*/react.createElement("a", {
    className: "generated-url-link",
    href: url
  }, url));
}
/* harmony default export */ const GenerateLinkURL = (/*#__PURE__*/react.memo(GeneratedLinkURL));
;// CONCATENATED MODULE: ./demo/full/scripts/components/GenerateLinkButton.jsx

function GenerateLinkButton(_ref) {
  var enabled = _ref.enabled,
    onClick = _ref.onClick;
  return /*#__PURE__*/react.createElement("button", {
    "aria-label": "Generate link for the current custom button",
    className: "link" + (enabled ? " enabled" : ""),
    onClick: onClick
  }, /*#__PURE__*/react.createElement("svg", {
    "aria-hidden": "true",
    focusable: "false",
    role: "img",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    d: "M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z"
  })));
}
/* harmony default export */ const components_GenerateLinkButton = (/*#__PURE__*/react.memo(GenerateLinkButton));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/ContentList.jsx
function ContentList_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; ContentList_setPrototypeOf(subClass, superClass); }
function ContentList_setPrototypeOf(o, p) { ContentList_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ContentList_setPrototypeOf(o, p); }












var MediaKeys_ = window.MediaKeys || window.MozMediaKeys || window.WebKitMediaKeys || window.MSMediaKeys || null;
var HAS_EME_APIs = typeof navigator.requestMediaKeySystemAccess === "function" || MediaKeys_ != null && MediaKeys_.prototype && typeof MediaKeys_.isTypeSupported === "function" || typeof HTMLVideoElement.prototype.webkitGenerateKeyRequest === "function";
var IS_HTTPS = window.location.protocol.startsWith("https");
var CUSTOM_DRM_NAME = "Other";
var TRANSPORT_TYPES = ["DASH", "Smooth", "DirectFile", "MetaPlaylist"];
var DRM_TYPES = ["Widevine", "Playready", "Clearkey", CUSTOM_DRM_NAME];
var DISABLE_ENCRYPTED_CONTENT = !HAS_EME_APIs && !IS_HTTPS;
var URL_DENOMINATIONS = {
  DASH: "URL to the MPD",
  Smooth: "URL to the Manifest",
  DirectFile: "URL to the content"
};

/**
 * Format content for using in component.
 * @param {Object} content
 * @returns {Object} - formatted content
 */
function formatContent(content) {
  var displayName = content.name;
  var isDisabled = false;
  var isLocalContent = false;
  if (IS_HTTPS) {
    if (!content.localContent && content.url.startsWith("http:")) {
      displayName = "[HTTP only] " + displayName;
      isDisabled = true;
    }
  } else if (!HAS_EME_APIs && content.drmInfos && content.drmInfos.length) {
    displayName = "[HTTPS only] " + displayName;
    isDisabled = true;
  }
  if (content.live) {
    displayName += " (live)";
  }
  if (content.localContent) {
    displayName = (hasLocalStorage ? "[Stored] " : "[Saved] ") + displayName;
    isLocalContent = true;
  }
  return {
    contentName: content.name,
    displayName: displayName,
    drmInfos: content.drmInfos,
    fallbackKeyError: !!content.fallbackKeyError,
    fallbackLicenseRequest: !!content.fallbackLicenseRequest,
    id: content.id,
    isDisabled: isDisabled,
    isLocalContent: isLocalContent,
    isLowLatency: !!content.lowLatency,
    supplementaryImageTracks: content.supplementaryImageTracks,
    supplementaryTextTracks: content.supplementaryTextTracks,
    transport: content.transport,
    url: content.url
  };
}

/**
 * Contruct list of contents per type of transport from:
 *   - contents stored in local storage (or just memory)
 *   - contents declared locally
 * @returns {Object}
 */
function constructContentList() {
  var localStorageContents = getLocalStorageContents();
  var reversedStoredContents = localStorageContents.slice().reverse();
  var storedAndRegularContents = reversedStoredContents.concat(contents);
  return TRANSPORT_TYPES.reduce(function (acc, tech) {
    var customLinkContent = {
      url: "",
      contentName: "",
      transport: tech,
      drmInfos: [],
      displayName: "Custom link",
      isLocalContent: false,
      isDisabled: false,
      isLowLatency: false
    };
    acc[tech] = [customLinkContent].concat(storedAndRegularContents.filter(function (_ref) {
      var transport = _ref.transport;
      return transport === tech.toLowerCase();
    }).map(formatContent));
    return acc;
  }, {});
}

/**
 * Generate URL with hash-string which can be used to reload the page with the
 * current stored content or demo content. This can be used for example to
 * share some content with other people.
 * Returns null if it could not generate an URL for the current content.
 * @param {Object} content - The content object as constructed in the
 * ContentList.
 * @param {Object} state - The current ContentList state.
 * @returns {string|null}
 */
function generateLinkForContent(content, _ref2) {
  var transportType = _ref2.transportType,
    fallbackKeyError = _ref2.fallbackKeyError,
    fallbackLicenseRequest = _ref2.fallbackLicenseRequest;
  if (content == null) {
    return null;
  }
  var licenseServerUrl = content.drmInfos && content.drmInfos[0] && content.drmInfos[0].licenseServerUrl;
  var serverCertificateUrl = content.drmInfos && content.drmInfos[0] && content.drmInfos[0].serverCertificateUrl;
  return generateLinkForCustomContent({
    chosenDRMType: content.drmInfos && content.drmInfos[0] && content.drmInfos[0].drm,
    customKeySystem: content.drmInfos && content.drmInfos[0] && content.drmInfos[0].customKeySystem,
    fallbackKeyError: fallbackKeyError,
    fallbackLicenseRequest: fallbackLicenseRequest,
    manifestURL: content.url,
    licenseServerUrl: licenseServerUrl,
    lowLatency: !!content.isLowLatency,
    serverCertificateUrl: serverCertificateUrl,
    transport: transportType
  });
}

/**
 * @param {HTMLElement} checkBoxElt
 * @returns {boolean}
 */
function getCheckBoxValue(checkBoxElt) {
  return checkBoxElt.type === "checkbox" ? !!checkBoxElt.checked : !!checkBoxElt.value;
}

/**
 * Returns index of the first content to display according to all contents
 * available.
 * @param {Array.<Object>} contentList
 * @returns {number}
 */
function getIndexOfFirstEnabledContent(contentList) {
  var contentChoiceIndex = 1;
  if (contentList.length <= 0) {
    throw new Error("No content for the transport: ", TRANSPORT_TYPES[0]);
  }
  while (contentChoiceIndex < contentList.length && contentList[contentChoiceIndex].isDisabled) {
    contentChoiceIndex++;
  }
  if (contentChoiceIndex >= contentList.length) {
    return 0;
  }
  return contentChoiceIndex;
}

/**
 * @param {Array.<Object>} drmInfos
 * @param {Object} fallbacks
 * @returns {Promise.<Array.<Object>>}
 */
function getKeySystemsOption(drmInfos, _ref3) {
  var fallbackKeyError = _ref3.fallbackKeyError,
    fallbackLicenseRequest = _ref3.fallbackLicenseRequest;
  var wantedDRMs = drmInfos.map(function (drmInfo) {
    return {
      drm: drmInfo.drm === CUSTOM_DRM_NAME ? drmInfo.customKeySystem : drmInfo.drm,
      licenseServerUrl: drmInfo.licenseServerUrl,
      serverCertificateUrl: drmInfo.serverCertificateUrl,
      fallbackKeyError: fallbackKeyError,
      fallbackLicenseRequest: fallbackLicenseRequest
    };
  }).filter(function (drmInfo) {
    return drmInfo.drm !== undefined;
  });
  return parseDRMConfigurations(wantedDRMs);
}
var ContentList = /*#__PURE__*/function (_React$Component) {
  ContentList_inheritsLoose(ContentList, _React$Component);
  function ContentList() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    var contentsPerType = constructContentList();
    var transportType = TRANSPORT_TYPES[0];
    _this.state = {
      contentChoiceIndex: 0,
      contentNameField: "",
      contentsPerType: contentsPerType,
      chosenDRMType: DRM_TYPES[0],
      customKeySystem: "",
      currentManifestURL: "",
      displayGeneratedLink: false,
      displayDRMSettings: false,
      fallbackKeyError: false,
      fallbackLicenseRequest: false,
      isSavingOrUpdating: false,
      licenseServerUrl: "",
      lowLatencyChecked: false,
      serverCertificateUrl: "",
      transportType: transportType
    };
    return _this;
  }
  var _proto = ContentList.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var parsedHash = parseHashInURL(location.hash);
    if (parsedHash !== null) {
      var tech = parsedHash.tech;
      if (TRANSPORT_TYPES.includes(tech)) {
        var fallbackKeyError = parsedHash.fallbackKeyError,
          fallbackLicenseRequest = parsedHash.fallbackLicenseRequest,
          lowLatency = parsedHash.lowLatency;
        var newState = {
          contentChoiceIndex: 0,
          contentNameField: "",
          contentList: this.state.contentsPerType[tech],
          currentManifestURL: parsedHash.manifest,
          fallbackKeyError: !!fallbackKeyError,
          fallbackLicenseRequest: !!fallbackLicenseRequest,
          lowLatencyChecked: tech === "DASH" && !!lowLatency,
          transportType: tech
        };
        var chosenDRMType = DRM_TYPES.includes(parsedHash.drm) ? parsedHash.drm : undefined;
        if (chosenDRMType !== undefined) {
          newState.displayDRMSettings = true;
          newState.chosenDRMType = chosenDRMType;
          newState.customKeySystem = parsedHash.customKeySystem || "";
          newState.licenseServerUrl = parsedHash.licenseServ || "";
          newState.serverCertificateUrl = parsedHash.certServ || "";
        }
        this.setState(newState);
        return;
      }
    }

    // estimate first index which should be selected
    var contentList = this.state.contentsPerType[this.state.transportType];
    var firstEnabledContentIndex = getIndexOfFirstEnabledContent(contentList);
    var content = contentList[firstEnabledContentIndex];
    this.changeSelectedContent(firstEnabledContentIndex, content);
  }

  /**
   * Load the given content through the player.
   * @param {Object} content
   */;
  _proto.loadContent = function loadContent(content) {
    var _this$props = this.props,
      loadVideo = _this$props.loadVideo,
      stopVideo = _this$props.stopVideo;
    if (content == null) {
      stopVideo();
      return;
    }
    var url = content.url,
      transport = content.transport,
      fallbackKeyError = content.fallbackKeyError,
      fallbackLicenseRequest = content.fallbackLicenseRequest,
      supplementaryImageTracks = content.supplementaryImageTracks,
      supplementaryTextTracks = content.supplementaryTextTracks,
      isLowLatency = content.isLowLatency,
      _content$drmInfos = content.drmInfos,
      drmInfos = _content$drmInfos === void 0 ? [] : _content$drmInfos;
    getKeySystemsOption(drmInfos, {
      fallbackKeyError: fallbackKeyError,
      fallbackLicenseRequest: fallbackLicenseRequest
    }).then(function (keySystems) {
      loadVideo({
        url: url,
        transport: transport,
        supplementaryImageTracks: supplementaryImageTracks,
        supplementaryTextTracks: supplementaryTextTracks,
        textTrackMode: "html",
        lowLatencyMode: isLowLatency,
        keySystems: keySystems
      });
    });
  }

  /**
   * @param {string} url
   * @param {Array.<Object>} drmInfos
   */;
  _proto.loadUrl = function loadUrl(url, drmInfos) {
    var _this2 = this;
    var loadVideo = this.props.loadVideo;
    var _this$state = this.state,
      lowLatencyChecked = _this$state.lowLatencyChecked,
      fallbackKeyError = _this$state.fallbackKeyError,
      fallbackLicenseRequest = _this$state.fallbackLicenseRequest;
    getKeySystemsOption(drmInfos, {
      fallbackKeyError: fallbackKeyError,
      fallbackLicenseRequest: fallbackLicenseRequest
    }).then(function (keySystems) {
      loadVideo({
        url: url,
        transport: _this2.state.transportType.toLowerCase(),
        textTrackMode: "html",
        keySystems: keySystems,
        lowLatencyMode: lowLatencyChecked
      });
    });
  }

  /**
   * Update type of transport chosen.
   * @param {string} transportType
   */;
  _proto.changeTransportType = function changeTransportType(transportType) {
    this.setState({
      contentChoiceIndex: 0,
      contentNameField: "",
      chosenDRMType: DRM_TYPES[0],
      customKeySystem: "",
      currentManifestURL: "",
      displayDRMSettings: false,
      displayGeneratedLink: false,
      fallbackLicenseRequest: false,
      fallbackKeyError: false,
      isSavingOrUpdating: false,
      licenseServerUrl: "",
      lowLatencyChecked: false,
      serverCertificateUrl: "",
      transportType: transportType
    });
  }

  /**
   * Change the content chosen in the list.
   * @param {number} index - index in the lsit
   * @param {Object} content - content object
   */;
  _proto.changeSelectedContent = function changeSelectedContent(index, content) {
    var currentManifestURL = "";
    var contentNameField = "";
    var customKeySystem = "";
    var licenseServerUrl = "";
    var serverCertificateUrl = "";
    var hasDRMSettings = content.drmInfos != null && content.drmInfos.length > 0;
    var drm = null;
    currentManifestURL = content.url;
    contentNameField = content.contentName;
    var fallbackKeyError = !!content.fallbackKeyError;
    var fallbackLicenseRequest = !!content.fallbackLicenseRequest;
    var isLowLatency = !!content.isLowLatency;
    if (hasDRMSettings) {
      drm = content.drmInfos[0].drm;
      customKeySystem = content.drmInfos[0].customKeySystem || "";
      licenseServerUrl = content.drmInfos[0].licenseServerUrl;
      serverCertificateUrl = content.drmInfos[0].serverCertificateUrl;
    }
    this.setState({
      contentChoiceIndex: index,
      contentNameField: contentNameField,
      chosenDRMType: drm != null ? drm : DRM_TYPES[0],
      customKeySystem: customKeySystem,
      currentManifestURL: currentManifestURL,
      displayDRMSettings: hasDRMSettings,
      displayGeneratedLink: false,
      fallbackLicenseRequest: fallbackLicenseRequest,
      fallbackKeyError: fallbackKeyError,
      isSavingOrUpdating: false,
      lowLatencyChecked: isLowLatency,
      licenseServerUrl: licenseServerUrl,
      serverCertificateUrl: serverCertificateUrl
    });
  };
  _proto.render = function render() {
    var _this3 = this;
    var _this$props2 = this.props,
      showOptions = _this$props2.showOptions,
      onOptionToggle = _this$props2.onOptionToggle;
    var _this$state2 = this.state,
      contentChoiceIndex = _this$state2.contentChoiceIndex,
      contentNameField = _this$state2.contentNameField,
      contentsPerType = _this$state2.contentsPerType,
      chosenDRMType = _this$state2.chosenDRMType,
      customKeySystem = _this$state2.customKeySystem,
      currentManifestURL = _this$state2.currentManifestURL,
      displayGeneratedLink = _this$state2.displayGeneratedLink,
      displayDRMSettings = _this$state2.displayDRMSettings,
      fallbackKeyError = _this$state2.fallbackKeyError,
      fallbackLicenseRequest = _this$state2.fallbackLicenseRequest,
      isSavingOrUpdating = _this$state2.isSavingOrUpdating,
      licenseServerUrl = _this$state2.licenseServerUrl,
      lowLatencyChecked = _this$state2.lowLatencyChecked,
      serverCertificateUrl = _this$state2.serverCertificateUrl,
      transportType = _this$state2.transportType;
    var isCustomContent = contentChoiceIndex === 0;
    var isCustomDRM = chosenDRMType === CUSTOM_DRM_NAME;
    var contentsToSelect = contentsPerType[transportType];
    var chosenContent = contentsToSelect[contentChoiceIndex];
    var generatedLink = null;
    if (displayGeneratedLink) {
      generatedLink = contentChoiceIndex === 0 || isSavingOrUpdating ? generateLinkForCustomContent({
        chosenDRMType: displayDRMSettings ? chosenDRMType : undefined,
        customKeySystem: displayDRMSettings ? customKeySystem : undefined,
        fallbackKeyError: fallbackKeyError,
        fallbackLicenseRequest: fallbackLicenseRequest,
        manifestURL: currentManifestURL,
        licenseServerUrl: displayDRMSettings ? licenseServerUrl : undefined,
        lowLatency: lowLatencyChecked,
        serverCertificateUrl: displayDRMSettings ? serverCertificateUrl : undefined,
        transport: transportType
      }) : generateLinkForContent(chosenContent, this.state);
    }
    var hasURL = currentManifestURL !== "";
    var isLocalContent = !!(chosenContent && chosenContent.isLocalContent);
    var onTransportChange = function onTransportChange(_ref4) {
      var value = _ref4.value;
      _this3.changeTransportType(value);

      // update content selection
      var contents = contentsPerType[value];
      var firstEnabledContentIndex = getIndexOfFirstEnabledContent(contents);
      _this3.changeSelectedContent(firstEnabledContentIndex, contents[firstEnabledContentIndex]);
    };
    var onContentChoiceChange = function onContentChoiceChange(_ref5) {
      var index = _ref5.index;
      var content = contentsToSelect[index];
      _this3.changeSelectedContent(index, content);
    };
    var onClickLoad = function onClickLoad() {
      if (contentChoiceIndex === 0) {
        var drmInfos = [{
          licenseServerUrl: licenseServerUrl,
          serverCertificateUrl: serverCertificateUrl,
          drm: chosenDRMType,
          customKeySystem: customKeySystem
        }];
        _this3.loadUrl(currentManifestURL, drmInfos);
      } else {
        _this3.loadContent(contentsToSelect[contentChoiceIndex]);
      }
    };
    var saveCurrentContent = function saveCurrentContent() {
      var contentToSave = {
        name: contentNameField,
        url: currentManifestURL,
        fallbackLicenseRequest: fallbackLicenseRequest,
        fallbackKeyError: fallbackKeyError,
        lowLatency: lowLatencyChecked,
        transport: transportType.toLowerCase(),
        drmInfos: displayDRMSettings ? [{
          drm: chosenDRMType,
          customKeySystem: customKeySystem,
          licenseServerUrl: licenseServerUrl,
          serverCertificateUrl: serverCertificateUrl
        }] : undefined,
        id: chosenContent.id
      };
      var storedContent = storeContent(contentToSave);

      // reconstruct list of contents
      var contentList = constructContentList();
      _this3.setState({
        contentsPerType: contentList,
        isSavingOrUpdating: false
      });

      // update content selection
      var contents = contentList[transportType];
      var firstEnabledContentIndex = contents.findIndex(function (c) {
        return c.id === storedContent.id;
      });
      if (firstEnabledContentIndex < 0) {
        /* eslint-disable-next-line no-console */
        console.warn("Stored content not found in local storage.");
        _this3.changeSelectedContent(0, contents[0]);
      } else {
        _this3.changeSelectedContent(firstEnabledContentIndex, contents[firstEnabledContentIndex]);
      }
    };
    var onClickSaveOrUpdate = function onClickSaveOrUpdate() {
      return _this3.setState({
        isSavingOrUpdating: true
      });
    };
    var onClickErase = function onClickErase() {
      var content = contentsToSelect[contentChoiceIndex];
      if (content) {
        var hasRemoved = removeStoredContent(content.id);
        if (hasRemoved) {
          // reconstruct list of contents
          var contentList = constructContentList();
          _this3.setState({
            contentsPerType: contentList
          });

          // update content selection
          var contents = contentList[transportType];
          if (contentChoiceIndex >= contentList.length) {
            _this3.changeSelectedContent(0, contents[0]);
          } else {
            _this3.changeSelectedContent(contentChoiceIndex, contents[contentChoiceIndex]);
          }
        }
      }
    };
    var onNameInput = function onNameInput(evt) {
      return _this3.setState({
        contentNameField: evt.target.value
      });
    };
    var onManifestInput = function onManifestInput(evt) {
      return _this3.setState({
        currentManifestURL: evt.target.value
      });
    };
    var onCustomKeySystemInput = function onCustomKeySystemInput(evt) {
      return _this3.setState({
        customKeySystem: evt.target.value
      });
    };
    var onLicenseServerInput = function onLicenseServerInput(evt) {
      return _this3.setState({
        licenseServerUrl: evt.target.value
      });
    };
    var onServerCertificateInput = function onServerCertificateInput(evt) {
      return _this3.setState({
        serverCertificateUrl: evt.target.value
      });
    };
    var onChangeDisplayDRMSettings = function onChangeDisplayDRMSettings(evt) {
      var value = getCheckBoxValue(evt.target);
      if (value) {
        _this3.setState({
          displayDRMSettings: true
        });
        return;
      }
      _this3.setState({
        displayDRMSettings: false,
        licenseServerUrl: "",
        serverCertificateUrl: ""
      });
    };
    var onLowLatencyClick = function onLowLatencyClick(evt) {
      _this3.setState({
        lowLatencyChecked: getCheckBoxValue(evt.target)
      });
    };
    var onDRMTypeClick = function onDRMTypeClick(type) {
      if (chosenDRMType === type) {
        return;
      }
      _this3.setState({
        chosenDRMType: type,
        customKeySystem: ""
      });
    };
    var onCancel = function onCancel() {
      _this3.setState({
        isSavingOrUpdating: false
      });

      // re-load content
      _this3.changeSelectedContent(contentChoiceIndex, chosenContent);
    };
    var generateDRMButtons = function generateDRMButtons() {
      return DRM_TYPES.map(function (type) {
        return /*#__PURE__*/react.createElement("span", {
          key: type
        }, /*#__PURE__*/react.createElement(components_Button, {
          className: "choice-input-button drm-button" + (chosenDRMType === type ? " selected" : ""),
          onClick: function onClick() {
            return onDRMTypeClick(type);
          },
          value: type
        }));
      });
    };
    var onClickGenerateLink = function onClickGenerateLink() {
      _this3.setState({
        displayGeneratedLink: !displayGeneratedLink
      });
    };
    var onChangeFallbackLicenseRequest = function onChangeFallbackLicenseRequest(evt) {
      _this3.setState({
        fallbackLicenseRequest: getCheckBoxValue(evt.target)
      });
    };
    var onChangeFallbackKeyError = function onChangeFallbackKeyError(evt) {
      _this3.setState({
        fallbackKeyError: getCheckBoxValue(evt.target)
      });
    };
    var selectValues = contentsToSelect.map(function (c) {
      return {
        name: c.displayName,
        disabled: c.isDisabled
      };
    });
    return /*#__PURE__*/react.createElement("div", {
      className: "choice-inputs-wrapper"
    }, /*#__PURE__*/react.createElement("span", {
      className: "generated-url" + (displayGeneratedLink ? " enabled" : "")
    }, displayGeneratedLink ? /*#__PURE__*/react.createElement(GenerateLinkURL, {
      url: generatedLink
    }) : null), /*#__PURE__*/react.createElement("div", {
      className: "content-inputs"
    }, /*#__PURE__*/react.createElement("div", {
      className: "content-inputs-selects"
    }, /*#__PURE__*/react.createElement(components_Select, {
      className: "choice-input transport-type-choice white-select",
      ariaLabel: "Select a transport",
      onChange: onTransportChange,
      options: TRANSPORT_TYPES,
      selected: {
        value: transportType
      }
    }), /*#__PURE__*/react.createElement(components_Select, {
      className: "choice-input content-choice white-select",
      ariaLabel: "Select a content",
      onChange: onContentChoiceChange,
      options: selectValues,
      selected: {
        index: contentChoiceIndex
      }
    })), /*#__PURE__*/react.createElement("div", {
      className: "content-inputs-middle"
    }, isCustomContent || isLocalContent ? [/*#__PURE__*/react.createElement(components_Button, {
      key: 0,
      className: "choice-input-button content-button enter-name-button" + (!hasURL ? " disabled" : ""),
      ariaLabel: "Save or update custom content",
      onClick: onClickSaveOrUpdate,
      disabled: !hasURL || isSavingOrUpdating,
      value: isLocalContent ? isSavingOrUpdating ? "Updating..." : "Update content" : isSavingOrUpdating ? "Saving..." : "Store content"
    }), /*#__PURE__*/react.createElement(components_GenerateLinkButton, {
      key: 1,
      enabled: displayGeneratedLink,
      onClick: onClickGenerateLink
    })] : null, isLocalContent ? /*#__PURE__*/react.createElement(components_Button, {
      className: "choice-input-button erase-button",
      ariaLabel: "Remove custom content from saved contents",
      onClick: onClickErase,
      value: String.fromCharCode(0xf1f8)
    }) : null), /*#__PURE__*/react.createElement("div", {
      className: "choice-input-button-wrapper"
    }, /*#__PURE__*/react.createElement(CheckBox, {
      className: "show-options",
      ariaLabel: "Show player options",
      checked: showOptions,
      onChange: onOptionToggle,
      name: "showOptions"
    }, "Show Options"), /*#__PURE__*/react.createElement(components_Button, {
      className: "choice-input-button load-button",
      ariaLabel: "Load the selected content now",
      onClick: onClickLoad,
      value: String.fromCharCode(0xf144)
    }))), isCustomContent || isLocalContent && isSavingOrUpdating ? /*#__PURE__*/react.createElement("div", {
      className: "custom-input-wrapper"
    }, isSavingOrUpdating ? /*#__PURE__*/react.createElement("div", {
      className: "update-control"
    }, /*#__PURE__*/react.createElement(components_FocusedInput, {
      className: "text-input need-to-fill",
      ariaLabel: "Name of the custom content to save",
      onChange: onNameInput,
      value: contentNameField,
      placeholder: "Content name"
    }), /*#__PURE__*/react.createElement("div", {
      className: "update-control-buttons"
    }, /*#__PURE__*/react.createElement(components_Button, {
      className: "choice-input-button content-button save-button",
      ariaLabel: "Save/Update custom content",
      onClick: saveCurrentContent,
      disabled: !contentNameField || !currentManifestURL,
      value: isLocalContent ? "Update" : "Save"
    }), /*#__PURE__*/react.createElement(components_Button, {
      ariaLabel: "Cancel current modifications for the custom content",
      className: "choice-input-button content-button cancel-button",
      onClick: onCancel,
      value: "Cancel"
    }))) : null, /*#__PURE__*/react.createElement(components_Input, {
      ariaLabel: "Enter here the Manifest's URL",
      className: "text-input",
      onChange: onManifestInput,
      value: currentManifestURL,
      placeholder: (URL_DENOMINATIONS[transportType] || "URL to the " + transportType + " content") + (IS_HTTPS ? " (HTTPS only if mixed contents disabled)" : "")
    }), /*#__PURE__*/react.createElement("div", {
      className: "player-box player-box-load"
    }, /*#__PURE__*/react.createElement("span", {
      className: "encryption-checkbox custom-checkbox" + (DISABLE_ENCRYPTED_CONTENT ? " disabled" : "")
    }, (DISABLE_ENCRYPTED_CONTENT ? "[HTTPS only] " : "") + "Encrypted content", /*#__PURE__*/react.createElement("label", {
      className: "switch"
    }, /*#__PURE__*/react.createElement("input", {
      "aria-label": "Enable for an encrypted content",
      disabled: DISABLE_ENCRYPTED_CONTENT,
      name: "displayDRMSettingsTextInput",
      type: "checkbox",
      checked: displayDRMSettings,
      onChange: onChangeDisplayDRMSettings
    }), /*#__PURE__*/react.createElement("span", {
      className: "slider round"
    }))), displayDRMSettings ? /*#__PURE__*/react.createElement("div", {
      className: "drm-settings"
    }, /*#__PURE__*/react.createElement("div", {
      className: "drm-choice"
    }, generateDRMButtons()), isCustomDRM ? /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(components_Input, {
      ariaLabel: "Key system reverse domain name (e.g. \"org.w3.clearkey\")",
      className: "choice-input text-input",
      onChange: onCustomKeySystemInput,
      value: customKeySystem,
      placeholder: "Key system (reverse domain name)"
    })) : null, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(components_Input, {
      ariaLabel: "URL for the license server",
      className: "choice-input text-input",
      onChange: onLicenseServerInput,
      value: licenseServerUrl,
      placeholder: "License URL Server"
    })), /*#__PURE__*/react.createElement(components_Input, {
      ariaLabel: "URL for the server certificate (optional)",
      className: "choice-input text-input",
      onChange: onServerCertificateInput,
      value: serverCertificateUrl,
      placeholder: "Server certificate URL (optional)"
    }), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("span", {
      className: "custom-checkbox fallback-checkbox"
    }, /*#__PURE__*/react.createElement("span", null, "Fallback if a key is refused ", /*#__PURE__*/react.createElement("span", {
      className: "checkbox-indication"
    }, "(for content with multiple keys)")), /*#__PURE__*/react.createElement("label", {
      className: "input switch fallback-switch"
    }, /*#__PURE__*/react.createElement("input", {
      type: "checkbox",
      checked: fallbackKeyError,
      onChange: onChangeFallbackKeyError
    }), /*#__PURE__*/react.createElement("span", {
      className: "slider round"
    })))), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("span", {
      className: "custom-checkbox fallback-checkbox"
    }, /*#__PURE__*/react.createElement("span", null, "Fallback if the license request fails ", /*#__PURE__*/react.createElement("span", {
      className: "checkbox-indication"
    }, "(for content with multiple keys)")), /*#__PURE__*/react.createElement("label", {
      className: "input switch fallback-switch"
    }, /*#__PURE__*/react.createElement("input", {
      type: "checkbox",
      checked: fallbackLicenseRequest,
      onChange: onChangeFallbackLicenseRequest
    }), /*#__PURE__*/react.createElement("span", {
      className: "slider round"
    }))))) : null), transportType === "DASH" ? /*#__PURE__*/react.createElement("div", {
      className: "player-box player-box-load button-low-latency"
    }, /*#__PURE__*/react.createElement("span", {
      className: "low-latency-checkbox custom-checkbox"
    }, "Low-Latency content", /*#__PURE__*/react.createElement("label", {
      className: "input switch"
    }, /*#__PURE__*/react.createElement("input", {
      "aria-label": "Enable for a low-latency content",
      type: "checkbox",
      checked: lowLatencyChecked,
      onChange: onLowLatencyClick
    }), /*#__PURE__*/react.createElement("span", {
      className: "slider round"
    })))) : null) : null);
  };
  return ContentList;
}(react.Component);
/* harmony default export */ const controllers_ContentList = (ContentList);
;// CONCATENATED MODULE: ./demo/full/scripts/lib/getCheckboxValue.js
/**
 * @param {HTMLElement} checkBoxElt
 * @returns {boolean}
 */
function getCheckboxValue_getCheckBoxValue(checkBoxElt) {
  return checkBoxElt.type === "checkbox" ? !!checkBoxElt.checked : !!checkBoxElt.value;
}
/* harmony default export */ const getCheckboxValue = (getCheckboxValue_getCheckBoxValue);
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/Option.jsx


/**
 * @param {Object} props
 * @returns {Object}
 */
function Option(_ref) {
  var title = _ref.title,
    children = _ref.children;
  return /*#__PURE__*/react.createElement("div", {
    className: "optionWrapper"
  }, /*#__PURE__*/react.createElement("h4", {
    className: "optionTitle"
  }, title), /*#__PURE__*/react.createElement("hr", {
    className: "spacer"
  }), /*#__PURE__*/react.createElement("ul", {
    className: "loadVideooptions"
  }, children));
}
/* harmony default export */ const Options_Option = (/*#__PURE__*/react.memo(Option));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/Playback.jsx




/**
 * @param {Object} props
 * @returns {Object}
 */
function TrackSwitch(_ref) {
  var onAutoPlayClick = _ref.onAutoPlayClick,
    autoPlay = _ref.autoPlay,
    onManualBrSwitchingModeChange = _ref.onManualBrSwitchingModeChange,
    manualBrSwitchingMode = _ref.manualBrSwitchingMode,
    stopAtEnd = _ref.stopAtEnd,
    onStopAtEndClick = _ref.onStopAtEndClick;
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
    name: "autoPlay",
    ariaLabel: "Auto play option",
    checked: autoPlay,
    onChange: onAutoPlayClick
  }, "Auto Play")), /*#__PURE__*/react.createElement("li", {
    className: "featureWrapperWithSelectMode"
  }, /*#__PURE__*/react.createElement(components_Select, {
    className: "playerOptionInput",
    name: "manualBitrateSwitchingMode",
    onChange: function onChange(_ref2) {
      var value = _ref2.value;
      return onManualBrSwitchingModeChange(value);
    },
    selected: {
      value: manualBrSwitchingMode
    },
    options: ["seamless", "direct"]
  }, "Manual bitrate switching mode")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
    name: "stopAtEnd",
    ariaLabel: "Stop at end option",
    checked: stopAtEnd,
    onChange: onStopAtEndClick
  }, "Stop At End")));
}
/* harmony default export */ const Playback = (/*#__PURE__*/react.memo(TrackSwitch));
;// CONCATENATED MODULE: ./demo/full/scripts/lib/defaultOptionsValues.js
var defaultOptionsValues = {
  autoPlay: true,
  manualBrSwitchingMode: "direct",
  initialVideoBr: 0,
  initialAudioBr: 0,
  minVideoBr: 0,
  minAudioBr: 0,
  maxVideoBr: Infinity,
  maxAudioBr: Infinity,
  limitVideoWidth: false,
  throttleVideoBitrateWhenHidden: false,
  stopAtEnd: false,
  segmentRetry: 4,
  manifestRetry: 4,
  offlineRetry: Infinity,
  enableFastSwitching: true,
  audioTrackSwitchingMode: "reload",
  onCodecSwitch: "continue",
  wantedBufferAhead: 30,
  maxVideoBufferSize: Infinity,
  maxBufferAhead: Infinity,
  maxBufferBehind: Infinity
};
/* harmony default export */ const lib_defaultOptionsValues = (defaultOptionsValues);
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/AudioAdaptiveSettings.jsx






/**
 * @param {Object} props
 * @returns {Object}
 */
function AudioAdaptiveSettings(_ref) {
  var initialAudioBr = _ref.initialAudioBr,
    minAudioBr = _ref.minAudioBr,
    maxAudioBr = _ref.maxAudioBr,
    onInitialAudioBrInput = _ref.onInitialAudioBrInput,
    onMinAudioBrInput = _ref.onMinAudioBrInput,
    onMaxAudioBrInput = _ref.onMaxAudioBrInput;
  var _useState = (0,react.useState)(minAudioBr !== 0),
    isMinAudioBrLimited = _useState[0],
    setMinAudioBrLimit = _useState[1];
  var _useState2 = (0,react.useState)(maxAudioBr !== Infinity),
    isMaxAudioBrLimited = _useState2[0],
    setMaxAudioBrLimit = _useState2[1];
  var onChangeLimitMinAudioBr = function onChangeLimitMinAudioBr(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMinAudioBrLimit(false);
      onMinAudioBrInput(0);
    } else {
      setMinAudioBrLimit(true);
      onMinAudioBrInput(lib_defaultOptionsValues.minAudioBr);
    }
  };
  var onChangeLimitMaxAudioBr = function onChangeLimitMaxAudioBr(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMaxAudioBrLimit(false);
      onMaxAudioBrInput(Infinity);
    } else {
      setMaxAudioBrLimit(true);
      onMaxAudioBrInput(lib_defaultOptionsValues.maxAudioBr);
    }
  };
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "initialAudioBitrate"
  }, "Initial Audio Bitrate"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "number",
    name: "initialAudioBitrate",
    id: "initialAudioBitrate",
    "aria-label": "Initial audio bitrate option",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onInitialAudioBrInput(evt.target.value);
    },
    value: initialAudioBr,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(initialAudioBr) === lib_defaultOptionsValues.initialAudioBr ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      onInitialAudioBrInput(lib_defaultOptionsValues.initialAudioBr);
    },
    value: String.fromCharCode(0xf021)
  })))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "minAudioBitrate"
  }, "Min Audio Bitrate"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "number",
    name: "minAudioBitrate",
    id: "minAudioBitrate",
    "aria-label": "Min audio bitrate option",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMinAudioBrInput(evt.target.value);
    },
    value: minAudioBr,
    disabled: isMinAudioBrLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(minAudioBr) === lib_defaultOptionsValues.minAudioBr ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMinAudioBrLimit(lib_defaultOptionsValues.minAudioBr !== 0);
      onMinAudioBrInput(lib_defaultOptionsValues.minAudioBr);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Min video bitrate limit",
    name: "minAudioBitrateLimit",
    checked: isMinAudioBrLimited === false,
    onChange: onChangeLimitMinAudioBr
  }, "Do not limit")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "maxAudioBitrate"
  }, "Max Audio Bitrate"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    name: "maxAudioBitrate",
    id: "maxAudioBitrate",
    "aria-label": "Max audio bitrate",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMaxAudioBrInput(evt.target.value);
    },
    value: String(maxAudioBr),
    disabled: isMaxAudioBrLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(maxAudioBr) === lib_defaultOptionsValues.maxAudioBr ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMaxAudioBrLimit(lib_defaultOptionsValues.maxAudioBr !== Infinity);
      onMaxAudioBrInput(lib_defaultOptionsValues.maxAudioBr);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Max audio bitrate limit",
    name: "maxAudioBitrateLimit",
    checked: isMaxAudioBrLimited === false,
    onChange: onChangeLimitMaxAudioBr
  }, "Do not limit"))));
}
/* harmony default export */ const Options_AudioAdaptiveSettings = (/*#__PURE__*/react.memo(AudioAdaptiveSettings));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/VideoAdaptiveSettings.jsx






/**
 * @param {Object} props
 * @returns {Object}
 */
function VideoAdaptiveSettings(_ref) {
  var initialVideoBr = _ref.initialVideoBr,
    minVideoBr = _ref.minVideoBr,
    maxVideoBr = _ref.maxVideoBr,
    onInitialVideoBrInput = _ref.onInitialVideoBrInput,
    onMinVideoBrInput = _ref.onMinVideoBrInput,
    onMaxVideoBrInput = _ref.onMaxVideoBrInput,
    limitVideoWidth = _ref.limitVideoWidth,
    throttleVideoBitrateWhenHidden = _ref.throttleVideoBitrateWhenHidden,
    onLimitVideoWidthClick = _ref.onLimitVideoWidthClick,
    onThrottleVideoBitrateWhenHiddenClick = _ref.onThrottleVideoBitrateWhenHiddenClick;
  var _useState = (0,react.useState)(minVideoBr !== 0),
    isMinVideoBrLimited = _useState[0],
    setMinVideoBrLimit = _useState[1];
  var _useState2 = (0,react.useState)(maxVideoBr !== Infinity),
    isMaxVideoBrLimited = _useState2[0],
    setMaxVideoBrLimit = _useState2[1];
  var onChangeLimitMinVideoBr = function onChangeLimitMinVideoBr(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMinVideoBrLimit(false);
      onMinVideoBrInput(0);
    } else {
      setMinVideoBrLimit(true);
      onMinVideoBrInput(lib_defaultOptionsValues.minVideoBr);
    }
  };
  var onChangeLimitMaxVideoBr = function onChangeLimitMaxVideoBr(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMaxVideoBrLimit(false);
      onMaxVideoBrInput(Infinity);
    } else {
      setMaxVideoBrLimit(true);
      onMaxVideoBrInput(lib_defaultOptionsValues.maxVideoBr);
    }
  };
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "initialVideoBitrate"
  }, "Initial Video Bitrate"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "number",
    name: "initialVideoBitrate",
    id: "initialVideoBitrate",
    "aria-label": "Initial video bitrate option",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onInitialVideoBrInput(evt.target.value);
    },
    value: initialVideoBr,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(initialVideoBr) === lib_defaultOptionsValues.initialVideoBr ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      onInitialVideoBrInput(lib_defaultOptionsValues.initialVideoBr);
    },
    value: String.fromCharCode(0xf021)
  })))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "minVideoBitrate"
  }, "Min Video Bitrate"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "number",
    name: "minVideoBitrate",
    id: "minVideoBitrate",
    "aria-label": "Min video bitrate option",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMinVideoBrInput(evt.target.value);
    },
    value: minVideoBr,
    disabled: isMinVideoBrLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseInt(minVideoBr) === lib_defaultOptionsValues.minVideoBr ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMinVideoBrLimit(lib_defaultOptionsValues.minVideoBr !== 0);
      onMinVideoBrInput(lib_defaultOptionsValues.minVideoBr);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Min video bitrate limit",
    name: "minVideoBitrateLimit",
    checked: isMinVideoBrLimited === false,
    onChange: onChangeLimitMinVideoBr
  }, "Do not limit")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "maxVideoBitrate"
  }, "Max Video Bitrate"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    name: "maxVideoBitrate",
    id: "maxVideoBitrate",
    "aria-label": "Max video bitrate option",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMaxVideoBrInput(evt.target.value);
    },
    value: maxVideoBr,
    disabled: isMaxVideoBrLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(maxVideoBr) === lib_defaultOptionsValues.maxVideoBr ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMaxVideoBrLimit(lib_defaultOptionsValues.maxVideoBr !== Infinity);
      onMaxVideoBrInput(lib_defaultOptionsValues.maxVideoBr);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    "aria-label": "Max video bitrate limit",
    name: "maxVideoBitrateLimit",
    checked: isMaxVideoBrLimited === false,
    onChange: onChangeLimitMaxVideoBr
  }, "Do not limit"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
    name: "limitVideoWidth",
    id: "limitVideoWidth",
    ariaLabel: "Limit video width option",
    checked: limitVideoWidth,
    onChange: onLimitVideoWidthClick
  }, "Limit Video Width")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
    name: "throttleVideoBitrateWhenHidden",
    ariaLabel: "Throttle video bitrate when hidden option",
    checked: throttleVideoBitrateWhenHidden,
    onChange: onThrottleVideoBitrateWhenHiddenClick
  }, "Throttle Video Bitrate When Hidden")));
}
/* harmony default export */ const Options_VideoAdaptiveSettings = (/*#__PURE__*/react.memo(VideoAdaptiveSettings));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/NetworkConfig.jsx






/**
 * @param {Object} props
 * @returns {Object}
 */
function NetworkConfig(_ref) {
  var segmentRetry = _ref.segmentRetry,
    manifestRetry = _ref.manifestRetry,
    offlineRetry = _ref.offlineRetry,
    onSegmentRetryInput = _ref.onSegmentRetryInput,
    onManifestRetryInput = _ref.onManifestRetryInput,
    onOfflineRetryInput = _ref.onOfflineRetryInput;
  var _useState = (0,react.useState)(segmentRetry !== Infinity),
    isSegmentRetryLimited = _useState[0],
    setSegmentRetryLimit = _useState[1];
  var _useState2 = (0,react.useState)(manifestRetry !== Infinity),
    isManifestRetryLimited = _useState2[0],
    setManifestRetryLimit = _useState2[1];
  var _useState3 = (0,react.useState)(offlineRetry !== Infinity),
    isOfflineRetryLimited = _useState3[0],
    setOfflineRetryLimit = _useState3[1];
  var onChangeLimitSegmentRetry = function onChangeLimitSegmentRetry(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setSegmentRetryLimit(false);
      onSegmentRetryInput("Infinity");
    } else {
      setSegmentRetryLimit(true);
      onSegmentRetryInput(lib_defaultOptionsValues.segmentRetry);
    }
  };
  var onChangeLimitManifestRetry = function onChangeLimitManifestRetry(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setManifestRetryLimit(false);
      onManifestRetryInput(Infinity);
    } else {
      setManifestRetryLimit(true);
      onManifestRetryInput(lib_defaultOptionsValues.manifestRetry);
    }
  };
  var onChangeLimitOfflineRetry = function onChangeLimitOfflineRetry(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setOfflineRetryLimit(false);
      onOfflineRetryInput(Infinity);
    } else {
      setOfflineRetryLimit(true);
      onOfflineRetryInput(lib_defaultOptionsValues.offlineRetry);
    }
  };
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "segmentRetry"
  }, "Segment Retry"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    name: "segmentRetry",
    id: "segmentRetry",
    "aria-label": "Segment retry option",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onSegmentRetryInput(evt.target.value);
    },
    value: segmentRetry,
    disabled: isSegmentRetryLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(segmentRetry) === lib_defaultOptionsValues.segmentRetry ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setSegmentRetryLimit(lib_defaultOptionsValues.segmentRetry !== Infinity);
      onSegmentRetryInput(lib_defaultOptionsValues.segmentRetry);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Segment retry limit option",
    name: "segmentRetryLimit",
    checked: isSegmentRetryLimited === false,
    onChange: onChangeLimitSegmentRetry
  }, "Do not limit")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "manifestRetry"
  }, "Manifest Retry"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    name: "manifestRetry",
    id: "segmentRetry",
    "aria-label": "Manifest retry",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onManifestRetryInput(evt.target.value);
    },
    value: manifestRetry,
    disabled: isManifestRetryLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(manifestRetry) === lib_defaultOptionsValues.manifestRetry ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setManifestRetryLimit(lib_defaultOptionsValues.manifestRetry !== Infinity);
      onManifestRetryInput(lib_defaultOptionsValues.manifestRetry);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Manifest retry limit option",
    name: "manifestRetryLimit",
    checked: isManifestRetryLimited === false,
    onChange: onChangeLimitManifestRetry
  }, "Do not limit")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "offlineRetry"
  }, "Offline Retry"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    "aria-label": "Offline retry option",
    name: "offlineRetry",
    id: "offlineRetry",
    placeholder: "Number",
    className: "optionInput",
    onChange: function onChange(evt) {
      return onOfflineRetryInput(evt.target.value);
    },
    value: offlineRetry,
    disabled: isOfflineRetryLimited === false
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(offlineRetry) === lib_defaultOptionsValues.offlineRetry ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setOfflineRetryLimit(lib_defaultOptionsValues.offlineRetry !== Infinity);
      onOfflineRetryInput(lib_defaultOptionsValues.offlineRetry);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Offline retry limit option",
    name: "offlineRetryLimit",
    id: "offlineRetryLimit",
    checked: isOfflineRetryLimited === false,
    onChange: onChangeLimitOfflineRetry
  }, "Do not limit")));
}
/* harmony default export */ const Options_NetworkConfig = (/*#__PURE__*/react.memo(NetworkConfig));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/TrackSwitch.jsx




/**
 * @param {Object} props
 * @returns {Object}
 */
function TrackSwitch_NetworkConfig(_ref) {
  var enableFastSwitching = _ref.enableFastSwitching,
    audioTrackSwitchingMode = _ref.audioTrackSwitchingMode,
    onCodecSwitch = _ref.onCodecSwitch,
    onEnableFastSwitchingClick = _ref.onEnableFastSwitchingClick,
    onAudioTrackSwitchingModeChange = _ref.onAudioTrackSwitchingModeChange,
    onCodecSwitchChange = _ref.onCodecSwitchChange;
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
    ariaLabel: "Fast switching option",
    name: "fastSwitching",
    id: "fastSwitching",
    checked: enableFastSwitching,
    onChange: onEnableFastSwitchingClick
  }, "Fast Switching")), /*#__PURE__*/react.createElement("li", {
    className: "featureWrapperWithSelectMode"
  }, /*#__PURE__*/react.createElement(components_Select, {
    className: "playerOptionInput",
    name: "audioTrackSwitchingMode",
    onChange: function onChange(_ref2) {
      var value = _ref2.value;
      return onAudioTrackSwitchingModeChange(value);
    },
    selected: {
      value: audioTrackSwitchingMode
    },
    options: ["seamless", "direct", "reload"]
  }, "Audio track switching mode")), /*#__PURE__*/react.createElement("li", {
    className: "featureWrapperWithSelectMode"
  }, /*#__PURE__*/react.createElement(components_Select, {
    className: "playerOptionInput",
    name: "onCodecSwitch",
    onChange: function onChange(_ref3) {
      var value = _ref3.value;
      return onCodecSwitchChange(value);
    },
    selected: {
      value: onCodecSwitch
    },
    options: ["continue", "reload"]
  }, "On Codec Switch")));
}
/* harmony default export */ const Options_TrackSwitch = (/*#__PURE__*/react.memo(TrackSwitch_NetworkConfig));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Options/BufferOptions.jsx






/**
 * @param {Object} props
 * @returns {Object}
 */
function BufferOptions(_ref) {
  var wantedBufferAhead = _ref.wantedBufferAhead,
    maxVideoBufferSize = _ref.maxVideoBufferSize,
    maxBufferAhead = _ref.maxBufferAhead,
    maxBufferBehind = _ref.maxBufferBehind,
    onWantedBufferAheadInput = _ref.onWantedBufferAheadInput,
    onMaxVideoBufferSizeInput = _ref.onMaxVideoBufferSizeInput,
    onMaxBufferAheadInput = _ref.onMaxBufferAheadInput,
    onMaxBufferBehindInput = _ref.onMaxBufferBehindInput;
  var _useState = (0,react.useState)(maxBufferAhead !== Infinity),
    isMaxBufferAHeadLimited = _useState[0],
    setMaxBufferAHeadLimit = _useState[1];
  var _useState2 = (0,react.useState)(maxBufferBehind !== Infinity),
    isMaxBufferBehindLimited = _useState2[0],
    setMaxBufferBehindLimit = _useState2[1];
  var _useState3 = (0,react.useState)(maxVideoBufferSize !== Infinity),
    isMaxVideoBufferSizeLimited = _useState3[0],
    setMaxVideoBufferSizeLimit = _useState3[1];
  var onChangeLimitMaxBufferAHead = function onChangeLimitMaxBufferAHead(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMaxBufferAHeadLimit(false);
      onMaxBufferAheadInput(Infinity);
    } else {
      setMaxBufferAHeadLimit(true);
      onMaxBufferAheadInput(lib_defaultOptionsValues.maxBufferAhead);
    }
  };
  var onChangeLimitMaxBufferBehind = function onChangeLimitMaxBufferBehind(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMaxBufferBehindLimit(false);
      onMaxBufferBehindInput(Infinity);
    } else {
      setMaxBufferBehindLimit(true);
      onMaxBufferAheadInput(lib_defaultOptionsValues.maxBufferBehind);
    }
  };
  var onChangeLimitMaxVideoBufferSize = function onChangeLimitMaxVideoBufferSize(evt) {
    var isNotLimited = getCheckboxValue(evt.target);
    if (isNotLimited) {
      setMaxVideoBufferSizeLimit(false);
      onMaxVideoBufferSizeInput(Infinity);
    } else {
      setMaxVideoBufferSizeLimit(true);
      onMaxVideoBufferSizeInput(lib_defaultOptionsValues.maxVideoBufferSize);
    }
  };
  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "wantedBufferAhead"
  }, "Wanted Buffer Ahead"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    step: "10",
    "aria-label": "Wanted buffer a head option",
    name: "wantedBufferAhead",
    id: "wantedBufferAhead",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onWantedBufferAheadInput(evt.target.value);
    },
    value: wantedBufferAhead,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(wantedBufferAhead) === lib_defaultOptionsValues.wantedBufferAhead ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      onWantedBufferAheadInput(lib_defaultOptionsValues.wantedBufferAhead);
    },
    value: String.fromCharCode(0xf021)
  })))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "maxVideoBufferSize"
  }, " Max Video Buffer Size"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    step: "10",
    "aria-label": "maxVideoBufferSize option",
    name: "maxVideoBufferSize",
    id: "maxVideoBufferSize",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMaxVideoBufferSizeInput(evt.target.value);
    },
    value: maxVideoBufferSize,
    disabled: isMaxVideoBufferSizeLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(maxVideoBufferSize) === lib_defaultOptionsValues.maxVideoBufferSize ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMaxVideoBufferSizeLimit(lib_defaultOptionsValues.maxVideoBufferSize !== Infinity);
      onMaxVideoBufferSizeInput(lib_defaultOptionsValues.maxVideoBufferSize);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Do not limit maxVideoBufferSize option",
    name: "maxVideoBufferSizeLimit",
    checked: isMaxVideoBufferSizeLimited === false,
    onChange: onChangeLimitMaxVideoBufferSize
  }, "Do not limit")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "maxBufferAhead"
  }, "Max Buffer Ahead"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    "aria-label": "Max buffer a head option",
    name: "maxBufferAhead",
    id: "maxBufferAhead",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMaxBufferAheadInput(evt.target.value);
    },
    value: maxBufferAhead,
    disabled: isMaxBufferAHeadLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(maxBufferAhead) === lib_defaultOptionsValues.maxBufferAhead ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMaxBufferAHeadLimit(lib_defaultOptionsValues.maxBufferAhead !== Infinity);
      onMaxBufferAheadInput(lib_defaultOptionsValues.maxBufferAhead);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Do not limit max buffer a head option",
    name: "maxBufferAheadLimit",
    checked: isMaxBufferAHeadLimited === false,
    onChange: onChangeLimitMaxBufferAHead
  }, "Do not limit")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("div", {
    className: "playerOptionInput"
  }, /*#__PURE__*/react.createElement("label", {
    htmlFor: "maxBufferBehind"
  }, "Max Buffer Behind"), /*#__PURE__*/react.createElement("span", {
    className: "wrapperInputWithResetBtn"
  }, /*#__PURE__*/react.createElement("input", {
    type: "text",
    "aria-label": "Max buffer behind option",
    name: "maxBufferBehind",
    id: "maxBufferBehind",
    placeholder: "Number",
    onChange: function onChange(evt) {
      return onMaxBufferBehindInput(evt.target.value);
    },
    value: maxBufferBehind,
    disabled: isMaxBufferBehindLimited === false,
    className: "optionInput"
  }), /*#__PURE__*/react.createElement(components_Button, {
    className: parseFloat(maxBufferBehind) === lib_defaultOptionsValues.maxBufferBehind ? "resetBtn disabledResetBtn" : "resetBtn",
    ariaLabel: "Reset option to default value",
    title: "Reset option to default value",
    onClick: function onClick() {
      setMaxBufferBehindLimit(lib_defaultOptionsValues.maxBufferBehind !== Infinity);
      onMaxBufferBehindInput(lib_defaultOptionsValues.maxBufferBehind);
    },
    value: String.fromCharCode(0xf021)
  }))), /*#__PURE__*/react.createElement(CheckBox, {
    className: "playerOptionsCheckBox",
    ariaLabel: "Do not limit max buffer behind option",
    name: "maxBufferBehindLimit",
    checked: isMaxBufferBehindLimited === false,
    onChange: onChangeLimitMaxBufferBehind
  }, "Do not limit")));
}
/* harmony default export */ const Options_BufferOptions = (/*#__PURE__*/react.memo(BufferOptions));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/Settings.jsx
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function Settings_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; Settings_setPrototypeOf(subClass, superClass); }
function Settings_setPrototypeOf(o, p) { Settings_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Settings_setPrototypeOf(o, p); }










var Settings = /*#__PURE__*/function (_React$Component) {
  Settings_inheritsLoose(Settings, _React$Component);
  function Settings() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.onAutoPlayClick = function (evt) {
      return _this.setState({
        autoPlay: getCheckboxValue(evt.target)
      });
    };
    _this.onManualBrSwitchingModeChange = function (value) {
      return _this.setState({
        manualBrSwitchingMode: value
      });
    };
    _this.onInitialVideoBrInput = function (value) {
      return _this.setState({
        initialVideoBr: value
      });
    };
    _this.onInitialAudioBrInput = function (value) {
      return _this.setState({
        initialAudioBr: value
      });
    };
    _this.onMinVideoBrInput = function (value) {
      return _this.setState({
        minVideoBr: value
      });
    };
    _this.onMinAudioBrInput = function (value) {
      return _this.setState({
        minAudioBr: value
      });
    };
    _this.onMaxVideoBrInput = function (value) {
      return _this.setState({
        maxVideoBr: value
      });
    };
    _this.onMaxAudioBrInput = function (value) {
      return _this.setState({
        maxAudioBr: value
      });
    };
    _this.onLimitVideoWidthClick = function (evt) {
      return _this.setState({
        limitVideoWidth: getCheckboxValue(evt.target)
      });
    };
    _this.onThrottleVideoBitrateWhenHiddenClick = function (evt) {
      return _this.setState({
        throttleVideoBitrateWhenHidden: getCheckboxValue(evt.target)
      });
    };
    _this.onStopAtEndClick = function (evt) {
      return _this.setState({
        stopAtEnd: getCheckboxValue(evt.target)
      });
    };
    _this.onSegmentRetryInput = function (value) {
      return _this.setState({
        segmentRetry: value
      });
    };
    _this.onManifestRetryInput = function (value) {
      return _this.setState({
        manifestRetry: value
      });
    };
    _this.onOfflineRetryInput = function (value) {
      return _this.setState({
        offlineRetry: value
      });
    };
    _this.onEnableFastSwitchingClick = function (evt) {
      return _this.setState({
        enableFastSwitching: getCheckboxValue(evt.target)
      });
    };
    _this.onAudioTrackSwitchingModeChange = function (value) {
      return _this.setState({
        audioTrackSwitchingMode: value
      });
    };
    _this.onCodecSwitchChange = function (value) {
      return _this.setState({
        onCodecSwitch: value
      });
    };
    _this.onWantedBufferAheadInput = function (value) {
      return _this.setState({
        wantedBufferAhead: value
      });
    };
    _this.onMaxVideoBufferSizeInput = function (value) {
      return _this.setState({
        maxVideoBufferSize: value
      });
    };
    _this.onMaxBufferBehindInput = function (value) {
      return _this.setState({
        maxBufferBehind: value
      });
    };
    _this.onMaxBufferAheadInput = function (value) {
      return _this.setState({
        maxBufferAhead: value
      });
    };
    _this.state = _extends({}, lib_defaultOptionsValues);
    return _this;
  }
  var _proto = Settings.prototype;
  _proto.getOptions = function getOptions() {
    var _this$state = this.state,
      initialVideoBr = _this$state.initialVideoBr,
      initialAudioBr = _this$state.initialAudioBr,
      minVideoBr = _this$state.minVideoBr,
      minAudioBr = _this$state.minAudioBr,
      maxVideoBr = _this$state.maxVideoBr,
      maxAudioBr = _this$state.maxAudioBr,
      wantedBufferAhead = _this$state.wantedBufferAhead,
      maxVideoBufferSize = _this$state.maxVideoBufferSize,
      maxBufferAhead = _this$state.maxBufferAhead,
      maxBufferBehind = _this$state.maxBufferBehind,
      limitVideoWidth = _this$state.limitVideoWidth,
      throttleVideoBitrateWhenHidden = _this$state.throttleVideoBitrateWhenHidden,
      stopAtEnd = _this$state.stopAtEnd,
      autoPlay = _this$state.autoPlay,
      audioTrackSwitchingMode = _this$state.audioTrackSwitchingMode,
      manualBrSwitchingMode = _this$state.manualBrSwitchingMode,
      onCodecSwitch = _this$state.onCodecSwitch,
      enableFastSwitching = _this$state.enableFastSwitching,
      segmentRetry = _this$state.segmentRetry,
      manifestRetry = _this$state.manifestRetry,
      offlineRetry = _this$state.offlineRetry;
    return {
      initOpts: {
        initialVideoBitrate: parseFloat(initialVideoBr),
        initialAudioBitrate: parseFloat(initialAudioBr),
        minVideoBitrate: parseFloat(minVideoBr),
        minAudioBitrate: parseFloat(minAudioBr),
        maxVideoBitrate: parseFloat(maxVideoBr),
        maxAudioBitrate: parseFloat(maxAudioBr),
        wantedBufferAhead: parseFloat(wantedBufferAhead),
        maxVideoBufferSize: parseFloat(maxVideoBufferSize),
        maxBufferAhead: parseFloat(maxBufferAhead),
        maxBufferBehind: parseFloat(maxBufferBehind),
        limitVideoWidth: limitVideoWidth,
        throttleVideoBitrateWhenHidden: throttleVideoBitrateWhenHidden,
        stopAtEnd: stopAtEnd
      },
      loadVideoOpts: {
        autoPlay: autoPlay,
        audioTrackSwitchingMode: audioTrackSwitchingMode,
        manualBitrateSwitchingMode: manualBrSwitchingMode,
        onCodecSwitch: onCodecSwitch,
        enableFastSwitching: enableFastSwitching,
        networkConfig: {
          segmentRetry: parseFloat(segmentRetry),
          manifestRetry: parseFloat(manifestRetry),
          offlineRetry: parseFloat(offlineRetry)
        }
      }
    };
  };
  _proto.render = function render() {
    var _this$state2 = this.state,
      autoPlay = _this$state2.autoPlay,
      manualBrSwitchingMode = _this$state2.manualBrSwitchingMode,
      initialVideoBr = _this$state2.initialVideoBr,
      initialAudioBr = _this$state2.initialAudioBr,
      minVideoBr = _this$state2.minVideoBr,
      minAudioBr = _this$state2.minAudioBr,
      maxVideoBr = _this$state2.maxVideoBr,
      maxAudioBr = _this$state2.maxAudioBr,
      limitVideoWidth = _this$state2.limitVideoWidth,
      throttleVideoBitrateWhenHidden = _this$state2.throttleVideoBitrateWhenHidden,
      stopAtEnd = _this$state2.stopAtEnd,
      segmentRetry = _this$state2.segmentRetry,
      manifestRetry = _this$state2.manifestRetry,
      offlineRetry = _this$state2.offlineRetry,
      enableFastSwitching = _this$state2.enableFastSwitching,
      audioTrackSwitchingMode = _this$state2.audioTrackSwitchingMode,
      onCodecSwitch = _this$state2.onCodecSwitch,
      wantedBufferAhead = _this$state2.wantedBufferAhead,
      maxVideoBufferSize = _this$state2.maxVideoBufferSize,
      maxBufferAhead = _this$state2.maxBufferAhead,
      maxBufferBehind = _this$state2.maxBufferBehind;
    var initialSettings = {
      initialVideoBr: initialVideoBr,
      initialAudioBr: initialAudioBr,
      minAudioBr: minAudioBr,
      minVideoBr: minVideoBr,
      maxVideoBr: maxVideoBr,
      maxAudioBr: maxAudioBr,
      limitVideoWidth: limitVideoWidth,
      throttleVideoBitrateWhenHidden: throttleVideoBitrateWhenHidden,
      onInitialVideoBrInput: this.onInitialVideoBrInput,
      onInitialAudioBrInput: this.onInitialAudioBrInput,
      onMinAudioBrInput: this.onMinAudioBrInput,
      onMinVideoBrInput: this.onMinVideoBrInput,
      onMaxAudioBrInput: this.onMaxAudioBrInput,
      onMaxVideoBrInput: this.onMaxVideoBrInput,
      onLimitVideoWidthClick: this.onLimitVideoWidthClick,
      onThrottleVideoBitrateWhenHiddenClick: this.onThrottleVideoBitrateWhenHiddenClick
    };
    var networkConfig = {
      segmentRetry: segmentRetry,
      manifestRetry: manifestRetry,
      offlineRetry: offlineRetry,
      onSegmentRetryInput: this.onSegmentRetryInput,
      onManifestRetryInput: this.onManifestRetryInput,
      onOfflineRetryInput: this.onOfflineRetryInput
    };
    var trackSwitchModeConfig = {
      enableFastSwitching: enableFastSwitching,
      audioTrackSwitchingMode: audioTrackSwitchingMode,
      onCodecSwitch: onCodecSwitch,
      onEnableFastSwitchingClick: this.onEnableFastSwitchingClick,
      onAudioTrackSwitchingModeChange: this.onAudioTrackSwitchingModeChange,
      onCodecSwitchChange: this.onCodecSwitchChange
    };
    if (!this.props.showOptions) {
      return null;
    }
    return /*#__PURE__*/react.createElement("div", {
      className: "settingsWrapper"
    }, /*#__PURE__*/react.createElement("div", {
      style: {
        display: "flex"
      }
    }, /*#__PURE__*/react.createElement(Options_Option, {
      title: "Playback"
    }, /*#__PURE__*/react.createElement(Playback, {
      autoPlay: autoPlay,
      manualBrSwitchingMode: manualBrSwitchingMode,
      onAutoPlayClick: this.onAutoPlayClick,
      onManualBrSwitchingModeChange: this.onManualBrSwitchingModeChange,
      stopAtEnd: stopAtEnd,
      onStopAtEndClick: this.onStopAtEndClick
    })), /*#__PURE__*/react.createElement(Options_Option, {
      title: "Video adaptive settings"
    }, /*#__PURE__*/react.createElement(Options_VideoAdaptiveSettings, initialSettings)), /*#__PURE__*/react.createElement(Options_Option, {
      title: "Audio adaptive settings"
    }, /*#__PURE__*/react.createElement(Options_AudioAdaptiveSettings, initialSettings))), /*#__PURE__*/react.createElement("div", {
      style: {
        display: "flex"
      }
    }, /*#__PURE__*/react.createElement(Options_Option, {
      title: "Network Config"
    }, /*#__PURE__*/react.createElement(Options_NetworkConfig, networkConfig)), /*#__PURE__*/react.createElement(Options_Option, {
      title: "Track Switch Mode"
    }, /*#__PURE__*/react.createElement(Options_TrackSwitch, trackSwitchModeConfig)), /*#__PURE__*/react.createElement(Options_Option, {
      title: "Buffer Options"
    }, /*#__PURE__*/react.createElement(Options_BufferOptions, {
      wantedBufferAhead: wantedBufferAhead,
      maxVideoBufferSize: maxVideoBufferSize,
      maxBufferAhead: maxBufferAhead,
      maxBufferBehind: maxBufferBehind,
      onWantedBufferAheadInput: this.onWantedBufferAheadInput,
      onMaxBufferAheadInput: this.onMaxBufferAheadInput,
      onMaxBufferBehindInput: this.onMaxBufferBehindInput,
      onMaxVideoBufferSizeInput: this.onMaxVideoBufferSizeInput
    }))));
  };
  return Settings;
}(react.Component);
/* harmony default export */ const controllers_Settings = (Settings);
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/ErrorDisplayer.jsx


var PlayerError = function PlayerError(_ref) {
  var error = _ref.error;
  var message = error && error.message ? error.message : error;
  return /*#__PURE__*/react.createElement("span", {
    className: "fatal-error"
  }, /*#__PURE__*/react.createElement("span", {
    className: "error-icon icon"
  }, String.fromCharCode(0xf071)), /*#__PURE__*/react.createElement("span", {
    className: "error-intro"
  }, "The Player encountered a fatal Error:"), /*#__PURE__*/react.createElement("span", {
    className: "error-message"
  }, message));
};
var ErrorDisplayer = function ErrorDisplayer(_ref2) {
  var error = _ref2.error;
  return /*#__PURE__*/react.createElement("div", {
    className: "player-error"
  }, error ? /*#__PURE__*/react.createElement(PlayerError, {
    error: error
  }) : null);
};
/* harmony default export */ const controllers_ErrorDisplayer = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    error: "error"
  }
})(ErrorDisplayer)));
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/skip.js

function skip(count) {
  return filter(function (_, index) {
    return count <= index;
  });
}
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/LogDisplayer.jsx
function LogDisplayer_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; LogDisplayer_setPrototypeOf(subClass, superClass); }
function LogDisplayer_setPrototypeOf(o, p) { LogDisplayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return LogDisplayer_setPrototypeOf(o, p); }



var LogElement = function LogElement(_ref) {
  var text = _ref.text,
    date = _ref.date;
  return /*#__PURE__*/react.createElement("div", {
    className: "player-log-item"
  }, date.toISOString() + " - " + text);
};
var LogDisplayer = /*#__PURE__*/function (_React$Component) {
  LogDisplayer_inheritsLoose(LogDisplayer, _React$Component);
  function LogDisplayer() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      logs: []
    };

    // A weird React behavior obligates me to mutate a this._logs array instead
    // of calling setState directly to allow multiple setState in a row before
    // rendering.
    // The case seen was that this.state.logs would not change right after
    // setState, so the last addLog call would be the only one really considered
    _this._logs = [];

    // Only scroll to bottom if already scrolled to bottom
    _this.hasScrolledToBottom = true;
    return _this;
  }
  var _proto = LogDisplayer.prototype;
  _proto.addLog = function addLog(text) {
    this._logs = [].concat(this._logs, [{
      text: text,
      date: new Date()
    }]);
    this.setState({
      logs: this._logs.slice()
    });
  };
  _proto.resetLogs = function resetLogs() {
    this._logs = [];
    this.setState({
      logs: []
    });
  };
  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;
    this.destructionSubject = new Subject();
    var player = this.props.player;
    player.$get("videoBitrateAuto").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function (vbAuto) {
      var text = "Video Bitrate selection changed to " + (vbAuto ? "automatic" : "manual");
      _this2.addLog(text);
    });
    player.$get("audioBitrateAuto").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function (abAuto) {
      var text = "Audio Bitrate selection changed to " + (abAuto ? "automatic" : "manual");
      _this2.addLog(text);
    });
    player.$get("videoBitrate").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function (vb) {
      var text = "Video Bitrate changed to " + vb;
      _this2.addLog(text);
    });
    player.$get("audioBitrate").pipe(takeUntil(this.destructionSubject), skip(1) // skip initial value
    ).subscribe(function (ab) {
      var text = "Audio Bitrate changed to " + ab;
      _this2.addLog(text);
    });
    player.$get("error").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject), filter(function (x) {
      return x;
    })).subscribe(function (error) {
      var message = error.message ? error.message : error;
      var text = "The player encountered a fatal Error: " + message;
      _this2.addLog(text);
    });
    player.$get("isLoading").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject), filter(function (x) {
      return x;
    })).subscribe(function () {
      var text = "A new content is Loading.";
      _this2.addLog(text);
    });
    player.$get("hasCurrentContent").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject), filter(function (x) {
      return x;
    })).subscribe(function () {
      var text = "The new content has been loaded.";
      _this2.addLog(text);
    });
    player.$get("isStopped").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject), filter(function (x) {
      return x;
    })).subscribe(function () {
      var text = "The current content is stopped";
      _this2.addLog(text);
    });
    player.$get("hasEnded").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject), filter(function (x) {
      return x;
    })).subscribe(function () {
      var text = "The current content has ended";
      _this2.addLog(text);
    });
    player.$get("isBuffering").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function (ib) {
      var text = ib ? "The current content is buffering" : "The current content is not buffering anymore";
      _this2.addLog(text);
    });
    player.$get("isSeeking").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function (ib) {
      var text = ib ? "The current content is seeking" : "The current content is not seeking anymore";
      _this2.addLog(text);
    });
    player.$get("availableLanguages").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function () {
      var text = "The audio track list has changed";
      _this2.addLog(text);
    });
    player.$get("availableSubtitles").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function () {
      var text = "The text track list has changed";
      _this2.addLog(text);
    });
    player.$get("availableVideoTracks").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function () {
      var text = "The video track list has changed";
      _this2.addLog(text);
    });
    player.$get("availableAudioBitrates").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function () {
      var text = "The audio bitrate list has changed";
      _this2.addLog(text);
    });
    player.$get("availableVideoBitrates").pipe(skip(1),
    // skip initial value
    takeUntil(this.destructionSubject)).subscribe(function () {
      var text = "The video bitrate list has changed";
      _this2.addLog(text);
    });
    this.scrollToBottom();
    var onScroll = function onScroll() {
      if (_this2.element.scrollHeight - _this2.element.offsetHeight === _this2.element.scrollTop) {
        _this2.hasScrolledToBottom = true;
      } else {
        _this2.hasScrolledToBottom = false;
      }
    };
    this.element.addEventListener("scroll", onScroll, {
      passive: true
    });
    this.destructionSubject.subscribe(function () {
      return _this2.element.removeEventListener("scroll", onScroll);
    });
  };
  _proto.scrollToBottom = function scrollToBottom() {
    if (this.hasScrolledToBottom) {
      this.element.scrollTop = this.element.scrollHeight;
    }
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    this.scrollToBottom();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.destructionSubject.next();
    this.destructionSubject.complete();
  };
  _proto.render = function render() {
    var _this3 = this;
    var logs = this.state.logs;
    var logTexts = logs.map(function (_ref2, i) {
      var text = _ref2.text,
        date = _ref2.date;
      return /*#__PURE__*/react.createElement(LogElement, {
        key: i,
        text: text,
        date: date
      });
    });
    var clearLogs = function clearLogs() {
      return _this3.resetLogs();
    };
    return /*#__PURE__*/react.createElement("div", {
      className: "player-logs-wrapper"
    }, /*#__PURE__*/react.createElement("div", {
      className: "player-logs-wrapper-title"
    }, "Logs"), /*#__PURE__*/react.createElement("div", {
      className: "player-logs",
      ref: function ref(el) {
        return _this3.element = el;
      }
    }, /*#__PURE__*/react.createElement(components_Button, {
      ariaLabel: "Clear all logs",
      className: "player-logs-wrapper-trash",
      onClick: clearLogs,
      value: String.fromCharCode(0xf05e)
    }), logTexts));
  };
  return LogDisplayer;
}(react.Component);
/* harmony default export */ const controllers_LogDisplayer = (/*#__PURE__*/react.memo(LogDisplayer));
;// CONCATENATED MODULE: ./demo/full/scripts/modules/ChartData.js
/* harmony default export */ const ChartData = (function (_ref, _ref2) {
  var state = _ref.state;
  var maxSize = _ref2.maxSize;
  var data = [];
  state.set({
    data: data.slice()
  });
  return {
    ADD_DATA: function ADD_DATA(val) {
      if (data.length >= maxSize) {
        data.splice(0, data.length + 1 - maxSize);
      }
      data.push({
        date: performance.now(),
        value: val
      });
      state.set({
        data: data.slice()
      });
    },
    REMOVE_DATA: function REMOVE_DATA(number) {
      if (number === void 0) {
        number = 1;
      }
      data.splice(0, number);
      state.set({
        data: data.slice()
      });
    }
  };
});
;// CONCATENATED MODULE: ./demo/full/scripts/lib/capitalizeFirstLetter.js
/**
 * @param {string} str
 * @returns {string}
 */
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
;// CONCATENATED MODULE: ./demo/full/scripts/lib/shuffleArray.js
/**
 * Shuffle members of an array into a random order.
 * @param {Array.<*>} arr
 * @returns {Array.<*>}
 */
function shuffleArray(arr) {
  var clonedArr = arr.slice();
  var currentIndex = arr.length;
  while (0 !== currentIndex) {
    // Pick a remaining element...
    var randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    var temporaryValue = clonedArr[currentIndex];
    clonedArr[currentIndex] = clonedArr[randomIndex];
    clonedArr[randomIndex] = temporaryValue;
  }
  return clonedArr;
}
;// CONCATENATED MODULE: ./demo/full/scripts/components/BufferContentGraph.jsx




var CANVAS_WIDTH = 1000;
var CANVAS_HEIGHT = 1;
var COLORS = [
// "#fe4a49",
"#2ab7ca", "#fed766", "#4dd248", "#a22c28", "#556b2f",
// darkolivegreen
"#add8e6",
// lightblue
"#90ee90",
// lightgreen
"#444444", "#40bfc1", "#57557e", "#fbe555"
// "#f0134d",
];

var COLOR_CURRENT_POSITION = "#FF2323";

/**
 * Clear the whole canvas.
 * @param {Object} canvasContext
 * @param {number} width
 * @param {number} height
 */
function clearCanvas(canvasContext) {
  canvasContext.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
}

/**
 * Represent the current position in the canvas.
 * @param {number|undefined} position - The current position
 * @param {number} minimumPosition - minimum possible position represented in
 * the canvas.
 * @param {number} maximumPosition - maximum possible position represented in
 * the canvas.
 * @param {Object} canvasCtx - The canvas' 2D context
 */
function paintCurrentPosition(position, minimumPosition, maximumPosition, canvasCtx) {
  if (typeof position === "number" && position >= minimumPosition && position < maximumPosition) {
    var lengthCanvas = maximumPosition - minimumPosition;
    canvasCtx.fillStyle = COLOR_CURRENT_POSITION;
    canvasCtx.fillRect(Math.ceil((position - minimumPosition) / lengthCanvas * CANVAS_WIDTH) - 1, 0, 2, CANVAS_HEIGHT);
  }
}

/**
 * Scale given bufferedData in terms of percentage between the minimum and
 * maximum position. Filter out segment which are not part of it.
 * @param {Array.<Object>} bufferedData
 * @param {number} minimumPosition
 * @param {number} maximumPosition
 * @returns {Array.<Object>}
 */
function scaleSegments(bufferedData, minimumPosition, maximumPosition) {
  var scaledSegments = [];
  var wholeDuration = maximumPosition - minimumPosition;
  for (var i = 0; i < bufferedData.length; i++) {
    var bufferedInfos = bufferedData[i];
    var start = bufferedInfos.bufferedStart === undefined ? bufferedInfos.start : bufferedInfos.bufferedStart;
    var end = bufferedInfos.bufferedEnd === undefined ? bufferedInfos.end : bufferedInfos.bufferedEnd;
    if (end > minimumPosition && start < maximumPosition) {
      var startPoint = Math.max(start - minimumPosition, 0);
      var endPoint = Math.min(end - minimumPosition, maximumPosition);
      var scaledStart = startPoint / wholeDuration;
      var scaledEnd = endPoint / wholeDuration;
      scaledSegments.push({
        scaledStart: scaledStart,
        scaledEnd: scaledEnd,
        bufferedInfos: bufferedInfos
      });
    }
  }
  return scaledSegments;
}

/**
 * Display a graph representing what has been buffered according to the data
 * given.
 * Allow to seek on click, display the current time, and display a tooltip
 * describing the buffered data when hovering represented data.
 * @param {Object}
 */
function BufferContentGraph(_ref) {
  var currentTime = _ref.currentTime,
    data = _ref.data,
    maximumPosition = _ref.maximumPosition,
    minimumPosition = _ref.minimumPosition,
    seek = _ref.seek,
    type = _ref.type;
  var _useState = (0,react.useState)(shuffleArray(COLORS)),
    randomColors = _useState[0];
  var _useState2 = (0,react.useState)(false),
    tipVisible = _useState2[0],
    setTipVisible = _useState2[1];
  var _useState3 = (0,react.useState)(0),
    tipPosition = _useState3[0],
    setTipPosition = _useState3[1];
  var _useState4 = (0,react.useState)(""),
    tipText = _useState4[0],
    setTipText = _useState4[1];
  var canvasEl = (0,react.useRef)(null);
  var representationsEncountered = (0,react.useRef)([]);
  var duration = Math.max(maximumPosition - minimumPosition, 0);

  /**
   * Paint a given segment in the canvas
   * @param {Object} scaledSegment - Buffered segment information with added
   * "scaling" information to know where it fits in the canvas.
   * @param {Object} canvasCtx - The canvas' 2D context
   */
  function paintSegment(scaledSegment, canvasCtx) {
    var representation = scaledSegment.bufferedInfos.infos.representation;
    var indexOfRepr = representationsEncountered.current.indexOf(representation);
    if (indexOfRepr < 0) {
      representationsEncountered.current.push(representation);
      indexOfRepr = representationsEncountered.current.length - 1;
    }
    var colorIndex = indexOfRepr % COLORS.length;
    var color = randomColors[colorIndex];
    var startX = scaledSegment.scaledStart * CANVAS_WIDTH;
    var endX = scaledSegment.scaledEnd * CANVAS_WIDTH;
    canvasCtx.fillStyle = color;
    canvasCtx.fillRect(Math.ceil(startX), 0, Math.ceil(endX - startX), CANVAS_HEIGHT);
  }
  var currentSegmentsScaled = (0,react.useMemo)(function () {
    return scaleSegments(data, minimumPosition, maximumPosition);
  }, [data, minimumPosition, maximumPosition]);
  (0,react.useEffect)(function () {
    if (canvasEl === null || canvasEl === undefined) {
      return;
    }
    var ctx = canvasEl.current.getContext("2d");
    if (ctx === null) {
      return;
    }
    canvasEl.current.width = CANVAS_WIDTH;
    canvasEl.current.height = CANVAS_HEIGHT;
    clearCanvas(ctx);
    if (minimumPosition === undefined || maximumPosition === undefined || minimumPosition >= maximumPosition) {
      return;
    }
    for (var i = 0; i < currentSegmentsScaled.length; i++) {
      paintSegment(currentSegmentsScaled[i], ctx);
    }
    paintCurrentPosition(currentTime, minimumPosition, maximumPosition, ctx);
  }, [minimumPosition, maximumPosition, data]);
  var getMousePositionInPercentage = function getMousePositionInPercentage(event) {
    if (canvasEl === null || canvasEl === undefined) {
      return;
    }
    var rect = canvasEl.current.getBoundingClientRect();
    var point0 = rect.left;
    var clickPosPx = Math.max(event.clientX - point0, 0);
    var endPointPx = Math.max(rect.right - point0, 0);
    if (!endPointPx) {
      return 0;
    }
    return clickPosPx / endPointPx;
  };
  var getMousePosition = function getMousePosition(event) {
    var mousePercent = getMousePositionInPercentage(event);
    return mousePercent === undefined ? undefined : mousePercent * duration + minimumPosition;
  };
  var toolTipOffset = canvasEl !== null && canvasEl.current !== null ? canvasEl.current.getBoundingClientRect().left : 0;
  var onMouseMove = function onMouseMove(event) {
    var mousePercent = getMousePositionInPercentage(event);
    for (var i = 0; i < currentSegmentsScaled.length; i++) {
      var scaledSegment = currentSegmentsScaled[i];
      if (mousePercent >= scaledSegment.scaledStart && mousePercent < scaledSegment.scaledEnd) {
        var _scaledSegment$buffer = scaledSegment.bufferedInfos,
          start = _scaledSegment$buffer.start,
          end = _scaledSegment$buffer.end;
        var _scaledSegment$buffer2 = scaledSegment.bufferedInfos.infos,
          adaptation = _scaledSegment$buffer2.adaptation,
          representation = _scaledSegment$buffer2.representation;
        setTipVisible(true);
        setTipPosition(event.clientX);
        var newTipText = "";
        switch (adaptation.type) {
          case "video":
            newTipText += "width: " + representation.width + "\n" + ("height: " + representation.height) + "\n" + ("codec: " + representation.codec) + "\n" + ("bitrate: " + representation.bitrate) + "\n";
            break;
          case "audio":
            newTipText += "language: " + adaptation.language + "\n" + ("audioDescription: " + !!adaptation.isAudioDescription) + "\n" + ("codec: " + representation.codec) + "\n" + ("bitrate: " + representation.bitrate) + "\n";
            break;
          case "text":
            newTipText += "language: " + adaptation.language + "\n" + ("closedCaption: " + !!adaptation.isClosedCaption) + "\n";
            break;
        }
        newTipText += "segment: [" + start.toFixed(1) + ", " + end.toFixed(1) + "]";
        setTipText(newTipText);
        return;
      }
    }
    hideTip(); // if none found
  };

  var hideTip = function hideTip() {
    setTipVisible(false);
    setTipPosition(0);
    setTipText("");
  };
  return /*#__PURE__*/react.createElement("div", {
    className: "container-buffer-graph"
  }, /*#__PURE__*/react.createElement("div", {
    className: "buffer-graph-title"
  }, capitalizeFirstLetter(type) + " Buffer"), /*#__PURE__*/react.createElement("div", {
    className: "canvas-buffer-graph-container",
    onMouseLeave: hideTip,
    onMouseMove: onMouseMove
  }, tipVisible ? /*#__PURE__*/react.createElement(components_ToolTip, {
    className: "buffer-content-tip",
    text: tipText,
    xPosition: tipPosition,
    offset: toolTipOffset
  }) : null, /*#__PURE__*/react.createElement("canvas", {
    onClick: function onClick(event) {
      return seek(getMousePosition(event));
    },
    height: String(CANVAS_HEIGHT),
    width: String(CANVAS_WIDTH),
    className: "canvas-buffer-graph",
    ref: canvasEl
  })));
}
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/charts/BufferContent.jsx



function BufferContentChart(_ref) {
  var player = _ref.player,
    bufferedData = _ref.bufferedData,
    currentTime = _ref.currentTime,
    maximumPosition = _ref.maximumPosition,
    minimumPosition = _ref.minimumPosition;
  if (bufferedData === null || Object.keys(bufferedData).length === 0) {
    return /*#__PURE__*/react.createElement("div", {
      className: "buffer-content-no-content"
    }, " No content yet ");
  }
  var seek = function seek(position) {
    player.dispatch("SEEK", position);
  };
  var subCharts = Object.keys(bufferedData).filter(function (type) {
    return bufferedData[type] !== null;
  }).map(function (type) {
    return /*#__PURE__*/react.createElement(BufferContentGraph, {
      key: type,
      type: type,
      currentTime: currentTime,
      minimumPosition: minimumPosition,
      maximumPosition: maximumPosition,
      data: bufferedData[type],
      seek: seek
    });
  });
  if (subCharts.length === 0) {
    return /*#__PURE__*/react.createElement("div", {
      className: "buffer-content-no-content"
    }, " No content yet ");
  }
  return /*#__PURE__*/react.createElement("div", {
    className: "buffer-content-graphs-parent"
  }, subCharts);
}
/* harmony default export */ const BufferContent = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    bufferedData: "bufferedData",
    currentTime: "currentTime",
    minimumPosition: "minimumPosition",
    maximumPosition: "maximumPosition"
  }
})(BufferContentChart)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/charts/BufferSize.jsx


/**
 * Margin on the bottom of the canvas.
 * No line will be drawn below it.
 */
var HEIGHT_MARGIN_BOTTOM = 5;

/**
 * Margin on the top of the canvas.
 * No line will be drawn above it.
 */
var HEIGHT_MARGIN_TOP = 20;

/**
 * "Drawable" height of the canvas.
 * The drawable height is basically the full height minus height margins.
 */
var DRAWABLE_HEIGHT = 400;

/**
 * "Drawable" with of the canvas.
 * The drawable width is basically the full width minus potential width
 * margins.
 */
var DRAWABLE_WIDTH = 960;

/**
 * Maximum history of the buffer size that will be displayed, in milliseconds.
 * For example, a value of `3000` indicates that we will just show at most the
 * buffer size evolution during the last 3 seconds.
 */
var TIME_SAMPLES_MS = 30000;

/** Full width of the canvas. */
var BufferSize_CANVAS_WIDTH = DRAWABLE_WIDTH;

/** Full height of the canvas. */
var BufferSize_CANVAS_HEIGHT = DRAWABLE_HEIGHT + HEIGHT_MARGIN_TOP + HEIGHT_MARGIN_BOTTOM;

/**
 * At minimum, that value will be taken in the chart as a maximum buffer size,
 * in seconds.
 * If samples go higher than this size, the chart will adapt automatically to
 * a higher scale.
 * However if values go below that value, the chart won't scale down more than
 * this.
 */
var MINIMUM_MAX_BUFFER_SIZE = 20;

/** Number of grid lines that will be represented on the canvas. */
var NUMBER_GRID_LINES_HEIGHT = 10;

/**
 * Display a chart showing the evolution of the buffer size over time.
 * @param {Object} props
 * @returns {Object}
 */
function BufferSizeChart(_ref) {
  var module = _ref.module;
  var canvasEl = (0,react.useRef)(null);
  var canvasCtx;
  var currentMaxSize = MINIMUM_MAX_BUFFER_SIZE;
  (0,react.useEffect)(function () {
    if (!canvasEl.current) {
      return;
    }
    canvasCtx = canvasEl.current.getContext("2d");
  }, []);
  (0,react.useEffect)(function () {
    var subscription = module.$get("data").subscribe(function (data) {
      if (data.length > 0) {
        var lastDate = data.length === 0 ? null : data[data.length - 1].date;
        var minimumTime = lastDate - TIME_SAMPLES_MS;
        var i;
        for (i = data.length - 1; i >= 1; i--) {
          if (data[i].date <= minimumTime) {
            break;
          }
        }
        var consideredData = data.slice(i);
        onNewData(consideredData);
      } else {
        onNewData([]);
      }
    });
    return function cleanUpSubscription() {
      subscription.unsubscribe();
    };
  }, [module]);
  return /*#__PURE__*/react.createElement("div", {
    className: "canvas-buffer-size-container"
  }, /*#__PURE__*/react.createElement("canvas", {
    className: "canvas-buffer-size",
    ref: canvasEl,
    width: BufferSize_CANVAS_WIDTH,
    height: BufferSize_CANVAS_HEIGHT
  }));
  function onNewData(data) {
    clearAndResizeCanvas(canvasCtx);
    if (data.length === 0) {
      return;
    }
    currentMaxSize = getNewMaxBufferSize();
    var minDate = data[0].date;
    var gridHeight = DRAWABLE_HEIGHT / currentMaxSize;
    var gridWidth = DRAWABLE_WIDTH / TIME_SAMPLES_MS;
    drawData();
    drawGrid();

    /**
     * Get more appropriate maximum buffer size to put on top of the graph
     * according to current data.
     */
    function getNewMaxBufferSize() {
      var maxPoint = Math.max.apply(Math, data.map(function (d) {
        return d.value || 0;
      }));
      if (maxPoint >= currentMaxSize) {
        return maxPoint + 5;
      } else if (maxPoint < currentMaxSize - 5) {
        return Math.max(maxPoint + 5, MINIMUM_MAX_BUFFER_SIZE);
      }
      return currentMaxSize;
    }

    /**
     * Draw grid lines on canvas and their correspinding values.
     */
    function drawGrid() {
      canvasCtx.beginPath();
      canvasCtx.strokeStyle = "lightgrey";
      canvasCtx.lineWidth = 1;
      var stepHeight = DRAWABLE_HEIGHT / NUMBER_GRID_LINES_HEIGHT;
      var stepVal = currentMaxSize / NUMBER_GRID_LINES_HEIGHT;
      for (var i = 0; i <= NUMBER_GRID_LINES_HEIGHT; i++) {
        var height = stepHeight * i + HEIGHT_MARGIN_TOP;
        canvasCtx.moveTo(0, height);
        canvasCtx.font = "14px Arial";
        var currStepVal = (stepVal * (NUMBER_GRID_LINES_HEIGHT - i)).toFixed(1);
        canvasCtx.fillText(currStepVal + " s", 0, height - 5);
        canvasCtx.lineTo(BufferSize_CANVAS_WIDTH, height);
      }
      canvasCtx.stroke();
    }

    /**
     * Draw all data contained in `data` in the canvas given.
     */
    function drawData() {
      canvasCtx.beginPath();
      canvasCtx.strokeStyle = "rgb(200, 100, 200)";
      canvasCtx.lineWidth = 2;
      canvasCtx.moveTo(0, bufferValueToY(data[0].value));
      for (var i = 1; i < data.length; i++) {
        canvasCtx.lineTo(dateToX(data[i].date), bufferValueToY(data[i].value));
      }
      canvasCtx.stroke();
    }

    /**
     * Convert a value of a given data point, to a u coordinate in the canvas.
     * @param {number} bufferVal - Value to convert
     * @returns {number} - y coordinate
     */
    function bufferValueToY(bufferVal) {
      return HEIGHT_MARGIN_TOP + (currentMaxSize - bufferVal) * gridHeight;
    }

    /**
     * Convert a date of a given data point, to a x coordinate in the canvas.
     * @param {number} date - Date to convert, in milliseconds
     * @returns {number} - x coordinate
     */
    function dateToX(date) {
      return (date - minDate) * gridWidth;
    }
  }
}

/**
 * Clear the whole canvas.
 * @param {CanvasRenderingContext2D} canvasContext
 */
function clearAndResizeCanvas(canvasContext) {
  var canvasElt = canvasContext.canvas;
  canvasElt.width = BufferSize_CANVAS_WIDTH;
  canvasElt.height = BufferSize_CANVAS_HEIGHT;
  canvasContext.clearRect(0, 0, canvasElt.width, canvasElt.height);
}
/* harmony default export */ const BufferSize = (/*#__PURE__*/react.memo(BufferSizeChart));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/charts/index.jsx





var BUFFER_GAP_REFRESH_TIME = 500;
var MAX_BUFFER_SIZE_LENGTH = 2000;
function ChartsManager(_ref) {
  var player = _ref.player;
  var _useState = (0,react.useState)(false),
    displayBufferContentChart = _useState[0],
    updateDisplayBufferContentChart = _useState[1];
  var _useState2 = (0,react.useState)(false),
    displayBufferSizeChart = _useState2[0],
    updateDisplayBufferSizeChart = _useState2[1];
  var _useState3 = (0,react.useState)(null),
    bufferSizeChart = _useState3[0],
    updateBufferSizeChart = _useState3[1];
  (0,react.useEffect)(function () {
    if (!player) {
      return;
    }
    var newChartModule = createModule(ChartData, {
      maxSize: MAX_BUFFER_SIZE_LENGTH
    });
    newChartModule.dispatch("ADD_DATA", player.get("bufferGap"));
    var interval = setInterval(function () {
      newChartModule.dispatch("ADD_DATA", player.get("bufferGap"));
    }, BUFFER_GAP_REFRESH_TIME);
    updateBufferSizeChart(newChartModule);
    return function () {
      clearInterval(interval);
      newChartModule.destroy();
      updateBufferSizeChart(null);
    };
  }, [player]);
  var onBufferContentCheckBoxChange = function onBufferContentCheckBoxChange(e) {
    var target = e.target;
    var value = target.type === "checkbox" ? target.checked : target.value;
    updateDisplayBufferContentChart(value);
  };
  var onBufferSizeCheckBoxChange = function onBufferSizeCheckBoxChange(e) {
    var target = e.target;
    var value = target.type === "checkbox" ? target.checked : target.value;
    updateDisplayBufferSizeChart(value);
  };
  return /*#__PURE__*/react.createElement("div", {
    className: "player-charts"
  }, /*#__PURE__*/react.createElement("div", {
    className: "player-box"
  }, /*#__PURE__*/react.createElement("div", {
    className: "chart-checkbox"
  }, "Buffer content chart", /*#__PURE__*/react.createElement("label", {
    className: "switch"
  }, /*#__PURE__*/react.createElement("input", {
    name: "displayBufferContentChart",
    type: "checkbox",
    "aria-label": "Display/Hide chart about the buffer's content",
    checked: displayBufferContentChart,
    onChange: onBufferContentCheckBoxChange
  }), /*#__PURE__*/react.createElement("span", {
    className: "slider round"
  }))), displayBufferContentChart && player ? /*#__PURE__*/react.createElement(BufferContent, {
    player: player
  }) : null), /*#__PURE__*/react.createElement("div", {
    className: "player-box"
  }, /*#__PURE__*/react.createElement("div", {
    className: "chart-checkbox"
  }, "Buffer size chart", /*#__PURE__*/react.createElement("label", {
    className: "switch"
  }, /*#__PURE__*/react.createElement("input", {
    "aria-label": "Display/Hide chart about the buffer's size",
    name: "displayBufferSizeChart",
    type: "checkbox",
    checked: displayBufferSizeChart,
    onChange: onBufferSizeCheckBoxChange
  }), /*#__PURE__*/react.createElement("span", {
    className: "slider round"
  }))), displayBufferSizeChart && bufferSizeChart !== null ? /*#__PURE__*/react.createElement(BufferSize, {
    module: bufferSizeChart
  }) : null));
}
/* harmony default export */ const charts = (/*#__PURE__*/react.memo(ChartsManager));
;// CONCATENATED MODULE: ./demo/full/scripts/components/Knob.jsx


function Knob(_ref) {
  var ariaLabel = _ref.ariaLabel,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? "" : _ref$className,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? "" : _ref$name,
    onChange = _ref.onChange,
    _ref$options = _ref.options,
    options = _ref$options === void 0 ? [] : _ref$options,
    selected = _ref.selected,
    disabled = _ref.disabled;
  return /*#__PURE__*/react.createElement("div", {
    className: "knob " + className
  }, /*#__PURE__*/react.createElement("span", {
    className: "knob-name"
  }, name), /*#__PURE__*/react.createElement(components_Select, {
    ariaLabel: ariaLabel,
    className: "knob-value",
    onChange: onChange,
    options: options,
    selected: selected,
    disabled: disabled
  }));
}
/* harmony default export */ const components_Knob = (/*#__PURE__*/react.memo(Knob));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/knobs/AudioBitrate.jsx



var AudioBitrateKnobBase = function AudioBitrateKnobBase(_ref) {
  var player = _ref.player,
    className = _ref.className,
    audioBitrateAuto = _ref.audioBitrateAuto,
    audioBitrate = _ref.audioBitrate,
    _ref$availableAudioBi = _ref.availableAudioBitrates,
    availableAudioBitrates = _ref$availableAudioBi === void 0 ? [] : _ref$availableAudioBi;
  var options = [];
  var selectedIndex;
  if (!availableAudioBitrates.length) {
    options = ["Not available"];
    selectedIndex = 0;
  } else if (availableAudioBitrates.length > 1) {
    var autoValue = audioBitrateAuto ? "auto (" + audioBitrate + ")" : "auto";
    options = [autoValue].concat(availableAudioBitrates);
    selectedIndex = audioBitrateAuto ? 0 : availableAudioBitrates.indexOf(audioBitrate) + 1 || 0;
  } else {
    options = availableAudioBitrates;
    selectedIndex = 0;
  }
  var onAudioBitrateChange = function onAudioBitrateChange(_ref2) {
    var index = _ref2.index;
    if (index > 0) {
      var bitrate = availableAudioBitrates[index - 1];
      player.dispatch("SET_AUDIO_BITRATE", bitrate);
    } else {
      player.dispatch("SET_AUDIO_BITRATE");
    }
  };
  return /*#__PURE__*/react.createElement(components_Knob, {
    name: "Audio Bitrate",
    ariaLabel: "Update the audio bitrate",
    className: className,
    disabled: options.length < 2,
    onChange: onAudioBitrateChange,
    options: options,
    selected: {
      index: selectedIndex
    }
  });
};
/* harmony default export */ const AudioBitrate = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    audioBitrateAuto: "audioBitrateAuto",
    audioBitrate: "audioBitrate",
    availableAudioBitrates: "availableAudioBitrates"
  }
})(AudioBitrateKnobBase)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/knobs/VideoBitrate.jsx



var VideoBitrateKnobBase = function VideoBitrateKnobBase(_ref) {
  var player = _ref.player,
    className = _ref.className,
    videoBitrateAuto = _ref.videoBitrateAuto,
    videoBitrate = _ref.videoBitrate,
    _ref$availableVideoBi = _ref.availableVideoBitrates,
    availableVideoBitrates = _ref$availableVideoBi === void 0 ? [] : _ref$availableVideoBi;
  var options = [];
  var selectedIndex;
  if (!availableVideoBitrates.length) {
    options = ["Not available"];
    selectedIndex = 0;
  } else if (availableVideoBitrates.length > 1) {
    var autoValue = videoBitrateAuto ? "auto (" + videoBitrate + ")" : "auto";
    options = [autoValue].concat(availableVideoBitrates);
    selectedIndex = videoBitrateAuto ? 0 : availableVideoBitrates.indexOf(videoBitrate) + 1 || 0;
  } else {
    options = availableVideoBitrates;
    selectedIndex = 0;
  }
  var onVideoBitrateChange = function onVideoBitrateChange(_ref2) {
    var index = _ref2.index;
    if (index > 0) {
      var bitrate = availableVideoBitrates[index - 1];
      player.dispatch("SET_VIDEO_BITRATE", bitrate);
    } else {
      player.dispatch("SET_VIDEO_BITRATE");
    }
  };
  return /*#__PURE__*/react.createElement(components_Knob, {
    name: "Video Bitrate",
    ariaLabel: "Update the video bitrate",
    className: className,
    disabled: availableVideoBitrates.length < 2,
    onChange: onVideoBitrateChange,
    options: options,
    selected: {
      index: selectedIndex
    }
  });
};
/* harmony default export */ const VideoBitrate = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    videoBitrateAuto: "videoBitrateAuto",
    videoBitrate: "videoBitrate",
    availableVideoBitrates: "availableVideoBitrates"
  }
})(VideoBitrateKnobBase)));
;// CONCATENATED MODULE: ./demo/full/assets/languages.js
// Note: totally overkill
/* harmony default export */ const assets_languages = ({
  aaa: "Ghotuo",
  aab: "Alumu-Tesu",
  aac: "Ari",
  aad: "Amal",
  aae: "Arbëreshë Albanian",
  aaf: "Aranadan",
  aag: "Ambrak",
  aah: "Abu' Arapesh",
  aai: "Arifama-Miniafia",
  aak: "Ankave",
  aal: "Afade",
  aan: "Anambé",
  aao: "Algerian Saharan Arabic",
  aap: "Pará Arára",
  aaq: "Eastern Abnaki",
  aar: "Afar",
  aas: "Aasáx",
  aat: "Arvanitika Albanian",
  aau: "Abau",
  aaw: "Solong",
  aax: "Mandobo Atas",
  aaz: "Amarasi",
  aba: "Abé",
  abb: "Bankon",
  abc: "Ambala Ayta",
  abd: "Manide",
  abe: "Western Abnaki",
  abf: "Abai Sungai",
  abg: "Abaga",
  abh: "Tajiki Arabic",
  abi: "Abidji",
  abj: "Aka-Bea",
  abk: "Abkhazian",
  abl: "Lampung Nyo",
  abm: "Abanyom",
  abn: "Abua",
  abo: "Abon",
  abp: "Abellen Ayta",
  abq: "Abaza",
  abr: "Abron",
  abs: "Ambonese Malay",
  abt: "Ambulas",
  abu: "Abure",
  abv: "Baharna Arabic",
  abw: "Pal",
  abx: "Inabaknon",
  aby: "Aneme Wake",
  abz: "Abui",
  aca: "Achagua",
  acb: "Áncá",
  acd: "Gikyode",
  ace: "Achinese",
  acf: "Saint Lucian Creole French",
  ach: "Acoli",
  aci: "Aka-Cari",
  ack: "Aka-Kora",
  acl: "Akar-Bale",
  acm: "Mesopotamian Arabic",
  acn: "Achang",
  acp: "Eastern Acipa",
  acq: "Ta'izzi-Adeni Arabic",
  acr: "Achi",
  acs: "Acroá",
  act: "Achterhoeks",
  acu: "Achuar-Shiwiar",
  acv: "Achumawi",
  acw: "Hijazi Arabic",
  acx: "Omani Arabic",
  acy: "Cypriot Arabic",
  acz: "Acheron",
  ada: "Adangme",
  adb: "Adabe",
  add: "Dzodinka",
  ade: "Adele",
  adf: "Dhofari Arabic",
  adg: "Andegerebinha",
  adh: "Adhola",
  adi: "Adi",
  adj: "Adioukrou",
  adl: "Galo",
  adn: "Adang",
  ado: "Abu",
  adq: "Adangbe",
  adr: "Adonara",
  ads: "Adamorobe Sign Language",
  adt: "Adnyamathanha",
  adu: "Aduge",
  adw: "Amundava",
  adx: "Amdo Tibetan",
  ady: "Adyghe",
  adz: "Adzera",
  aea: "Areba",
  aeb: "Tunisian Arabic",
  aec: "Saidi Arabic",
  aed: "Argentine Sign Language",
  aee: "Northeast Pashai",
  aek: "Haeke",
  ael: "Ambele",
  aem: "Arem",
  aen: "Armenian Sign Language",
  aeq: "Aer",
  aer: "Eastern Arrernte",
  aes: "Alsea",
  aeu: "Akeu",
  aew: "Ambakich",
  aey: "Amele",
  aez: "Aeka",
  afb: "Gulf Arabic",
  afd: "Andai",
  afe: "Putukwam",
  afg: "Afghan Sign Language",
  afh: "Afrihili",
  afi: "Akrukay",
  afk: "Nanubae",
  afn: "Defaka",
  afo: "Eloyi",
  afp: "Tapei",
  afr: "Afrikaans",
  afs: "Afro-Seminole Creole",
  aft: "Afitti",
  afu: "Awutu",
  afz: "Obokuitai",
  aga: "Aguano",
  agb: "Legbo",
  agc: "Agatu",
  agd: "Agarabi",
  age: "Angal",
  agf: "Arguni",
  agg: "Angor",
  agh: "Ngelima",
  agi: "Agariya",
  agj: "Argobba",
  agk: "Isarog Agta",
  agl: "Fembe",
  agm: "Angaataha",
  agn: "Agutaynen",
  ago: "Tainae",
  agq: "Aghem",
  agr: "Aguaruna",
  ags: "Esimbi",
  agt: "Central Cagayan Agta",
  agu: "Aguacateco",
  agv: "Remontado Dumagat",
  agw: "Kahua",
  agx: "Aghul",
  agy: "Southern Alta",
  agz: "Mt. Iriga Agta",
  aha: "Ahanta",
  ahb: "Axamb",
  ahg: "Qimant",
  ahh: "Aghu",
  ahi: "Tiagbamrin Aizi",
  ahk: "Akha",
  ahl: "Igo",
  ahm: "Mobumrin Aizi",
  ahn: "Àhàn",
  aho: "Ahom",
  ahp: "Aproumu Aizi",
  ahr: "Ahirani",
  ahs: "Ashe",
  aht: "Ahtena",
  aia: "Arosi",
  aib: "Ainu (China)",
  aic: "Ainbai",
  aid: "Alngith",
  aie: "Amara",
  aif: "Agi",
  aig: "Antigua and Barbuda Creole English",
  aih: "Ai-Cham",
  aii: "Assyrian Neo-Aramaic",
  aij: "Lishanid Noshan",
  aik: "Ake",
  ail: "Aimele",
  aim: "Aimol",
  ain: "Ainu (Japan)",
  aio: "Aiton",
  aip: "Burumakok",
  aiq: "Aimaq",
  air: "Airoran",
  ais: "Nataoran Amis",
  ait: "Arikem",
  aiw: "Aari",
  aix: "Aighon",
  aiy: "Ali",
  aja: "Aja (Sudan)",
  ajg: "Aja (Benin)",
  aji: "Ajië",
  ajn: "Andajin",
  ajp: "South Levantine Arabic",
  ajt: "Judeo-Tunisian Arabic",
  aju: "Judeo-Moroccan Arabic",
  ajw: "Ajawa",
  ajz: "Amri Karbi",
  aka: "Akan",
  akb: "Batak Angkola",
  akc: "Mpur",
  akd: "Ukpet-Ehom",
  ake: "Akawaio",
  akf: "Akpa",
  akg: "Anakalangu",
  akh: "Angal Heneng",
  aki: "Aiome",
  akj: "Aka-Jeru",
  akk: "Akkadian",
  akl: "Aklanon",
  akm: "Aka-Bo",
  ako: "Akurio",
  akp: "Siwu",
  akq: "Ak",
  akr: "Araki",
  aks: "Akaselem",
  akt: "Akolet",
  aku: "Akum",
  akv: "Akhvakh",
  akw: "Akwa",
  akx: "Aka-Kede",
  aky: "Aka-Kol",
  akz: "Alabama",
  ala: "Alago",
  alc: "Qawasqar",
  ald: "Alladian",
  ale: "Aleut",
  alf: "Alege",
  alh: "Alawa",
  ali: "Amaimon",
  alj: "Alangan",
  alk: "Alak",
  all: "Allar",
  alm: "Amblong",
  aln: "Gheg Albanian",
  alo: "Larike-Wakasihu",
  alp: "Alune",
  alq: "Algonquin",
  alr: "Alutor",
  als: "Tosk Albanian",
  alt: "Southern Altai",
  alu: "'Are'are",
  alw: "Alaba-K’abeena",
  alx: "Amol",
  aly: "Alyawarr",
  alz: "Alur",
  ama: "Amanayé",
  amb: "Ambo",
  amc: "Amahuaca",
  ame: "Yanesha'",
  amf: "Hamer-Banna",
  amg: "Amurdak",
  amh: "Amharic",
  ami: "Amis",
  amj: "Amdang",
  amk: "Ambai",
  aml: "War-Jaintia",
  amm: "Ama (Papua New Guinea)",
  amn: "Amanab",
  amo: "Amo",
  amp: "Alamblak",
  amq: "Amahai",
  amr: "Amarakaeri",
  ams: "Southern Amami-Oshima",
  amt: "Amto",
  amu: "Guerrero Amuzgo",
  amv: "Ambelau",
  amw: "Western Neo-Aramaic",
  amx: "Anmatyerre",
  amy: "Ami",
  amz: "Atampaya",
  ana: "Andaqui",
  anb: "Andoa",
  anc: "Ngas",
  and: "Ansus",
  ane: "Xârâcùù",
  anf: "Animere",
  ang: "Old English (ca. 450-1100)",
  anh: "Nend",
  ani: "Andi",
  anj: "Anor",
  ank: "Goemai",
  anl: "Anu-Hkongso Chin",
  anm: "Anal",
  ann: "Obolo",
  ano: "Andoque",
  anp: "Angika",
  anq: "Jarawa (India)",
  anr: "Andh",
  ans: "Anserma",
  ant: "Antakarinya",
  anu: "Anuak",
  anv: "Denya",
  anw: "Anaang",
  anx: "Andra-Hus",
  any: "Anyin",
  anz: "Anem",
  aoa: "Angolar",
  aob: "Abom",
  aoc: "Pemon",
  aod: "Andarum",
  aoe: "Angal Enen",
  aof: "Bragat",
  aog: "Angoram",
  aoh: "Arma",
  aoi: "Anindilyakwa",
  aoj: "Mufian",
  aok: "Arhö",
  aol: "Alor",
  aom: "Ömie",
  aon: "Bumbita Arapesh",
  aor: "Aore",
  aos: "Taikat",
  aot: "Atong (India)",
  aou: "A'ou",
  aox: "Atorada",
  aoz: "Uab Meto",
  apb: "Sa'a",
  apc: "North Levantine Arabic",
  apd: "Sudanese Arabic",
  ape: "Bukiyip",
  apf: "Pahanan Agta",
  apg: "Ampanang",
  aph: "Athpariya",
  api: "Apiaká",
  apj: "Jicarilla Apache",
  apk: "Kiowa Apache",
  apl: "Lipan Apache",
  apm: "Mescalero-Chiricahua Apache",
  apn: "Apinayé",
  apo: "Ambul",
  app: "Apma",
  apq: "A-Pucikwar",
  apr: "Arop-Lokep",
  aps: "Arop-Sissano",
  apt: "Apatani",
  apu: "Apurinã",
  apv: "Alapmunte",
  apw: "Western Apache",
  apx: "Aputai",
  apy: "Apalaí",
  apz: "Safeyoka",
  aqc: "Archi",
  aqd: "Ampari Dogon",
  aqg: "Arigidi",
  aqm: "Atohwaim",
  aqn: "Northern Alta",
  aqp: "Atakapa",
  aqr: "Arhâ",
  aqt: "Angaité",
  aqz: "Akuntsu",
  ara: "Arabic",
  arb: "Standard Arabic",
  arc: "Official Aramaic (700-300 BCE)",
  ard: "Arabana",
  are: "Western Arrarnta",
  arg: "Aragonese",
  arh: "Arhuaco",
  ari: "Arikara",
  arj: "Arapaso",
  ark: "Arikapú",
  arl: "Arabela",
  arn: "Mapudungun",
  aro: "Araona",
  arp: "Arapaho",
  arq: "Algerian Arabic",
  arr: "Karo (Brazil)",
  ars: "Najdi Arabic",
  aru: "Aruá (Amazonas State)",
  arv: "Arbore",
  arw: "Arawak",
  arx: "Aruá (Rodonia State)",
  ary: "Moroccan Arabic",
  arz: "Egyptian Arabic",
  asa: "Asu (Tanzania)",
  asb: "Assiniboine",
  asc: "Casuarina Coast Asmat",
  asd: "Asas",
  ase: "American Sign Language",
  asf: "Australian Sign Language",
  asg: "Cishingini",
  ash: "Abishira",
  asi: "Buruwai",
  asj: "Sari",
  ask: "Ashkun",
  asl: "Asilulu",
  asm: "Assamese",
  asn: "Xingú Asuriní",
  aso: "Dano",
  asp: "Algerian Sign Language",
  asq: "Austrian Sign Language",
  asr: "Asuri",
  ass: "Ipulo",
  ast: "Asturian",
  asu: "Tocantins Asurini",
  asv: "Asoa",
  asw: "Australian Aborigines Sign Language",
  asx: "Muratayak",
  asy: "Yaosakor Asmat",
  asz: "As",
  ata: "Pele-Ata",
  atb: "Zaiwa",
  atc: "Atsahuaca",
  atd: "Ata Manobo",
  ate: "Atemble",
  atg: "Ivbie North-Okpela-Arhe",
  ati: "Attié",
  atj: "Atikamekw",
  atk: "Ati",
  atl: "Mt. Iraya Agta",
  atm: "Ata",
  atn: "Ashtiani",
  ato: "Atong (Cameroon)",
  atp: "Pudtol Atta",
  atq: "Aralle-Tabulahan",
  atr: "Waimiri-Atroari",
  ats: "Gros Ventre",
  att: "Pamplona Atta",
  atu: "Reel",
  atv: "Northern Altai",
  atw: "Atsugewi",
  atx: "Arutani",
  aty: "Aneityum",
  atz: "Arta",
  aua: "Asumboa",
  aub: "Alugu",
  auc: "Waorani",
  aud: "Anuta",
  aug: "Aguna",
  auh: "Aushi",
  aui: "Anuki",
  auj: "Awjilah",
  auk: "Heyo",
  aul: "Aulua",
  aum: "Asu (Nigeria)",
  aun: "Molmo One",
  auo: "Auyokawa",
  aup: "Makayam",
  auq: "Anus",
  aur: "Aruek",
  aut: "Austral",
  auu: "Auye",
  auw: "Awyi",
  aux: "Aurá",
  auy: "Awiyaana",
  auz: "Uzbeki Arabic",
  ava: "Avaric",
  avb: "Avau",
  avd: "Alviri-Vidari",
  ave: "Avestan",
  avi: "Avikam",
  avk: "Kotava",
  avl: "Eastern Egyptian Bedawi Arabic",
  avm: "Angkamuthi",
  avn: "Avatime",
  avo: "Agavotaguerra",
  avs: "Aushiri",
  avt: "Au",
  avu: "Avokaya",
  avv: "Avá-Canoeiro",
  awa: "Awadhi",
  awb: "Awa (Papua New Guinea)",
  awc: "Cicipu",
  awe: "Awetí",
  awg: "Anguthimri",
  awh: "Awbono",
  awi: "Aekyom",
  awk: "Awabakal",
  awm: "Arawum",
  awn: "Awngi",
  awo: "Awak",
  awr: "Awera",
  aws: "South Awyu",
  awt: "Araweté",
  awu: "Central Awyu",
  awv: "Jair Awyu",
  aww: "Awun",
  awx: "Awara",
  awy: "Edera Awyu",
  axb: "Abipon",
  axe: "Ayerrerenge",
  axg: "Mato Grosso Arára",
  axk: "Yaka (Central African Republic)",
  axl: "Lower Southern Aranda",
  axm: "Middle Armenian",
  axx: "Xârâgurè",
  aya: "Awar",
  ayb: "Ayizo Gbe",
  ayc: "Southern Aymara",
  ayd: "Ayabadhu",
  aye: "Ayere",
  ayg: "Ginyanga",
  ayh: "Hadrami Arabic",
  ayi: "Leyigha",
  ayk: "Akuku",
  ayl: "Libyan Arabic",
  aym: "Aymara",
  ayn: "Sanaani Arabic",
  ayo: "Ayoreo",
  ayp: "North Mesopotamian Arabic",
  ayq: "Ayi (Papua New Guinea)",
  ayr: "Central Aymara",
  ays: "Sorsogon Ayta",
  ayt: "Magbukun Ayta",
  ayu: "Ayu",
  ayy: "Tayabas Ayta",
  ayz: "Mai Brat",
  aza: "Azha",
  azb: "South Azerbaijani",
  azd: "Eastern Durango Nahuatl",
  aze: "Azerbaijani",
  azg: "San Pedro Amuzgos Amuzgo",
  azj: "North Azerbaijani",
  azm: "Ipalapa Amuzgo",
  azn: "Western Durango Nahuatl",
  azo: "Awing",
  azt: "Faire Atta",
  azz: "Highland Puebla Nahuatl",
  baa: "Babatana",
  bab: "Bainouk-Gunyuño",
  bac: "Badui",
  bae: "Baré",
  baf: "Nubaca",
  bag: "Tuki",
  bah: "Bahamas Creole English",
  baj: "Barakai",
  bak: "Bashkir",
  bal: "Baluchi",
  bam: "Bambara",
  ban: "Balinese",
  bao: "Waimaha",
  bap: "Bantawa",
  bar: "Bavarian",
  bas: "Basa (Cameroon)",
  bau: "Bada (Nigeria)",
  bav: "Vengo",
  baw: "Bambili-Bambui",
  bax: "Bamun",
  bay: "Batuley",
  bba: "Baatonum",
  bbb: "Barai",
  bbc: "Batak Toba",
  bbd: "Bau",
  bbe: "Bangba",
  bbf: "Baibai",
  bbg: "Barama",
  bbh: "Bugan",
  bbi: "Barombi",
  bbj: "Ghomálá'",
  bbk: "Babanki",
  bbl: "Bats",
  bbm: "Babango",
  bbn: "Uneapa",
  bbo: "Northern Bobo Madaré",
  bbp: "West Central Banda",
  bbq: "Bamali",
  bbr: "Girawa",
  bbs: "Bakpinka",
  bbt: "Mburku",
  bbu: "Kulung (Nigeria)",
  bbv: "Karnai",
  bbw: "Baba",
  bbx: "Bubia",
  bby: "Befang",
  bbz: "Babalia Creole Arabic",
  bca: "Central Bai",
  bcb: "Bainouk-Samik",
  bcc: "Southern Balochi",
  bcd: "North Babar",
  bce: "Bamenyam",
  bcf: "Bamu",
  bcg: "Baga Pokur",
  bch: "Bariai",
  bci: "Baoulé",
  bcj: "Bardi",
  bck: "Bunaba",
  bcl: "Central Bikol",
  bcm: "Bannoni",
  bcn: "Bali (Nigeria)",
  bco: "Kaluli",
  bcp: "Bali (Democratic Republic of Congo)",
  bcq: "Bench",
  bcr: "Babine",
  bcs: "Kohumono",
  bct: "Bendi",
  bcu: "Awad Bing",
  bcv: "Shoo-Minda-Nye",
  bcw: "Bana",
  bcy: "Bacama",
  bcz: "Bainouk-Gunyaamolo",
  bda: "Bayot",
  bdb: "Basap",
  bdc: "Emberá-Baudó",
  bdd: "Bunama",
  bde: "Bade",
  bdf: "Biage",
  bdg: "Bonggi",
  bdh: "Baka (Sudan)",
  bdi: "Burun",
  bdj: "Bai",
  bdk: "Budukh",
  bdl: "Indonesian Bajau",
  bdm: "Buduma",
  bdn: "Baldemu",
  bdo: "Morom",
  bdp: "Bende",
  bdq: "Bahnar",
  bdr: "West Coast Bajau",
  bds: "Burunge",
  bdt: "Bokoto",
  bdu: "Oroko",
  bdv: "Bodo Parja",
  bdw: "Baham",
  bdx: "Budong-Budong",
  bdy: "Bandjalang",
  bdz: "Badeshi",
  bea: "Beaver",
  beb: "Bebele",
  bec: "Iceve-Maci",
  bed: "Bedoanas",
  bee: "Byangsi",
  bef: "Benabena",
  beg: "Belait",
  beh: "Biali",
  bei: "Bekati'",
  bej: "Beja",
  bek: "Bebeli",
  bel: "Belarusian",
  bem: "Bemba (Zambia)",
  ben: "Bengali",
  beo: "Beami",
  bep: "Besoa",
  beq: "Beembe",
  bes: "Besme",
  bet: "Guiberoua Béte",
  beu: "Blagar",
  bev: "Daloa Bété",
  bew: "Betawi",
  bex: "Jur Modo",
  bey: "Beli (Papua New Guinea)",
  bez: "Bena (Tanzania)",
  bfa: "Bari",
  bfb: "Pauri Bareli",
  bfc: "Panyi Bai",
  bfd: "Bafut",
  bfe: "Betaf",
  bff: "Bofi",
  bfg: "Busang Kayan",
  bfh: "Blafe",
  bfi: "British Sign Language",
  bfj: "Bafanji",
  bfk: "Ban Khor Sign Language",
  bfl: "Banda-Ndélé",
  bfm: "Mmen",
  bfn: "Bunak",
  bfo: "Malba Birifor",
  bfp: "Beba",
  bfq: "Badaga",
  bfr: "Bazigar",
  bfs: "Southern Bai",
  bft: "Balti",
  bfu: "Gahri",
  bfw: "Bondo",
  bfx: "Bantayanon",
  bfy: "Bagheli",
  bfz: "Mahasu Pahari",
  bga: "Gwamhi-Wuri",
  bgb: "Bobongko",
  bgc: "Haryanvi",
  bgd: "Rathwi Bareli",
  bge: "Bauria",
  bgf: "Bangandu",
  bgg: "Bugun",
  bgi: "Giangan",
  bgj: "Bangolan",
  bgk: "Bit",
  bgl: "Bo (Laos)",
  bgn: "Western Balochi",
  bgo: "Baga Koga",
  bgp: "Eastern Balochi",
  bgq: "Bagri",
  bgr: "Bawm Chin",
  bgs: "Tagabawa",
  bgt: "Bughotu",
  bgu: "Mbongno",
  bgv: "Warkay-Bipim",
  bgw: "Bhatri",
  bgx: "Balkan Gagauz Turkish",
  bgy: "Benggoi",
  bgz: "Banggai",
  bha: "Bharia",
  bhb: "Bhili",
  bhc: "Biga",
  bhd: "Bhadrawahi",
  bhe: "Bhaya",
  bhf: "Odiai",
  bhg: "Binandere",
  bhh: "Bukharic",
  bhi: "Bhilali",
  bhj: "Bahing",
  bhl: "Bimin",
  bhm: "Bathari",
  bhn: "Bohtan Neo-Aramaic",
  bho: "Bhojpuri",
  bhp: "Bima",
  bhq: "Tukang Besi South",
  bhr: "Bara Malagasy",
  bhs: "Buwal",
  bht: "Bhattiyali",
  bhu: "Bhunjia",
  bhv: "Bahau",
  bhw: "Biak",
  bhx: "Bhalay",
  bhy: "Bhele",
  bhz: "Bada (Indonesia)",
  bia: "Badimaya",
  bib: "Bissa",
  bic: "Bikaru",
  bid: "Bidiyo",
  bie: "Bepour",
  bif: "Biafada",
  big: "Biangai",
  bij: "Vaghat-Ya-Bijim-Legeri",
  bik: "Bikol",
  bil: "Bile",
  bim: "Bimoba",
  bin: "Bini",
  bio: "Nai",
  bip: "Bila",
  biq: "Bipi",
  bir: "Bisorio",
  bis: "Bislama",
  bit: "Berinomo",
  biu: "Biete",
  biv: "Southern Birifor",
  biw: "Kol (Cameroon)",
  bix: "Bijori",
  biy: "Birhor",
  biz: "Baloi",
  bja: "Budza",
  bjb: "Banggarla",
  bjc: "Bariji",
  bje: "Biao-Jiao Mien",
  bjf: "Barzani Jewish Neo-Aramaic",
  bjg: "Bidyogo",
  bjh: "Bahinemo",
  bji: "Burji",
  bjj: "Kanauji",
  bjk: "Barok",
  bjl: "Bulu (Papua New Guinea)",
  bjm: "Bajelani",
  bjn: "Banjar",
  bjo: "Mid-Southern Banda",
  bjp: "Fanamaket",
  bjr: "Binumarien",
  bjs: "Bajan",
  bjt: "Balanta-Ganja",
  bju: "Busuu",
  bjv: "Bedjond",
  bjw: "Bakwé",
  bjx: "Banao Itneg",
  bjy: "Bayali",
  bjz: "Baruga",
  bka: "Kyak",
  bkc: "Baka (Cameroon)",
  bkd: "Binukid",
  bkf: "Beeke",
  bkg: "Buraka",
  bkh: "Bakoko",
  bki: "Baki",
  bkj: "Pande",
  bkk: "Brokskat",
  bkl: "Berik",
  bkm: "Kom (Cameroon)",
  bkn: "Bukitan",
  bko: "Kwa'",
  bkp: "Boko (Democratic Republic of Congo)",
  bkq: "Bakairí",
  bkr: "Bakumpai",
  bks: "Northern Sorsoganon",
  bkt: "Boloki",
  bku: "Buhid",
  bkv: "Bekwarra",
  bkw: "Bekwel",
  bkx: "Baikeno",
  bky: "Bokyi",
  bkz: "Bungku",
  bla: "Siksika",
  blb: "Bilua",
  blc: "Bella Coola",
  bld: "Bolango",
  ble: "Balanta-Kentohe",
  blf: "Buol",
  blg: "Balau",
  blh: "Kuwaa",
  bli: "Bolia",
  blj: "Bolongan",
  blk: "Pa'o Karen",
  bll: "Biloxi",
  blm: "Beli (Sudan)",
  bln: "Southern Catanduanes Bikol",
  blo: "Anii",
  blp: "Blablanga",
  blq: "Baluan-Pam",
  blr: "Blang",
  bls: "Balaesang",
  blt: "Tai Dam",
  blv: "Kibala",
  blw: "Balangao",
  blx: "Mag-Indi Ayta",
  bly: "Notre",
  blz: "Balantak",
  bma: "Lame",
  bmb: "Bembe",
  bmc: "Biem",
  bmd: "Baga Manduri",
  bme: "Limassa",
  bmf: "Bom-Kim",
  bmg: "Bamwe",
  bmh: "Kein",
  bmi: "Bagirmi",
  bmj: "Bote-Majhi",
  bmk: "Ghayavi",
  bml: "Bomboli",
  bmm: "Northern Betsimisaraka Malagasy",
  bmn: "Bina (Papua New Guinea)",
  bmo: "Bambalang",
  bmp: "Bulgebi",
  bmq: "Bomu",
  bmr: "Muinane",
  bms: "Bilma Kanuri",
  bmt: "Biao Mon",
  bmu: "Somba-Siawari",
  bmv: "Bum",
  bmw: "Bomwali",
  bmx: "Baimak",
  bmz: "Baramu",
  bna: "Bonerate",
  bnb: "Bookan",
  bnc: "Bontok",
  bnd: "Banda (Indonesia)",
  bne: "Bintauna",
  bnf: "Masiwang",
  bng: "Benga",
  bni: "Bangi",
  bnj: "Eastern Tawbuid",
  bnk: "Bierebo",
  bnl: "Boon",
  bnm: "Batanga",
  bnn: "Bunun",
  bno: "Bantoanon",
  bnp: "Bola",
  bnq: "Bantik",
  bnr: "Butmas-Tur",
  bns: "Bundeli",
  bnu: "Bentong",
  bnv: "Bonerif",
  bnw: "Bisis",
  bnx: "Bangubangu",
  bny: "Bintulu",
  bnz: "Beezen",
  boa: "Bora",
  bob: "Aweer",
  bod: "Tibetan",
  boe: "Mundabli",
  bof: "Bolon",
  bog: "Bamako Sign Language",
  boh: "Boma",
  boi: "Barbareño",
  boj: "Anjam",
  bok: "Bonjo",
  bol: "Bole",
  bom: "Berom",
  bon: "Bine",
  boo: "Tiemacèwè Bozo",
  bop: "Bonkiman",
  boq: "Bogaya",
  bor: "Borôro",
  bos: "Bosnian",
  bot: "Bongo",
  bou: "Bondei",
  bov: "Tuwuli",
  bow: "Rema",
  box: "Buamu",
  boy: "Bodo (Central African Republic)",
  boz: "Tiéyaxo Bozo",
  bpa: "Daakaka",
  bpb: "Barbacoas",
  bpd: "Banda-Banda",
  bpg: "Bonggo",
  bph: "Botlikh",
  bpi: "Bagupi",
  bpj: "Binji",
  bpk: "Orowe",
  bpl: "Broome Pearling Lugger Pidgin",
  bpm: "Biyom",
  bpn: "Dzao Min",
  bpo: "Anasi",
  bpp: "Kaure",
  bpq: "Banda Malay",
  bpr: "Koronadal Blaan",
  bps: "Sarangani Blaan",
  bpt: "Barrow Point",
  bpu: "Bongu",
  bpv: "Bian Marind",
  bpw: "Bo (Papua New Guinea)",
  bpx: "Palya Bareli",
  bpy: "Bishnupriya",
  bpz: "Bilba",
  bqa: "Tchumbuli",
  bqb: "Bagusa",
  bqc: "Boko (Benin)",
  bqd: "Bung",
  bqf: "Baga Kaloum",
  bqg: "Bago-Kusuntu",
  bqh: "Baima",
  bqi: "Bakhtiari",
  bqj: "Bandial",
  bqk: "Banda-Mbrès",
  bql: "Bilakura",
  bqm: "Wumboko",
  bqn: "Bulgarian Sign Language",
  bqo: "Balo",
  bqp: "Busa",
  bqq: "Biritai",
  bqr: "Burusu",
  bqs: "Bosngun",
  bqt: "Bamukumbit",
  bqu: "Boguru",
  bqv: "Koro Wachi",
  bqw: "Buru (Nigeria)",
  bqx: "Baangi",
  bqy: "Bengkala Sign Language",
  bqz: "Bakaka",
  bra: "Braj",
  brb: "Lave",
  brc: "Berbice Creole Dutch",
  brd: "Baraamu",
  bre: "Breton",
  brf: "Bera",
  brg: "Baure",
  brh: "Brahui",
  bri: "Mokpwe",
  brj: "Bieria",
  brk: "Birked",
  brl: "Birwa",
  brm: "Barambu",
  brn: "Boruca",
  bro: "Brokkat",
  brp: "Barapasi",
  brq: "Breri",
  brr: "Birao",
  brs: "Baras",
  brt: "Bitare",
  bru: "Eastern Bru",
  brv: "Western Bru",
  brw: "Bellari",
  brx: "Bodo (India)",
  bry: "Burui",
  brz: "Bilbil",
  bsa: "Abinomn",
  bsb: "Brunei Bisaya",
  bsc: "Bassari",
  bse: "Wushi",
  bsf: "Bauchi",
  bsg: "Bashkardi",
  bsh: "Kati",
  bsi: "Bassossi",
  bsj: "Bangwinji",
  bsk: "Burushaski",
  bsl: "Basa-Gumna",
  bsm: "Busami",
  bsn: "Barasana-Eduria",
  bso: "Buso",
  bsp: "Baga Sitemu",
  bsq: "Bassa",
  bsr: "Bassa-Kontagora",
  bss: "Akoose",
  bst: "Basketo",
  bsu: "Bahonsuai",
  bsv: "Baga Sobané",
  bsw: "Baiso",
  bsx: "Yangkam",
  bsy: "Sabah Bisaya",
  bta: "Bata",
  btc: "Bati (Cameroon)",
  btd: "Batak Dairi",
  bte: "Gamo-Ningi",
  btf: "Birgit",
  btg: "Gagnoa Bété",
  bth: "Biatah Bidayuh",
  bti: "Burate",
  btj: "Bacanese Malay",
  btm: "Batak Mandailing",
  btn: "Ratagnon",
  bto: "Rinconada Bikol",
  btp: "Budibud",
  btq: "Batek",
  btr: "Baetora",
  bts: "Batak Simalungun",
  btt: "Bete-Bendi",
  btu: "Batu",
  btv: "Bateri",
  btw: "Butuanon",
  btx: "Batak Karo",
  bty: "Bobot",
  btz: "Batak Alas-Kluet",
  bua: "Buriat",
  bub: "Bua",
  buc: "Bushi",
  bud: "Ntcham",
  bue: "Beothuk",
  buf: "Bushoong",
  bug: "Buginese",
  buh: "Younuo Bunu",
  bui: "Bongili",
  buj: "Basa-Gurmana",
  buk: "Bugawac",
  bul: "Bulgarian",
  bum: "Bulu (Cameroon)",
  bun: "Sherbro",
  buo: "Terei",
  bup: "Busoa",
  buq: "Brem",
  bus: "Bokobaru",
  but: "Bungain",
  buu: "Budu",
  buv: "Bun",
  buw: "Bubi",
  bux: "Boghom",
  buy: "Bullom So",
  buz: "Bukwen",
  bva: "Barein",
  bvb: "Bube",
  bvc: "Baelelea",
  bvd: "Baeggu",
  bve: "Berau Malay",
  bvf: "Boor",
  bvg: "Bonkeng",
  bvh: "Bure",
  bvi: "Belanda Viri",
  bvj: "Baan",
  bvk: "Bukat",
  bvl: "Bolivian Sign Language",
  bvm: "Bamunka",
  bvn: "Buna",
  bvo: "Bolgo",
  bvp: "Bumang",
  bvq: "Birri",
  bvr: "Burarra",
  bvt: "Bati (Indonesia)",
  bvu: "Bukit Malay",
  bvv: "Baniva",
  bvw: "Boga",
  bvx: "Dibole",
  bvy: "Baybayanon",
  bvz: "Bauzi",
  bwa: "Bwatoo",
  bwb: "Namosi-Naitasiri-Serua",
  bwc: "Bwile",
  bwd: "Bwaidoka",
  bwe: "Bwe Karen",
  bwf: "Boselewa",
  bwg: "Barwe",
  bwh: "Bishuo",
  bwi: "Baniwa",
  bwj: "Láá Láá Bwamu",
  bwk: "Bauwaki",
  bwl: "Bwela",
  bwm: "Biwat",
  bwn: "Wunai Bunu",
  bwo: "Boro (Ethiopia)",
  bwp: "Mandobo Bawah",
  bwq: "Southern Bobo Madaré",
  bwr: "Bura-Pabir",
  bws: "Bomboma",
  bwt: "Bafaw-Balong",
  bwu: "Buli (Ghana)",
  bww: "Bwa",
  bwx: "Bu-Nao Bunu",
  bwy: "Cwi Bwamu",
  bwz: "Bwisi",
  bxa: "Tairaha",
  bxb: "Belanda Bor",
  bxc: "Molengue",
  bxd: "Pela",
  bxe: "Birale",
  bxf: "Bilur",
  bxg: "Bangala",
  bxh: "Buhutu",
  bxi: "Pirlatapa",
  bxj: "Bayungu",
  bxk: "Bukusu",
  bxl: "Jalkunan",
  bxm: "Mongolia Buriat",
  bxn: "Burduna",
  bxo: "Barikanchi",
  bxp: "Bebil",
  bxq: "Beele",
  bxr: "Russia Buriat",
  bxs: "Busam",
  bxu: "China Buriat",
  bxv: "Berakou",
  bxw: "Bankagooma",
  bxz: "Binahari",
  bya: "Batak",
  byb: "Bikya",
  byc: "Ubaghara",
  byd: "Benyadu'",
  bye: "Pouye",
  byf: "Bete",
  byg: "Baygo",
  byh: "Bhujel",
  byi: "Buyu",
  byj: "Bina (Nigeria)",
  byk: "Biao",
  byl: "Bayono",
  bym: "Bidyara",
  byn: "Bilin",
  byo: "Biyo",
  byp: "Bumaji",
  byq: "Basay",
  byr: "Baruya",
  bys: "Burak",
  byt: "Berti",
  byv: "Medumba",
  byw: "Belhariya",
  byx: "Qaqet",
  byz: "Banaro",
  bza: "Bandi",
  bzb: "Andio",
  bzc: "Southern Betsimisaraka Malagasy",
  bzd: "Bribri",
  bze: "Jenaama Bozo",
  bzf: "Boikin",
  bzg: "Babuza",
  bzh: "Mapos Buang",
  bzi: "Bisu",
  bzj: "Belize Kriol English",
  bzk: "Nicaragua Creole English",
  bzl: "Boano (Sulawesi)",
  bzm: "Bolondo",
  bzn: "Boano (Maluku)",
  bzo: "Bozaba",
  bzp: "Kemberano",
  bzq: "Buli (Indonesia)",
  bzr: "Biri",
  bzs: "Brazilian Sign Language",
  bzt: "Brithenig",
  bzu: "Burmeso",
  bzv: "Naami",
  bzw: "Basa (Nigeria)",
  bzx: "Kɛlɛngaxo Bozo",
  bzy: "Obanliku",
  bzz: "Evant",
  caa: "Chortí",
  cab: "Garifuna",
  cac: "Chuj",
  cad: "Caddo",
  cae: "Lehar",
  caf: "Southern Carrier",
  cag: "Nivaclé",
  cah: "Cahuarano",
  caj: "Chané",
  cak: "Kaqchikel",
  cal: "Carolinian",
  cam: "Cemuhî",
  can: "Chambri",
  cao: "Chácobo",
  cap: "Chipaya",
  caq: "Car Nicobarese",
  car: "Galibi Carib",
  cas: "Tsimané",
  cat: "Catalan",
  cav: "Cavineña",
  caw: "Callawalla",
  cax: "Chiquitano",
  cay: "Cayuga",
  caz: "Canichana",
  cbb: "Cabiyarí",
  cbc: "Carapana",
  cbd: "Carijona",
  cbg: "Chimila",
  cbi: "Chachi",
  cbj: "Ede Cabe",
  cbk: "Chavacano",
  cbl: "Bualkhaw Chin",
  cbn: "Nyahkur",
  cbo: "Izora",
  cbq: "Tsucuba",
  cbr: "Cashibo-Cacataibo",
  cbs: "Cashinahua",
  cbt: "Chayahuita",
  cbu: "Candoshi-Shapra",
  cbv: "Cacua",
  cbw: "Kinabalian",
  cby: "Carabayo",
  cca: "Cauca",
  ccc: "Chamicuro",
  ccd: "Cafundo Creole",
  cce: "Chopi",
  ccg: "Samba Daka",
  cch: "Atsam",
  ccj: "Kasanga",
  ccl: "Cutchi-Swahili",
  ccm: "Malaccan Creole Malay",
  cco: "Comaltepec Chinantec",
  ccp: "Chakma",
  ccr: "Cacaopera",
  cda: "Choni",
  cde: "Chenchu",
  cdf: "Chiru",
  cdg: "Chamari",
  cdh: "Chambeali",
  cdi: "Chodri",
  cdj: "Churahi",
  cdm: "Chepang",
  cdn: "Chaudangsi",
  cdo: "Min Dong Chinese",
  cdr: "Cinda-Regi-Tiyal",
  cds: "Chadian Sign Language",
  cdy: "Chadong",
  cdz: "Koda",
  cea: "Lower Chehalis",
  ceb: "Cebuano",
  ceg: "Chamacoco",
  cek: "Eastern Khumi Chin",
  cen: "Cen",
  ces: "Czech",
  cet: "Centúúm",
  cfa: "Dijim-Bwilim",
  cfd: "Cara",
  cfg: "Como Karim",
  cfm: "Falam Chin",
  cga: "Changriwa",
  cgc: "Kagayanen",
  cgg: "Chiga",
  cgk: "Chocangacakha",
  cha: "Chamorro",
  chb: "Chibcha",
  chc: "Catawba",
  chd: "Highland Oaxaca Chontal",
  che: "Chechen",
  chf: "Tabasco Chontal",
  chg: "Chagatai",
  chh: "Chinook",
  chj: "Ojitlán Chinantec",
  chk: "Chuukese",
  chl: "Cahuilla",
  chm: "Mari (Russia)",
  chn: "Chinook jargon",
  cho: "Choctaw",
  chp: "Chipewyan",
  chq: "Quiotepec Chinantec",
  chr: "Cherokee",
  cht: "Cholón",
  chu: "Church Slavic",
  chv: "Chuvash",
  chw: "Chuwabu",
  chx: "Chantyal",
  chy: "Cheyenne",
  chz: "Ozumacín Chinantec",
  cia: "Cia-Cia",
  cib: "Ci Gbe",
  cic: "Chickasaw",
  cid: "Chimariko",
  cie: "Cineni",
  cih: "Chinali",
  cik: "Chitkuli Kinnauri",
  cim: "Cimbrian",
  cin: "Cinta Larga",
  cip: "Chiapanec",
  cir: "Tiri",
  ciw: "Chippewa",
  ciy: "Chaima",
  cja: "Western Cham",
  cje: "Chru",
  cjh: "Upper Chehalis",
  cji: "Chamalal",
  cjk: "Chokwe",
  cjm: "Eastern Cham",
  cjn: "Chenapian",
  cjo: "Ashéninka Pajonal",
  cjp: "Cabécar",
  cjs: "Shor",
  cjv: "Chuave",
  cjy: "Jinyu Chinese",
  ckb: "Central Kurdish",
  ckh: "Chak",
  ckl: "Cibak",
  ckn: "Kaang Chin",
  cko: "Anufo",
  ckq: "Kajakse",
  ckr: "Kairak",
  cks: "Tayo",
  ckt: "Chukot",
  cku: "Koasati",
  ckv: "Kavalan",
  ckx: "Caka",
  cky: "Cakfem-Mushere",
  ckz: "Cakchiquel-Quiché Mixed Language",
  cla: "Ron",
  clc: "Chilcotin",
  cld: "Chaldean Neo-Aramaic",
  cle: "Lealao Chinantec",
  clh: "Chilisso",
  cli: "Chakali",
  clj: "Laitu Chin",
  clk: "Idu-Mishmi",
  cll: "Chala",
  clm: "Clallam",
  clo: "Lowland Oaxaca Chontal",
  clt: "Lautu Chin",
  clu: "Caluyanun",
  clw: "Chulym",
  cly: "Eastern Highland Chatino",
  cma: "Maa",
  cme: "Cerma",
  cmg: "Classical Mongolian",
  cmi: "Emberá-Chamí",
  cml: "Campalagian",
  cmm: "Michigamea",
  cmn: "Mandarin Chinese",
  cmo: "Central Mnong",
  cmr: "Mro-Khimi Chin",
  cms: "Messapic",
  cmt: "Camtho",
  cna: "Changthang",
  cnb: "Chinbon Chin",
  cnc: "Côông",
  cng: "Northern Qiang",
  cnh: "Hakha Chin",
  cni: "Asháninka",
  cnk: "Khumi Chin",
  cnl: "Lalana Chinantec",
  cno: "Con",
  cns: "Central Asmat",
  cnt: "Tepetotutla Chinantec",
  cnu: "Chenoua",
  cnw: "Ngawn Chin",
  cnx: "Middle Cornish",
  coa: "Cocos Islands Malay",
  cob: "Chicomuceltec",
  coc: "Cocopa",
  cod: "Cocama-Cocamilla",
  coe: "Koreguaje",
  cof: "Colorado",
  cog: "Chong",
  coh: "Chonyi-Dzihana-Kauma",
  coj: "Cochimi",
  cok: "Santa Teresa Cora",
  col: "Columbia-Wenatchi",
  com: "Comanche",
  con: "Cofán",
  coo: "Comox",
  cop: "Coptic",
  coq: "Coquille",
  cor: "Cornish",
  cos: "Corsican",
  cot: "Caquinte",
  cou: "Wamey",
  cov: "Cao Miao",
  cow: "Cowlitz",
  cox: "Nanti",
  coz: "Chochotec",
  cpa: "Palantla Chinantec",
  cpb: "Ucayali-Yurúa Ashéninka",
  cpc: "Ajyíninka Apurucayali",
  cpg: "Cappadocian Greek",
  cpi: "Chinese Pidgin English",
  cpn: "Cherepon",
  cpo: "Kpeego",
  cps: "Capiznon",
  cpu: "Pichis Ashéninka",
  cpx: "Pu-Xian Chinese",
  cpy: "South Ucayali Ashéninka",
  cqd: "Chuanqiandian Cluster Miao",
  cra: "Chara",
  crb: "Island Carib",
  crc: "Lonwolwol",
  crd: "Coeur d'Alene",
  cre: "Cree",
  crf: "Caramanta",
  crg: "Michif",
  crh: "Crimean Tatar",
  cri: "Sãotomense",
  crj: "Southern East Cree",
  crk: "Plains Cree",
  crl: "Northern East Cree",
  crm: "Moose Cree",
  crn: "El Nayar Cora",
  cro: "Crow",
  crq: "Iyo'wujwa Chorote",
  crr: "Carolina Algonquian",
  crs: "Seselwa Creole French",
  crt: "Iyojwa'ja Chorote",
  crv: "Chaura",
  crw: "Chrau",
  crx: "Carrier",
  cry: "Cori",
  crz: "Cruzeño",
  csa: "Chiltepec Chinantec",
  csb: "Kashubian",
  csc: "Catalan Sign Language",
  csd: "Chiangmai Sign Language",
  cse: "Czech Sign Language",
  csf: "Cuba Sign Language",
  csg: "Chilean Sign Language",
  csh: "Asho Chin",
  csi: "Coast Miwok",
  csj: "Songlai Chin",
  csk: "Jola-Kasa",
  csl: "Chinese Sign Language",
  csm: "Central Sierra Miwok",
  csn: "Colombian Sign Language",
  cso: "Sochiapam Chinantec",
  csq: "Croatia Sign Language",
  csr: "Costa Rican Sign Language",
  css: "Southern Ohlone",
  cst: "Northern Ohlone",
  csv: "Sumtu Chin",
  csw: "Swampy Cree",
  csy: "Siyin Chin",
  csz: "Coos",
  cta: "Tataltepec Chatino",
  ctc: "Chetco",
  ctd: "Tedim Chin",
  cte: "Tepinapa Chinantec",
  ctg: "Chittagonian",
  cth: "Thaiphum Chin",
  ctl: "Tlacoatzintepec Chinantec",
  ctm: "Chitimacha",
  ctn: "Chhintange",
  cto: "Emberá-Catío",
  ctp: "Western Highland Chatino",
  cts: "Northern Catanduanes Bikol",
  ctt: "Wayanad Chetti",
  ctu: "Chol",
  ctz: "Zacatepec Chatino",
  cua: "Cua",
  cub: "Cubeo",
  cuc: "Usila Chinantec",
  cug: "Chungmboko",
  cuh: "Chuka",
  cui: "Cuiba",
  cuj: "Mashco Piro",
  cuk: "San Blas Kuna",
  cul: "Culina",
  cuo: "Cumanagoto",
  cup: "Cupeño",
  cuq: "Cun",
  cur: "Chhulung",
  cut: "Teutila Cuicatec",
  cuu: "Tai Ya",
  cuv: "Cuvok",
  cuw: "Chukwa",
  cux: "Tepeuxila Cuicatec",
  cvg: "Chug",
  cvn: "Valle Nacional Chinantec",
  cwa: "Kabwa",
  cwb: "Maindo",
  cwd: "Woods Cree",
  cwe: "Kwere",
  cwg: "Chewong",
  cwt: "Kuwaataay",
  cya: "Nopala Chatino",
  cyb: "Cayubaba",
  cym: "Welsh",
  cyo: "Cuyonon",
  czh: "Huizhou Chinese",
  czk: "Knaanic",
  czn: "Zenzontepec Chatino",
  czo: "Min Zhong Chinese",
  czt: "Zotung Chin",
  daa: "Dangaléat",
  dac: "Dambi",
  dad: "Marik",
  dae: "Duupa",
  dag: "Dagbani",
  dah: "Gwahatike",
  dai: "Day",
  daj: "Dar Fur Daju",
  dak: "Dakota",
  dal: "Dahalo",
  dam: "Damakawa",
  dan: "Danish",
  dao: "Daai Chin",
  daq: "Dandami Maria",
  dar: "Dargwa",
  das: "Daho-Doo",
  dau: "Dar Sila Daju",
  dav: "Taita",
  daw: "Davawenyo",
  dax: "Dayi",
  daz: "Dao",
  dba: "Bangime",
  dbb: "Deno",
  dbd: "Dadiya",
  dbe: "Dabe",
  dbf: "Edopi",
  dbg: "Dogul Dom Dogon",
  dbi: "Doka",
  dbj: "Ida'an",
  dbl: "Dyirbal",
  dbm: "Duguri",
  dbn: "Duriankere",
  dbo: "Dulbu",
  dbp: "Duwai",
  dbq: "Daba",
  dbr: "Dabarre",
  dbt: "Ben Tey Dogon",
  dbu: "Bondum Dom Dogon",
  dbv: "Dungu",
  dbw: "Bankan Tey Dogon",
  dby: "Dibiyaso",
  dcc: "Deccan",
  dcr: "Negerhollands",
  dda: "Dadi Dadi",
  ddd: "Dongotono",
  dde: "Doondo",
  ddg: "Fataluku",
  ddi: "West Goodenough",
  ddj: "Jaru",
  ddn: "Dendi (Benin)",
  ddo: "Dido",
  ddr: "Dhudhuroa",
  dds: "Donno So Dogon",
  ddw: "Dawera-Daweloor",
  dec: "Dagik",
  ded: "Dedua",
  dee: "Dewoin",
  def: "Dezfuli",
  deg: "Degema",
  deh: "Dehwari",
  dei: "Demisa",
  dek: "Dek",
  del: "Delaware",
  dem: "Dem",
  den: "Slave (Athapascan)",
  dep: "Pidgin Delaware",
  deq: "Dendi (Central African Republic)",
  der: "Deori",
  des: "Desano",
  deu: "German",
  dev: "Domung",
  dez: "Dengese",
  dga: "Southern Dagaare",
  dgb: "Bunoge Dogon",
  dgc: "Casiguran Dumagat Agta",
  dgd: "Dagaari Dioula",
  dge: "Degenan",
  dgg: "Doga",
  dgh: "Dghwede",
  dgi: "Northern Dagara",
  dgk: "Dagba",
  dgl: "Andaandi",
  dgn: "Dagoman",
  dgo: "Dogri (individual language)",
  dgr: "Dogrib",
  dgs: "Dogoso",
  dgt: "Ndra'ngith",
  dgu: "Degaru",
  dgw: "Daungwurrung",
  dgx: "Doghoro",
  dgz: "Daga",
  dhd: "Dhundari",
  dhg: "Dhangu-Djangu",
  dhi: "Dhimal",
  dhl: "Dhalandji",
  dhm: "Zemba",
  dhn: "Dhanki",
  dho: "Dhodia",
  dhr: "Dhargari",
  dhs: "Dhaiso",
  dhu: "Dhurga",
  dhv: "Dehu",
  dhw: "Dhanwar (Nepal)",
  dhx: "Dhungaloo",
  dia: "Dia",
  dib: "South Central Dinka",
  dic: "Lakota Dida",
  did: "Didinga",
  dif: "Dieri",
  dig: "Digo",
  dih: "Kumiai",
  dii: "Dimbong",
  dij: "Dai",
  dik: "Southwestern Dinka",
  dil: "Dilling",
  dim: "Dime",
  din: "Dinka",
  dio: "Dibo",
  dip: "Northeastern Dinka",
  diq: "Dimli (individual language)",
  dir: "Dirim",
  dis: "Dimasa",
  dit: "Dirari",
  diu: "Diriku",
  div: "Dhivehi",
  diw: "Northwestern Dinka",
  dix: "Dixon Reef",
  diy: "Diuwe",
  diz: "Ding",
  dja: "Djadjawurrung",
  djb: "Djinba",
  djc: "Dar Daju Daju",
  djd: "Djamindjung",
  dje: "Zarma",
  djf: "Djangun",
  dji: "Djinang",
  djj: "Djeebbana",
  djk: "Eastern Maroon Creole",
  djm: "Jamsay Dogon",
  djn: "Djauan",
  djo: "Jangkang",
  djr: "Djambarrpuyngu",
  dju: "Kapriman",
  djw: "Djawi",
  dka: "Dakpakha",
  dkk: "Dakka",
  dkr: "Kuijau",
  dks: "Southeastern Dinka",
  dkx: "Mazagway",
  dlg: "Dolgan",
  dlk: "Dahalik",
  dlm: "Dalmatian",
  dln: "Darlong",
  dma: "Duma",
  dmb: "Mombo Dogon",
  dmc: "Gavak",
  dmd: "Madhi Madhi",
  dme: "Dugwor",
  dmg: "Upper Kinabatangan",
  dmk: "Domaaki",
  dml: "Dameli",
  dmm: "Dama",
  dmo: "Kemedzung",
  dmr: "East Damar",
  dms: "Dampelas",
  dmu: "Dubu",
  dmv: "Dumpas",
  dmw: "Mudburra",
  dmx: "Dema",
  dmy: "Demta",
  dna: "Upper Grand Valley Dani",
  dnd: "Daonda",
  dne: "Ndendeule",
  dng: "Dungan",
  dni: "Lower Grand Valley Dani",
  dnj: "Dan",
  dnk: "Dengka",
  dnn: "Dzùùngoo",
  dnr: "Danaru",
  dnt: "Mid Grand Valley Dani",
  dnu: "Danau",
  dnv: "Danu",
  dnw: "Western Dani",
  dny: "Dení",
  doa: "Dom",
  dob: "Dobu",
  doc: "Northern Dong",
  doe: "Doe",
  dof: "Domu",
  doh: "Dong",
  doi: "Dogri (macrolanguage)",
  dok: "Dondo",
  dol: "Doso",
  don: "Toura (Papua New Guinea)",
  doo: "Dongo",
  dop: "Lukpa",
  doq: "Dominican Sign Language",
  dor: "Dori'o",
  dos: "Dogosé",
  dot: "Dass",
  dov: "Dombe",
  dow: "Doyayo",
  dox: "Bussa",
  doy: "Dompo",
  doz: "Dorze",
  dpp: "Papar",
  drb: "Dair",
  drc: "Minderico",
  drd: "Darmiya",
  dre: "Dolpo",
  drg: "Rungus",
  dri: "C'Lela",
  drl: "Paakantyi",
  drn: "West Damar",
  dro: "Daro-Matu Melanau",
  drq: "Dura",
  drr: "Dororo",
  drs: "Gedeo",
  drt: "Drents",
  dru: "Rukai",
  dry: "Darai",
  dsb: "Lower Sorbian",
  dse: "Dutch Sign Language",
  dsh: "Daasanach",
  dsi: "Disa",
  dsl: "Danish Sign Language",
  dsn: "Dusner",
  dso: "Desiya",
  dsq: "Tadaksahak",
  dta: "Daur",
  dtb: "Labuk-Kinabatangan Kadazan",
  dtd: "Ditidaht",
  dth: "Adithinngithigh",
  dti: "Ana Tinga Dogon",
  dtk: "Tene Kan Dogon",
  dtm: "Tomo Kan Dogon",
  dtn: "Daatsʼíin",
  dto: "Tommo So Dogon",
  dtp: "Kadazan Dusun",
  dtr: "Lotud",
  dts: "Toro So Dogon",
  dtt: "Toro Tegu Dogon",
  dtu: "Tebul Ure Dogon",
  dty: "Dotyali",
  dua: "Duala",
  dub: "Dubli",
  duc: "Duna",
  dud: "Hun-Saare",
  due: "Umiray Dumaget Agta",
  duf: "Dumbea",
  dug: "Duruma",
  duh: "Dungra Bhil",
  dui: "Dumun",
  duk: "Uyajitaya",
  dul: "Alabat Island Agta",
  dum: "Middle Dutch (ca. 1050-1350)",
  dun: "Dusun Deyah",
  duo: "Dupaninan Agta",
  dup: "Duano",
  duq: "Dusun Malang",
  dur: "Dii",
  dus: "Dumi",
  duu: "Drung",
  duv: "Duvle",
  duw: "Dusun Witu",
  dux: "Duungooma",
  duy: "Dicamay Agta",
  duz: "Duli-Gey",
  dva: "Duau",
  dwa: "Diri",
  dwr: "Dawro",
  dws: "Dutton World Speedwords",
  dwu: "Dhuwal",
  dww: "Dawawa",
  dwy: "Dhuwaya",
  dya: "Dyan",
  dyb: "Dyaberdyaber",
  dyd: "Dyugun",
  dyg: "Villa Viciosa Agta",
  dyi: "Djimini Senoufo",
  dym: "Yanda Dom Dogon",
  dyn: "Dyangadi",
  dyo: "Jola-Fonyi",
  dyu: "Dyula",
  dyy: "Dyaabugay",
  dza: "Tunzu",
  dze: "Djiwarli",
  dzg: "Dazaga",
  dzl: "Dzalakha",
  dzn: "Dzando",
  dzo: "Dzongkha",
  eaa: "Karenggapa",
  ebg: "Ebughu",
  ebk: "Eastern Bontok",
  ebo: "Teke-Ebo",
  ebr: "Ebrié",
  ebu: "Embu",
  ecr: "Eteocretan",
  ecs: "Ecuadorian Sign Language",
  ecy: "Eteocypriot",
  eee: "E",
  efa: "Efai",
  efe: "Efe",
  efi: "Efik",
  ega: "Ega",
  egl: "Emilian",
  ego: "Eggon",
  egy: "Egyptian (Ancient)",
  ehu: "Ehueun",
  eip: "Eipomek",
  eit: "Eitiep",
  eiv: "Askopan",
  eja: "Ejamat",
  eka: "Ekajuk",
  ekc: "Eastern Karnic",
  eke: "Ekit",
  ekg: "Ekari",
  eki: "Eki",
  ekk: "Standard Estonian",
  ekl: "Kol (Bangladesh)",
  ekm: "Elip",
  eko: "Koti",
  ekp: "Ekpeye",
  ekr: "Yace",
  eky: "Eastern Kayah",
  ele: "Elepi",
  elh: "El Hugeirat",
  eli: "Nding",
  elk: "Elkei",
  ell: "Modern Greek (1453-)",
  elm: "Eleme",
  elo: "El Molo",
  elu: "Elu",
  elx: "Elamite",
  ema: "Emai-Iuleha-Ora",
  emb: "Embaloh",
  eme: "Emerillon",
  emg: "Eastern Meohang",
  emi: "Mussau-Emira",
  emk: "Eastern Maninkakan",
  emm: "Mamulique",
  emn: "Eman",
  emp: "Northern Emberá",
  ems: "Pacific Gulf Yupik",
  emu: "Eastern Muria",
  emw: "Emplawas",
  emx: "Erromintxela",
  emy: "Epigraphic Mayan",
  ena: "Apali",
  enb: "Markweeta",
  enc: "En",
  end: "Ende",
  enf: "Forest Enets",
  eng: "English",
  enh: "Tundra Enets",
  enl: "Enlhet",
  enm: "Middle English (1100-1500)",
  enn: "Engenni",
  eno: "Enggano",
  enq: "Enga",
  enr: "Emumu",
  enu: "Enu",
  env: "Enwan (Edu State)",
  enw: "Enwan (Akwa Ibom State)",
  enx: "Enxet",
  eot: "Beti (Côte d'Ivoire)",
  epi: "Epie",
  epo: "Esperanto",
  era: "Eravallan",
  erg: "Sie",
  erh: "Eruwa",
  eri: "Ogea",
  erk: "South Efate",
  ero: "Horpa",
  err: "Erre",
  ers: "Ersu",
  ert: "Eritai",
  erw: "Erokwanas",
  ese: "Ese Ejja",
  esg: "Aheri Gondi",
  esh: "Eshtehardi",
  esi: "North Alaskan Inupiatun",
  esk: "Northwest Alaska Inupiatun",
  esl: "Egypt Sign Language",
  esm: "Esuma",
  esn: "Salvadoran Sign Language",
  eso: "Estonian Sign Language",
  esq: "Esselen",
  ess: "Central Siberian Yupik",
  est: "Estonian",
  esu: "Central Yupik",
  esy: "Eskayan",
  etb: "Etebi",
  etc: "Etchemin",
  eth: "Ethiopian Sign Language",
  etn: "Eton (Vanuatu)",
  eto: "Eton (Cameroon)",
  etr: "Edolo",
  ets: "Yekhee",
  ett: "Etruscan",
  etu: "Ejagham",
  etx: "Eten",
  etz: "Semimi",
  eus: "Basque",
  eve: "Even",
  evh: "Uvbie",
  evn: "Evenki",
  ewe: "Ewe",
  ewo: "Ewondo",
  ext: "Extremaduran",
  eya: "Eyak",
  eyo: "Keiyo",
  eza: "Ezaa",
  eze: "Uzekwe",
  faa: "Fasu",
  fab: "Fa d'Ambu",
  fad: "Wagi",
  faf: "Fagani",
  fag: "Finongan",
  fah: "Baissa Fali",
  fai: "Faiwol",
  faj: "Faita",
  fak: "Fang (Cameroon)",
  fal: "South Fali",
  fam: "Fam",
  fan: "Fang (Equatorial Guinea)",
  fao: "Faroese",
  fap: "Palor",
  far: "Fataleka",
  fas: "Persian",
  fat: "Fanti",
  fau: "Fayu",
  fax: "Fala",
  fay: "Southwestern Fars",
  faz: "Northwestern Fars",
  fbl: "West Albay Bikol",
  fcs: "Quebec Sign Language",
  fer: "Feroge",
  ffi: "Foia Foia",
  ffm: "Maasina Fulfulde",
  fgr: "Fongoro",
  fia: "Nobiin",
  fie: "Fyer",
  fij: "Fijian",
  fil: "Filipino",
  fin: "Finnish",
  fip: "Fipa",
  fir: "Firan",
  fit: "Tornedalen Finnish",
  fiw: "Fiwaga",
  fkk: "Kirya-Konzəl",
  fkv: "Kven Finnish",
  fla: "Kalispel-Pend d'Oreille",
  flh: "Foau",
  fli: "Fali",
  fll: "North Fali",
  fln: "Flinders Island",
  flr: "Fuliiru",
  fly: "Flaaitaal",
  fmp: "Fe'fe'",
  fmu: "Far Western Muria",
  fnb: "Fanbak",
  fng: "Fanagalo",
  fni: "Fania",
  fod: "Foodo",
  foi: "Foi",
  fom: "Foma",
  fon: "Fon",
  "for": "Fore",
  fos: "Siraya",
  fpe: "Fernando Po Creole English",
  fqs: "Fas",
  fra: "French",
  frc: "Cajun French",
  frd: "Fordata",
  frk: "Frankish",
  frm: "Middle French (ca. 1400-1600)",
  fro: "Old French (842-ca. 1400)",
  frp: "Arpitan",
  frq: "Forak",
  frr: "Northern Frisian",
  frs: "Eastern Frisian",
  frt: "Fortsenal",
  fry: "Western Frisian",
  fse: "Finnish Sign Language",
  fsl: "French Sign Language",
  fss: "Finland-Swedish Sign Language",
  fub: "Adamawa Fulfulde",
  fuc: "Pulaar",
  fud: "East Futuna",
  fue: "Borgu Fulfulde",
  fuf: "Pular",
  fuh: "Western Niger Fulfulde",
  fui: "Bagirmi Fulfulde",
  fuj: "Ko",
  ful: "Fulah",
  fum: "Fum",
  fun: "Fulniô",
  fuq: "Central-Eastern Niger Fulfulde",
  fur: "Friulian",
  fut: "Futuna-Aniwa",
  fuu: "Furu",
  fuv: "Nigerian Fulfulde",
  fuy: "Fuyug",
  fvr: "Fur",
  fwa: "Fwâi",
  fwe: "Fwe",
  gaa: "Ga",
  gab: "Gabri",
  gac: "Mixed Great Andamanese",
  gad: "Gaddang",
  gae: "Guarequena",
  gaf: "Gende",
  gag: "Gagauz",
  gah: "Alekano",
  gai: "Borei",
  gaj: "Gadsup",
  gak: "Gamkonora",
  gal: "Galolen",
  gam: "Kandawo",
  gan: "Gan Chinese",
  gao: "Gants",
  gap: "Gal",
  gaq: "Gata'",
  gar: "Galeya",
  gas: "Adiwasi Garasia",
  gat: "Kenati",
  gau: "Mudhili Gadaba",
  gaw: "Nobonob",
  gax: "Borana-Arsi-Guji Oromo",
  gay: "Gayo",
  gaz: "West Central Oromo",
  gba: "Gbaya (Central African Republic)",
  gbb: "Kaytetye",
  gbd: "Karadjeri",
  gbe: "Niksek",
  gbf: "Gaikundi",
  gbg: "Gbanziri",
  gbh: "Defi Gbe",
  gbi: "Galela",
  gbj: "Bodo Gadaba",
  gbk: "Gaddi",
  gbl: "Gamit",
  gbm: "Garhwali",
  gbn: "Mo'da",
  gbo: "Northern Grebo",
  gbp: "Gbaya-Bossangoa",
  gbq: "Gbaya-Bozoum",
  gbr: "Gbagyi",
  gbs: "Gbesi Gbe",
  gbu: "Gagadu",
  gbv: "Gbanu",
  gbw: "Gabi-Gabi",
  gbx: "Eastern Xwla Gbe",
  gby: "Gbari",
  gbz: "Zoroastrian Dari",
  gcc: "Mali",
  gcd: "Ganggalida",
  gce: "Galice",
  gcf: "Guadeloupean Creole French",
  gcl: "Grenadian Creole English",
  gcn: "Gaina",
  gcr: "Guianese Creole French",
  gct: "Colonia Tovar German",
  gda: "Gade Lohar",
  gdb: "Pottangi Ollar Gadaba",
  gdc: "Gugu Badhun",
  gdd: "Gedaged",
  gde: "Gude",
  gdf: "Guduf-Gava",
  gdg: "Ga'dang",
  gdh: "Gadjerawang",
  gdi: "Gundi",
  gdj: "Gurdjar",
  gdk: "Gadang",
  gdl: "Dirasha",
  gdm: "Laal",
  gdn: "Umanakaina",
  gdo: "Ghodoberi",
  gdq: "Mehri",
  gdr: "Wipi",
  gds: "Ghandruk Sign Language",
  gdt: "Kungardutyi",
  gdu: "Gudu",
  gdx: "Godwari",
  gea: "Geruma",
  geb: "Kire",
  gec: "Gboloo Grebo",
  ged: "Gade",
  geg: "Gengle",
  geh: "Hutterite German",
  gei: "Gebe",
  gej: "Gen",
  gek: "Ywom",
  gel: "ut-Ma'in",
  geq: "Geme",
  ges: "Geser-Gorom",
  gev: "Eviya",
  gew: "Gera",
  gex: "Garre",
  gey: "Enya",
  gez: "Geez",
  gfk: "Patpatar",
  gft: "Gafat",
  gga: "Gao",
  ggb: "Gbii",
  ggd: "Gugadj",
  gge: "Guragone",
  ggg: "Gurgula",
  ggk: "Kungarakany",
  ggl: "Ganglau",
  ggt: "Gitua",
  ggu: "Gagu",
  ggw: "Gogodala",
  gha: "Ghadamès",
  ghc: "Hiberno-Scottish Gaelic",
  ghe: "Southern Ghale",
  ghh: "Northern Ghale",
  ghk: "Geko Karen",
  ghl: "Ghulfan",
  ghn: "Ghanongga",
  gho: "Ghomara",
  ghr: "Ghera",
  ghs: "Guhu-Samane",
  ght: "Kuke",
  gia: "Kitja",
  gib: "Gibanawa",
  gic: "Gail",
  gid: "Gidar",
  gie: "Gaɓogbo",
  gig: "Goaria",
  gih: "Githabul",
  gil: "Gilbertese",
  gim: "Gimi (Eastern Highlands)",
  gin: "Hinukh",
  gip: "Gimi (West New Britain)",
  giq: "Green Gelao",
  gir: "Red Gelao",
  gis: "North Giziga",
  git: "Gitxsan",
  giu: "Mulao",
  giw: "White Gelao",
  gix: "Gilima",
  giy: "Giyug",
  giz: "South Giziga",
  gji: "Geji",
  gjk: "Kachi Koli",
  gjm: "Gunditjmara",
  gjn: "Gonja",
  gjr: "Gurindji Kriol",
  gju: "Gujari",
  gka: "Guya",
  gke: "Ndai",
  gkn: "Gokana",
  gko: "Kok-Nar",
  gkp: "Guinea Kpelle",
  gku: "ǂUngkue",
  gla: "Scottish Gaelic",
  glc: "Bon Gula",
  gld: "Nanai",
  gle: "Irish",
  glg: "Galician",
  glh: "Northwest Pashai",
  gli: "Guliguli",
  glj: "Gula Iro",
  glk: "Gilaki",
  gll: "Garlali",
  glo: "Galambu",
  glr: "Glaro-Twabo",
  glu: "Gula (Chad)",
  glv: "Manx",
  glw: "Glavda",
  gly: "Gule",
  gma: "Gambera",
  gmb: "Gula'alaa",
  gmd: "Mághdì",
  gmg: "Magɨyi",
  gmh: "Middle High German (ca. 1050-1500)",
  gml: "Middle Low German",
  gmm: "Gbaya-Mbodomo",
  gmn: "Gimnime",
  gmu: "Gumalu",
  gmv: "Gamo",
  gmx: "Magoma",
  gmy: "Mycenaean Greek",
  gmz: "Mgbolizhia",
  gna: "Kaansa",
  gnb: "Gangte",
  gnc: "Guanche",
  gnd: "Zulgo-Gemzek",
  gne: "Ganang",
  gng: "Ngangam",
  gnh: "Lere",
  gni: "Gooniyandi",
  gnk: "//Gana",
  gnl: "Gangulu",
  gnm: "Ginuman",
  gnn: "Gumatj",
  gno: "Northern Gondi",
  gnq: "Gana",
  gnr: "Gureng Gureng",
  gnt: "Guntai",
  gnu: "Gnau",
  gnw: "Western Bolivian Guaraní",
  gnz: "Ganzi",
  goa: "Guro",
  gob: "Playero",
  goc: "Gorakor",
  god: "Godié",
  goe: "Gongduk",
  gof: "Gofa",
  gog: "Gogo",
  goh: "Old High German (ca. 750-1050)",
  goi: "Gobasi",
  goj: "Gowlan",
  gok: "Gowli",
  gol: "Gola",
  gom: "Goan Konkani",
  gon: "Gondi",
  goo: "Gone Dau",
  gop: "Yeretuar",
  goq: "Gorap",
  gor: "Gorontalo",
  gos: "Gronings",
  got: "Gothic",
  gou: "Gavar",
  gow: "Gorowa",
  gox: "Gobu",
  goy: "Goundo",
  goz: "Gozarkhani",
  gpa: "Gupa-Abawa",
  gpe: "Ghanaian Pidgin English",
  gpn: "Taiap",
  gqa: "Ga'anda",
  gqi: "Guiqiong",
  gqn: "Guana (Brazil)",
  gqr: "Gor",
  gqu: "Qau",
  gra: "Rajput Garasia",
  grb: "Grebo",
  grc: "Ancient Greek (to 1453)",
  grd: "Guruntum-Mbaaru",
  grg: "Madi",
  grh: "Gbiri-Niragu",
  gri: "Ghari",
  grj: "Southern Grebo",
  grm: "Kota Marudu Talantang",
  grn: "Guarani",
  gro: "Groma",
  grq: "Gorovu",
  grr: "Taznatit",
  grs: "Gresi",
  grt: "Garo",
  gru: "Kistane",
  grv: "Central Grebo",
  grw: "Gweda",
  grx: "Guriaso",
  gry: "Barclayville Grebo",
  grz: "Guramalum",
  gse: "Ghanaian Sign Language",
  gsg: "German Sign Language",
  gsl: "Gusilay",
  gsm: "Guatemalan Sign Language",
  gsn: "Nema",
  gso: "Southwest Gbaya",
  gsp: "Wasembo",
  gss: "Greek Sign Language",
  gsw: "Swiss German",
  gta: "Guató",
  gtu: "Aghu-Tharnggala",
  gua: "Shiki",
  gub: "Guajajára",
  guc: "Wayuu",
  gud: "Yocoboué Dida",
  gue: "Gurinji",
  guf: "Gupapuyngu",
  gug: "Paraguayan Guaraní",
  guh: "Guahibo",
  gui: "Eastern Bolivian Guaraní",
  guj: "Gujarati",
  guk: "Gumuz",
  gul: "Sea Island Creole English",
  gum: "Guambiano",
  gun: "Mbyá Guaraní",
  guo: "Guayabero",
  gup: "Gunwinggu",
  guq: "Aché",
  gur: "Farefare",
  gus: "Guinean Sign Language",
  gut: "Maléku Jaíka",
  guu: "Yanomamö",
  guw: "Gun",
  gux: "Gourmanchéma",
  guz: "Gusii",
  gva: "Guana (Paraguay)",
  gvc: "Guanano",
  gve: "Duwet",
  gvf: "Golin",
  gvj: "Guajá",
  gvl: "Gulay",
  gvm: "Gurmana",
  gvn: "Kuku-Yalanji",
  gvo: "Gavião Do Jiparaná",
  gvp: "Pará Gavião",
  gvr: "Gurung",
  gvs: "Gumawana",
  gvy: "Guyani",
  gwa: "Mbato",
  gwb: "Gwa",
  gwc: "Kalami",
  gwd: "Gawwada",
  gwe: "Gweno",
  gwf: "Gowro",
  gwg: "Moo",
  gwi: "Gwichʼin",
  gwj: "/Gwi",
  gwm: "Awngthim",
  gwn: "Gwandara",
  gwr: "Gwere",
  gwt: "Gawar-Bati",
  gwu: "Guwamu",
  gww: "Kwini",
  gwx: "Gua",
  gxx: "Wè Southern",
  gya: "Northwest Gbaya",
  gyb: "Garus",
  gyd: "Kayardild",
  gye: "Gyem",
  gyf: "Gungabula",
  gyg: "Gbayi",
  gyi: "Gyele",
  gyl: "Gayil",
  gym: "Ngäbere",
  gyn: "Guyanese Creole English",
  gyr: "Guarayu",
  gyy: "Gunya",
  gza: "Ganza",
  gzi: "Gazi",
  gzn: "Gane",
  haa: "Han",
  hab: "Hanoi Sign Language",
  hac: "Gurani",
  had: "Hatam",
  hae: "Eastern Oromo",
  haf: "Haiphong Sign Language",
  hag: "Hanga",
  hah: "Hahon",
  hai: "Haida",
  haj: "Hajong",
  hak: "Hakka Chinese",
  hal: "Halang",
  ham: "Hewa",
  han: "Hangaza",
  hao: "Hakö",
  hap: "Hupla",
  haq: "Ha",
  har: "Harari",
  has: "Haisla",
  hat: "Haitian",
  hau: "Hausa",
  hav: "Havu",
  haw: "Hawaiian",
  hax: "Southern Haida",
  hay: "Haya",
  haz: "Hazaragi",
  hba: "Hamba",
  hbb: "Huba",
  hbn: "Heiban",
  hbo: "Ancient Hebrew",
  hbs: "Serbo-Croatian",
  hbu: "Habu",
  hca: "Andaman Creole Hindi",
  hch: "Huichol",
  hdn: "Northern Haida",
  hds: "Honduras Sign Language",
  hdy: "Hadiyya",
  hea: "Northern Qiandong Miao",
  heb: "Hebrew",
  hed: "Herdé",
  heg: "Helong",
  heh: "Hehe",
  hei: "Heiltsuk",
  hem: "Hemba",
  her: "Herero",
  hgm: "Hai//om",
  hgw: "Haigwai",
  hhi: "Hoia Hoia",
  hhr: "Kerak",
  hhy: "Hoyahoya",
  hia: "Lamang",
  hib: "Hibito",
  hid: "Hidatsa",
  hif: "Fiji Hindi",
  hig: "Kamwe",
  hih: "Pamosu",
  hii: "Hinduri",
  hij: "Hijuk",
  hik: "Seit-Kaitetu",
  hil: "Hiligaynon",
  hin: "Hindi",
  hio: "Tsoa",
  hir: "Himarimã",
  hit: "Hittite",
  hiw: "Hiw",
  hix: "Hixkaryána",
  hji: "Haji",
  hka: "Kahe",
  hke: "Hunde",
  hkk: "Hunjara-Kaina Ke",
  hks: "Hong Kong Sign Language",
  hla: "Halia",
  hlb: "Halbi",
  hld: "Halang Doan",
  hle: "Hlersu",
  hlt: "Matu Chin",
  hlu: "Hieroglyphic Luwian",
  hma: "Southern Mashan Hmong",
  hmb: "Humburi Senni Songhay",
  hmc: "Central Huishui Hmong",
  hmd: "Large Flowery Miao",
  hme: "Eastern Huishui Hmong",
  hmf: "Hmong Don",
  hmg: "Southwestern Guiyang Hmong",
  hmh: "Southwestern Huishui Hmong",
  hmi: "Northern Huishui Hmong",
  hmj: "Ge",
  hmk: "Maek",
  hml: "Luopohe Hmong",
  hmm: "Central Mashan Hmong",
  hmn: "Hmong",
  hmo: "Hiri Motu",
  hmp: "Northern Mashan Hmong",
  hmq: "Eastern Qiandong Miao",
  hmr: "Hmar",
  hms: "Southern Qiandong Miao",
  hmt: "Hamtai",
  hmu: "Hamap",
  hmv: "Hmong Dô",
  hmw: "Western Mashan Hmong",
  hmy: "Southern Guiyang Hmong",
  hmz: "Hmong Shua",
  hna: "Mina (Cameroon)",
  hnd: "Southern Hindko",
  hne: "Chhattisgarhi",
  hnh: "//Ani",
  hni: "Hani",
  hnj: "Hmong Njua",
  hnn: "Hanunoo",
  hno: "Northern Hindko",
  hns: "Caribbean Hindustani",
  hnu: "Hung",
  hoa: "Hoava",
  hob: "Mari (Madang Province)",
  hoc: "Ho",
  hod: "Holma",
  hoe: "Horom",
  hoh: "Hobyót",
  hoi: "Holikachuk",
  hoj: "Hadothi",
  hol: "Holu",
  hom: "Homa",
  hoo: "Holoholo",
  hop: "Hopi",
  hor: "Horo",
  hos: "Ho Chi Minh City Sign Language",
  hot: "Hote",
  hov: "Hovongan",
  how: "Honi",
  hoy: "Holiya",
  hoz: "Hozo",
  hpo: "Hpon",
  hps: "Hawai'i Sign Language (HSL)",
  hra: "Hrangkhol",
  hrc: "Niwer Mil",
  hre: "Hre",
  hrk: "Haruku",
  hrm: "Horned Miao",
  hro: "Haroi",
  hrp: "Nhirrpi",
  hrt: "Hértevin",
  hru: "Hruso",
  hrv: "Croatian",
  hrw: "Warwar Feni",
  hrx: "Hunsrik",
  hrz: "Harzani",
  hsb: "Upper Sorbian",
  hsh: "Hungarian Sign Language",
  hsl: "Hausa Sign Language",
  hsn: "Xiang Chinese",
  hss: "Harsusi",
  hti: "Hoti",
  hto: "Minica Huitoto",
  hts: "Hadza",
  htu: "Hitu",
  htx: "Middle Hittite",
  hub: "Huambisa",
  huc: "Err:510",
  hud: "Huaulu",
  hue: "San Francisco Del Mar Huave",
  huf: "Humene",
  hug: "Huachipaeri",
  huh: "Huilliche",
  hui: "Huli",
  huj: "Northern Guiyang Hmong",
  huk: "Hulung",
  hul: "Hula",
  hum: "Hungana",
  hun: "Hungarian",
  huo: "Hu",
  hup: "Hupa",
  huq: "Tsat",
  hur: "Halkomelem",
  hus: "Huastec",
  hut: "Humla",
  huu: "Murui Huitoto",
  huv: "San Mateo Del Mar Huave",
  huw: "Hukumina",
  hux: "Nüpode Huitoto",
  huy: "Hulaulá",
  huz: "Hunzib",
  hvc: "Haitian Vodoun Culture Language",
  hve: "San Dionisio Del Mar Huave",
  hvk: "Haveke",
  hvn: "Sabu",
  hvv: "Santa María Del Mar Huave",
  hwa: "Wané",
  hwc: "Hawai'i Creole English",
  hwo: "Hwana",
  hya: "Hya",
  hye: "Armenian",
  iai: "Iaai",
  ian: "Iatmul",
  iar: "Purari",
  iba: "Iban",
  ibb: "Ibibio",
  ibd: "Iwaidja",
  ibe: "Akpes",
  ibg: "Ibanag",
  ibh: "Bih",
  ibl: "Ibaloi",
  ibm: "Agoi",
  ibn: "Ibino",
  ibo: "Igbo",
  ibr: "Ibuoro",
  ibu: "Ibu",
  iby: "Ibani",
  ica: "Ede Ica",
  ich: "Etkywan",
  icl: "Icelandic Sign Language",
  icr: "Islander Creole English",
  ida: "Idakho-Isukha-Tiriki",
  idb: "Indo-Portuguese",
  idc: "Idon",
  idd: "Ede Idaca",
  ide: "Idere",
  idi: "Idi",
  ido: "Ido",
  idr: "Indri",
  ids: "Idesa",
  idt: "Idaté",
  idu: "Idoma",
  ifa: "Amganad Ifugao",
  ifb: "Batad Ifugao",
  ife: "Ifè",
  iff: "Ifo",
  ifk: "Tuwali Ifugao",
  ifm: "Teke-Fuumu",
  ifu: "Mayoyao Ifugao",
  ify: "Keley-I Kallahan",
  igb: "Ebira",
  ige: "Igede",
  igg: "Igana",
  igl: "Igala",
  igm: "Kanggape",
  ign: "Ignaciano",
  igo: "Isebe",
  igs: "Interglossa",
  igw: "Igwe",
  ihb: "Iha Based Pidgin",
  ihi: "Ihievbe",
  ihp: "Iha",
  ihw: "Bidhawal",
  iii: "Sichuan Yi",
  iin: "Thiin",
  ijc: "Izon",
  ije: "Biseni",
  ijj: "Ede Ije",
  ijn: "Kalabari",
  ijs: "Southeast Ijo",
  ike: "Eastern Canadian Inuktitut",
  iki: "Iko",
  ikk: "Ika",
  ikl: "Ikulu",
  iko: "Olulumo-Ikom",
  ikp: "Ikpeshi",
  ikr: "Ikaranggal",
  iks: "Inuit Sign Language",
  ikt: "Inuinnaqtun",
  iku: "Inuktitut",
  ikv: "Iku-Gora-Ankwa",
  ikw: "Ikwere",
  ikx: "Ik",
  ikz: "Ikizu",
  ila: "Ile Ape",
  ilb: "Ila",
  ile: "Interlingue",
  ilg: "Garig-Ilgar",
  ili: "Ili Turki",
  ilk: "Ilongot",
  ilm: "Iranun (Malaysia)",
  ilo: "Iloko",
  ilp: "Iranun (Philippines)",
  ils: "International Sign",
  ilu: "Ili'uun",
  ilv: "Ilue",
  ima: "Mala Malasar",
  imi: "Anamgura",
  iml: "Miluk",
  imn: "Imonda",
  imo: "Imbongu",
  imr: "Imroing",
  ims: "Marsian",
  imy: "Milyan",
  ina: "Interlingua (International Auxiliary Language Association)",
  inb: "Inga",
  ind: "Indonesian",
  ing: "Degexit'an",
  inh: "Ingush",
  inj: "Jungle Inga",
  inl: "Indonesian Sign Language",
  inm: "Minaean",
  inn: "Isinai",
  ino: "Inoke-Yate",
  inp: "Iñapari",
  ins: "Indian Sign Language",
  "int": "Intha",
  inz: "Ineseño",
  ior: "Inor",
  iou: "Tuma-Irumu",
  iow: "Iowa-Oto",
  ipi: "Ipili",
  ipk: "Inupiaq",
  ipo: "Ipiko",
  iqu: "Iquito",
  iqw: "Ikwo",
  ire: "Iresim",
  irh: "Irarutu",
  iri: "Irigwe",
  irk: "Iraqw",
  irn: "Irántxe",
  irr: "Ir",
  iru: "Irula",
  irx: "Kamberau",
  iry: "Iraya",
  isa: "Isabi",
  isc: "Isconahua",
  isd: "Isnag",
  ise: "Italian Sign Language",
  isg: "Irish Sign Language",
  ish: "Esan",
  isi: "Nkem-Nkum",
  isk: "Ishkashimi",
  isl: "Icelandic",
  ism: "Masimasi",
  isn: "Isanzu",
  iso: "Isoko",
  isr: "Israeli Sign Language",
  ist: "Istriot",
  isu: "Isu (Menchum Division)",
  ita: "Italian",
  itb: "Binongan Itneg",
  itd: "Southern Tidung",
  ite: "Itene",
  iti: "Inlaod Itneg",
  itk: "Judeo-Italian",
  itl: "Itelmen",
  itm: "Itu Mbon Uzo",
  ito: "Itonama",
  itr: "Iteri",
  its: "Isekiri",
  itt: "Maeng Itneg",
  itv: "Itawit",
  itw: "Ito",
  itx: "Itik",
  ity: "Moyadan Itneg",
  itz: "Itzá",
  ium: "Iu Mien",
  ivb: "Ibatan",
  ivv: "Ivatan",
  iwk: "I-Wak",
  iwm: "Iwam",
  iwo: "Iwur",
  iws: "Sepik Iwam",
  ixc: "Ixcatec",
  ixl: "Ixil",
  iya: "Iyayu",
  iyo: "Mesaka",
  iyx: "Yaka (Congo)",
  izh: "Ingrian",
  izr: "Izere",
  izz: "Izii",
  jaa: "Jamamadí",
  jab: "Hyam",
  jac: "Popti'",
  jad: "Jahanka",
  jae: "Yabem",
  jaf: "Jara",
  jah: "Jah Hut",
  jaj: "Zazao",
  jak: "Jakun",
  jal: "Yalahatan",
  jam: "Jamaican Creole English",
  jan: "Jandai",
  jao: "Yanyuwa",
  jaq: "Yaqay",
  jas: "New Caledonian Javanese",
  jat: "Jakati",
  jau: "Yaur",
  jav: "Javanese",
  jax: "Jambi Malay",
  jay: "Yan-nhangu",
  jaz: "Jawe",
  jbe: "Judeo-Berber",
  jbi: "Badjiri",
  jbj: "Arandai",
  jbk: "Barikewa",
  jbn: "Nafusi",
  jbo: "Lojban",
  jbr: "Jofotek-Bromnya",
  jbt: "Jabutí",
  jbu: "Jukun Takum",
  jbw: "Yawijibaya",
  jcs: "Jamaican Country Sign Language",
  jct: "Krymchak",
  jda: "Jad",
  jdg: "Jadgali",
  jdt: "Judeo-Tat",
  jeb: "Jebero",
  jee: "Jerung",
  jeh: "Jeh",
  jei: "Yei",
  jek: "Jeri Kuo",
  jel: "Yelmek",
  jen: "Dza",
  jer: "Jere",
  jet: "Manem",
  jeu: "Jonkor Bourmataguil",
  jgb: "Ngbee",
  jge: "Judeo-Georgian",
  jgk: "Gwak",
  jgo: "Ngomba",
  jhi: "Jehai",
  jhs: "Jhankot Sign Language",
  jia: "Jina",
  jib: "Jibu",
  jic: "Tol",
  jid: "Bu",
  jie: "Jilbe",
  jig: "Djingili",
  jih: "sTodsde",
  jii: "Jiiddu",
  jil: "Jilim",
  jim: "Jimi (Cameroon)",
  jio: "Jiamao",
  jiq: "Guanyinqiao",
  jit: "Jita",
  jiu: "Youle Jinuo",
  jiv: "Shuar",
  jiy: "Buyuan Jinuo",
  jje: "Jejueo",
  jjr: "Bankal",
  jka: "Kaera",
  jkm: "Mobwa Karen",
  jko: "Kubo",
  jkp: "Paku Karen",
  jkr: "Koro (India)",
  jku: "Labir",
  jle: "Ngile",
  jls: "Jamaican Sign Language",
  jma: "Dima",
  jmb: "Zumbun",
  jmc: "Machame",
  jmd: "Yamdena",
  jmi: "Jimi (Nigeria)",
  jml: "Jumli",
  jmn: "Makuri Naga",
  jmr: "Kamara",
  jms: "Mashi (Nigeria)",
  jmw: "Mouwase",
  jmx: "Western Juxtlahuaca Mixtec",
  jna: "Jangshung",
  jnd: "Jandavra",
  jng: "Yangman",
  jni: "Janji",
  jnj: "Yemsa",
  jnl: "Rawat",
  jns: "Jaunsari",
  job: "Joba",
  jod: "Wojenaka",
  jog: "Jogi",
  jor: "Jorá",
  jos: "Jordanian Sign Language",
  jow: "Jowulu",
  jpa: "Jewish Palestinian Aramaic",
  jpn: "Japanese",
  jpr: "Judeo-Persian",
  jqr: "Jaqaru",
  jra: "Jarai",
  jrb: "Judeo-Arabic",
  jrr: "Jiru",
  jrt: "Jorto",
  jru: "Japrería",
  jsl: "Japanese Sign Language",
  jua: "Júma",
  jub: "Wannu",
  juc: "Jurchen",
  jud: "Worodougou",
  juh: "Hõne",
  jui: "Ngadjuri",
  juk: "Wapan",
  jul: "Jirel",
  jum: "Jumjum",
  jun: "Juang",
  juo: "Jiba",
  jup: "Hupdë",
  jur: "Jurúna",
  jus: "Jumla Sign Language",
  jut: "Jutish",
  juu: "Ju",
  juw: "Wãpha",
  juy: "Juray",
  jvd: "Javindo",
  jvn: "Caribbean Javanese",
  jwi: "Jwira-Pepesa",
  jya: "Jiarong",
  jye: "Judeo-Yemeni Arabic",
  jyy: "Jaya",
  kaa: "Kara-Kalpak",
  kab: "Kabyle",
  kac: "Kachin",
  kad: "Adara",
  kae: "Ketangalan",
  kaf: "Katso",
  kag: "Kajaman",
  kah: "Kara (Central African Republic)",
  kai: "Karekare",
  kaj: "Jju",
  kak: "Kalanguya",
  kal: "Kalaallisut",
  kam: "Kamba (Kenya)",
  kan: "Kannada",
  kao: "Xaasongaxango",
  kap: "Bezhta",
  kaq: "Capanahua",
  kas: "Kashmiri",
  kat: "Georgian",
  kau: "Kanuri",
  kav: "Katukína",
  kaw: "Kawi",
  kax: "Kao",
  kay: "Kamayurá",
  kaz: "Kazakh",
  kba: "Kalarko",
  kbb: "Kaxuiâna",
  kbc: "Kadiwéu",
  kbd: "Kabardian",
  kbe: "Kanju",
  kbg: "Khamba",
  kbh: "Camsá",
  kbi: "Kaptiau",
  kbj: "Kari",
  kbk: "Grass Koiari",
  kbl: "Kanembu",
  kbm: "Iwal",
  kbn: "Kare (Central African Republic)",
  kbo: "Keliko",
  kbp: "Kabiyè",
  kbq: "Kamano",
  kbr: "Kafa",
  kbs: "Kande",
  kbt: "Abadi",
  kbu: "Kabutra",
  kbv: "Dera (Indonesia)",
  kbw: "Kaiep",
  kbx: "Ap Ma",
  kby: "Manga Kanuri",
  kbz: "Duhwa",
  kca: "Khanty",
  kcb: "Kawacha",
  kcc: "Lubila",
  kcd: "Ngkâlmpw Kanum",
  kce: "Kaivi",
  kcf: "Ukaan",
  kcg: "Tyap",
  kch: "Vono",
  kci: "Kamantan",
  kcj: "Kobiana",
  kck: "Kalanga",
  kcl: "Kela (Papua New Guinea)",
  kcm: "Gula (Central African Republic)",
  kcn: "Nubi",
  kco: "Kinalakna",
  kcp: "Kanga",
  kcq: "Kamo",
  kcr: "Katla",
  kcs: "Koenoem",
  kct: "Kaian",
  kcu: "Kami (Tanzania)",
  kcv: "Kete",
  kcw: "Kabwari",
  kcx: "Kachama-Ganjule",
  kcy: "Korandje",
  kcz: "Konongo",
  kda: "Worimi",
  kdc: "Kutu",
  kdd: "Yankunytjatjara",
  kde: "Makonde",
  kdf: "Mamusi",
  kdg: "Seba",
  kdh: "Tem",
  kdi: "Kumam",
  kdj: "Karamojong",
  kdk: "Numèè",
  kdl: "Tsikimba",
  kdm: "Kagoma",
  kdn: "Kunda",
  kdp: "Kaningdon-Nindem",
  kdq: "Koch",
  kdr: "Karaim",
  kdt: "Kuy",
  kdu: "Kadaru",
  kdw: "Koneraw",
  kdx: "Kam",
  kdy: "Keder",
  kdz: "Kwaja",
  kea: "Kabuverdianu",
  keb: "Kélé",
  kec: "Keiga",
  ked: "Kerewe",
  kee: "Eastern Keres",
  kef: "Kpessi",
  keg: "Tese",
  keh: "Keak",
  kei: "Kei",
  kej: "Kadar",
  kek: "Kekchí",
  kel: "Kela (Democratic Republic of Congo)",
  kem: "Kemak",
  ken: "Kenyang",
  keo: "Kakwa",
  kep: "Kaikadi",
  keq: "Kamar",
  ker: "Kera",
  kes: "Kugbo",
  ket: "Ket",
  keu: "Akebu",
  kev: "Kanikkaran",
  kew: "West Kewa",
  kex: "Kukna",
  key: "Kupia",
  kez: "Kukele",
  kfa: "Kodava",
  kfb: "Northwestern Kolami",
  kfc: "Konda-Dora",
  kfd: "Korra Koraga",
  kfe: "Kota (India)",
  kff: "Koya",
  kfg: "Kudiya",
  kfh: "Kurichiya",
  kfi: "Kannada Kurumba",
  kfj: "Kemiehua",
  kfk: "Kinnauri",
  kfl: "Kung",
  kfm: "Khunsari",
  kfn: "Kuk",
  kfo: "Koro (Côte d'Ivoire)",
  kfp: "Korwa",
  kfq: "Korku",
  kfr: "Kachhi",
  kfs: "Bilaspuri",
  kft: "Kanjari",
  kfu: "Katkari",
  kfv: "Kurmukar",
  kfw: "Kharam Naga",
  kfx: "Kullu Pahari",
  kfy: "Kumaoni",
  kfz: "Koromfé",
  kga: "Koyaga",
  kgb: "Kawe",
  kge: "Komering",
  kgf: "Kube",
  kgg: "Kusunda",
  kgi: "Selangor Sign Language",
  kgj: "Gamale Kham",
  kgk: "Kaiwá",
  kgl: "Kunggari",
  kgm: "Karipúna",
  kgn: "Karingani",
  kgo: "Krongo",
  kgp: "Kaingang",
  kgq: "Kamoro",
  kgr: "Abun",
  kgs: "Kumbainggar",
  kgt: "Somyev",
  kgu: "Kobol",
  kgv: "Karas",
  kgw: "Karon Dori",
  kgx: "Kamaru",
  kgy: "Kyerung",
  kha: "Khasi",
  khb: "Lü",
  khc: "Tukang Besi North",
  khd: "Bädi Kanum",
  khe: "Korowai",
  khf: "Khuen",
  khg: "Khams Tibetan",
  khh: "Kehu",
  khj: "Kuturmi",
  khk: "Halh Mongolian",
  khl: "Lusi",
  khm: "Central Khmer",
  khn: "Khandesi",
  kho: "Khotanese",
  khp: "Kapori",
  khq: "Koyra Chiini Songhay",
  khr: "Kharia",
  khs: "Kasua",
  kht: "Khamti",
  khu: "Nkhumbi",
  khv: "Khvarshi",
  khw: "Khowar",
  khx: "Kanu",
  khy: "Kele (Democratic Republic of Congo)",
  khz: "Keapara",
  kia: "Kim",
  kib: "Koalib",
  kic: "Kickapoo",
  kid: "Koshin",
  kie: "Kibet",
  kif: "Eastern Parbate Kham",
  kig: "Kimaama",
  kih: "Kilmeri",
  kii: "Kitsai",
  kij: "Kilivila",
  kik: "Kikuyu",
  kil: "Kariya",
  kim: "Karagas",
  kin: "Kinyarwanda",
  kio: "Kiowa",
  kip: "Sheshi Kham",
  kiq: "Kosadle",
  kir: "Kirghiz",
  kis: "Kis",
  kit: "Agob",
  kiu: "Kirmanjki (individual language)",
  kiv: "Kimbu",
  kiw: "Northeast Kiwai",
  kix: "Khiamniungan Naga",
  kiy: "Kirikiri",
  kiz: "Kisi",
  kja: "Mlap",
  kjb: "Q'anjob'al",
  kjc: "Coastal Konjo",
  kjd: "Southern Kiwai",
  kje: "Kisar",
  kjf: "Khalaj",
  kjg: "Khmu",
  kjh: "Khakas",
  kji: "Zabana",
  kjj: "Khinalugh",
  kjk: "Highland Konjo",
  kjl: "Western Parbate Kham",
  kjm: "Kháng",
  kjn: "Kunjen",
  kjo: "Harijan Kinnauri",
  kjp: "Pwo Eastern Karen",
  kjq: "Western Keres",
  kjr: "Kurudu",
  kjs: "East Kewa",
  kjt: "Phrae Pwo Karen",
  kju: "Kashaya",
  kjv: "Kaikavian Literary Language",
  kjx: "Ramopa",
  kjy: "Erave",
  kjz: "Bumthangkha",
  kka: "Kakanda",
  kkb: "Kwerisa",
  kkc: "Odoodee",
  kkd: "Kinuku",
  kke: "Kakabe",
  kkf: "Kalaktang Monpa",
  kkg: "Mabaka Valley Kalinga",
  kkh: "Khün",
  kki: "Kagulu",
  kkj: "Kako",
  kkk: "Kokota",
  kkl: "Kosarek Yale",
  kkm: "Kiong",
  kkn: "Kon Keu",
  kko: "Karko",
  kkp: "Gugubera",
  kkq: "Kaiku",
  kkr: "Kir-Balar",
  kks: "Giiwo",
  kkt: "Koi",
  kku: "Tumi",
  kkv: "Kangean",
  kkw: "Teke-Kukuya",
  kkx: "Kohin",
  kky: "Guguyimidjir",
  kkz: "Kaska",
  kla: "Klamath-Modoc",
  klb: "Kiliwa",
  klc: "Kolbila",
  kld: "Gamilaraay",
  kle: "Kulung (Nepal)",
  klf: "Kendeje",
  klg: "Tagakaulo",
  klh: "Weliki",
  kli: "Kalumpang",
  klj: "Turkic Khalaj",
  klk: "Kono (Nigeria)",
  kll: "Kagan Kalagan",
  klm: "Migum",
  kln: "Kalenjin",
  klo: "Kapya",
  klp: "Kamasa",
  klq: "Rumu",
  klr: "Khaling",
  kls: "Kalasha",
  klt: "Nukna",
  klu: "Klao",
  klv: "Maskelynes",
  klw: "Tado",
  klx: "Koluwawa",
  kly: "Kalao",
  klz: "Kabola",
  kma: "Konni",
  kmb: "Kimbundu",
  kmc: "Southern Dong",
  kmd: "Majukayang Kalinga",
  kme: "Bakole",
  kmf: "Kare (Papua New Guinea)",
  kmg: "Kâte",
  kmh: "Kalam",
  kmi: "Kami (Nigeria)",
  kmj: "Kumarbhag Paharia",
  kmk: "Limos Kalinga",
  kml: "Tanudan Kalinga",
  kmm: "Kom (India)",
  kmn: "Awtuw",
  kmo: "Kwoma",
  kmp: "Gimme",
  kmq: "Kwama",
  kmr: "Northern Kurdish",
  kms: "Kamasau",
  kmt: "Kemtuik",
  kmu: "Kanite",
  kmv: "Karipúna Creole French",
  kmw: "Komo (Democratic Republic of Congo)",
  kmx: "Waboda",
  kmy: "Koma",
  kmz: "Khorasani Turkish",
  kna: "Dera (Nigeria)",
  knb: "Lubuagan Kalinga",
  knc: "Central Kanuri",
  knd: "Konda",
  kne: "Kankanaey",
  knf: "Mankanya",
  kng: "Koongo",
  kni: "Kanufi",
  knj: "Western Kanjobal",
  knk: "Kuranko",
  knl: "Keninjal",
  knm: "Kanamarí",
  knn: "Konkani (individual language)",
  kno: "Kono (Sierra Leone)",
  knp: "Kwanja",
  knq: "Kintaq",
  knr: "Kaningra",
  kns: "Kensiu",
  knt: "Panoan Katukína",
  knu: "Kono (Guinea)",
  knv: "Tabo",
  knw: "Kung-Ekoka",
  knx: "Kendayan",
  kny: "Kanyok",
  knz: "Kalamsé",
  koa: "Konomala",
  koc: "Kpati",
  kod: "Kodi",
  koe: "Kacipo-Balesi",
  kof: "Kubi",
  kog: "Cogui",
  koh: "Koyo",
  koi: "Komi-Permyak",
  kok: "Konkani (macrolanguage)",
  kol: "Kol (Papua New Guinea)",
  kom: "Komi",
  kon: "Kongo",
  koo: "Konzo",
  kop: "Waube",
  koq: "Kota (Gabon)",
  kor: "Korean",
  kos: "Kosraean",
  kot: "Lagwan",
  kou: "Koke",
  kov: "Kudu-Camo",
  kow: "Kugama",
  koy: "Koyukon",
  koz: "Korak",
  kpa: "Kutto",
  kpb: "Mullu Kurumba",
  kpc: "Curripaco",
  kpd: "Koba",
  kpe: "Kpelle",
  kpf: "Komba",
  kpg: "Kapingamarangi",
  kph: "Kplang",
  kpi: "Kofei",
  kpj: "Karajá",
  kpk: "Kpan",
  kpl: "Kpala",
  kpm: "Koho",
  kpn: "Kepkiriwát",
  kpo: "Ikposo",
  kpq: "Korupun-Sela",
  kpr: "Korafe-Yegha",
  kps: "Tehit",
  kpt: "Karata",
  kpu: "Kafoa",
  kpv: "Komi-Zyrian",
  kpw: "Kobon",
  kpx: "Mountain Koiali",
  kpy: "Koryak",
  kpz: "Kupsabiny",
  kqa: "Mum",
  kqb: "Kovai",
  kqc: "Doromu-Koki",
  kqd: "Koy Sanjaq Surat",
  kqe: "Kalagan",
  kqf: "Kakabai",
  kqg: "Khe",
  kqh: "Kisankasa",
  kqi: "Koitabu",
  kqj: "Koromira",
  kqk: "Kotafon Gbe",
  kql: "Kyenele",
  kqm: "Khisa",
  kqn: "Kaonde",
  kqo: "Eastern Krahn",
  kqp: "Kimré",
  kqq: "Krenak",
  kqr: "Kimaragang",
  kqs: "Northern Kissi",
  kqt: "Klias River Kadazan",
  kqu: "Seroa",
  kqv: "Okolod",
  kqw: "Kandas",
  kqx: "Mser",
  kqy: "Koorete",
  kqz: "Korana",
  kra: "Kumhali",
  krb: "Karkin",
  krc: "Karachay-Balkar",
  krd: "Kairui-Midiki",
  kre: "Panará",
  krf: "Koro (Vanuatu)",
  krh: "Kurama",
  kri: "Krio",
  krj: "Kinaray-A",
  krk: "Kerek",
  krl: "Karelian",
  krn: "Sapo",
  krp: "Korop",
  krr: "Krung",
  krs: "Gbaya (Sudan)",
  krt: "Tumari Kanuri",
  kru: "Kurukh",
  krv: "Kavet",
  krw: "Western Krahn",
  krx: "Karon",
  kry: "Kryts",
  krz: "Sota Kanum",
  ksa: "Shuwa-Zamani",
  ksb: "Shambala",
  ksc: "Southern Kalinga",
  ksd: "Kuanua",
  kse: "Kuni",
  ksf: "Bafia",
  ksg: "Kusaghe",
  ksh: "Kölsch",
  ksi: "Krisa",
  ksj: "Uare",
  ksk: "Kansa",
  ksl: "Kumalu",
  ksm: "Kumba",
  ksn: "Kasiguranin",
  kso: "Kofa",
  ksp: "Kaba",
  ksq: "Kwaami",
  ksr: "Borong",
  kss: "Southern Kisi",
  kst: "Winyé",
  ksu: "Khamyang",
  ksv: "Kusu",
  ksw: "S'gaw Karen",
  ksx: "Kedang",
  ksy: "Kharia Thar",
  ksz: "Kodaku",
  kta: "Katua",
  ktb: "Kambaata",
  ktc: "Kholok",
  ktd: "Kokata",
  kte: "Nubri",
  ktf: "Kwami",
  ktg: "Kalkutung",
  kth: "Karanga",
  kti: "North Muyu",
  ktj: "Plapo Krumen",
  ktk: "Kaniet",
  ktl: "Koroshi",
  ktm: "Kurti",
  ktn: "Karitiâna",
  kto: "Kuot",
  ktp: "Kaduo",
  ktq: "Katabaga",
  kts: "South Muyu",
  ktt: "Ketum",
  ktu: "Kituba (Democratic Republic of Congo)",
  ktv: "Eastern Katu",
  ktw: "Kato",
  ktx: "Kaxararí",
  kty: "Kango (Bas-Uélé District)",
  ktz: "Ju/'hoan",
  kua: "Kuanyama",
  kub: "Kutep",
  kuc: "Kwinsu",
  kud: "'Auhelawa",
  kue: "Kuman (Papua New Guinea)",
  kuf: "Western Katu",
  kug: "Kupa",
  kuh: "Kushi",
  kui: "Kuikúro-Kalapálo",
  kuj: "Kuria",
  kuk: "Kepo'",
  kul: "Kulere",
  kum: "Kumyk",
  kun: "Kunama",
  kuo: "Kumukio",
  kup: "Kunimaipa",
  kuq: "Karipuna",
  kur: "Kurdish",
  kus: "Kusaal",
  kut: "Kutenai",
  kuu: "Upper Kuskokwim",
  kuv: "Kur",
  kuw: "Kpagua",
  kux: "Kukatja",
  kuy: "Kuuku-Ya'u",
  kuz: "Kunza",
  kva: "Bagvalal",
  kvb: "Kubu",
  kvc: "Kove",
  kvd: "Kui (Indonesia)",
  kve: "Kalabakan",
  kvf: "Kabalai",
  kvg: "Kuni-Boazi",
  kvh: "Komodo",
  kvi: "Kwang",
  kvj: "Psikye",
  kvk: "Korean Sign Language",
  kvl: "Kayaw",
  kvm: "Kendem",
  kvn: "Border Kuna",
  kvo: "Dobel",
  kvp: "Kompane",
  kvq: "Geba Karen",
  kvr: "Kerinci",
  kvt: "Lahta Karen",
  kvu: "Yinbaw Karen",
  kvv: "Kola",
  kvw: "Wersing",
  kvx: "Parkari Koli",
  kvy: "Yintale Karen",
  kvz: "Tsakwambo",
  kwa: "Dâw",
  kwb: "Kwa",
  kwc: "Likwala",
  kwd: "Kwaio",
  kwe: "Kwerba",
  kwf: "Kwara'ae",
  kwg: "Sara Kaba Deme",
  kwh: "Kowiai",
  kwi: "Awa-Cuaiquer",
  kwj: "Kwanga",
  kwk: "Kwakiutl",
  kwl: "Kofyar",
  kwm: "Kwambi",
  kwn: "Kwangali",
  kwo: "Kwomtari",
  kwp: "Kodia",
  kwr: "Kwer",
  kws: "Kwese",
  kwt: "Kwesten",
  kwu: "Kwakum",
  kwv: "Sara Kaba Náà",
  kww: "Kwinti",
  kwx: "Khirwar",
  kwy: "San Salvador Kongo",
  kwz: "Kwadi",
  kxa: "Kairiru",
  kxb: "Krobu",
  kxc: "Konso",
  kxd: "Brunei",
  kxf: "Manumanaw Karen",
  kxh: "Karo (Ethiopia)",
  kxi: "Keningau Murut",
  kxj: "Kulfa",
  kxk: "Zayein Karen",
  kxl: "Nepali Kurux",
  kxm: "Northern Khmer",
  kxn: "Kanowit-Tanjong Melanau",
  kxo: "Kanoé",
  kxp: "Wadiyara Koli",
  kxq: "Smärky Kanum",
  kxr: "Koro (Papua New Guinea)",
  kxs: "Kangjia",
  kxt: "Koiwat",
  kxu: "Kui (India)",
  kxv: "Kuvi",
  kxw: "Konai",
  kxx: "Likuba",
  kxy: "Kayong",
  kxz: "Kerewo",
  kya: "Kwaya",
  kyb: "Butbut Kalinga",
  kyc: "Kyaka",
  kyd: "Karey",
  kye: "Krache",
  kyf: "Kouya",
  kyg: "Keyagana",
  kyh: "Karok",
  kyi: "Kiput",
  kyj: "Karao",
  kyk: "Kamayo",
  kyl: "Kalapuya",
  kym: "Kpatili",
  kyn: "Northern Binukidnon",
  kyo: "Kelon",
  kyp: "Kang",
  kyq: "Kenga",
  kyr: "Kuruáya",
  kys: "Baram Kayan",
  kyt: "Kayagar",
  kyu: "Western Kayah",
  kyv: "Kayort",
  kyw: "Kudmali",
  kyx: "Rapoisi",
  kyy: "Kambaira",
  kyz: "Kayabí",
  kza: "Western Karaboro",
  kzb: "Kaibobo",
  kzc: "Bondoukou Kulango",
  kzd: "Kadai",
  kze: "Kosena",
  kzf: "Da'a Kaili",
  kzg: "Kikai",
  kzi: "Kelabit",
  kzk: "Kazukuru",
  kzl: "Kayeli",
  kzm: "Kais",
  kzn: "Kokola",
  kzo: "Kaningi",
  kzp: "Kaidipang",
  kzq: "Kaike",
  kzr: "Karang",
  kzs: "Sugut Dusun",
  kzu: "Kayupulau",
  kzv: "Komyandaret",
  kzw: "Karirí-Xocó",
  kzx: "Kamarian",
  kzy: "Kango (Tshopo District)",
  kzz: "Kalabra",
  laa: "Southern Subanen",
  lab: "Linear A",
  lac: "Lacandon",
  lad: "Ladino",
  lae: "Pattani",
  laf: "Lafofa",
  lag: "Langi",
  lah: "Lahnda",
  lai: "Lambya",
  laj: "Lango (Uganda)",
  lak: "Laka (Nigeria)",
  lal: "Lalia",
  lam: "Lamba",
  lan: "Laru",
  lao: "Lao",
  lap: "Laka (Chad)",
  laq: "Qabiao",
  lar: "Larteh",
  las: "Lama (Togo)",
  lat: "Latin",
  lau: "Laba",
  lav: "Latvian",
  law: "Lauje",
  lax: "Tiwa",
  lay: "Lama Bai",
  laz: "Aribwatsa",
  lba: "Lui",
  lbb: "Label",
  lbc: "Lakkia",
  lbe: "Lak",
  lbf: "Tinani",
  lbg: "Laopang",
  lbi: "La'bi",
  lbj: "Ladakhi",
  lbk: "Central Bontok",
  lbl: "Libon Bikol",
  lbm: "Lodhi",
  lbn: "Lamet",
  lbo: "Laven",
  lbq: "Wampar",
  lbr: "Lohorung",
  lbs: "Libyan Sign Language",
  lbt: "Lachi",
  lbu: "Labu",
  lbv: "Lavatbura-Lamusong",
  lbw: "Tolaki",
  lbx: "Lawangan",
  lby: "Lamu-Lamu",
  lbz: "Lardil",
  lcc: "Legenyem",
  lcd: "Lola",
  lce: "Loncong",
  lcf: "Lubu",
  lch: "Luchazi",
  lcl: "Lisela",
  lcm: "Tungag",
  lcp: "Western Lawa",
  lcq: "Luhu",
  lcs: "Lisabata-Nuniali",
  lda: "Kla-Dan",
  ldb: "Dũya",
  ldd: "Luri",
  ldg: "Lenyima",
  ldh: "Lamja-Dengsa-Tola",
  ldi: "Laari",
  ldj: "Lemoro",
  ldk: "Leelau",
  ldl: "Kaan",
  ldm: "Landoma",
  ldn: "Láadan",
  ldo: "Loo",
  ldp: "Tso",
  ldq: "Lufu",
  lea: "Lega-Shabunda",
  leb: "Lala-Bisa",
  lec: "Leco",
  led: "Lendu",
  lee: "Lyélé",
  lef: "Lelemi",
  leh: "Lenje",
  lei: "Lemio",
  lej: "Lengola",
  lek: "Leipon",
  lel: "Lele (Democratic Republic of Congo)",
  lem: "Nomaande",
  len: "Lenca",
  leo: "Leti (Cameroon)",
  lep: "Lepcha",
  leq: "Lembena",
  ler: "Lenkau",
  les: "Lese",
  "let": "Lesing-Gelimi",
  leu: "Kara (Papua New Guinea)",
  lev: "Lamma",
  lew: "Ledo Kaili",
  lex: "Luang",
  ley: "Lemolang",
  lez: "Lezghian",
  lfa: "Lefa",
  lfn: "Lingua Franca Nova",
  lga: "Lungga",
  lgb: "Laghu",
  lgg: "Lugbara",
  lgh: "Laghuu",
  lgi: "Lengilu",
  lgk: "Lingarak",
  lgl: "Wala",
  lgm: "Lega-Mwenga",
  lgn: "T'apo",
  lgq: "Logba",
  lgr: "Lengo",
  lgt: "Pahi",
  lgu: "Longgu",
  lgz: "Ligenza",
  lha: "Laha (Viet Nam)",
  lhh: "Laha (Indonesia)",
  lhi: "Lahu Shi",
  lhl: "Lahul Lohar",
  lhm: "Lhomi",
  lhn: "Lahanan",
  lhp: "Lhokpu",
  lhs: "Mlahsö",
  lht: "Lo-Toga",
  lhu: "Lahu",
  lia: "West-Central Limba",
  lib: "Likum",
  lic: "Hlai",
  lid: "Nyindrou",
  lie: "Likila",
  lif: "Limbu",
  lig: "Ligbi",
  lih: "Lihir",
  lij: "Ligurian",
  lik: "Lika",
  lil: "Lillooet",
  lim: "Limburgan",
  lin: "Lingala",
  lio: "Liki",
  lip: "Sekpele",
  liq: "Libido",
  lir: "Liberian English",
  lis: "Lisu",
  lit: "Lithuanian",
  liu: "Logorik",
  liv: "Liv",
  liw: "Col",
  lix: "Liabuku",
  liy: "Banda-Bambari",
  liz: "Libinza",
  lja: "Golpa",
  lje: "Rampi",
  lji: "Laiyolo",
  ljl: "Li'o",
  ljp: "Lampung Api",
  ljw: "Yirandali",
  ljx: "Yuru",
  lka: "Lakalei",
  lkb: "Kabras",
  lkc: "Kucong",
  lkd: "Lakondê",
  lke: "Kenyi",
  lkh: "Lakha",
  lki: "Laki",
  lkj: "Remun",
  lkl: "Laeko-Libuat",
  lkm: "Kalaamaya",
  lkn: "Lakon",
  lko: "Khayo",
  lkr: "Päri",
  lks: "Kisa",
  lkt: "Lakota",
  lku: "Kungkari",
  lky: "Lokoya",
  lla: "Lala-Roba",
  llb: "Lolo",
  llc: "Lele (Guinea)",
  lld: "Ladin",
  lle: "Lele (Papua New Guinea)",
  llf: "Hermit",
  llg: "Lole",
  llh: "Lamu",
  lli: "Teke-Laali",
  llj: "Ladji Ladji",
  llk: "Lelak",
  lll: "Lilau",
  llm: "Lasalimu",
  lln: "Lele (Chad)",
  llo: "Khlor",
  llp: "North Efate",
  llq: "Lolak",
  lls: "Lithuanian Sign Language",
  llu: "Lau",
  llx: "Lauan",
  lma: "East Limba",
  lmb: "Merei",
  lmc: "Limilngan",
  lmd: "Lumun",
  lme: "Pévé",
  lmf: "South Lembata",
  lmg: "Lamogai",
  lmh: "Lambichhong",
  lmi: "Lombi",
  lmj: "West Lembata",
  lmk: "Lamkang",
  lml: "Hano",
  lmn: "Lambadi",
  lmo: "Lombard",
  lmp: "Limbum",
  lmq: "Lamatuka",
  lmr: "Lamalera",
  lmu: "Lamenu",
  lmv: "Lomaiviti",
  lmw: "Lake Miwok",
  lmx: "Laimbue",
  lmy: "Lamboya",
  lmz: "Lumbee",
  lna: "Langbashe",
  lnb: "Mbalanhu",
  lnd: "Lundayeh",
  lng: "Langobardic",
  lnh: "Lanoh",
  lni: "Daantanai'",
  lnj: "Leningitij",
  lnl: "South Central Banda",
  lnm: "Langam",
  lnn: "Lorediakarkar",
  lno: "Lango (Sudan)",
  lns: "Lamnso'",
  lnu: "Longuda",
  lnw: "Lanima",
  lnz: "Lonzo",
  loa: "Loloda",
  lob: "Lobi",
  loc: "Inonhan",
  loe: "Saluan",
  lof: "Logol",
  log: "Logo",
  loh: "Narim",
  loi: "Loma (Côte d'Ivoire)",
  loj: "Lou",
  lok: "Loko",
  lol: "Mongo",
  lom: "Loma (Liberia)",
  lon: "Malawi Lomwe",
  loo: "Lombo",
  lop: "Lopa",
  loq: "Lobala",
  lor: "Téén",
  los: "Loniu",
  lot: "Otuho",
  lou: "Louisiana Creole",
  lov: "Lopi",
  low: "Tampias Lobu",
  lox: "Loun",
  loy: "Loke",
  loz: "Lozi",
  lpa: "Lelepa",
  lpe: "Lepki",
  lpn: "Long Phuri Naga",
  lpo: "Lipo",
  lpx: "Lopit",
  lra: "Rara Bakati'",
  lrc: "Northern Luri",
  lre: "Laurentian",
  lrg: "Laragia",
  lri: "Marachi",
  lrk: "Loarki",
  lrl: "Lari",
  lrm: "Marama",
  lrn: "Lorang",
  lro: "Laro",
  lrr: "Southern Yamphu",
  lrt: "Larantuka Malay",
  lrv: "Larevat",
  lrz: "Lemerig",
  lsa: "Lasgerdi",
  lsd: "Lishana Deni",
  lse: "Lusengo",
  lsg: "Lyons Sign Language",
  lsh: "Lish",
  lsi: "Lashi",
  lsl: "Latvian Sign Language",
  lsm: "Saamia",
  lso: "Laos Sign Language",
  lsp: "Panamanian Sign Language",
  lsr: "Aruop",
  lss: "Lasi",
  lst: "Trinidad and Tobago Sign Language",
  lsy: "Mauritian Sign Language",
  ltc: "Late Middle Chinese",
  ltg: "Latgalian",
  lth: "Thur",
  lti: "Leti (Indonesia)",
  ltn: "Latundê",
  lto: "Tsotso",
  lts: "Tachoni",
  ltu: "Latu",
  ltz: "Luxembourgish",
  lua: "Luba-Lulua",
  lub: "Luba-Katanga",
  luc: "Aringa",
  lud: "Ludian",
  lue: "Luvale",
  luf: "Laua",
  lug: "Ganda",
  lui: "Luiseno",
  luj: "Luna",
  luk: "Lunanakha",
  lul: "Olu'bo",
  lum: "Luimbi",
  lun: "Lunda",
  luo: "Luo (Kenya and Tanzania)",
  lup: "Lumbu",
  luq: "Lucumi",
  lur: "Laura",
  lus: "Lushai",
  lut: "Lushootseed",
  luu: "Lumba-Yakkha",
  luv: "Luwati",
  luw: "Luo (Cameroon)",
  luy: "Luyia",
  luz: "Southern Luri",
  lva: "Maku'a",
  lvk: "Lavukaleve",
  lvs: "Standard Latvian",
  lvu: "Levuka",
  lwa: "Lwalu",
  lwe: "Lewo Eleng",
  lwg: "Wanga",
  lwh: "White Lachi",
  lwl: "Eastern Lawa",
  lwm: "Laomian",
  lwo: "Luwo",
  lwt: "Lewotobi",
  lwu: "Lawu",
  lww: "Lewo",
  lya: "Layakha",
  lyg: "Lyngngam",
  lyn: "Luyana",
  lzh: "Literary Chinese",
  lzl: "Litzlitz",
  lzn: "Leinong Naga",
  lzz: "Laz",
  maa: "San Jerónimo Tecóatl Mazatec",
  mab: "Yutanduchi Mixtec",
  mad: "Madurese",
  mae: "Bo-Rukul",
  maf: "Mafa",
  mag: "Magahi",
  mah: "Marshallese",
  mai: "Maithili",
  maj: "Jalapa De Díaz Mazatec",
  mak: "Makasar",
  mal: "Malayalam",
  mam: "Mam",
  man: "Mandingo",
  maq: "Chiquihuitlán Mazatec",
  mar: "Marathi",
  mas: "Masai",
  mat: "San Francisco Matlatzinca",
  mau: "Huautla Mazatec",
  mav: "Sateré-Mawé",
  maw: "Mampruli",
  max: "North Moluccan Malay",
  maz: "Central Mazahua",
  mba: "Higaonon",
  mbb: "Western Bukidnon Manobo",
  mbc: "Macushi",
  mbd: "Dibabawon Manobo",
  mbe: "Molale",
  mbf: "Baba Malay",
  mbh: "Mangseng",
  mbi: "Ilianen Manobo",
  mbj: "Nadëb",
  mbk: "Malol",
  mbl: "Maxakalí",
  mbm: "Ombamba",
  mbn: "Macaguán",
  mbo: "Mbo (Cameroon)",
  mbp: "Malayo",
  mbq: "Maisin",
  mbr: "Nukak Makú",
  mbs: "Sarangani Manobo",
  mbt: "Matigsalug Manobo",
  mbu: "Mbula-Bwazza",
  mbv: "Mbulungish",
  mbw: "Maring",
  mbx: "Mari (East Sepik Province)",
  mby: "Memoni",
  mbz: "Amoltepec Mixtec",
  mca: "Maca",
  mcb: "Machiguenga",
  mcc: "Bitur",
  mcd: "Sharanahua",
  mce: "Itundujia Mixtec",
  mcf: "Matsés",
  mcg: "Mapoyo",
  mch: "Maquiritari",
  mci: "Mese",
  mcj: "Mvanip",
  mck: "Mbunda",
  mcl: "Macaguaje",
  mcm: "Malaccan Creole Portuguese",
  mcn: "Masana",
  mco: "Coatlán Mixe",
  mcp: "Makaa",
  mcq: "Ese",
  mcr: "Menya",
  mcs: "Mambai",
  mct: "Mengisa",
  mcu: "Cameroon Mambila",
  mcv: "Minanibai",
  mcw: "Mawa (Chad)",
  mcx: "Mpiemo",
  mcy: "South Watut",
  mcz: "Mawan",
  mda: "Mada (Nigeria)",
  mdb: "Morigi",
  mdc: "Male (Papua New Guinea)",
  mdd: "Mbum",
  mde: "Maba (Chad)",
  mdf: "Moksha",
  mdg: "Massalat",
  mdh: "Maguindanaon",
  mdi: "Mamvu",
  mdj: "Mangbetu",
  mdk: "Mangbutu",
  mdl: "Maltese Sign Language",
  mdm: "Mayogo",
  mdn: "Mbati",
  mdp: "Mbala",
  mdq: "Mbole",
  mdr: "Mandar",
  mds: "Maria (Papua New Guinea)",
  mdt: "Mbere",
  mdu: "Mboko",
  mdv: "Santa Lucía Monteverde Mixtec",
  mdw: "Mbosi",
  mdx: "Dizin",
  mdy: "Male (Ethiopia)",
  mdz: "Suruí Do Pará",
  mea: "Menka",
  meb: "Ikobi",
  mec: "Mara",
  med: "Melpa",
  mee: "Mengen",
  mef: "Megam",
  meh: "Southwestern Tlaxiaco Mixtec",
  mei: "Midob",
  mej: "Meyah",
  mek: "Mekeo",
  mel: "Central Melanau",
  mem: "Mangala",
  men: "Mende (Sierra Leone)",
  meo: "Kedah Malay",
  mep: "Miriwung",
  meq: "Merey",
  mer: "Meru",
  mes: "Masmaje",
  met: "Mato",
  meu: "Motu",
  mev: "Mano",
  mew: "Maaka",
  mey: "Hassaniyya",
  mez: "Menominee",
  mfa: "Pattani Malay",
  mfb: "Bangka",
  mfc: "Mba",
  mfd: "Mendankwe-Nkwen",
  mfe: "Morisyen",
  mff: "Naki",
  mfg: "Mogofin",
  mfh: "Matal",
  mfi: "Wandala",
  mfj: "Mefele",
  mfk: "North Mofu",
  mfl: "Putai",
  mfm: "Marghi South",
  mfn: "Cross River Mbembe",
  mfo: "Mbe",
  mfp: "Makassar Malay",
  mfq: "Moba",
  mfr: "Marithiel",
  mfs: "Mexican Sign Language",
  mft: "Mokerang",
  mfu: "Mbwela",
  mfv: "Mandjak",
  mfw: "Mulaha",
  mfx: "Melo",
  mfy: "Mayo",
  mfz: "Mabaan",
  mga: "Middle Irish (900-1200)",
  mgb: "Mararit",
  mgc: "Morokodo",
  mgd: "Moru",
  mge: "Mango",
  mgf: "Maklew",
  mgg: "Mpumpong",
  mgh: "Makhuwa-Meetto",
  mgi: "Lijili",
  mgj: "Abureni",
  mgk: "Mawes",
  mgl: "Maleu-Kilenge",
  mgm: "Mambae",
  mgn: "Mbangi",
  mgo: "Meta'",
  mgp: "Eastern Magar",
  mgq: "Malila",
  mgr: "Mambwe-Lungu",
  mgs: "Manda (Tanzania)",
  mgt: "Mongol",
  mgu: "Mailu",
  mgv: "Matengo",
  mgw: "Matumbi",
  mgy: "Mbunga",
  mgz: "Mbugwe",
  mha: "Manda (India)",
  mhb: "Mahongwe",
  mhc: "Mocho",
  mhd: "Mbugu",
  mhe: "Besisi",
  mhf: "Mamaa",
  mhg: "Margu",
  mhi: "Ma'di",
  mhj: "Mogholi",
  mhk: "Mungaka",
  mhl: "Mauwake",
  mhm: "Makhuwa-Moniga",
  mhn: "Mócheno",
  mho: "Mashi (Zambia)",
  mhp: "Balinese Malay",
  mhq: "Mandan",
  mhr: "Eastern Mari",
  mhs: "Buru (Indonesia)",
  mht: "Mandahuaca",
  mhu: "Digaro-Mishmi",
  mhw: "Mbukushu",
  mhx: "Maru",
  mhy: "Ma'anyan",
  mhz: "Mor (Mor Islands)",
  mia: "Miami",
  mib: "Atatláhuca Mixtec",
  mic: "Mi'kmaq",
  mid: "Mandaic",
  mie: "Ocotepec Mixtec",
  mif: "Mofu-Gudur",
  mig: "San Miguel El Grande Mixtec",
  mih: "Chayuco Mixtec",
  mii: "Chigmecatitlán Mixtec",
  mij: "Abar",
  mik: "Mikasuki",
  mil: "Peñoles Mixtec",
  mim: "Alacatlatzala Mixtec",
  min: "Minangkabau",
  mio: "Pinotepa Nacional Mixtec",
  mip: "Apasco-Apoala Mixtec",
  miq: "Mískito",
  mir: "Isthmus Mixe",
  mis: "Uncoded languages",
  mit: "Southern Puebla Mixtec",
  miu: "Cacaloxtepec Mixtec",
  miw: "Akoye",
  mix: "Mixtepec Mixtec",
  miy: "Ayutla Mixtec",
  miz: "Coatzospan Mixtec",
  mjb: "Makalero",
  mjc: "San Juan Colorado Mixtec",
  mjd: "Northwest Maidu",
  mje: "Muskum",
  mjg: "Tu",
  mjh: "Mwera (Nyasa)",
  mji: "Kim Mun",
  mjj: "Mawak",
  mjk: "Matukar",
  mjl: "Mandeali",
  mjm: "Medebur",
  mjn: "Ma (Papua New Guinea)",
  mjo: "Malankuravan",
  mjp: "Malapandaram",
  mjq: "Malaryan",
  mjr: "Malavedan",
  mjs: "Miship",
  mjt: "Sauria Paharia",
  mju: "Manna-Dora",
  mjv: "Mannan",
  mjw: "Karbi",
  mjx: "Mahali",
  mjy: "Mahican",
  mjz: "Majhi",
  mka: "Mbre",
  mkb: "Mal Paharia",
  mkc: "Siliput",
  mkd: "Macedonian",
  mke: "Mawchi",
  mkf: "Miya",
  mkg: "Mak (China)",
  mki: "Dhatki",
  mkj: "Mokilese",
  mkk: "Byep",
  mkl: "Mokole",
  mkm: "Moklen",
  mkn: "Kupang Malay",
  mko: "Mingang Doso",
  mkp: "Moikodi",
  mkq: "Bay Miwok",
  mkr: "Malas",
  mks: "Silacayoapan Mixtec",
  mkt: "Vamale",
  mku: "Konyanka Maninka",
  mkv: "Mafea",
  mkw: "Kituba (Congo)",
  mkx: "Kinamiging Manobo",
  mky: "East Makian",
  mkz: "Makasae",
  mla: "Malo",
  mlb: "Mbule",
  mlc: "Cao Lan",
  mle: "Manambu",
  mlf: "Mal",
  mlg: "Malagasy",
  mlh: "Mape",
  mli: "Malimpung",
  mlj: "Miltu",
  mlk: "Ilwana",
  mll: "Malua Bay",
  mlm: "Mulam",
  mln: "Malango",
  mlo: "Mlomp",
  mlp: "Bargam",
  mlq: "Western Maninkakan",
  mlr: "Vame",
  mls: "Masalit",
  mlt: "Maltese",
  mlu: "To'abaita",
  mlv: "Motlav",
  mlw: "Moloko",
  mlx: "Malfaxal",
  mlz: "Malaynon",
  mma: "Mama",
  mmb: "Momina",
  mmc: "Michoacán Mazahua",
  mmd: "Maonan",
  mme: "Mae",
  mmf: "Mundat",
  mmg: "North Ambrym",
  mmh: "Mehináku",
  mmi: "Musar",
  mmj: "Majhwar",
  mmk: "Mukha-Dora",
  mml: "Man Met",
  mmm: "Maii",
  mmn: "Mamanwa",
  mmo: "Mangga Buang",
  mmp: "Siawi",
  mmq: "Musak",
  mmr: "Western Xiangxi Miao",
  mmt: "Malalamai",
  mmu: "Mmaala",
  mmv: "Miriti",
  mmw: "Emae",
  mmx: "Madak",
  mmy: "Migaama",
  mmz: "Mabaale",
  mna: "Mbula",
  mnb: "Muna",
  mnc: "Manchu",
  mnd: "Mondé",
  mne: "Naba",
  mnf: "Mundani",
  mng: "Eastern Mnong",
  mnh: "Mono (Democratic Republic of Congo)",
  mni: "Manipuri",
  mnj: "Munji",
  mnk: "Mandinka",
  mnl: "Tiale",
  mnm: "Mapena",
  mnn: "Southern Mnong",
  mnp: "Min Bei Chinese",
  mnq: "Minriq",
  mnr: "Mono (USA)",
  mns: "Mansi",
  mnu: "Mer",
  mnv: "Rennell-Bellona",
  mnw: "Mon",
  mnx: "Manikion",
  mny: "Manyawa",
  mnz: "Moni",
  moa: "Mwan",
  moc: "Mocoví",
  mod: "Mobilian",
  moe: "Montagnais",
  mog: "Mongondow",
  moh: "Mohawk",
  moi: "Mboi",
  moj: "Monzombo",
  mok: "Morori",
  mom: "Mangue",
  mon: "Mongolian",
  moo: "Monom",
  mop: "Mopán Maya",
  moq: "Mor (Bomberai Peninsula)",
  mor: "Moro",
  mos: "Mossi",
  mot: "Barí",
  mou: "Mogum",
  mov: "Mohave",
  mow: "Moi (Congo)",
  mox: "Molima",
  moy: "Shekkacho",
  moz: "Mukulu",
  mpa: "Mpoto",
  mpb: "Mullukmulluk",
  mpc: "Mangarayi",
  mpd: "Machinere",
  mpe: "Majang",
  mpg: "Marba",
  mph: "Maung",
  mpi: "Mpade",
  mpj: "Martu Wangka",
  mpk: "Mbara (Chad)",
  mpl: "Middle Watut",
  mpm: "Yosondúa Mixtec",
  mpn: "Mindiri",
  mpo: "Miu",
  mpp: "Migabac",
  mpq: "Matís",
  mpr: "Vangunu",
  mps: "Dadibi",
  mpt: "Mian",
  mpu: "Makuráp",
  mpv: "Mungkip",
  mpw: "Mapidian",
  mpx: "Misima-Panaeati",
  mpy: "Mapia",
  mpz: "Mpi",
  mqa: "Maba (Indonesia)",
  mqb: "Mbuko",
  mqc: "Mangole",
  mqe: "Matepi",
  mqf: "Momuna",
  mqg: "Kota Bangun Kutai Malay",
  mqh: "Tlazoyaltepec Mixtec",
  mqi: "Mariri",
  mqj: "Mamasa",
  mqk: "Rajah Kabunsuwan Manobo",
  mql: "Mbelime",
  mqm: "South Marquesan",
  mqn: "Moronene",
  mqo: "Modole",
  mqp: "Manipa",
  mqq: "Minokok",
  mqr: "Mander",
  mqs: "West Makian",
  mqt: "Mok",
  mqu: "Mandari",
  mqv: "Mosimo",
  mqw: "Murupi",
  mqx: "Mamuju",
  mqy: "Manggarai",
  mqz: "Pano",
  mra: "Mlabri",
  mrb: "Marino",
  mrc: "Maricopa",
  mrd: "Western Magar",
  mre: "Martha's Vineyard Sign Language",
  mrf: "Elseng",
  mrg: "Mising",
  mrh: "Mara Chin",
  mri: "Maori",
  mrj: "Western Mari",
  mrk: "Hmwaveke",
  mrl: "Mortlockese",
  mrm: "Merlav",
  mrn: "Cheke Holo",
  mro: "Mru",
  mrp: "Morouas",
  mrq: "North Marquesan",
  mrr: "Maria (India)",
  mrs: "Maragus",
  mrt: "Marghi Central",
  mru: "Mono (Cameroon)",
  mrv: "Mangareva",
  mrw: "Maranao",
  mrx: "Maremgi",
  mry: "Mandaya",
  mrz: "Marind",
  msa: "Malay (macrolanguage)",
  msb: "Masbatenyo",
  msc: "Sankaran Maninka",
  msd: "Yucatec Maya Sign Language",
  mse: "Musey",
  msf: "Mekwei",
  msg: "Moraid",
  msh: "Masikoro Malagasy",
  msi: "Sabah Malay",
  msj: "Ma (Democratic Republic of Congo)",
  msk: "Mansaka",
  msl: "Molof",
  msm: "Agusan Manobo",
  msn: "Vurës",
  mso: "Mombum",
  msp: "Maritsauá",
  msq: "Caac",
  msr: "Mongolian Sign Language",
  mss: "West Masela",
  msu: "Musom",
  msv: "Maslam",
  msw: "Mansoanka",
  msx: "Moresada",
  msy: "Aruamu",
  msz: "Momare",
  mta: "Cotabato Manobo",
  mtb: "Anyin Morofo",
  mtc: "Munit",
  mtd: "Mualang",
  mte: "Mono (Solomon Islands)",
  mtf: "Murik (Papua New Guinea)",
  mtg: "Una",
  mth: "Munggui",
  mti: "Maiwa (Papua New Guinea)",
  mtj: "Moskona",
  mtk: "Mbe'",
  mtl: "Montol",
  mtm: "Mator",
  mtn: "Matagalpa",
  mto: "Totontepec Mixe",
  mtp: "Wichí Lhamtés Nocten",
  mtq: "Muong",
  mtr: "Mewari",
  mts: "Yora",
  mtt: "Mota",
  mtu: "Tututepec Mixtec",
  mtv: "Asaro'o",
  mtw: "Southern Binukidnon",
  mtx: "Tidaá Mixtec",
  mty: "Nabi",
  mua: "Mundang",
  mub: "Mubi",
  muc: "Ajumbu",
  mud: "Mednyj Aleut",
  mue: "Media Lengua",
  mug: "Musgu",
  muh: "Mündü",
  mui: "Musi",
  muj: "Mabire",
  muk: "Mugom",
  mul: "Multiple languages",
  mum: "Maiwala",
  muo: "Nyong",
  mup: "Malvi",
  muq: "Eastern Xiangxi Miao",
  mur: "Murle",
  mus: "Creek",
  mut: "Western Muria",
  muu: "Yaaku",
  muv: "Muthuvan",
  mux: "Bo-Ung",
  muy: "Muyang",
  muz: "Mursi",
  mva: "Manam",
  mvb: "Mattole",
  mvd: "Mamboru",
  mve: "Marwari (Pakistan)",
  mvf: "Peripheral Mongolian",
  mvg: "Yucuañe Mixtec",
  mvh: "Mulgi",
  mvi: "Miyako",
  mvk: "Mekmek",
  mvl: "Mbara (Australia)",
  mvm: "Muya",
  mvn: "Minaveha",
  mvo: "Marovo",
  mvp: "Duri",
  mvq: "Moere",
  mvr: "Marau",
  mvs: "Massep",
  mvt: "Mpotovoro",
  mvu: "Marfa",
  mvv: "Tagal Murut",
  mvw: "Machinga",
  mvx: "Meoswar",
  mvy: "Indus Kohistani",
  mvz: "Mesqan",
  mwa: "Mwatebu",
  mwb: "Juwal",
  mwc: "Are",
  mwe: "Mwera (Chimwera)",
  mwf: "Murrinh-Patha",
  mwg: "Aiklep",
  mwh: "Mouk-Aria",
  mwi: "Labo",
  mwk: "Kita Maninkakan",
  mwl: "Mirandese",
  mwm: "Sar",
  mwn: "Nyamwanga",
  mwo: "Central Maewo",
  mwp: "Kala Lagaw Ya",
  mwq: "Mün Chin",
  mwr: "Marwari",
  mws: "Mwimbi-Muthambi",
  mwt: "Moken",
  mwu: "Mittu",
  mwv: "Mentawai",
  mww: "Hmong Daw",
  mwx: "Mediak",
  mwy: "Mosiro",
  mwz: "Moingi",
  mxa: "Northwest Oaxaca Mixtec",
  mxb: "Tezoatlán Mixtec",
  mxc: "Manyika",
  mxd: "Modang",
  mxe: "Mele-Fila",
  mxf: "Malgbe",
  mxg: "Mbangala",
  mxh: "Mvuba",
  mxi: "Mozarabic",
  mxj: "Miju-Mishmi",
  mxk: "Monumbo",
  mxl: "Maxi Gbe",
  mxm: "Meramera",
  mxn: "Moi (Indonesia)",
  mxo: "Mbowe",
  mxp: "Tlahuitoltepec Mixe",
  mxq: "Juquila Mixe",
  mxr: "Murik (Malaysia)",
  mxs: "Huitepec Mixtec",
  mxt: "Jamiltepec Mixtec",
  mxu: "Mada (Cameroon)",
  mxv: "Metlatónoc Mixtec",
  mxw: "Namo",
  mxx: "Mahou",
  mxy: "Southeastern Nochixtlán Mixtec",
  mxz: "Central Masela",
  mya: "Burmese",
  myb: "Mbay",
  myc: "Mayeka",
  myd: "Maramba",
  mye: "Myene",
  myf: "Bambassi",
  myg: "Manta",
  myh: "Makah",
  myi: "Mina (India)",
  myj: "Mangayat",
  myk: "Mamara Senoufo",
  myl: "Moma",
  mym: "Me'en",
  myo: "Anfillo",
  myp: "Pirahã",
  myr: "Muniche",
  mys: "Mesmes",
  myu: "Mundurukú",
  myv: "Erzya",
  myw: "Muyuw",
  myx: "Masaaba",
  myy: "Macuna",
  myz: "Classical Mandaic",
  mza: "Santa María Zacatepec Mixtec",
  mzb: "Tumzabt",
  mzc: "Madagascar Sign Language",
  mzd: "Malimba",
  mze: "Morawa",
  mzg: "Monastic Sign Language",
  mzh: "Wichí Lhamtés Güisnay",
  mzi: "Ixcatlán Mazatec",
  mzj: "Manya",
  mzk: "Nigeria Mambila",
  mzl: "Mazatlán Mixe",
  mzm: "Mumuye",
  mzn: "Mazanderani",
  mzo: "Matipuhy",
  mzp: "Movima",
  mzq: "Mori Atas",
  mzr: "Marúbo",
  mzs: "Macanese",
  mzt: "Mintil",
  mzu: "Inapang",
  mzv: "Manza",
  mzw: "Deg",
  mzx: "Mawayana",
  mzy: "Mozambican Sign Language",
  mzz: "Maiadomu",
  naa: "Namla",
  nab: "Southern Nambikuára",
  nac: "Narak",
  nae: "Naka'ela",
  naf: "Nabak",
  nag: "Naga Pidgin",
  naj: "Nalu",
  nak: "Nakanai",
  nal: "Nalik",
  nam: "Ngan'gityemerri",
  nan: "Min Nan Chinese",
  nao: "Naaba",
  nap: "Neapolitan",
  naq: "Khoekhoe",
  nar: "Iguta",
  nas: "Naasioi",
  nat: "Ca̱hungwa̱rya̱",
  nau: "Nauru",
  nav: "Navajo",
  naw: "Nawuri",
  nax: "Nakwi",
  nay: "Narrinyeri",
  naz: "Coatepec Nahuatl",
  nba: "Nyemba",
  nbb: "Ndoe",
  nbc: "Chang Naga",
  nbd: "Ngbinda",
  nbe: "Konyak Naga",
  nbg: "Nagarchal",
  nbh: "Ngamo",
  nbi: "Mao Naga",
  nbj: "Ngarinman",
  nbk: "Nake",
  nbl: "South Ndebele",
  nbm: "Ngbaka Ma'bo",
  nbn: "Kuri",
  nbo: "Nkukoli",
  nbp: "Nnam",
  nbq: "Nggem",
  nbr: "Numana-Nunku-Gbantu-Numbu",
  nbs: "Namibian Sign Language",
  nbt: "Na",
  nbu: "Rongmei Naga",
  nbv: "Ngamambo",
  nbw: "Southern Ngbandi",
  nby: "Ningera",
  nca: "Iyo",
  ncb: "Central Nicobarese",
  ncc: "Ponam",
  ncd: "Nachering",
  nce: "Yale",
  ncf: "Notsi",
  ncg: "Nisga'a",
  nch: "Central Huasteca Nahuatl",
  nci: "Classical Nahuatl",
  ncj: "Northern Puebla Nahuatl",
  nck: "Nakara",
  ncl: "Michoacán Nahuatl",
  ncm: "Nambo",
  ncn: "Nauna",
  nco: "Sibe",
  ncp: "Ndaktup",
  ncq: "Northern Katang",
  ncr: "Ncane",
  ncs: "Nicaraguan Sign Language",
  nct: "Chothe Naga",
  ncu: "Chumburung",
  ncx: "Central Puebla Nahuatl",
  ncz: "Natchez",
  nda: "Ndasa",
  ndb: "Kenswei Nsei",
  ndc: "Ndau",
  ndd: "Nde-Nsele-Nta",
  nde: "North Ndebele",
  ndf: "Nadruvian",
  ndg: "Ndengereko",
  ndh: "Ndali",
  ndi: "Samba Leko",
  ndj: "Ndamba",
  ndk: "Ndaka",
  ndl: "Ndolo",
  ndm: "Ndam",
  ndn: "Ngundi",
  ndo: "Ndonga",
  ndp: "Ndo",
  ndq: "Ndombe",
  ndr: "Ndoola",
  nds: "Low German",
  ndt: "Ndunga",
  ndu: "Dugun",
  ndv: "Ndut",
  ndw: "Ndobo",
  ndx: "Nduga",
  ndy: "Lutos",
  ndz: "Ndogo",
  nea: "Eastern Ngad'a",
  neb: "Toura (Côte d'Ivoire)",
  nec: "Nedebang",
  ned: "Nde-Gbite",
  nee: "Nêlêmwa-Nixumwak",
  nef: "Nefamese",
  neg: "Negidal",
  neh: "Nyenkha",
  nei: "Neo-Hittite",
  nej: "Neko",
  nek: "Neku",
  nem: "Nemi",
  nen: "Nengone",
  neo: "Ná-Meo",
  nep: "Nepali (macrolanguage)",
  neq: "North Central Mixe",
  ner: "Yahadian",
  nes: "Bhoti Kinnauri",
  net: "Nete",
  neu: "Neo",
  nev: "Nyaheun",
  "new": "Newari",
  nex: "Neme",
  ney: "Neyo",
  nez: "Nez Perce",
  nfa: "Dhao",
  nfd: "Ahwai",
  nfl: "Ayiwo",
  nfr: "Nafaanra",
  nfu: "Mfumte",
  nga: "Ngbaka",
  ngb: "Northern Ngbandi",
  ngc: "Ngombe (Democratic Republic of Congo)",
  ngd: "Ngando (Central African Republic)",
  nge: "Ngemba",
  ngg: "Ngbaka Manza",
  ngh: "N/u",
  ngi: "Ngizim",
  ngj: "Ngie",
  ngk: "Dalabon",
  ngl: "Lomwe",
  ngm: "Ngatik Men's Creole",
  ngn: "Ngwo",
  ngo: "Ngoni",
  ngp: "Ngulu",
  ngq: "Ngurimi",
  ngr: "Engdewu",
  ngs: "Gvoko",
  ngt: "Kriang",
  ngu: "Guerrero Nahuatl",
  ngv: "Nagumi",
  ngw: "Ngwaba",
  ngx: "Nggwahyi",
  ngy: "Tibea",
  ngz: "Ngungwel",
  nha: "Nhanda",
  nhb: "Beng",
  nhc: "Tabasco Nahuatl",
  nhd: "Chiripá",
  nhe: "Eastern Huasteca Nahuatl",
  nhf: "Nhuwala",
  nhg: "Tetelcingo Nahuatl",
  nhh: "Nahari",
  nhi: "Zacatlán-Ahuacatlán-Tepetzintla Nahuatl",
  nhk: "Isthmus-Cosoleacaque Nahuatl",
  nhm: "Morelos Nahuatl",
  nhn: "Central Nahuatl",
  nho: "Takuu",
  nhp: "Isthmus-Pajapan Nahuatl",
  nhq: "Huaxcaleca Nahuatl",
  nhr: "Naro",
  nht: "Ometepec Nahuatl",
  nhu: "Noone",
  nhv: "Temascaltepec Nahuatl",
  nhw: "Western Huasteca Nahuatl",
  nhx: "Isthmus-Mecayapan Nahuatl",
  nhy: "Northern Oaxaca Nahuatl",
  nhz: "Santa María La Alta Nahuatl",
  nia: "Nias",
  nib: "Nakame",
  nid: "Ngandi",
  nie: "Niellim",
  nif: "Nek",
  nig: "Ngalakan",
  nih: "Nyiha (Tanzania)",
  nii: "Nii",
  nij: "Ngaju",
  nik: "Southern Nicobarese",
  nil: "Nila",
  nim: "Nilamba",
  nin: "Ninzo",
  nio: "Nganasan",
  niq: "Nandi",
  nir: "Nimboran",
  nis: "Nimi",
  nit: "Southeastern Kolami",
  niu: "Niuean",
  niv: "Gilyak",
  niw: "Nimo",
  nix: "Hema",
  niy: "Ngiti",
  niz: "Ningil",
  nja: "Nzanyi",
  njb: "Nocte Naga",
  njd: "Ndonde Hamba",
  njh: "Lotha Naga",
  nji: "Gudanji",
  njj: "Njen",
  njl: "Njalgulgule",
  njm: "Angami Naga",
  njn: "Liangmai Naga",
  njo: "Ao Naga",
  njr: "Njerep",
  njs: "Nisa",
  njt: "Ndyuka-Trio Pidgin",
  nju: "Ngadjunmaya",
  njx: "Kunyi",
  njy: "Njyem",
  njz: "Nyishi",
  nka: "Nkoya",
  nkb: "Khoibu Naga",
  nkc: "Nkongho",
  nkd: "Koireng",
  nke: "Duke",
  nkf: "Inpui Naga",
  nkg: "Nekgini",
  nkh: "Khezha Naga",
  nki: "Thangal Naga",
  nkj: "Nakai",
  nkk: "Nokuku",
  nkm: "Namat",
  nkn: "Nkangala",
  nko: "Nkonya",
  nkp: "Niuatoputapu",
  nkq: "Nkami",
  nkr: "Nukuoro",
  nks: "North Asmat",
  nkt: "Nyika (Tanzania)",
  nku: "Bouna Kulango",
  nkv: "Nyika (Malawi and Zambia)",
  nkw: "Nkutu",
  nkx: "Nkoroo",
  nkz: "Nkari",
  nla: "Ngombale",
  nlc: "Nalca",
  nld: "Dutch",
  nle: "East Nyala",
  nlg: "Gela",
  nli: "Grangali",
  nlj: "Nyali",
  nlk: "Ninia Yali",
  nll: "Nihali",
  nlo: "Ngul",
  nlq: "Lao Naga",
  nlu: "Nchumbulu",
  nlv: "Orizaba Nahuatl",
  nlw: "Walangama",
  nlx: "Nahali",
  nly: "Nyamal",
  nlz: "Nalögo",
  nma: "Maram Naga",
  nmb: "Big Nambas",
  nmc: "Ngam",
  nmd: "Ndumu",
  nme: "Mzieme Naga",
  nmf: "Tangkhul Naga (India)",
  nmg: "Kwasio",
  nmh: "Monsang Naga",
  nmi: "Nyam",
  nmj: "Ngombe (Central African Republic)",
  nmk: "Namakura",
  nml: "Ndemli",
  nmm: "Manangba",
  nmn: "!Xóõ",
  nmo: "Moyon Naga",
  nmp: "Nimanbur",
  nmq: "Nambya",
  nmr: "Nimbari",
  nms: "Letemboi",
  nmt: "Namonuito",
  nmu: "Northeast Maidu",
  nmv: "Ngamini",
  nmw: "Nimoa",
  nmx: "Nama (Papua New Guinea)",
  nmy: "Namuyi",
  nmz: "Nawdm",
  nna: "Nyangumarta",
  nnb: "Nande",
  nnc: "Nancere",
  nnd: "West Ambae",
  nne: "Ngandyera",
  nnf: "Ngaing",
  nng: "Maring Naga",
  nnh: "Ngiemboon",
  nni: "North Nuaulu",
  nnj: "Nyangatom",
  nnk: "Nankina",
  nnl: "Northern Rengma Naga",
  nnm: "Namia",
  nnn: "Ngete",
  nno: "Norwegian Nynorsk",
  nnp: "Wancho Naga",
  nnq: "Ngindo",
  nnr: "Narungga",
  nns: "Ningye",
  nnt: "Nanticoke",
  nnu: "Dwang",
  nnv: "Nugunu (Australia)",
  nnw: "Southern Nuni",
  nny: "Nyangga",
  nnz: "Nda'nda'",
  noa: "Woun Meu",
  nob: "Norwegian Bokmål",
  noc: "Nuk",
  nod: "Northern Thai",
  noe: "Nimadi",
  nof: "Nomane",
  nog: "Nogai",
  noh: "Nomu",
  noi: "Noiri",
  noj: "Nonuya",
  nok: "Nooksack",
  nol: "Nomlaki",
  nom: "Nocamán",
  non: "Old Norse",
  nop: "Numanggang",
  noq: "Ngongo",
  nor: "Norwegian",
  nos: "Eastern Nisu",
  not: "Nomatsiguenga",
  nou: "Ewage-Notu",
  nov: "Novial",
  now: "Nyambo",
  noy: "Noy",
  noz: "Nayi",
  npa: "Nar Phu",
  npb: "Nupbikha",
  npg: "Ponyo-Gongwang Naga",
  nph: "Phom Naga",
  npi: "Nepali (individual language)",
  npl: "Southeastern Puebla Nahuatl",
  npn: "Mondropolon",
  npo: "Pochuri Naga",
  nps: "Nipsan",
  npu: "Puimei Naga",
  npx: "Noipx",
  npy: "Napu",
  nqg: "Southern Nago",
  nqk: "Kura Ede Nago",
  nql: "Ngendelengo",
  nqm: "Ndom",
  nqn: "Nen",
  nqo: "N'Ko",
  nqq: "Kyan-Karyaw Naga",
  nqy: "Akyaung Ari Naga",
  nra: "Ngom",
  nrb: "Nara",
  nrc: "Noric",
  nre: "Southern Rengma Naga",
  nrf: "Jèrriais",
  nrg: "Narango",
  nri: "Chokri Naga",
  nrk: "Ngarla",
  nrl: "Ngarluma",
  nrm: "Narom",
  nrn: "Norn",
  nrp: "North Picene",
  nrr: "Norra",
  nrt: "Northern Kalapuya",
  nru: "Narua",
  nrx: "Ngurmbur",
  nrz: "Lala",
  nsa: "Sangtam Naga",
  nsc: "Nshi",
  nsd: "Southern Nisu",
  nse: "Nsenga",
  nsf: "Northwestern Nisu",
  nsg: "Ngasa",
  nsh: "Ngoshie",
  nsi: "Nigerian Sign Language",
  nsk: "Naskapi",
  nsl: "Norwegian Sign Language",
  nsm: "Sumi Naga",
  nsn: "Nehan",
  nso: "Pedi",
  nsp: "Nepalese Sign Language",
  nsq: "Northern Sierra Miwok",
  nsr: "Maritime Sign Language",
  nss: "Nali",
  nst: "Tase Naga",
  nsu: "Sierra Negra Nahuatl",
  nsv: "Southwestern Nisu",
  nsw: "Navut",
  nsx: "Nsongo",
  nsy: "Nasal",
  nsz: "Nisenan",
  ntd: "Northern Tidung",
  nte: "Nathembo",
  ntg: "Ngantangarra",
  nti: "Natioro",
  ntj: "Ngaanyatjarra",
  ntk: "Ikoma-Nata-Isenye",
  ntm: "Nateni",
  nto: "Ntomba",
  ntp: "Northern Tepehuan",
  ntr: "Delo",
  ntu: "Natügu",
  ntw: "Nottoway",
  ntx: "Tangkhul Naga (Myanmar)",
  nty: "Mantsi",
  ntz: "Natanzi",
  nua: "Yuanga",
  nuc: "Nukuini",
  nud: "Ngala",
  nue: "Ngundu",
  nuf: "Nusu",
  nug: "Nungali",
  nuh: "Ndunda",
  nui: "Ngumbi",
  nuj: "Nyole",
  nuk: "Nuu-chah-nulth",
  nul: "Nusa Laut",
  num: "Niuafo'ou",
  nun: "Anong",
  nuo: "Nguôn",
  nup: "Nupe-Nupe-Tako",
  nuq: "Nukumanu",
  nur: "Nukuria",
  nus: "Nuer",
  nut: "Nung (Viet Nam)",
  nuu: "Ngbundu",
  nuv: "Northern Nuni",
  nuw: "Nguluwan",
  nux: "Mehek",
  nuy: "Nunggubuyu",
  nuz: "Tlamacazapa Nahuatl",
  nvh: "Nasarian",
  nvm: "Namiae",
  nvo: "Nyokon",
  nwa: "Nawathinehena",
  nwb: "Nyabwa",
  nwc: "Classical Newari",
  nwe: "Ngwe",
  nwg: "Ngayawung",
  nwi: "Southwest Tanna",
  nwm: "Nyamusa-Molo",
  nwo: "Nauo",
  nwr: "Nawaru",
  nwx: "Middle Newar",
  nwy: "Nottoway-Meherrin",
  nxa: "Nauete",
  nxd: "Ngando (Democratic Republic of Congo)",
  nxe: "Nage",
  nxg: "Ngad'a",
  nxi: "Nindi",
  nxk: "Koki Naga",
  nxl: "South Nuaulu",
  nxm: "Numidian",
  nxn: "Ngawun",
  nxo: "Ndambomo",
  nxq: "Naxi",
  nxr: "Ninggerum",
  nxu: "Narau",
  nxx: "Nafri",
  nya: "Nyanja",
  nyb: "Nyangbo",
  nyc: "Nyanga-li",
  nyd: "Nyore",
  nye: "Nyengo",
  nyf: "Giryama",
  nyg: "Nyindu",
  nyh: "Nyigina",
  nyi: "Ama (Sudan)",
  nyj: "Nyanga",
  nyk: "Nyaneka",
  nyl: "Nyeu",
  nym: "Nyamwezi",
  nyn: "Nyankole",
  nyo: "Nyoro",
  nyp: "Nyang'i",
  nyq: "Nayini",
  nyr: "Nyiha (Malawi)",
  nys: "Nyunga",
  nyt: "Nyawaygi",
  nyu: "Nyungwe",
  nyv: "Nyulnyul",
  nyw: "Nyaw",
  nyx: "Nganyaywana",
  nyy: "Nyakyusa-Ngonde",
  nza: "Tigon Mbembe",
  nzb: "Njebi",
  nzi: "Nzima",
  nzk: "Nzakara",
  nzm: "Zeme Naga",
  nzs: "New Zealand Sign Language",
  nzu: "Teke-Nzikou",
  nzy: "Nzakambay",
  nzz: "Nanga Dama Dogon",
  oaa: "Orok",
  oac: "Oroch",
  oar: "Old Aramaic (up to 700 BCE)",
  oav: "Old Avar",
  obi: "Obispeño",
  obk: "Southern Bontok",
  obl: "Oblo",
  obm: "Moabite",
  obo: "Obo Manobo",
  obr: "Old Burmese",
  obt: "Old Breton",
  obu: "Obulom",
  oca: "Ocaina",
  och: "Old Chinese",
  oci: "Occitan (post 1500)",
  oco: "Old Cornish",
  ocu: "Atzingo Matlatzinca",
  oda: "Odut",
  odk: "Od",
  odt: "Old Dutch",
  odu: "Odual",
  ofo: "Ofo",
  ofs: "Old Frisian",
  ofu: "Efutop",
  ogb: "Ogbia",
  ogc: "Ogbah",
  oge: "Old Georgian",
  ogg: "Ogbogolo",
  ogo: "Khana",
  ogu: "Ogbronuagum",
  oht: "Old Hittite",
  ohu: "Old Hungarian",
  oia: "Oirata",
  oin: "Inebu One",
  ojb: "Northwestern Ojibwa",
  ojc: "Central Ojibwa",
  ojg: "Eastern Ojibwa",
  oji: "Ojibwa",
  ojp: "Old Japanese",
  ojs: "Severn Ojibwa",
  ojv: "Ontong Java",
  ojw: "Western Ojibwa",
  oka: "Okanagan",
  okb: "Okobo",
  okd: "Okodia",
  oke: "Okpe (Southwestern Edo)",
  okg: "Koko Babangk",
  okh: "Koresh-e Rostam",
  oki: "Okiek",
  okj: "Oko-Juwoi",
  okk: "Kwamtim One",
  okl: "Old Kentish Sign Language",
  okm: "Middle Korean (10th-16th cent.)",
  okn: "Oki-No-Erabu",
  oko: "Old Korean (3rd-9th cent.)",
  okr: "Kirike",
  oks: "Oko-Eni-Osayen",
  oku: "Oku",
  okv: "Orokaiva",
  okx: "Okpe (Northwestern Edo)",
  ola: "Walungge",
  old: "Mochi",
  ole: "Olekha",
  olk: "Olkol",
  olm: "Oloma",
  olo: "Livvi",
  olr: "Olrat",
  olt: "Old Lithuanian",
  olu: "Kuvale",
  oma: "Omaha-Ponca",
  omb: "East Ambae",
  omc: "Mochica",
  omg: "Omagua",
  omi: "Omi",
  omk: "Omok",
  oml: "Ombo",
  omn: "Minoan",
  omo: "Utarmbung",
  omp: "Old Manipuri",
  omr: "Old Marathi",
  omt: "Omotik",
  omu: "Omurano",
  omw: "South Tairora",
  omx: "Old Mon",
  ona: "Ona",
  onb: "Lingao",
  one: "Oneida",
  ong: "Olo",
  oni: "Onin",
  onj: "Onjob",
  onk: "Kabore One",
  onn: "Onobasulu",
  ono: "Onondaga",
  onp: "Sartang",
  onr: "Northern One",
  ons: "Ono",
  ont: "Ontenu",
  onu: "Unua",
  onw: "Old Nubian",
  onx: "Onin Based Pidgin",
  ood: "Tohono O'odham",
  oog: "Ong",
  oon: "Önge",
  oor: "Oorlams",
  oos: "Old Ossetic",
  opa: "Okpamheri",
  opk: "Kopkaka",
  opm: "Oksapmin",
  opo: "Opao",
  opt: "Opata",
  opy: "Ofayé",
  ora: "Oroha",
  orc: "Orma",
  ore: "Orejón",
  org: "Oring",
  orh: "Oroqen",
  ori: "Oriya (macrolanguage)",
  orm: "Oromo",
  orn: "Orang Kanaq",
  oro: "Orokolo",
  orr: "Oruma",
  ors: "Orang Seletar",
  ort: "Adivasi Oriya",
  oru: "Ormuri",
  orv: "Old Russian",
  orw: "Oro Win",
  orx: "Oro",
  ory: "Odia",
  orz: "Ormu",
  osa: "Osage",
  osc: "Oscan",
  osi: "Osing",
  oso: "Ososo",
  osp: "Old Spanish",
  oss: "Ossetian",
  ost: "Osatu",
  osu: "Southern One",
  osx: "Old Saxon",
  ota: "Ottoman Turkish (1500-1928)",
  otb: "Old Tibetan",
  otd: "Ot Danum",
  ote: "Mezquital Otomi",
  oti: "Oti",
  otk: "Old Turkish",
  otl: "Tilapa Otomi",
  otm: "Eastern Highland Otomi",
  otn: "Tenango Otomi",
  otq: "Querétaro Otomi",
  otr: "Otoro",
  ots: "Estado de México Otomi",
  ott: "Temoaya Otomi",
  otu: "Otuke",
  otw: "Ottawa",
  otx: "Texcatepec Otomi",
  oty: "Old Tamil",
  otz: "Ixtenco Otomi",
  oua: "Tagargrent",
  oub: "Glio-Oubi",
  oue: "Oune",
  oui: "Old Uighur",
  oum: "Ouma",
  ovd: "Elfdalian",
  owi: "Owiniga",
  owl: "Old Welsh",
  oyb: "Oy",
  oyd: "Oyda",
  oym: "Wayampi",
  oyy: "Oya'oya",
  ozm: "Koonzime",
  pab: "Parecís",
  pac: "Pacoh",
  pad: "Paumarí",
  pae: "Pagibete",
  paf: "Paranawát",
  pag: "Pangasinan",
  pah: "Tenharim",
  pai: "Pe",
  pak: "Parakanã",
  pal: "Pahlavi",
  pam: "Pampanga",
  pan: "Panjabi",
  pao: "Northern Paiute",
  pap: "Papiamento",
  paq: "Parya",
  par: "Panamint",
  pas: "Papasena",
  pat: "Papitalai",
  pau: "Palauan",
  pav: "Pakaásnovos",
  paw: "Pawnee",
  pax: "Pankararé",
  pay: "Pech",
  paz: "Pankararú",
  pbb: "Páez",
  pbc: "Patamona",
  pbe: "Mezontla Popoloca",
  pbf: "Coyotepec Popoloca",
  pbg: "Paraujano",
  pbh: "E'ñapa Woromaipu",
  pbi: "Parkwa",
  pbl: "Mak (Nigeria)",
  pbn: "Kpasam",
  pbo: "Papel",
  pbp: "Badyara",
  pbr: "Pangwa",
  pbs: "Central Pame",
  pbt: "Southern Pashto",
  pbu: "Northern Pashto",
  pbv: "Pnar",
  pby: "Pyu (Papua New Guinea)",
  pca: "Santa Inés Ahuatempan Popoloca",
  pcb: "Pear",
  pcc: "Bouyei",
  pcd: "Picard",
  pce: "Ruching Palaung",
  pcf: "Paliyan",
  pcg: "Paniya",
  pch: "Pardhan",
  pci: "Duruwa",
  pcj: "Parenga",
  pck: "Paite Chin",
  pcl: "Pardhi",
  pcm: "Nigerian Pidgin",
  pcn: "Piti",
  pcp: "Pacahuara",
  pcw: "Pyapun",
  pda: "Anam",
  pdc: "Pennsylvania German",
  pdi: "Pa Di",
  pdn: "Podena",
  pdo: "Padoe",
  pdt: "Plautdietsch",
  pdu: "Kayan",
  pea: "Peranakan Indonesian",
  peb: "Eastern Pomo",
  ped: "Mala (Papua New Guinea)",
  pee: "Taje",
  pef: "Northeastern Pomo",
  peg: "Pengo",
  peh: "Bonan",
  pei: "Chichimeca-Jonaz",
  pej: "Northern Pomo",
  pek: "Penchal",
  pel: "Pekal",
  pem: "Phende",
  peo: "Old Persian (ca. 600-400 B.C.)",
  pep: "Kunja",
  peq: "Southern Pomo",
  pes: "Iranian Persian",
  pev: "Pémono",
  pex: "Petats",
  pey: "Petjo",
  pez: "Eastern Penan",
  pfa: "Pááfang",
  pfe: "Peere",
  pfl: "Pfaelzisch",
  pga: "Sudanese Creole Arabic",
  pgd: "Gāndhārī",
  pgg: "Pangwali",
  pgi: "Pagi",
  pgk: "Rerep",
  pgl: "Primitive Irish",
  pgn: "Paelignian",
  pgs: "Pangseng",
  pgu: "Pagu",
  pgz: "Papua New Guinean Sign Language",
  pha: "Pa-Hng",
  phd: "Phudagi",
  phg: "Phuong",
  phh: "Phukha",
  phk: "Phake",
  phl: "Phalura",
  phm: "Phimbi",
  phn: "Phoenician",
  pho: "Phunoi",
  phq: "Phana'",
  phr: "Pahari-Potwari",
  pht: "Phu Thai",
  phu: "Phuan",
  phv: "Pahlavani",
  phw: "Phangduwali",
  pia: "Pima Bajo",
  pib: "Yine",
  pic: "Pinji",
  pid: "Piaroa",
  pie: "Piro",
  pif: "Pingelapese",
  pig: "Pisabo",
  pih: "Pitcairn-Norfolk",
  pii: "Pini",
  pij: "Pijao",
  pil: "Yom",
  pim: "Powhatan",
  pin: "Piame",
  pio: "Piapoco",
  pip: "Pero",
  pir: "Piratapuyo",
  pis: "Pijin",
  pit: "Pitta Pitta",
  piu: "Pintupi-Luritja",
  piv: "Pileni",
  piw: "Pimbwe",
  pix: "Piu",
  piy: "Piya-Kwonci",
  piz: "Pije",
  pjt: "Pitjantjatjara",
  pka: "Ardhamāgadhī Prākrit",
  pkb: "Pokomo",
  pkc: "Paekche",
  pkg: "Pak-Tong",
  pkh: "Pankhu",
  pkn: "Pakanha",
  pko: "Pökoot",
  pkp: "Pukapuka",
  pkr: "Attapady Kurumba",
  pks: "Pakistan Sign Language",
  pkt: "Maleng",
  pku: "Paku",
  pla: "Miani",
  plb: "Polonombauk",
  plc: "Central Palawano",
  pld: "Polari",
  ple: "Palu'e",
  plg: "Pilagá",
  plh: "Paulohi",
  pli: "Pali",
  plj: "Polci",
  plk: "Kohistani Shina",
  pll: "Shwe Palaung",
  pln: "Palenquero",
  plo: "Oluta Popoluca",
  plp: "Palpa",
  plq: "Palaic",
  plr: "Palaka Senoufo",
  pls: "San Marcos Tlacoyalco Popoloca",
  plt: "Plateau Malagasy",
  plu: "Palikúr",
  plv: "Southwest Palawano",
  plw: "Brooke's Point Palawano",
  ply: "Bolyu",
  plz: "Paluan",
  pma: "Paama",
  pmb: "Pambia",
  pmd: "Pallanganmiddang",
  pme: "Pwaamei",
  pmf: "Pamona",
  pmh: "Māhārāṣṭri Prākrit",
  pmi: "Northern Pumi",
  pmj: "Southern Pumi",
  pmk: "Pamlico",
  pml: "Lingua Franca",
  pmm: "Pomo",
  pmn: "Pam",
  pmo: "Pom",
  pmq: "Northern Pame",
  pmr: "Paynamar",
  pms: "Piemontese",
  pmt: "Tuamotuan",
  pmw: "Plains Miwok",
  pmx: "Poumei Naga",
  pmy: "Papuan Malay",
  pmz: "Southern Pame",
  pna: "Punan Bah-Biau",
  pnb: "Western Panjabi",
  pnc: "Pannei",
  pne: "Western Penan",
  png: "Pongu",
  pnh: "Penrhyn",
  pni: "Aoheng",
  pnj: "Pinjarup",
  pnk: "Paunaka",
  pnl: "Paleni",
  pnm: "Punan Batu 1",
  pnn: "Pinai-Hagahai",
  pno: "Panobo",
  pnp: "Pancana",
  pnq: "Pana (Burkina Faso)",
  pnr: "Panim",
  pns: "Ponosakan",
  pnt: "Pontic",
  pnu: "Jiongnai Bunu",
  pnv: "Pinigura",
  pnw: "Panytyima",
  pnx: "Phong-Kniang",
  pny: "Pinyin",
  pnz: "Pana (Central African Republic)",
  poc: "Poqomam",
  poe: "San Juan Atzingo Popoloca",
  pof: "Poke",
  pog: "Potiguára",
  poh: "Poqomchi'",
  poi: "Highland Popoluca",
  pok: "Pokangá",
  pol: "Polish",
  pom: "Southeastern Pomo",
  pon: "Pohnpeian",
  poo: "Central Pomo",
  pop: "Pwapwâ",
  poq: "Texistepec Popoluca",
  por: "Portuguese",
  pos: "Sayula Popoluca",
  pot: "Potawatomi",
  pov: "Upper Guinea Crioulo",
  pow: "San Felipe Otlaltepec Popoloca",
  pox: "Polabian",
  poy: "Pogolo",
  ppe: "Papi",
  ppi: "Paipai",
  ppk: "Uma",
  ppl: "Pipil",
  ppm: "Papuma",
  ppn: "Papapana",
  ppo: "Folopa",
  ppp: "Pelende",
  ppq: "Pei",
  pps: "San Luís Temalacayuca Popoloca",
  ppt: "Pare",
  ppu: "Papora",
  pqa: "Pa'a",
  pqm: "Malecite-Passamaquoddy",
  prc: "Parachi",
  prd: "Parsi-Dari",
  pre: "Principense",
  prf: "Paranan",
  prg: "Prussian",
  prh: "Porohanon",
  pri: "Paicî",
  prk: "Parauk",
  prl: "Peruvian Sign Language",
  prm: "Kibiri",
  prn: "Prasuni",
  pro: "Old Provençal (to 1500)",
  prp: "Parsi",
  prq: "Ashéninka Perené",
  prr: "Puri",
  prs: "Dari",
  prt: "Phai",
  pru: "Puragi",
  prw: "Parawen",
  prx: "Purik",
  prz: "Providencia Sign Language",
  psa: "Asue Awyu",
  psc: "Persian Sign Language",
  psd: "Plains Indian Sign Language",
  pse: "Central Malay",
  psg: "Penang Sign Language",
  psh: "Southwest Pashai",
  psi: "Southeast Pashai",
  psl: "Puerto Rican Sign Language",
  psm: "Pauserna",
  psn: "Panasuan",
  pso: "Polish Sign Language",
  psp: "Philippine Sign Language",
  psq: "Pasi",
  psr: "Portuguese Sign Language",
  pss: "Kaulong",
  pst: "Central Pashto",
  psu: "Sauraseni Prākrit",
  psw: "Port Sandwich",
  psy: "Piscataway",
  pta: "Pai Tavytera",
  pth: "Pataxó Hã-Ha-Hãe",
  pti: "Pintiini",
  ptn: "Patani",
  pto: "Zo'é",
  ptp: "Patep",
  ptq: "Pattapu",
  ptr: "Piamatsina",
  ptt: "Enrekang",
  ptu: "Bambam",
  ptv: "Port Vato",
  ptw: "Pentlatch",
  pty: "Pathiya",
  pua: "Western Highland Purepecha",
  pub: "Purum",
  puc: "Punan Merap",
  pud: "Punan Aput",
  pue: "Puelche",
  puf: "Punan Merah",
  pug: "Phuie",
  pui: "Puinave",
  puj: "Punan Tubu",
  pum: "Puma",
  puo: "Puoc",
  pup: "Pulabu",
  puq: "Puquina",
  pur: "Puruborá",
  pus: "Pushto",
  put: "Putoh",
  puu: "Punu",
  puw: "Puluwatese",
  pux: "Puare",
  puy: "Purisimeño",
  pwa: "Pawaia",
  pwb: "Panawa",
  pwg: "Gapapaiwa",
  pwi: "Patwin",
  pwm: "Molbog",
  pwn: "Paiwan",
  pwo: "Pwo Western Karen",
  pwr: "Powari",
  pww: "Pwo Northern Karen",
  pxm: "Quetzaltepec Mixe",
  pye: "Pye Krumen",
  pym: "Fyam",
  pyn: "Poyanáwa",
  pys: "Paraguayan Sign Language",
  pyu: "Puyuma",
  pyx: "Pyu (Myanmar)",
  pyy: "Pyen",
  pzn: "Para Naga",
  qaa: "Original audio",
  qad: "Audio Description",
  qua: "Quapaw",
  qub: "Huallaga Huánuco Quechua",
  quc: "K'iche'",
  qud: "Calderón Highland Quichua",
  que: "Quechua",
  quf: "Lambayeque Quechua",
  qug: "Chimborazo Highland Quichua",
  quh: "South Bolivian Quechua",
  qui: "Quileute",
  quk: "Chachapoyas Quechua",
  qul: "North Bolivian Quechua",
  qum: "Sipacapense",
  qun: "Quinault",
  qup: "Southern Pastaza Quechua",
  quq: "Quinqui",
  qur: "Yanahuanca Pasco Quechua",
  qus: "Santiago del Estero Quichua",
  quv: "Sacapulteco",
  quw: "Tena Lowland Quichua",
  qux: "Yauyos Quechua",
  quy: "Ayacucho Quechua",
  quz: "Cusco Quechua",
  qva: "Ambo-Pasco Quechua",
  qvc: "Cajamarca Quechua",
  qve: "Eastern Apurímac Quechua",
  qvh: "Huamalíes-Dos de Mayo Huánuco Quechua",
  qvi: "Imbabura Highland Quichua",
  qvj: "Loja Highland Quichua",
  qvl: "Cajatambo North Lima Quechua",
  qvm: "Margos-Yarowilca-Lauricocha Quechua",
  qvn: "North Junín Quechua",
  qvo: "Napo Lowland Quechua",
  qvp: "Pacaraos Quechua",
  qvs: "San Martín Quechua",
  qvw: "Huaylla Wanca Quechua",
  qvy: "Queyu",
  qvz: "Northern Pastaza Quichua",
  qwa: "Corongo Ancash Quechua",
  qwc: "Classical Quechua",
  qwh: "Huaylas Ancash Quechua",
  qwm: "Kuman (Russia)",
  qws: "Sihuas Ancash Quechua",
  qwt: "Kwalhioqua-Tlatskanai",
  qxa: "Chiquián Ancash Quechua",
  qxc: "Chincha Quechua",
  qxh: "Panao Huánuco Quechua",
  qxl: "Salasaca Highland Quichua",
  qxn: "Northern Conchucos Ancash Quechua",
  qxo: "Southern Conchucos Ancash Quechua",
  qxp: "Puno Quechua",
  qxq: "Qashqa'i",
  qxr: "Cañar Highland Quichua",
  qxs: "Southern Qiang",
  qxt: "Santa Ana de Tusi Pasco Quechua",
  qxu: "Arequipa-La Unión Quechua",
  qxw: "Jauja Wanca Quechua",
  qya: "Quenya",
  qyp: "Quiripi",
  raa: "Dungmali",
  rab: "Camling",
  rac: "Rasawa",
  rad: "Rade",
  raf: "Western Meohang",
  rag: "Logooli",
  rah: "Rabha",
  rai: "Ramoaaina",
  raj: "Rajasthani",
  rak: "Tulu-Bohuai",
  ral: "Ralte",
  ram: "Canela",
  ran: "Riantana",
  rao: "Rao",
  rap: "Rapanui",
  raq: "Saam",
  rar: "Rarotongan",
  ras: "Tegali",
  rat: "Razajerdi",
  rau: "Raute",
  rav: "Sampang",
  raw: "Rawang",
  rax: "Rang",
  ray: "Rapa",
  raz: "Rahambuu",
  rbb: "Rumai Palaung",
  rbk: "Northern Bontok",
  rbl: "Miraya Bikol",
  rbp: "Barababaraba",
  rcf: "Réunion Creole French",
  rdb: "Rudbari",
  rea: "Rerau",
  reb: "Rembong",
  ree: "Rejang Kayan",
  reg: "Kara (Tanzania)",
  rei: "Reli",
  rej: "Rejang",
  rel: "Rendille",
  rem: "Remo",
  ren: "Rengao",
  rer: "Rer Bare",
  res: "Reshe",
  ret: "Retta",
  rey: "Reyesano",
  rga: "Roria",
  rge: "Romano-Greek",
  rgk: "Rangkas",
  rgn: "Romagnol",
  rgr: "Resígaro",
  rgs: "Southern Roglai",
  rgu: "Ringgou",
  rhg: "Rohingya",
  rhp: "Yahang",
  ria: "Riang (India)",
  rif: "Tarifit",
  ril: "Riang (Myanmar)",
  rim: "Nyaturu",
  rin: "Nungu",
  rir: "Ribun",
  rit: "Ritarungo",
  riu: "Riung",
  rjg: "Rajong",
  rji: "Raji",
  rjs: "Rajbanshi",
  rka: "Kraol",
  rkb: "Rikbaktsa",
  rkh: "Rakahanga-Manihiki",
  rki: "Rakhine",
  rkm: "Marka",
  rkt: "Rangpuri",
  rkw: "Arakwal",
  rma: "Rama",
  rmb: "Rembarunga",
  rmc: "Carpathian Romani",
  rmd: "Traveller Danish",
  rme: "Angloromani",
  rmf: "Kalo Finnish Romani",
  rmg: "Traveller Norwegian",
  rmh: "Murkim",
  rmi: "Lomavren",
  rmk: "Romkun",
  rml: "Baltic Romani",
  rmm: "Roma",
  rmn: "Balkan Romani",
  rmo: "Sinte Romani",
  rmp: "Rempi",
  rmq: "Caló",
  rms: "Romanian Sign Language",
  rmt: "Domari",
  rmu: "Tavringer Romani",
  rmv: "Romanova",
  rmw: "Welsh Romani",
  rmx: "Romam",
  rmy: "Vlax Romani",
  rmz: "Marma",
  rnd: "Ruund",
  rng: "Ronga",
  rnl: "Ranglong",
  rnn: "Roon",
  rnp: "Rongpo",
  rnr: "Nari Nari",
  rnw: "Rungwa",
  rob: "Tae'",
  roc: "Cacgia Roglai",
  rod: "Rogo",
  roe: "Ronji",
  rof: "Rombo",
  rog: "Northern Roglai",
  roh: "Romansh",
  rol: "Romblomanon",
  rom: "Romany",
  ron: "Romanian",
  roo: "Rotokas",
  rop: "Kriol",
  ror: "Rongga",
  rou: "Runga",
  row: "Dela-Oenale",
  rpn: "Repanbitip",
  rpt: "Rapting",
  rri: "Ririo",
  rro: "Waima",
  rrt: "Arritinngithigh",
  rsb: "Romano-Serbian",
  rsl: "Russian Sign Language",
  rsm: "Miriwoong Sign Language",
  rtc: "Rungtu Chin",
  rth: "Ratahan",
  rtm: "Rotuman",
  rts: "Yurats",
  rtw: "Rathawi",
  rub: "Gungu",
  ruc: "Ruuli",
  rue: "Rusyn",
  ruf: "Luguru",
  rug: "Roviana",
  ruh: "Ruga",
  rui: "Rufiji",
  ruk: "Che",
  run: "Rundi",
  ruo: "Istro Romanian",
  rup: "Macedo-Romanian",
  ruq: "Megleno Romanian",
  rus: "Russian",
  rut: "Rutul",
  ruu: "Lanas Lobu",
  ruy: "Mala (Nigeria)",
  ruz: "Ruma",
  rwa: "Rawo",
  rwk: "Rwa",
  rwm: "Amba (Uganda)",
  rwo: "Rawa",
  rwr: "Marwari (India)",
  rxd: "Ngardi",
  rxw: "Karuwali",
  ryn: "Northern Amami-Oshima",
  rys: "Yaeyama",
  ryu: "Central Okinawan",
  rzh: "Rāziḥī",
  saa: "Saba",
  sab: "Buglere",
  sac: "Meskwaki",
  sad: "Sandawe",
  sae: "Sabanê",
  saf: "Safaliba",
  sag: "Sango",
  sah: "Yakut",
  saj: "Sahu",
  sak: "Sake",
  sam: "Samaritan Aramaic",
  san: "Sanskrit",
  sao: "Sause",
  saq: "Samburu",
  sar: "Saraveca",
  sas: "Sasak",
  sat: "Santali",
  sau: "Saleman",
  sav: "Saafi-Saafi",
  saw: "Sawi",
  sax: "Sa",
  say: "Saya",
  saz: "Saurashtra",
  sba: "Ngambay",
  sbb: "Simbo",
  sbc: "Kele (Papua New Guinea)",
  sbd: "Southern Samo",
  sbe: "Saliba",
  sbf: "Chabu",
  sbg: "Seget",
  sbh: "Sori-Harengan",
  sbi: "Seti",
  sbj: "Surbakhal",
  sbk: "Safwa",
  sbl: "Botolan Sambal",
  sbm: "Sagala",
  sbn: "Sindhi Bhil",
  sbo: "Sabüm",
  sbp: "Sangu (Tanzania)",
  sbq: "Sileibi",
  sbr: "Sembakung Murut",
  sbs: "Subiya",
  sbt: "Kimki",
  sbu: "Stod Bhoti",
  sbv: "Sabine",
  sbw: "Simba",
  sbx: "Seberuang",
  sby: "Soli",
  sbz: "Sara Kaba",
  scb: "Chut",
  sce: "Dongxiang",
  scf: "San Miguel Creole French",
  scg: "Sanggau",
  sch: "Sakachep",
  sci: "Sri Lankan Creole Malay",
  sck: "Sadri",
  scl: "Shina",
  scn: "Sicilian",
  sco: "Scots",
  scp: "Helambu Sherpa",
  scq: "Sa'och",
  scs: "North Slavey",
  sct: "Southern Katang",
  scu: "Shumcho",
  scv: "Sheni",
  scw: "Sha",
  scx: "Sicel",
  sda: "Toraja-Sa'dan",
  sdb: "Shabak",
  sdc: "Sassarese Sardinian",
  sde: "Surubu",
  sdf: "Sarli",
  sdg: "Savi",
  sdh: "Southern Kurdish",
  sdj: "Suundi",
  sdk: "Sos Kundi",
  sdl: "Saudi Arabian Sign Language",
  sdm: "Semandang",
  sdn: "Gallurese Sardinian",
  sdo: "Bukar-Sadung Bidayuh",
  sdp: "Sherdukpen",
  sdr: "Oraon Sadri",
  sds: "Sened",
  sdt: "Shuadit",
  sdu: "Sarudu",
  sdx: "Sibu Melanau",
  sdz: "Sallands",
  sea: "Semai",
  seb: "Shempire Senoufo",
  sec: "Sechelt",
  sed: "Sedang",
  see: "Seneca",
  sef: "Cebaara Senoufo",
  seg: "Segeju",
  seh: "Sena",
  sei: "Seri",
  sej: "Sene",
  sek: "Sekani",
  sel: "Selkup",
  sen: "Nanerigé Sénoufo",
  seo: "Suarmin",
  sep: "Sìcìté Sénoufo",
  seq: "Senara Sénoufo",
  ser: "Serrano",
  ses: "Koyraboro Senni Songhai",
  set: "Sentani",
  seu: "Serui-Laut",
  sev: "Nyarafolo Senoufo",
  sew: "Sewa Bay",
  sey: "Secoya",
  sez: "Senthang Chin",
  sfb: "Langue des signes de Belgique Francophone",
  sfe: "Eastern Subanen",
  sfm: "Small Flowery Miao",
  sfs: "South African Sign Language",
  sfw: "Sehwi",
  sga: "Old Irish (to 900)",
  sgb: "Mag-antsi Ayta",
  sgc: "Kipsigis",
  sgd: "Surigaonon",
  sge: "Segai",
  sgg: "Swiss-German Sign Language",
  sgh: "Shughni",
  sgi: "Suga",
  sgj: "Surgujia",
  sgk: "Sangkong",
  sgm: "Singa",
  sgp: "Singpho",
  sgr: "Sangisari",
  sgs: "Samogitian",
  sgt: "Brokpake",
  sgu: "Salas",
  sgw: "Sebat Bet Gurage",
  sgx: "Sierra Leone Sign Language",
  sgy: "Sanglechi",
  sgz: "Sursurunga",
  sha: "Shall-Zwall",
  shb: "Ninam",
  shc: "Sonde",
  shd: "Kundal Shahi",
  she: "Sheko",
  shg: "Shua",
  shh: "Shoshoni",
  shi: "Tachelhit",
  shj: "Shatt",
  shk: "Shilluk",
  shl: "Shendu",
  shm: "Shahrudi",
  shn: "Shan",
  sho: "Shanga",
  shp: "Shipibo-Conibo",
  shq: "Sala",
  shr: "Shi",
  shs: "Shuswap",
  sht: "Shasta",
  shu: "Chadian Arabic",
  shv: "Shehri",
  shw: "Shwai",
  shx: "She",
  shy: "Tachawit",
  shz: "Syenara Senoufo",
  sia: "Akkala Sami",
  sib: "Sebop",
  sid: "Sidamo",
  sie: "Simaa",
  sif: "Siamou",
  sig: "Paasaal",
  sih: "Zire",
  sii: "Shom Peng",
  sij: "Numbami",
  sik: "Sikiana",
  sil: "Tumulung Sisaala",
  sim: "Mende (Papua New Guinea)",
  sin: "Sinhala",
  sip: "Sikkimese",
  siq: "Sonia",
  sir: "Siri",
  sis: "Siuslaw",
  siu: "Sinagen",
  siv: "Sumariup",
  siw: "Siwai",
  six: "Sumau",
  siy: "Sivandi",
  siz: "Siwi",
  sja: "Epena",
  sjb: "Sajau Basap",
  sjd: "Kildin Sami",
  sje: "Pite Sami",
  sjg: "Assangori",
  sjk: "Kemi Sami",
  sjl: "Sajalong",
  sjm: "Mapun",
  sjn: "Sindarin",
  sjo: "Xibe",
  sjp: "Surjapuri",
  sjr: "Siar-Lak",
  sjs: "Senhaja De Srair",
  sjt: "Ter Sami",
  sju: "Ume Sami",
  sjw: "Shawnee",
  ska: "Skagit",
  skb: "Saek",
  skc: "Ma Manda",
  skd: "Southern Sierra Miwok",
  ske: "Seke (Vanuatu)",
  skf: "Sakirabiá",
  skg: "Sakalava Malagasy",
  skh: "Sikule",
  ski: "Sika",
  skj: "Seke (Nepal)",
  skm: "Kutong",
  skn: "Kolibugan Subanon",
  sko: "Seko Tengah",
  skp: "Sekapan",
  skq: "Sininkere",
  skr: "Saraiki",
  sks: "Maia",
  skt: "Sakata",
  sku: "Sakao",
  skv: "Skou",
  skw: "Skepi Creole Dutch",
  skx: "Seko Padang",
  sky: "Sikaiana",
  skz: "Sekar",
  slc: "Sáliba",
  sld: "Sissala",
  sle: "Sholaga",
  slf: "Swiss-Italian Sign Language",
  slg: "Selungai Murut",
  slh: "Southern Puget Sound Salish",
  sli: "Lower Silesian",
  slj: "Salumá",
  slk: "Slovak",
  sll: "Salt-Yui",
  slm: "Pangutaran Sama",
  sln: "Salinan",
  slp: "Lamaholot",
  slq: "Salchuq",
  slr: "Salar",
  sls: "Singapore Sign Language",
  slt: "Sila",
  slu: "Selaru",
  slv: "Slovenian",
  slw: "Sialum",
  slx: "Salampasu",
  sly: "Selayar",
  slz: "Ma'ya",
  sma: "Southern Sami",
  smb: "Simbari",
  smc: "Som",
  smd: "Sama",
  sme: "Northern Sami",
  smf: "Auwe",
  smg: "Simbali",
  smh: "Samei",
  smj: "Lule Sami",
  smk: "Bolinao",
  sml: "Central Sama",
  smm: "Musasa",
  smn: "Inari Sami",
  smo: "Samoan",
  smp: "Samaritan",
  smq: "Samo",
  smr: "Simeulue",
  sms: "Skolt Sami",
  smt: "Simte",
  smu: "Somray",
  smv: "Samvedi",
  smw: "Sumbawa",
  smx: "Samba",
  smy: "Semnani",
  smz: "Simeku",
  sna: "Shona",
  snb: "Sebuyau",
  snc: "Sinaugoro",
  snd: "Sindhi",
  sne: "Bau Bidayuh",
  snf: "Noon",
  sng: "Sanga (Democratic Republic of Congo)",
  sni: "Sensi",
  snj: "Riverain Sango",
  snk: "Soninke",
  snl: "Sangil",
  snm: "Southern Ma'di",
  snn: "Siona",
  sno: "Snohomish",
  snp: "Siane",
  snq: "Sangu (Gabon)",
  snr: "Sihan",
  sns: "South West Bay",
  snu: "Senggi",
  snv: "Sa'ban",
  snw: "Selee",
  snx: "Sam",
  sny: "Saniyo-Hiyewe",
  snz: "Sinsauru",
  soa: "Thai Song",
  sob: "Sobei",
  soc: "So (Democratic Republic of Congo)",
  sod: "Songoora",
  soe: "Songomeno",
  sog: "Sogdian",
  soh: "Aka",
  soi: "Sonha",
  soj: "Soi",
  sok: "Sokoro",
  sol: "Solos",
  som: "Somali",
  soo: "Songo",
  sop: "Songe",
  soq: "Kanasi",
  sor: "Somrai",
  sos: "Seeku",
  sot: "Southern Sotho",
  sou: "Southern Thai",
  sov: "Sonsorol",
  sow: "Sowanda",
  sox: "Swo",
  soy: "Miyobe",
  soz: "Temi",
  spa: "Spanish",
  spb: "Sepa (Indonesia)",
  spc: "Sapé",
  spd: "Saep",
  spe: "Sepa (Papua New Guinea)",
  spg: "Sian",
  spi: "Saponi",
  spk: "Sengo",
  spl: "Selepet",
  spm: "Akukem",
  spn: "Sanapaná",
  spo: "Spokane",
  spp: "Supyire Senoufo",
  spq: "Loreto-Ucayali Spanish",
  spr: "Saparua",
  sps: "Saposa",
  spt: "Spiti Bhoti",
  spu: "Sapuan",
  spv: "Sambalpuri",
  spx: "South Picene",
  spy: "Sabaot",
  sqa: "Shama-Sambuga",
  sqh: "Shau",
  sqi: "Albanian",
  sqk: "Albanian Sign Language",
  sqm: "Suma",
  sqn: "Susquehannock",
  sqo: "Sorkhei",
  sqq: "Sou",
  sqr: "Siculo Arabic",
  sqs: "Sri Lankan Sign Language",
  sqt: "Soqotri",
  squ: "Squamish",
  sra: "Saruga",
  srb: "Sora",
  src: "Logudorese Sardinian",
  srd: "Sardinian",
  sre: "Sara",
  srf: "Nafi",
  srg: "Sulod",
  srh: "Sarikoli",
  sri: "Siriano",
  srk: "Serudung Murut",
  srl: "Isirawa",
  srm: "Saramaccan",
  srn: "Sranan Tongo",
  sro: "Campidanese Sardinian",
  srp: "Serbian",
  srq: "Sirionó",
  srr: "Serer",
  srs: "Sarsi",
  srt: "Sauri",
  sru: "Suruí",
  srv: "Southern Sorsoganon",
  srw: "Serua",
  srx: "Sirmauri",
  sry: "Sera",
  srz: "Shahmirzadi",
  ssb: "Southern Sama",
  ssc: "Suba-Simbiti",
  ssd: "Siroi",
  sse: "Balangingi",
  ssf: "Thao",
  ssg: "Seimat",
  ssh: "Shihhi Arabic",
  ssi: "Sansi",
  ssj: "Sausi",
  ssk: "Sunam",
  ssl: "Western Sisaala",
  ssm: "Semnam",
  ssn: "Waata",
  sso: "Sissano",
  ssp: "Spanish Sign Language",
  ssq: "So'a",
  ssr: "Swiss-French Sign Language",
  sss: "Sô",
  sst: "Sinasina",
  ssu: "Susuami",
  ssv: "Shark Bay",
  ssw: "Swati",
  ssx: "Samberigi",
  ssy: "Saho",
  ssz: "Sengseng",
  sta: "Settla",
  stb: "Northern Subanen",
  std: "Sentinel",
  ste: "Liana-Seti",
  stf: "Seta",
  stg: "Trieng",
  sth: "Shelta",
  sti: "Bulo Stieng",
  stj: "Matya Samo",
  stk: "Arammba",
  stl: "Stellingwerfs",
  stm: "Setaman",
  stn: "Owa",
  sto: "Stoney",
  stp: "Southeastern Tepehuan",
  stq: "Saterfriesisch",
  str: "Straits Salish",
  sts: "Shumashti",
  stt: "Budeh Stieng",
  stu: "Samtao",
  stv: "Silt'e",
  stw: "Satawalese",
  sty: "Siberian Tatar",
  sua: "Sulka",
  sub: "Suku",
  suc: "Western Subanon",
  sue: "Suena",
  sug: "Suganga",
  sui: "Suki",
  suj: "Shubi",
  suk: "Sukuma",
  sun: "Sundanese",
  suq: "Suri",
  sur: "Mwaghavul",
  sus: "Susu",
  sut: "Subtiaba",
  suv: "Puroik",
  suw: "Sumbwa",
  sux: "Sumerian",
  suy: "Suyá",
  suz: "Sunwar",
  sva: "Svan",
  svb: "Ulau-Suain",
  svc: "Vincentian Creole English",
  sve: "Serili",
  svk: "Slovakian Sign Language",
  svm: "Slavomolisano",
  svs: "Savosavo",
  svx: "Skalvian",
  swa: "Swahili (macrolanguage)",
  swb: "Maore Comorian",
  swc: "Congo Swahili",
  swe: "Swedish",
  swf: "Sere",
  swg: "Swabian",
  swh: "Swahili (individual language)",
  swi: "Sui",
  swj: "Sira",
  swk: "Malawi Sena",
  swl: "Swedish Sign Language",
  swm: "Samosa",
  swn: "Sawknah",
  swo: "Shanenawa",
  swp: "Suau",
  swq: "Sharwa",
  swr: "Saweru",
  sws: "Seluwasan",
  swt: "Sawila",
  swu: "Suwawa",
  swv: "Shekhawati",
  sww: "Sowa",
  swx: "Suruahá",
  swy: "Sarua",
  sxb: "Suba",
  sxc: "Sicanian",
  sxe: "Sighu",
  sxg: "Shixing",
  sxk: "Southern Kalapuya",
  sxl: "Selian",
  sxm: "Samre",
  sxn: "Sangir",
  sxo: "Sorothaptic",
  sxr: "Saaroa",
  sxs: "Sasaru",
  sxu: "Upper Saxon",
  sxw: "Saxwe Gbe",
  sya: "Siang",
  syb: "Central Subanen",
  syc: "Classical Syriac",
  syi: "Seki",
  syk: "Sukur",
  syl: "Sylheti",
  sym: "Maya Samo",
  syn: "Senaya",
  syo: "Suoy",
  syr: "Syriac",
  sys: "Sinyar",
  syw: "Kagate",
  syx: "Samay",
  syy: "Al-Sayyid Bedouin Sign Language",
  sza: "Semelai",
  szb: "Ngalum",
  szc: "Semaq Beri",
  szd: "Seru",
  sze: "Seze",
  szg: "Sengele",
  szl: "Silesian",
  szn: "Sula",
  szp: "Suabo",
  szs: "Solomon Islands Sign Language",
  szv: "Isu (Fako Division)",
  szw: "Sawai",
  taa: "Lower Tanana",
  tab: "Tabassaran",
  tac: "Lowland Tarahumara",
  tad: "Tause",
  tae: "Tariana",
  taf: "Tapirapé",
  tag: "Tagoi",
  tah: "Tahitian",
  taj: "Eastern Tamang",
  tak: "Tala",
  tal: "Tal",
  tam: "Tamil",
  tan: "Tangale",
  tao: "Yami",
  tap: "Taabwa",
  taq: "Tamasheq",
  tar: "Central Tarahumara",
  tas: "Tay Boi",
  tat: "Tatar",
  tau: "Upper Tanana",
  tav: "Tatuyo",
  taw: "Tai",
  tax: "Tamki",
  tay: "Atayal",
  taz: "Tocho",
  tba: "Aikanã",
  tbb: "Tapeba",
  tbc: "Takia",
  tbd: "Kaki Ae",
  tbe: "Tanimbili",
  tbf: "Mandara",
  tbg: "North Tairora",
  tbh: "Thurawal",
  tbi: "Gaam",
  tbj: "Tiang",
  tbk: "Calamian Tagbanwa",
  tbl: "Tboli",
  tbm: "Tagbu",
  tbn: "Barro Negro Tunebo",
  tbo: "Tawala",
  tbp: "Taworta",
  tbr: "Tumtum",
  tbs: "Tanguat",
  tbt: "Tembo (Kitembo)",
  tbu: "Tubar",
  tbv: "Tobo",
  tbw: "Tagbanwa",
  tbx: "Kapin",
  tby: "Tabaru",
  tbz: "Ditammari",
  tca: "Ticuna",
  tcb: "Tanacross",
  tcc: "Datooga",
  tcd: "Tafi",
  tce: "Southern Tutchone",
  tcf: "Malinaltepec Me'phaa",
  tcg: "Tamagario",
  tch: "Turks And Caicos Creole English",
  tci: "Wára",
  tck: "Tchitchege",
  tcl: "Taman (Myanmar)",
  tcm: "Tanahmerah",
  tcn: "Tichurong",
  tco: "Taungyo",
  tcp: "Tawr Chin",
  tcq: "Kaiy",
  tcs: "Torres Strait Creole",
  tct: "T'en",
  tcu: "Southeastern Tarahumara",
  tcw: "Tecpatlán Totonac",
  tcx: "Toda",
  tcy: "Tulu",
  tcz: "Thado Chin",
  tda: "Tagdal",
  tdb: "Panchpargania",
  tdc: "Emberá-Tadó",
  tdd: "Tai Nüa",
  tde: "Tiranige Diga Dogon",
  tdf: "Talieng",
  tdg: "Western Tamang",
  tdh: "Thulung",
  tdi: "Tomadino",
  tdj: "Tajio",
  tdk: "Tambas",
  tdl: "Sur",
  tdm: "Taruma",
  tdn: "Tondano",
  tdo: "Teme",
  tdq: "Tita",
  tdr: "Todrah",
  tds: "Doutai",
  tdt: "Tetun Dili",
  tdv: "Toro",
  tdx: "Tandroy-Mahafaly Malagasy",
  tdy: "Tadyawan",
  tea: "Temiar",
  teb: "Tetete",
  tec: "Terik",
  ted: "Tepo Krumen",
  tee: "Huehuetla Tepehua",
  tef: "Teressa",
  teg: "Teke-Tege",
  teh: "Tehuelche",
  tei: "Torricelli",
  tek: "Ibali Teke",
  tel: "Telugu",
  tem: "Timne",
  ten: "Tama (Colombia)",
  teo: "Teso",
  tep: "Tepecano",
  teq: "Temein",
  ter: "Tereno",
  tes: "Tengger",
  tet: "Tetum",
  teu: "Soo",
  tev: "Teor",
  tew: "Tewa (USA)",
  tex: "Tennet",
  tey: "Tulishi",
  tfi: "Tofin Gbe",
  tfn: "Tanaina",
  tfo: "Tefaro",
  tfr: "Teribe",
  tft: "Ternate",
  tga: "Sagalla",
  tgb: "Tobilung",
  tgc: "Tigak",
  tgd: "Ciwogai",
  tge: "Eastern Gorkha Tamang",
  tgf: "Chalikha",
  tgh: "Tobagonian Creole English",
  tgi: "Lawunuia",
  tgj: "Tagin",
  tgk: "Tajik",
  tgl: "Tagalog",
  tgn: "Tandaganon",
  tgo: "Sudest",
  tgp: "Tangoa",
  tgq: "Tring",
  tgr: "Tareng",
  tgs: "Nume",
  tgt: "Central Tagbanwa",
  tgu: "Tanggu",
  tgv: "Tingui-Boto",
  tgw: "Tagwana Senoufo",
  tgx: "Tagish",
  tgy: "Togoyo",
  tgz: "Tagalaka",
  tha: "Thai",
  thd: "Thayore",
  the: "Chitwania Tharu",
  thf: "Thangmi",
  thh: "Northern Tarahumara",
  thi: "Tai Long",
  thk: "Tharaka",
  thl: "Dangaura Tharu",
  thm: "Aheu",
  thn: "Thachanadan",
  thp: "Thompson",
  thq: "Kochila Tharu",
  thr: "Rana Tharu",
  ths: "Thakali",
  tht: "Tahltan",
  thu: "Thuri",
  thv: "Tahaggart Tamahaq",
  thw: "Thudam",
  thy: "Tha",
  thz: "Tayart Tamajeq",
  tia: "Tidikelt Tamazight",
  tic: "Tira",
  tif: "Tifal",
  tig: "Tigre",
  tih: "Timugon Murut",
  tii: "Tiene",
  tij: "Tilung",
  tik: "Tikar",
  til: "Tillamook",
  tim: "Timbe",
  tin: "Tindi",
  tio: "Teop",
  tip: "Trimuris",
  tiq: "Tiéfo",
  tir: "Tigrinya",
  tis: "Masadiit Itneg",
  tit: "Tinigua",
  tiu: "Adasen",
  tiv: "Tiv",
  tiw: "Tiwi",
  tix: "Southern Tiwa",
  tiy: "Tiruray",
  tiz: "Tai Hongjin",
  tja: "Tajuasohn",
  tjg: "Tunjung",
  tji: "Northern Tujia",
  tjl: "Tai Laing",
  tjm: "Timucua",
  tjn: "Tonjon",
  tjo: "Temacine Tamazight",
  tjs: "Southern Tujia",
  tju: "Tjurruru",
  tjw: "Djabwurrung",
  tka: "Truká",
  tkb: "Buksa",
  tkd: "Tukudede",
  tke: "Takwane",
  tkf: "Tukumanféd",
  tkg: "Tesaka Malagasy",
  tkl: "Tokelau",
  tkm: "Takelma",
  tkn: "Toku-No-Shima",
  tkp: "Tikopia",
  tkq: "Tee",
  tkr: "Tsakhur",
  tks: "Takestani",
  tkt: "Kathoriya Tharu",
  tku: "Upper Necaxa Totonac",
  tkv: "Mur Pano",
  tkw: "Teanu",
  tkx: "Tangko",
  tkz: "Takua",
  tla: "Southwestern Tepehuan",
  tlb: "Tobelo",
  tlc: "Yecuatla Totonac",
  tld: "Talaud",
  tlf: "Telefol",
  tlg: "Tofanma",
  tlh: "Klingon",
  tli: "Tlingit",
  tlj: "Talinga-Bwisi",
  tlk: "Taloki",
  tll: "Tetela",
  tlm: "Tolomako",
  tln: "Talondo'",
  tlo: "Talodi",
  tlp: "Filomena Mata-Coahuitlán Totonac",
  tlq: "Tai Loi",
  tlr: "Talise",
  tls: "Tambotalo",
  tlt: "Sou Nama",
  tlu: "Tulehu",
  tlv: "Taliabu",
  tlx: "Khehek",
  tly: "Talysh",
  tma: "Tama (Chad)",
  tmb: "Katbol",
  tmc: "Tumak",
  tmd: "Haruai",
  tme: "Tremembé",
  tmf: "Toba-Maskoy",
  tmg: "Ternateño",
  tmh: "Tamashek",
  tmi: "Tutuba",
  tmj: "Samarokena",
  tmk: "Northwestern Tamang",
  tml: "Tamnim Citak",
  tmm: "Tai Thanh",
  tmn: "Taman (Indonesia)",
  tmo: "Temoq",
  tmq: "Tumleo",
  tmr: "Jewish Babylonian Aramaic (ca. 200-1200 CE)",
  tms: "Tima",
  tmt: "Tasmate",
  tmu: "Iau",
  tmv: "Tembo (Motembo)",
  tmw: "Temuan",
  tmy: "Tami",
  tmz: "Tamanaku",
  tna: "Tacana",
  tnb: "Western Tunebo",
  tnc: "Tanimuca-Retuarã",
  tnd: "Angosturas Tunebo",
  tng: "Tobanga",
  tnh: "Maiani",
  tni: "Tandia",
  tnk: "Kwamera",
  tnl: "Lenakel",
  tnm: "Tabla",
  tnn: "North Tanna",
  tno: "Toromono",
  tnp: "Whitesands",
  tnq: "Taino",
  tnr: "Ménik",
  tns: "Tenis",
  tnt: "Tontemboan",
  tnu: "Tay Khang",
  tnv: "Tangchangya",
  tnw: "Tonsawang",
  tnx: "Tanema",
  tny: "Tongwe",
  tnz: "Ten'edn",
  tob: "Toba",
  toc: "Coyutla Totonac",
  tod: "Toma",
  tof: "Gizrra",
  tog: "Tonga (Nyasa)",
  toh: "Gitonga",
  toi: "Tonga (Zambia)",
  toj: "Tojolabal",
  tol: "Tolowa",
  tom: "Tombulu",
  ton: "Tonga (Tonga Islands)",
  too: "Xicotepec De Juárez Totonac",
  top: "Papantla Totonac",
  toq: "Toposa",
  tor: "Togbo-Vara Banda",
  tos: "Highland Totonac",
  tou: "Tho",
  tov: "Upper Taromi",
  tow: "Jemez",
  tox: "Tobian",
  toy: "Topoiyo",
  toz: "To",
  tpa: "Taupota",
  tpc: "Azoyú Me'phaa",
  tpe: "Tippera",
  tpf: "Tarpia",
  tpg: "Kula",
  tpi: "Tok Pisin",
  tpj: "Tapieté",
  tpk: "Tupinikin",
  tpl: "Tlacoapa Me'phaa",
  tpm: "Tampulma",
  tpn: "Tupinambá",
  tpo: "Tai Pao",
  tpp: "Pisaflores Tepehua",
  tpq: "Tukpa",
  tpr: "Tuparí",
  tpt: "Tlachichilco Tepehua",
  tpu: "Tampuan",
  tpv: "Tanapag",
  tpw: "Tupí",
  tpx: "Acatepec Me'phaa",
  tpy: "Trumai",
  tpz: "Tinputz",
  tqb: "Tembé",
  tql: "Lehali",
  tqm: "Turumsa",
  tqn: "Tenino",
  tqo: "Toaripi",
  tqp: "Tomoip",
  tqq: "Tunni",
  tqr: "Torona",
  tqt: "Western Totonac",
  tqu: "Touo",
  tqw: "Tonkawa",
  tra: "Tirahi",
  trb: "Terebu",
  trc: "Copala Triqui",
  trd: "Turi",
  tre: "East Tarangan",
  trf: "Trinidadian Creole English",
  trg: "Lishán Didán",
  trh: "Turaka",
  tri: "Trió",
  trj: "Toram",
  trl: "Traveller Scottish",
  trm: "Tregami",
  trn: "Trinitario",
  tro: "Tarao Naga",
  trp: "Kok Borok",
  trq: "San Martín Itunyoso Triqui",
  trr: "Taushiro",
  trs: "Chicahuaxtla Triqui",
  trt: "Tunggare",
  tru: "Turoyo",
  trv: "Taroko",
  trw: "Torwali",
  trx: "Tringgus-Sembaan Bidayuh",
  "try": "Turung",
  trz: "Torá",
  tsa: "Tsaangi",
  tsb: "Tsamai",
  tsc: "Tswa",
  tsd: "Tsakonian",
  tse: "Tunisian Sign Language",
  tsg: "Tausug",
  tsh: "Tsuvan",
  tsi: "Tsimshian",
  tsj: "Tshangla",
  tsk: "Tseku",
  tsl: "Ts'ün-Lao",
  tsm: "Turkish Sign Language",
  tsn: "Tswana",
  tso: "Tsonga",
  tsp: "Northern Toussian",
  tsq: "Thai Sign Language",
  tsr: "Akei",
  tss: "Taiwan Sign Language",
  tst: "Tondi Songway Kiini",
  tsu: "Tsou",
  tsv: "Tsogo",
  tsw: "Tsishingini",
  tsx: "Mubami",
  tsy: "Tebul Sign Language",
  tsz: "Purepecha",
  tta: "Tutelo",
  ttb: "Gaa",
  ttc: "Tektiteko",
  ttd: "Tauade",
  tte: "Bwanabwana",
  ttf: "Tuotomb",
  ttg: "Tutong",
  tth: "Upper Ta'oih",
  tti: "Tobati",
  ttj: "Tooro",
  ttk: "Totoro",
  ttl: "Totela",
  ttm: "Northern Tutchone",
  ttn: "Towei",
  tto: "Lower Ta'oih",
  ttp: "Tombelala",
  ttq: "Tawallammat Tamajaq",
  ttr: "Tera",
  tts: "Northeastern Thai",
  ttt: "Muslim Tat",
  ttu: "Torau",
  ttv: "Titan",
  ttw: "Long Wat",
  tty: "Sikaritai",
  ttz: "Tsum",
  tua: "Wiarumus",
  tub: "Tübatulabal",
  tuc: "Mutu",
  tud: "Tuxá",
  tue: "Tuyuca",
  tuf: "Central Tunebo",
  tug: "Tunia",
  tuh: "Taulil",
  tui: "Tupuri",
  tuj: "Tugutil",
  tuk: "Turkmen",
  tul: "Tula",
  tum: "Tumbuka",
  tun: "Tunica",
  tuo: "Tucano",
  tuq: "Tedaga",
  tur: "Turkish",
  tus: "Tuscarora",
  tuu: "Tututni",
  tuv: "Turkana",
  tux: "Tuxináwa",
  tuy: "Tugen",
  tuz: "Turka",
  tva: "Vaghua",
  tvd: "Tsuvadi",
  tve: "Te'un",
  tvk: "Southeast Ambrym",
  tvl: "Tuvalu",
  tvm: "Tela-Masbuar",
  tvn: "Tavoyan",
  tvo: "Tidore",
  tvs: "Taveta",
  tvt: "Tutsa Naga",
  tvu: "Tunen",
  tvw: "Sedoa",
  tvy: "Timor Pidgin",
  twa: "Twana",
  twb: "Western Tawbuid",
  twc: "Teshenawa",
  twd: "Twents",
  twe: "Tewa (Indonesia)",
  twf: "Northern Tiwa",
  twg: "Tereweng",
  twh: "Tai Dón",
  twi: "Twi",
  twl: "Tawara",
  twm: "Tawang Monpa",
  twn: "Twendi",
  two: "Tswapong",
  twp: "Ere",
  twq: "Tasawaq",
  twr: "Southwestern Tarahumara",
  twt: "Turiwára",
  twu: "Termanu",
  tww: "Tuwari",
  twx: "Tewe",
  twy: "Tawoyan",
  txa: "Tombonuo",
  txb: "Tokharian B",
  txc: "Tsetsaut",
  txe: "Totoli",
  txg: "Tangut",
  txh: "Thracian",
  txi: "Ikpeng",
  txj: "Tarjumo",
  txm: "Tomini",
  txn: "West Tarangan",
  txo: "Toto",
  txq: "Tii",
  txr: "Tartessian",
  txs: "Tonsea",
  txt: "Citak",
  txu: "Kayapó",
  txx: "Tatana",
  txy: "Tanosy Malagasy",
  tya: "Tauya",
  tye: "Kyanga",
  tyh: "O'du",
  tyi: "Teke-Tsaayi",
  tyj: "Tai Do",
  tyl: "Thu Lao",
  tyn: "Kombai",
  typ: "Thaypan",
  tyr: "Tai Daeng",
  tys: "Tày Sa Pa",
  tyt: "Tày Tac",
  tyu: "Kua",
  tyv: "Tuvinian",
  tyx: "Teke-Tyee",
  tyz: "Tày",
  tza: "Tanzanian Sign Language",
  tzh: "Tzeltal",
  tzj: "Tz'utujil",
  tzl: "Talossan",
  tzm: "Central Atlas Tamazight",
  tzn: "Tugun",
  tzo: "Tzotzil",
  tzx: "Tabriak",
  uam: "Uamué",
  uan: "Kuan",
  uar: "Tairuma",
  uba: "Ubang",
  ubi: "Ubi",
  ubl: "Buhi'non Bikol",
  ubr: "Ubir",
  ubu: "Umbu-Ungu",
  uby: "Ubykh",
  uda: "Uda",
  ude: "Udihe",
  udg: "Muduga",
  udi: "Udi",
  udj: "Ujir",
  udl: "Wuzlam",
  udm: "Udmurt",
  udu: "Uduk",
  ues: "Kioko",
  ufi: "Ufim",
  uga: "Ugaritic",
  ugb: "Kuku-Ugbanh",
  uge: "Ughele",
  ugn: "Ugandan Sign Language",
  ugo: "Ugong",
  ugy: "Uruguayan Sign Language",
  uha: "Uhami",
  uhn: "Damal",
  uig: "Uighur",
  uis: "Uisai",
  uiv: "Iyive",
  uji: "Tanjijili",
  uka: "Kaburi",
  ukg: "Ukuriguma",
  ukh: "Ukhwejo",
  ukk: "Muak Sa-aak",
  ukl: "Ukrainian Sign Language",
  ukp: "Ukpe-Bayobiri",
  ukq: "Ukwa",
  ukr: "Ukrainian",
  uks: "Urubú-Kaapor Sign Language",
  uku: "Ukue",
  ukw: "Ukwuani-Aboh-Ndoni",
  uky: "Kuuk-Yak",
  ula: "Fungwa",
  ulb: "Ulukwumi",
  ulc: "Ulch",
  ule: "Lule",
  ulf: "Usku",
  uli: "Ulithian",
  ulk: "Meriam",
  ull: "Ullatan",
  ulm: "Ulumanda'",
  uln: "Unserdeutsch",
  ulu: "Uma' Lung",
  ulw: "Ulwa",
  uma: "Umatilla",
  umb: "Umbundu",
  umc: "Marrucinian",
  umd: "Umbindhamu",
  umg: "Umbuygamu",
  umi: "Ukit",
  umm: "Umon",
  umn: "Makyan Naga",
  umo: "Umotína",
  ump: "Umpila",
  umr: "Umbugarla",
  ums: "Pendau",
  umu: "Munsee",
  una: "North Watut",
  und: "Undetermined",
  une: "Uneme",
  ung: "Ngarinyin",
  unk: "Enawené-Nawé",
  unm: "Unami",
  unn: "Kurnai",
  unr: "Mundari",
  unu: "Unubahe",
  unx: "Munda",
  unz: "Unde Kaili",
  upi: "Umeda",
  upv: "Uripiv-Wala-Rano-Atchin",
  ura: "Urarina",
  urb: "Urubú-Kaapor",
  urc: "Urningangg",
  urd: "Urdu",
  ure: "Uru",
  urf: "Uradhi",
  urg: "Urigina",
  urh: "Urhobo",
  uri: "Urim",
  urk: "Urak Lawoi'",
  url: "Urali",
  urm: "Urapmin",
  urn: "Uruangnirin",
  uro: "Ura (Papua New Guinea)",
  urp: "Uru-Pa-In",
  urr: "Lehalurup",
  urt: "Urat",
  uru: "Urumi",
  urv: "Uruava",
  urw: "Sop",
  urx: "Urimo",
  ury: "Orya",
  urz: "Uru-Eu-Wau-Wau",
  usa: "Usarufa",
  ush: "Ushojo",
  usi: "Usui",
  usk: "Usaghade",
  usp: "Uspanteco",
  usu: "Uya",
  uta: "Otank",
  ute: "Ute-Southern Paiute",
  utp: "Amba (Solomon Islands)",
  utr: "Etulo",
  utu: "Utu",
  uum: "Urum",
  uun: "Kulon-Pazeh",
  uur: "Ura (Vanuatu)",
  uuu: "U",
  uve: "West Uvean",
  uvh: "Uri",
  uvl: "Lote",
  uwa: "Kuku-Uwanh",
  uya: "Doko-Uyanga",
  uzb: "Uzbek",
  uzn: "Northern Uzbek",
  uzs: "Southern Uzbek",
  vaa: "Vaagri Booli",
  vae: "Vale",
  vaf: "Vafsi",
  vag: "Vagla",
  vah: "Varhadi-Nagpuri",
  vai: "Vai",
  vaj: "Sekele",
  val: "Vehes",
  vam: "Vanimo",
  van: "Valman",
  vao: "Vao",
  vap: "Vaiphei",
  "var": "Huarijio",
  vas: "Vasavi",
  vau: "Vanuma",
  vav: "Varli",
  vay: "Wayu",
  vbb: "Southeast Babar",
  vbk: "Southwestern Bontok",
  vec: "Venetian",
  ved: "Veddah",
  vel: "Veluws",
  vem: "Vemgo-Mabas",
  ven: "Venda",
  veo: "Ventureño",
  vep: "Veps",
  ver: "Mom Jango",
  vgr: "Vaghri",
  vgt: "Vlaamse Gebarentaal",
  vic: "Virgin Islands Creole English",
  vid: "Vidunda",
  vie: "Vietnamese",
  vif: "Vili",
  vig: "Viemo",
  vil: "Vilela",
  vin: "Vinza",
  vis: "Vishavan",
  vit: "Viti",
  viv: "Iduna",
  vka: "Kariyarra",
  vki: "Ija-Zuba",
  vkj: "Kujarge",
  vkk: "Kaur",
  vkl: "Kulisusu",
  vkm: "Kamakan",
  vko: "Kodeoha",
  vkp: "Korlai Creole Portuguese",
  vkt: "Tenggarong Kutai Malay",
  vku: "Kurrama",
  vlp: "Valpei",
  vls: "Vlaams",
  vma: "Martuyhunira",
  vmb: "Barbaram",
  vmc: "Juxtlahuaca Mixtec",
  vmd: "Mudu Koraga",
  vme: "East Masela",
  vmf: "Mainfränkisch",
  vmg: "Lungalunga",
  vmh: "Maraghei",
  vmi: "Miwa",
  vmj: "Ixtayutla Mixtec",
  vmk: "Makhuwa-Shirima",
  vml: "Malgana",
  vmm: "Mitlatongo Mixtec",
  vmp: "Soyaltepec Mazatec",
  vmq: "Soyaltepec Mixtec",
  vmr: "Marenje",
  vms: "Moksela",
  vmu: "Muluridyi",
  vmv: "Valley Maidu",
  vmw: "Makhuwa",
  vmx: "Tamazola Mixtec",
  vmy: "Ayautla Mazatec",
  vmz: "Mazatlán Mazatec",
  vnk: "Vano",
  vnm: "Vinmavis",
  vnp: "Vunapu",
  vol: "Volapük",
  vor: "Voro",
  vot: "Votic",
  vra: "Vera'a",
  vro: "Võro",
  vrs: "Varisi",
  vrt: "Burmbar",
  vsi: "Moldova Sign Language",
  vsl: "Venezuelan Sign Language",
  vsv: "Valencian Sign Language",
  vto: "Vitou",
  vum: "Vumbu",
  vun: "Vunjo",
  vut: "Vute",
  vwa: "Awa (China)",
  waa: "Walla Walla",
  wab: "Wab",
  wac: "Wasco-Wishram",
  wad: "Wandamen",
  wae: "Walser",
  waf: "Wakoná",
  wag: "Wa'ema",
  wah: "Watubela",
  wai: "Wares",
  waj: "Waffa",
  wal: "Wolaytta",
  wam: "Wampanoag",
  wan: "Wan",
  wao: "Wappo",
  wap: "Wapishana",
  waq: "Wageman",
  war: "Waray (Philippines)",
  was: "Washo",
  wat: "Kaninuwa",
  wau: "Waurá",
  wav: "Waka",
  waw: "Waiwai",
  wax: "Watam",
  way: "Wayana",
  waz: "Wampur",
  wba: "Warao",
  wbb: "Wabo",
  wbe: "Waritai",
  wbf: "Wara",
  wbh: "Wanda",
  wbi: "Vwanji",
  wbj: "Alagwa",
  wbk: "Waigali",
  wbl: "Wakhi",
  wbm: "Wa",
  wbp: "Warlpiri",
  wbq: "Waddar",
  wbr: "Wagdi",
  wbs: "West Bengal Sign Language",
  wbt: "Wanman",
  wbv: "Wajarri",
  wbw: "Woi",
  wca: "Yanomámi",
  wci: "Waci Gbe",
  wdd: "Wandji",
  wdg: "Wadaginam",
  wdj: "Wadjiginy",
  wdk: "Wadikali",
  wdu: "Wadjigu",
  wdy: "Wadjabangayi",
  wea: "Wewaw",
  wec: "Wè Western",
  wed: "Wedau",
  weg: "Wergaia",
  weh: "Weh",
  wei: "Kiunum",
  wem: "Weme Gbe",
  weo: "Wemale",
  wep: "Westphalien",
  wer: "Weri",
  wes: "Cameroon Pidgin",
  wet: "Perai",
  weu: "Rawngtu Chin",
  wew: "Wejewa",
  wfg: "Yafi",
  wga: "Wagaya",
  wgb: "Wagawaga",
  wgg: "Wangganguru",
  wgi: "Wahgi",
  wgo: "Waigeo",
  wgu: "Wirangu",
  wgy: "Warrgamay",
  wha: "Sou Upaa",
  whg: "North Wahgi",
  whk: "Wahau Kenyah",
  whu: "Wahau Kayan",
  wib: "Southern Toussian",
  wic: "Wichita",
  wie: "Wik-Epa",
  wif: "Wik-Keyangan",
  wig: "Wik-Ngathana",
  wih: "Wik-Me'anha",
  wii: "Minidien",
  wij: "Wik-Iiyanh",
  wik: "Wikalkan",
  wil: "Wilawila",
  wim: "Wik-Mungkan",
  win: "Ho-Chunk",
  wir: "Wiraféd",
  wiu: "Wiru",
  wiv: "Vitu",
  wiy: "Wiyot",
  wja: "Waja",
  wji: "Warji",
  wka: "Kw'adza",
  wkb: "Kumbaran",
  wkd: "Wakde",
  wkl: "Kalanadi",
  wku: "Kunduvadi",
  wkw: "Wakawaka",
  wky: "Wangkayutyuru",
  wla: "Walio",
  wlc: "Mwali Comorian",
  wle: "Wolane",
  wlg: "Kunbarlang",
  wli: "Waioli",
  wlk: "Wailaki",
  wll: "Wali (Sudan)",
  wlm: "Middle Welsh",
  wln: "Walloon",
  wlo: "Wolio",
  wlr: "Wailapa",
  wls: "Wallisian",
  wlu: "Wuliwuli",
  wlv: "Wichí Lhamtés Vejoz",
  wlw: "Walak",
  wlx: "Wali (Ghana)",
  wly: "Waling",
  wma: "Mawa (Nigeria)",
  wmb: "Wambaya",
  wmc: "Wamas",
  wmd: "Mamaindé",
  wme: "Wambule",
  wmh: "Waima'a",
  wmi: "Wamin",
  wmm: "Maiwa (Indonesia)",
  wmn: "Waamwang",
  wmo: "Wom (Papua New Guinea)",
  wms: "Wambon",
  wmt: "Walmajarri",
  wmw: "Mwani",
  wmx: "Womo",
  wnb: "Wanambre",
  wnc: "Wantoat",
  wnd: "Wandarang",
  wne: "Waneci",
  wng: "Wanggom",
  wni: "Ndzwani Comorian",
  wnk: "Wanukaka",
  wnm: "Wanggamala",
  wnn: "Wunumara",
  wno: "Wano",
  wnp: "Wanap",
  wnu: "Usan",
  wnw: "Wintu",
  wny: "Wanyi",
  woa: "Tyaraity",
  wob: "Wè Northern",
  woc: "Wogeo",
  wod: "Wolani",
  woe: "Woleaian",
  wof: "Gambian Wolof",
  wog: "Wogamusin",
  woi: "Kamang",
  wok: "Longto",
  wol: "Wolof",
  wom: "Wom (Nigeria)",
  won: "Wongo",
  woo: "Manombai",
  wor: "Woria",
  wos: "Hanga Hundi",
  wow: "Wawonii",
  woy: "Weyto",
  wpc: "Maco",
  wra: "Warapu",
  wrb: "Warluwara",
  wrd: "Warduji",
  wrg: "Warungu",
  wrh: "Wiradhuri",
  wri: "Wariyangga",
  wrk: "Garrwa",
  wrl: "Warlmanpa",
  wrm: "Warumungu",
  wrn: "Warnang",
  wro: "Worrorra",
  wrp: "Waropen",
  wrr: "Wardaman",
  wrs: "Waris",
  wru: "Waru",
  wrv: "Waruna",
  wrw: "Gugu Warra",
  wrx: "Wae Rana",
  wry: "Merwari",
  wrz: "Waray (Australia)",
  wsa: "Warembori",
  wsg: "Adilabad Gondi",
  wsi: "Wusi",
  wsk: "Waskia",
  wsr: "Owenia",
  wss: "Wasa",
  wsu: "Wasu",
  wsv: "Wotapuri-Katarqalai",
  wtf: "Watiwa",
  wth: "Wathawurrung",
  wti: "Berta",
  wtk: "Watakataui",
  wtm: "Mewati",
  wtw: "Wotu",
  wua: "Wikngenchera",
  wub: "Wunambal",
  wud: "Wudu",
  wuh: "Wutunhua",
  wul: "Silimo",
  wum: "Wumbvu",
  wun: "Bungu",
  wur: "Wurrugu",
  wut: "Wutung",
  wuu: "Wu Chinese",
  wuv: "Wuvulu-Aua",
  wux: "Wulna",
  wuy: "Wauyai",
  wwa: "Waama",
  wwb: "Wakabunga",
  wwo: "Wetamut",
  wwr: "Warrwa",
  www: "Wawa",
  wxa: "Waxianghua",
  wxw: "Wardandi",
  wya: "Wyandot",
  wyb: "Wangaaybuwan-Ngiyambaa",
  wyi: "Woiwurrung",
  wym: "Wymysorys",
  wyr: "Wayoró",
  wyy: "Western Fijian",
  xaa: "Andalusian Arabic",
  xab: "Sambe",
  xac: "Kachari",
  xad: "Adai",
  xae: "Aequian",
  xag: "Aghwan",
  xai: "Kaimbé",
  xaj: "Ararandewára",
  xak: "Máku",
  xal: "Kalmyk",
  xam: "/Xam",
  xan: "Xamtanga",
  xao: "Khao",
  xap: "Apalachee",
  xaq: "Aquitanian",
  xar: "Karami",
  xas: "Kamas",
  xat: "Katawixi",
  xau: "Kauwera",
  xav: "Xavánte",
  xaw: "Kawaiisu",
  xay: "Kayan Mahakam",
  xbb: "Lower Burdekin",
  xbc: "Bactrian",
  xbd: "Bindal",
  xbe: "Bigambal",
  xbg: "Bunganditj",
  xbi: "Kombio",
  xbj: "Birrpayi",
  xbm: "Middle Breton",
  xbn: "Kenaboi",
  xbo: "Bolgarian",
  xbp: "Bibbulman",
  xbr: "Kambera",
  xbw: "Kambiwá",
  xby: "Batyala",
  xcb: "Cumbric",
  xcc: "Camunic",
  xce: "Celtiberian",
  xcg: "Cisalpine Gaulish",
  xch: "Chemakum",
  xcl: "Classical Armenian",
  xcm: "Comecrudo",
  xcn: "Cotoname",
  xco: "Chorasmian",
  xcr: "Carian",
  xct: "Classical Tibetan",
  xcu: "Curonian",
  xcv: "Chuvantsy",
  xcw: "Coahuilteco",
  xcy: "Cayuse",
  xda: "Darkinyung",
  xdc: "Dacian",
  xdk: "Dharuk",
  xdm: "Edomite",
  xdo: "Kwandu",
  xdy: "Malayic Dayak",
  xeb: "Eblan",
  xed: "Hdi",
  xeg: "//Xegwi",
  xel: "Kelo",
  xem: "Kembayan",
  xep: "Epi-Olmec",
  xer: "Xerénte",
  xes: "Kesawai",
  xet: "Xetá",
  xeu: "Keoru-Ahia",
  xfa: "Faliscan",
  xga: "Galatian",
  xgb: "Gbin",
  xgd: "Gudang",
  xgf: "Gabrielino-Fernandeño",
  xgg: "Goreng",
  xgi: "Garingbal",
  xgl: "Galindan",
  xgm: "Dharumbal",
  xgr: "Garza",
  xgu: "Unggumi",
  xgw: "Guwa",
  xha: "Harami",
  xhc: "Hunnic",
  xhd: "Hadrami",
  xhe: "Khetrani",
  xho: "Xhosa",
  xhr: "Hernican",
  xht: "Hattic",
  xhu: "Hurrian",
  xhv: "Khua",
  xib: "Iberian",
  xii: "Xiri",
  xil: "Illyrian",
  xin: "Xinca",
  xir: "Xiriâna",
  xis: "Kisan",
  xiv: "Indus Valley Language",
  xiy: "Xipaya",
  xjb: "Minjungbal",
  xjt: "Jaitmatang",
  xka: "Kalkoti",
  xkb: "Northern Nago",
  xkc: "Kho'ini",
  xkd: "Mendalam Kayan",
  xke: "Kereho",
  xkf: "Khengkha",
  xkg: "Kagoro",
  xki: "Kenyan Sign Language",
  xkj: "Kajali",
  xkk: "Kaco'",
  xkl: "Mainstream Kenyah",
  xkn: "Kayan River Kayan",
  xko: "Kiorr",
  xkp: "Kabatei",
  xkq: "Koroni",
  xkr: "Xakriabá",
  xks: "Kumbewaha",
  xkt: "Kantosi",
  xku: "Kaamba",
  xkv: "Kgalagadi",
  xkw: "Kembra",
  xkx: "Karore",
  xky: "Uma' Lasan",
  xkz: "Kurtokha",
  xla: "Kamula",
  xlb: "Loup B",
  xlc: "Lycian",
  xld: "Lydian",
  xle: "Lemnian",
  xlg: "Ligurian (Ancient)",
  xli: "Liburnian",
  xln: "Alanic",
  xlo: "Loup A",
  xlp: "Lepontic",
  xls: "Lusitanian",
  xlu: "Cuneiform Luwian",
  xly: "Elymian",
  xma: "Mushungulu",
  xmb: "Mbonga",
  xmc: "Makhuwa-Marrevone",
  xmd: "Mbudum",
  xme: "Median",
  xmf: "Mingrelian",
  xmg: "Mengaka",
  xmh: "Kuku-Muminh",
  xmj: "Majera",
  xmk: "Ancient Macedonian",
  xml: "Malaysian Sign Language",
  xmm: "Manado Malay",
  xmn: "Manichaean Middle Persian",
  xmo: "Morerebi",
  xmp: "Kuku-Mu'inh",
  xmq: "Kuku-Mangk",
  xmr: "Meroitic",
  xms: "Moroccan Sign Language",
  xmt: "Matbat",
  xmu: "Kamu",
  xmv: "Antankarana Malagasy",
  xmw: "Tsimihety Malagasy",
  xmx: "Maden",
  xmy: "Mayaguduna",
  xmz: "Mori Bawah",
  xna: "Ancient North Arabian",
  xnb: "Kanakanabu",
  xng: "Middle Mongolian",
  xnh: "Kuanhua",
  xni: "Ngarigu",
  xnk: "Nganakarti",
  xnn: "Northern Kankanay",
  xno: "Anglo-Norman",
  xnr: "Kangri",
  xns: "Kanashi",
  xnt: "Narragansett",
  xnu: "Nukunul",
  xny: "Nyiyaparli",
  xnz: "Kenzi",
  xoc: "O'chi'chi'",
  xod: "Kokoda",
  xog: "Soga",
  xoi: "Kominimung",
  xok: "Xokleng",
  xom: "Komo (Sudan)",
  xon: "Konkomba",
  xoo: "Xukurú",
  xop: "Kopar",
  xor: "Korubo",
  xow: "Kowaki",
  xpa: "Pirriya",
  xpc: "Pecheneg",
  xpe: "Liberia Kpelle",
  xpg: "Phrygian",
  xpi: "Pictish",
  xpj: "Mpalitjanh",
  xpk: "Kulina Pano",
  xpm: "Pumpokol",
  xpn: "Kapinawá",
  xpo: "Pochutec",
  xpp: "Puyo-Paekche",
  xpq: "Mohegan-Pequot",
  xpr: "Parthian",
  xps: "Pisidian",
  xpt: "Punthamara",
  xpu: "Punic",
  xpy: "Puyo",
  xqa: "Karakhanid",
  xqt: "Qatabanian",
  xra: "Krahô",
  xrb: "Eastern Karaboro",
  xrd: "Gundungurra",
  xre: "Kreye",
  xrg: "Minang",
  xri: "Krikati-Timbira",
  xrm: "Armazic",
  xrn: "Arin",
  xrq: "Karranga",
  xrr: "Raetic",
  xrt: "Aranama-Tamique",
  xru: "Marriammu",
  xrw: "Karawa",
  xsa: "Sabaean",
  xsb: "Sambal",
  xsc: "Scythian",
  xsd: "Sidetic",
  xse: "Sempan",
  xsh: "Shamang",
  xsi: "Sio",
  xsl: "South Slavey",
  xsm: "Kasem",
  xsn: "Sanga (Nigeria)",
  xso: "Solano",
  xsp: "Silopi",
  xsq: "Makhuwa-Saka",
  xsr: "Sherpa",
  xss: "Assan",
  xsu: "Sanumá",
  xsv: "Sudovian",
  xsy: "Saisiyat",
  xta: "Alcozauca Mixtec",
  xtb: "Chazumba Mixtec",
  xtc: "Katcha-Kadugli-Miri",
  xtd: "Diuxi-Tilantongo Mixtec",
  xte: "Ketengban",
  xtg: "Transalpine Gaulish",
  xth: "Yitha Yitha",
  xti: "Sinicahua Mixtec",
  xtj: "San Juan Teita Mixtec",
  xtl: "Tijaltepec Mixtec",
  xtm: "Magdalena Peñasco Mixtec",
  xtn: "Northern Tlaxiaco Mixtec",
  xto: "Tokharian A",
  xtp: "San Miguel Piedras Mixtec",
  xtq: "Tumshuqese",
  xtr: "Early Tripuri",
  xts: "Sindihui Mixtec",
  xtt: "Tacahua Mixtec",
  xtu: "Cuyamecalco Mixtec",
  xtv: "Thawa",
  xtw: "Tawandê",
  xty: "Yoloxochitl Mixtec",
  xtz: "Tasmanian",
  xua: "Alu Kurumba",
  xub: "Betta Kurumba",
  xud: "Umiida",
  xug: "Kunigami",
  xuj: "Jennu Kurumba",
  xul: "Ngunawal",
  xum: "Umbrian",
  xun: "Unggaranggu",
  xuo: "Kuo",
  xup: "Upper Umpqua",
  xur: "Urartian",
  xut: "Kuthant",
  xuu: "Kxoe",
  xve: "Venetic",
  xvi: "Kamviri",
  xvn: "Vandalic",
  xvo: "Volscian",
  xvs: "Vestinian",
  xwa: "Kwaza",
  xwc: "Woccon",
  xwd: "Wadi Wadi",
  xwe: "Xwela Gbe",
  xwg: "Kwegu",
  xwj: "Wajuk",
  xwk: "Wangkumara",
  xwl: "Western Xwla Gbe",
  xwo: "Written Oirat",
  xwr: "Kwerba Mamberamo",
  xwt: "Wotjobaluk",
  xww: "Wemba Wemba",
  xxb: "Boro (Ghana)",
  xxk: "Ke'o",
  xxm: "Minkin",
  xxr: "Koropó",
  xxt: "Tambora",
  xya: "Yaygir",
  xyb: "Yandjibara",
  xyj: "Mayi-Yapi",
  xyk: "Mayi-Kulan",
  xyl: "Yalakalore",
  xyt: "Mayi-Thakurti",
  xyy: "Yorta Yorta",
  xzh: "Zhang-Zhung",
  xzm: "Zemgalian",
  xzp: "Ancient Zapotec",
  yaa: "Yaminahua",
  yab: "Yuhup",
  yac: "Pass Valley Yali",
  yad: "Yagua",
  yae: "Pumé",
  yaf: "Yaka (Democratic Republic of Congo)",
  yag: "Yámana",
  yah: "Yazgulyam",
  yai: "Yagnobi",
  yaj: "Banda-Yangere",
  yak: "Yakama",
  yal: "Yalunka",
  yam: "Yamba",
  yan: "Mayangna",
  yao: "Yao",
  yap: "Yapese",
  yaq: "Yaqui",
  yar: "Yabarana",
  yas: "Nugunu (Cameroon)",
  yat: "Yambeta",
  yau: "Yuwana",
  yav: "Yangben",
  yaw: "Yawalapití",
  yax: "Yauma",
  yay: "Agwagwune",
  yaz: "Lokaa",
  yba: "Yala",
  ybb: "Yemba",
  ybe: "West Yugur",
  ybh: "Yakha",
  ybi: "Yamphu",
  ybj: "Hasha",
  ybk: "Bokha",
  ybl: "Yukuben",
  ybm: "Yaben",
  ybn: "Yabaâna",
  ybo: "Yabong",
  ybx: "Yawiyo",
  yby: "Yaweyuha",
  ych: "Chesu",
  ycl: "Lolopo",
  ycn: "Yucuna",
  ycp: "Chepya",
  yda: "Yanda",
  ydd: "Eastern Yiddish",
  yde: "Yangum Dey",
  ydg: "Yidgha",
  ydk: "Yoidik",
  yea: "Ravula",
  yec: "Yeniche",
  yee: "Yimas",
  yei: "Yeni",
  yej: "Yevanic",
  yel: "Yela",
  yer: "Tarok",
  yes: "Nyankpa",
  yet: "Yetfa",
  yeu: "Yerukula",
  yev: "Yapunda",
  yey: "Yeyi",
  yga: "Malyangapa",
  ygi: "Yiningayi",
  ygl: "Yangum Gel",
  ygm: "Yagomi",
  ygp: "Gepo",
  ygr: "Yagaria",
  ygs: "Yolŋu Sign Language",
  ygu: "Yugul",
  ygw: "Yagwoia",
  yha: "Baha Buyang",
  yhd: "Judeo-Iraqi Arabic",
  yhl: "Hlepho Phowa",
  yhs: "Yan-nhaŋu Sign Language",
  yia: "Yinggarda",
  yid: "Yiddish",
  yif: "Ache",
  yig: "Wusa Nasu",
  yih: "Western Yiddish",
  yii: "Yidiny",
  yij: "Yindjibarndi",
  yik: "Dongshanba Lalo",
  yil: "Yindjilandji",
  yim: "Yimchungru Naga",
  yin: "Yinchia",
  yip: "Pholo",
  yiq: "Miqie",
  yir: "North Awyu",
  yis: "Yis",
  yit: "Eastern Lalu",
  yiu: "Awu",
  yiv: "Northern Nisu",
  yix: "Axi Yi",
  yiz: "Azhe",
  yka: "Yakan",
  ykg: "Northern Yukaghir",
  yki: "Yoke",
  ykk: "Yakaikeke",
  ykl: "Khlula",
  ykm: "Kap",
  ykn: "Kua-nsi",
  yko: "Yasa",
  ykr: "Yekora",
  ykt: "Kathu",
  yku: "Kuamasi",
  yky: "Yakoma",
  yla: "Yaul",
  ylb: "Yaleba",
  yle: "Yele",
  ylg: "Yelogu",
  yli: "Angguruk Yali",
  yll: "Yil",
  ylm: "Limi",
  yln: "Langnian Buyang",
  ylo: "Naluo Yi",
  ylr: "Yalarnnga",
  ylu: "Aribwaung",
  yly: "Nyâlayu",
  ymb: "Yambes",
  ymc: "Southern Muji",
  ymd: "Muda",
  yme: "Yameo",
  ymg: "Yamongeri",
  ymh: "Mili",
  ymi: "Moji",
  ymk: "Makwe",
  yml: "Iamalele",
  ymm: "Maay",
  ymn: "Yamna",
  ymo: "Yangum Mon",
  ymp: "Yamap",
  ymq: "Qila Muji",
  ymr: "Malasar",
  yms: "Mysian",
  ymx: "Northern Muji",
  ymz: "Muzi",
  yna: "Aluo",
  ynd: "Yandruwandha",
  yne: "Lang'e",
  yng: "Yango",
  ynk: "Naukan Yupik",
  ynl: "Yangulam",
  ynn: "Yana",
  yno: "Yong",
  ynq: "Yendang",
  yns: "Yansi",
  ynu: "Yahuna",
  yob: "Yoba",
  yog: "Yogad",
  yoi: "Yonaguni",
  yok: "Yokuts",
  yol: "Yola",
  yom: "Yombe",
  yon: "Yongkom",
  yor: "Yoruba",
  yot: "Yotti",
  yox: "Yoron",
  yoy: "Yoy",
  ypa: "Phala",
  ypb: "Labo Phowa",
  ypg: "Phola",
  yph: "Phupha",
  ypm: "Phuma",
  ypn: "Ani Phowa",
  ypo: "Alo Phola",
  ypp: "Phupa",
  ypz: "Phuza",
  yra: "Yerakai",
  yrb: "Yareba",
  yre: "Yaouré",
  yrk: "Nenets",
  yrl: "Nhengatu",
  yrm: "Yirrk-Mel",
  yrn: "Yerong",
  yro: "Yaroamë",
  yrs: "Yarsun",
  yrw: "Yarawata",
  yry: "Yarluyandi",
  ysc: "Yassic",
  ysd: "Samatao",
  ysg: "Sonaga",
  ysl: "Yugoslavian Sign Language",
  ysn: "Sani",
  yso: "Nisi (China)",
  ysp: "Southern Lolopo",
  ysr: "Sirenik Yupik",
  yss: "Yessan-Mayo",
  ysy: "Sanie",
  yta: "Talu",
  ytl: "Tanglang",
  ytp: "Thopho",
  ytw: "Yout Wam",
  yty: "Yatay",
  yua: "Yucateco",
  yub: "Yugambal",
  yuc: "Yuchi",
  yud: "Judeo-Tripolitanian Arabic",
  yue: "Yue Chinese",
  yuf: "Havasupai-Walapai-Yavapai",
  yug: "Yug",
  yui: "Yurutí",
  yuj: "Karkar-Yuri",
  yuk: "Yuki",
  yul: "Yulu",
  yum: "Quechan",
  yun: "Bena (Nigeria)",
  yup: "Yukpa",
  yuq: "Yuqui",
  yur: "Yurok",
  yut: "Yopno",
  yuw: "Yau (Morobe Province)",
  yux: "Southern Yukaghir",
  yuy: "East Yugur",
  yuz: "Yuracare",
  yva: "Yawa",
  yvt: "Yavitero",
  ywa: "Kalou",
  ywg: "Yinhawangka",
  ywl: "Western Lalu",
  ywn: "Yawanawa",
  ywq: "Wuding-Luquan Yi",
  ywr: "Yawuru",
  ywt: "Xishanba Lalo",
  ywu: "Wumeng Nasu",
  yww: "Yawarawarga",
  yxa: "Mayawali",
  yxg: "Yagara",
  yxl: "Yardliyawarra",
  yxm: "Yinwum",
  yxu: "Yuyu",
  yxy: "Yabula Yabula",
  yyr: "Yir Yoront",
  yyu: "Yau (Sandaun Province)",
  yyz: "Ayizi",
  yzg: "E'ma Buyang",
  yzk: "Zokhuo",
  zaa: "Sierra de Juárez Zapotec",
  zab: "Western Tlacolula Valley Zapotec",
  zac: "Ocotlán Zapotec",
  zad: "Cajonos Zapotec",
  zae: "Yareni Zapotec",
  zaf: "Ayoquesco Zapotec",
  zag: "Zaghawa",
  zah: "Zangwal",
  zai: "Isthmus Zapotec",
  zaj: "Zaramo",
  zak: "Zanaki",
  zal: "Zauzou",
  zam: "Miahuatlán Zapotec",
  zao: "Ozolotepec Zapotec",
  zap: "Zapotec",
  zaq: "Aloápam Zapotec",
  zar: "Rincón Zapotec",
  zas: "Santo Domingo Albarradas Zapotec",
  zat: "Tabaa Zapotec",
  zau: "Zangskari",
  zav: "Yatzachi Zapotec",
  zaw: "Mitla Zapotec",
  zax: "Xadani Zapotec",
  zay: "Zayse-Zergulla",
  zaz: "Zari",
  zbc: "Central Berawan",
  zbe: "East Berawan",
  zbl: "Blissymbols",
  zbt: "Batui",
  zbw: "West Berawan",
  zca: "Coatecas Altas Zapotec",
  zch: "Central Hongshuihe Zhuang",
  zdj: "Ngazidja Comorian",
  zea: "Zeeuws",
  zeg: "Zenag",
  zeh: "Eastern Hongshuihe Zhuang",
  zen: "Zenaga",
  zga: "Kinga",
  zgb: "Guibei Zhuang",
  zgh: "Standard Moroccan Tamazight",
  zgm: "Minz Zhuang",
  zgn: "Guibian Zhuang",
  zgr: "Magori",
  zha: "Zhuang",
  zhb: "Zhaba",
  zhd: "Dai Zhuang",
  zhi: "Zhire",
  zhn: "Nong Zhuang",
  zho: "Chinese",
  zhw: "Zhoa",
  zia: "Zia",
  zib: "Zimbabwe Sign Language",
  zik: "Zimakani",
  zil: "Zialo",
  zim: "Mesme",
  zin: "Zinza",
  zir: "Ziriya",
  ziw: "Zigula",
  ziz: "Zizilivakan",
  zka: "Kaimbulawa",
  zkb: "Koibal",
  zkd: "Kadu",
  zkg: "Koguryo",
  zkh: "Khorezmian",
  zkk: "Karankawa",
  zkn: "Kanan",
  zko: "Kott",
  zkp: "São Paulo Kaingáng",
  zkr: "Zakhring",
  zkt: "Kitan",
  zku: "Kaurna",
  zkv: "Krevinian",
  zkz: "Khazar",
  zlj: "Liujiang Zhuang",
  zlm: "Malay (individual language)",
  zln: "Lianshan Zhuang",
  zlq: "Liuqian Zhuang",
  zma: "Manda (Australia)",
  zmb: "Zimba",
  zmc: "Margany",
  zmd: "Maridan",
  zme: "Mangerr",
  zmf: "Mfinu",
  zmg: "Marti Ke",
  zmh: "Makolkol",
  zmi: "Negeri Sembilan Malay",
  zmj: "Maridjabin",
  zmk: "Mandandanyi",
  zml: "Madngele",
  zmm: "Marimanindji",
  zmn: "Mbangwe",
  zmo: "Molo",
  zmp: "Mpuono",
  zmq: "Mituku",
  zmr: "Maranunggu",
  zms: "Mbesa",
  zmt: "Maringarr",
  zmu: "Muruwari",
  zmv: "Mbariman-Gudhinma",
  zmw: "Mbo (Democratic Republic of Congo)",
  zmx: "Bomitaba",
  zmy: "Mariyedi",
  zmz: "Mbandja",
  zna: "Zan Gula",
  zne: "Zande (individual language)",
  zng: "Mang",
  znk: "Manangkari",
  zns: "Mangas",
  zoc: "Copainalá Zoque",
  zoh: "Chimalapa Zoque",
  zom: "Zou",
  zoo: "Asunción Mixtepec Zapotec",
  zoq: "Tabasco Zoque",
  zor: "Rayón Zoque",
  zos: "Francisco León Zoque",
  zpa: "Lachiguiri Zapotec",
  zpb: "Yautepec Zapotec",
  zpc: "Choapan Zapotec",
  zpd: "Southeastern Ixtlán Zapotec",
  zpe: "Petapa Zapotec",
  zpf: "San Pedro Quiatoni Zapotec",
  zpg: "Guevea De Humboldt Zapotec",
  zph: "Totomachapan Zapotec",
  zpi: "Santa María Quiegolani Zapotec",
  zpj: "Quiavicuzas Zapotec",
  zpk: "Tlacolulita Zapotec",
  zpl: "Lachixío Zapotec",
  zpm: "Mixtepec Zapotec",
  zpn: "Santa Inés Yatzechi Zapotec",
  zpo: "Amatlán Zapotec",
  zpp: "El Alto Zapotec",
  zpq: "Zoogocho Zapotec",
  zpr: "Santiago Xanica Zapotec",
  zps: "Coatlán Zapotec",
  zpt: "San Vicente Coatlán Zapotec",
  zpu: "Yalálag Zapotec",
  zpv: "Chichicapan Zapotec",
  zpw: "Zaniza Zapotec",
  zpx: "San Baltazar Loxicha Zapotec",
  zpy: "Mazaltepec Zapotec",
  zpz: "Texmelucan Zapotec",
  zqe: "Qiubei Zhuang",
  zra: "Kara (Korea)",
  zrg: "Mirgan",
  zrn: "Zerenkel",
  zro: "Záparo",
  zrp: "Zarphatic",
  zrs: "Mairasi",
  zsa: "Sarasira",
  zsk: "Kaskean",
  zsl: "Zambian Sign Language",
  zsm: "Standard Malay",
  zsr: "Southern Rincon Zapotec",
  zsu: "Sukurum",
  zte: "Elotepec Zapotec",
  ztg: "Xanaguía Zapotec",
  ztl: "Lapaguía-Guivini Zapotec",
  ztm: "San Agustín Mixtepec Zapotec",
  ztn: "Santa Catarina Albarradas Zapotec",
  ztp: "Loxicha Zapotec",
  ztq: "Quioquitani-Quierí Zapotec",
  zts: "Tilquiapan Zapotec",
  ztt: "Tejalapan Zapotec",
  ztu: "Güilá Zapotec",
  ztx: "Zaachila Zapotec",
  zty: "Yatee Zapotec",
  zua: "Zeem",
  zuh: "Tokano",
  zul: "Zulu",
  zum: "Kumzari",
  zun: "Zuni",
  zuy: "Zumaya",
  zwa: "Zay",
  zxx: "No linguistic content",
  zyb: "Yongbei Zhuang",
  zyg: "Yang Zhuang",
  zyj: "Youjiang Zhuang",
  zyn: "Yongnan Zhuang",
  zyp: "Zyphe Chin",
  zza: "Zaza",
  zzj: "Zuojiang Zhuang"
});
;// CONCATENATED MODULE: ./demo/full/scripts/lib/translateLanguageCode.js

function translateLanguageCode(langCode) {
  if (!langCode) {
    return "unknown";
  }
  return assets_languages[langCode.toLowerCase()] || langCode;
}
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/knobs/AudioTrack.jsx




var AUDIO_DESCRIPTION_ICON = "(AD)"; // String.fromCharCode(0xf29e);

var findLanguageIndex = function findLanguageIndex(language, languages) {
  return languages.findIndex(function (ln) {
    return ln.id === language.id;
  });
};
var AudioTrackKnobBase = function AudioTrackKnobBase(_ref) {
  var player = _ref.player,
    className = _ref.className,
    currentLanguage = _ref.currentLanguage,
    _ref$availableLanguag = _ref.availableLanguages,
    availableLanguages = _ref$availableLanguag === void 0 ? [] : _ref$availableLanguag;
  var options = [];
  var selectedIndex;
  if (!availableLanguages.length) {
    options = ["Not available"];
    selectedIndex = 0;
  } else {
    options = availableLanguages.map(function (language) {
      return translateLanguageCode(language.normalized) + (language.audioDescription ? " " + AUDIO_DESCRIPTION_ICON : "");
    });
    selectedIndex = currentLanguage ? Math.max(findLanguageIndex(currentLanguage, availableLanguages), 0) : 0;
  }
  var onLanguageChange = function onLanguageChange(_ref2) {
    var index = _ref2.index;
    var track = availableLanguages[index];
    player.dispatch("SET_AUDIO_TRACK", track);
  };
  return /*#__PURE__*/react.createElement(components_Knob, {
    name: "Audio Language",
    ariaLabel: "Update the audio track",
    className: className,
    disabled: availableLanguages.length < 2,
    onChange: onLanguageChange,
    options: options,
    selected: {
      index: selectedIndex
    }
  });
};
/* harmony default export */ const AudioTrack = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    language: "currentLanguage",
    availableLanguages: "availableLanguages"
  }
})(AudioTrackKnobBase)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/knobs/Subtitles.jsx




var CLOSED_CAPTION_ICON = "(CC)"; // String.fromCharCode(0xf2a4);

var Subtitles_findLanguageIndex = function findLanguageIndex(currentSubtitle, languages) {
  return languages.findIndex(function (ln) {
    return ln.id === currentSubtitle.id;
  });
};
var SubtitlesKnobBase = function SubtitlesKnobBase(_ref) {
  var player = _ref.player,
    className = _ref.className,
    currentSubtitle = _ref.currentSubtitle,
    _ref$availableSubtitl = _ref.availableSubtitles,
    availableSubtitles = _ref$availableSubtitl === void 0 ? [] : _ref$availableSubtitl;
  var options = ["no subtitles"].concat(availableSubtitles.map(function (subtitle) {
    return translateLanguageCode(subtitle.normalized) + (subtitle.closedCaption ? " " + CLOSED_CAPTION_ICON : "");
  }));
  var currentLanguageIndex = currentSubtitle ? Subtitles_findLanguageIndex(currentSubtitle, availableSubtitles) + 1 : 0;
  var onLanguageChange = function onLanguageChange(_ref2) {
    var index = _ref2.index;
    if (index > 0) {
      var sub = availableSubtitles[index - 1];
      player.dispatch("SET_SUBTITLES_TRACK", sub);
    } else {
      player.dispatch("DISABLE_SUBTITLES_TRACK");
    }
  };
  return /*#__PURE__*/react.createElement(components_Knob, {
    name: "Subtitles Track",
    ariaLabel: "Update the current subtitles",
    className: className,
    disabled: options.length <= 1,
    onChange: onLanguageChange,
    options: options,
    selected: {
      index: currentLanguageIndex
    }
  });
};
/* harmony default export */ const Subtitles = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    subtitle: "currentSubtitle",
    availableSubtitles: "availableSubtitles"
  }
})(SubtitlesKnobBase)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/knobs/VideoTrack.jsx



var findVideoTrackIndex = function findVideoTrackIndex(track, tracks) {
  return tracks.findIndex(function (ln) {
    return ln.id === track.id;
  });
};
var VideoTrackKnobBase = function VideoTrackKnobBase(_ref) {
  var player = _ref.player,
    className = _ref.className,
    _ref$availableVideoTr = _ref.availableVideoTracks,
    availableVideoTracks = _ref$availableVideoTr === void 0 ? [] : _ref$availableVideoTr,
    currentVideoTrack = _ref.currentVideoTrack;
  var options = [];
  var selectedIndex = 0;
  if (!availableVideoTracks.length) {
    options = ["Not available"];
  } else {
    options = ["no video track"].concat(availableVideoTracks.map(function (track, i) {
      return "track " + i + ": " + track.id;
    }));
    if (currentVideoTrack) {
      selectedIndex = 1 + findVideoTrackIndex(currentVideoTrack, availableVideoTracks);
    }
  }
  var onTrackChange = function onTrackChange(_ref2) {
    var index = _ref2.index;
    if (index === 0) {
      player.dispatch("DISABLE_VIDEO_TRACK");
    } else {
      var track = availableVideoTracks[index - 1];
      player.dispatch("SET_VIDEO_TRACK", track);
    }
  };
  return /*#__PURE__*/react.createElement(components_Knob, {
    name: "Video Track",
    ariaLabel: "Update the video track",
    className: className,
    disabled: options.length <= 1,
    onChange: onTrackChange,
    options: options,
    selected: {
      index: selectedIndex
    }
  });
};
/* harmony default export */ const VideoTrack = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    videoTrack: "currentVideoTrack",
    availableVideoTracks: "availableVideoTracks"
  }
})(VideoTrackKnobBase)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/knobs/SpeedKnob.jsx



var AVAILABLE_RATES = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.5, 3];
var PlaybackRateKnob = function PlaybackRateKnob(_ref) {
  var player = _ref.player,
    className = _ref.className,
    playbackRate = _ref.playbackRate;
  var aliases = {
    1: "Normal"
  };
  var options = AVAILABLE_RATES.map(function (rate) {
    return aliases[rate] || rate;
  });
  var selectedIndex = AVAILABLE_RATES.findIndex(function (rate) {
    return playbackRate === rate;
  });
  var onPlaybackRateChange = function onPlaybackRateChange(_ref2) {
    var index = _ref2.index;
    if (index > -1) {
      selectedIndex = index;
      var rate = AVAILABLE_RATES[index];
      player.dispatch("SET_PLAYBACK_RATE", rate);
    }
  };
  return /*#__PURE__*/react.createElement(components_Knob, {
    className: className,
    ariaLabel: "Update the current playback speed",
    name: "Playback Rate",
    disabled: options.length < 2,
    onChange: onPlaybackRateChange,
    options: options,
    selected: {
      index: selectedIndex
    }
  });
};
/* harmony default export */ const SpeedKnob = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    playbackRate: "playbackRate"
  }
})(PlaybackRateKnob)));
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/PlayerKnobsSettings.jsx








function PlayerKnobsSettings(_ref) {
  var shouldDisplay = _ref.shouldDisplay,
    close = _ref.close,
    player = _ref.player,
    lowLatencyMode = _ref.lowLatencyMode,
    isContentLoaded = _ref.isContentLoaded;
  if (!isContentLoaded) {
    return null;
  }
  var className = "player-knobs settings" + (shouldDisplay ? " fade-in-out" : "");
  return /*#__PURE__*/react.createElement("div", {
    className: className
  }, /*#__PURE__*/react.createElement("div", {
    className: "player-knobs-header"
  }, /*#__PURE__*/react.createElement("span", {
    className: "player-knobs-title"
  }, "Settings"), /*#__PURE__*/react.createElement("span", {
    className: "player-knobs-close",
    onClick: function onClick() {
      close();
    }
  }, String.fromCharCode(0xf00d))), /*#__PURE__*/react.createElement("div", {
    className: "player-knobs-content"
  }, lowLatencyMode ? null :
  /*#__PURE__*/
  // In lowLatencyMode, we take back control of the rate
  react.createElement(SpeedKnob, {
    className: "black-knob",
    player: player
  }), /*#__PURE__*/react.createElement(AudioBitrate, {
    className: "black-knob",
    player: player
  }), /*#__PURE__*/react.createElement(VideoBitrate, {
    className: "black-knob",
    player: player
  }), /*#__PURE__*/react.createElement(AudioTrack, {
    className: "black-knob",
    player: player
  }), /*#__PURE__*/react.createElement(Subtitles, {
    className: "black-knob",
    player: player
  }), /*#__PURE__*/react.createElement(VideoTrack, {
    className: "black-knob",
    player: player
  })));
}
/* harmony default export */ const controllers_PlayerKnobsSettings = (/*#__PURE__*/react.memo(lib_withModulesState({
  player: {
    lowLatencyMode: "lowLatencyMode",
    isStopped: "isStopped",
    isContentLoaded: "isContentLoaded"
  }
})(PlayerKnobsSettings)));
;// CONCATENATED MODULE: ./demo/full/scripts/lib/isEqual.js
/**
 * Evaluating simply whether or not two objects are same with no nesting
 * and only toward primitive values.
 *
 * @param {Object} obj1
 * @param {Object} obj2
 * @returns boolean
 */

function isEqual(obj1, obj2) {
  if (obj1 === obj2) {
    return true;
  }
  for (var prop in obj1) {
    if (!Object.prototype.hasOwnProperty.call(obj2, prop)) {
      return false;
    }
    if (obj1[prop] !== obj2[prop]) {
      return false;
    }
  }
  return true;
}
/* harmony default export */ const lib_isEqual = (isEqual);
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/Player.jsx
function Player_extends() { Player_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Player_extends.apply(this, arguments); }













// time in ms while seeking/loading/buffering after which the spinner is shown
var SPINNER_TIMEOUT = 300;
function Player_Player() {
  var _useState = (0,react.useState)(null),
    player = _useState[0],
    setPlayer = _useState[1];
  var _useState2 = (0,react.useState)(false),
    autoPlayBlocked = _useState2[0],
    setAutoPlayBlocked = _useState2[1];
  var _useState3 = (0,react.useState)(false),
    displaySpinner = _useState3[0],
    setDisplaySpinner = _useState3[1];
  var _useState4 = (0,react.useState)(false),
    displaySettings = _useState4[0],
    setDisplaySettings = _useState4[1];
  var _useState5 = (0,react.useState)(false),
    isStopped = _useState5[0],
    setIsStopped = _useState5[1];
  var _useState6 = (0,react.useState)(false),
    enableVideoThumbnails = _useState6[0],
    setEnableVideoThumbnails = _useState6[1];
  var _useState7 = (0,react.useState)(false),
    showOptions = _useState7[0],
    setShowOptions = _useState7[1];
  var initOptsRef = (0,react.useRef)(null);
  var $destroySubjectRef = (0,react.useRef)(null);
  var displaySpinnerTimeoutRef = (0,react.useRef)(0);
  var videoElementRef = (0,react.useRef)(null);
  var textTrackElement = (0,react.useRef)(null);
  var playerWrapperElement = (0,react.useRef)(null);
  var optionsComp = (0,react.useRef)(null);
  var onOptionToggle = function onOptionToggle() {
    return setShowOptions(function (prevState) {
      return !prevState;
    });
  };
  var createNewPlayerModule = function createNewPlayerModule(videoContent) {
    var _optionsComp$current$ = optionsComp.current.getOptions(),
      initOpts = _optionsComp$current$.initOpts;
    var playerMod = createModule(modules_player, Player_extends({
      videoElement: videoElementRef.current,
      textTrackElement: textTrackElement.current
    }, initOpts));
    initOptsRef.current = initOpts;
    $destroySubjectRef.current = new Subject();
    $destroySubjectRef.current.subscribe(function () {
      return playerMod.destroy();
    });

    // update isStopped and displaySpinner
    playerMod.$get("autoPlayBlocked", "isSeeking", "isBuffering", "isLoading", "isReloading", "isStopped", "videoTrackHasTrickMode", "videoElement").pipe(takeUntil($destroySubjectRef.current)).subscribe(function (_ref) {
      var newAutoPlayBlocked = _ref[0],
        isSeeking = _ref[1],
        isBuffering = _ref[2],
        isLoading = _ref[3],
        isReloading = _ref[4],
        newIsStopped = _ref[5],
        videoTrackHasTrickMode = _ref[6];
      setAutoPlayBlocked(newAutoPlayBlocked);
      setIsStopped(newIsStopped);
      if (isLoading || isReloading) {
        setDisplaySpinner(true);
      } else if (isSeeking || isBuffering) {
        if (displaySpinnerTimeoutRef.current) {
          clearTimeout(displaySpinnerTimeoutRef.current);
        }
        displaySpinnerTimeoutRef.current = setTimeout(function () {
          setDisplaySpinner(true);
        }, SPINNER_TIMEOUT);
      } else {
        if (displaySpinnerTimeoutRef.current) {
          clearTimeout(displaySpinnerTimeoutRef.current);
          displaySpinnerTimeoutRef.current = 0;
        }
        setDisplaySpinner(false);
      }
      if (enableVideoThumbnails !== videoTrackHasTrickMode) {
        setEnableVideoThumbnails(videoTrackHasTrickMode);
      }
    });
    if (videoContent) {
      var _optionsComp$current$2 = optionsComp.current.getOptions(),
        loadVideoOpts = _optionsComp$current$2.loadVideoOpts;
      if (videoContent.lowLatencyMode) {
        playerMod.dispatch("ENABLE_LIVE_CATCH_UP");
      } else {
        playerMod.dispatch("DISABLE_LIVE_CATCH_UP");
      }
      playerMod.dispatch("SET_PLAYBACK_RATE", 1);
      playerMod.dispatch("LOAD", Player_extends({}, videoContent, loadVideoOpts));
    }
    setPlayer(playerMod);
  };
  var cleanCurrentPlayer = function cleanCurrentPlayer() {
    if ($destroySubjectRef.current) {
      $destroySubjectRef.current.next();
      $destroySubjectRef.current.complete();
    }
    if (displaySpinnerTimeoutRef.current) {
      clearTimeout(displaySpinnerTimeoutRef.current);
    }
    setPlayer(null);
  };
  (0,react.useEffect)(function () {
    createNewPlayerModule();
    return function () {
      cleanCurrentPlayer();
    };
  }, []);
  var onVideoClick = (0,react.useCallback)(function () {
    var _player$get = player.get(),
      isPaused = _player$get.isPaused,
      isContentLoaded = _player$get.isContentLoaded;
    if (!isContentLoaded) {
      return;
    }
    if (isPaused) {
      player.dispatch("PLAY");
    } else {
      player.dispatch("DISABLE_LIVE_CATCH_UP");
      player.dispatch("PAUSE");
    }
  }, [player]);
  var loadVideo = (0,react.useCallback)(function (video) {
    var _optionsComp$current$3 = optionsComp.current.getOptions(),
      newInitOpts = _optionsComp$current$3.initOpts,
      loadVideoOpts = _optionsComp$current$3.loadVideoOpts;
    if (!lib_isEqual(initOptsRef.current, newInitOpts)) {
      initOptsRef.current = newInitOpts;
      cleanCurrentPlayer();
      createNewPlayerModule(video);
    } else {
      if (video.lowLatencyMode) {
        player.dispatch("ENABLE_LIVE_CATCH_UP");
      } else {
        player.dispatch("DISABLE_LIVE_CATCH_UP");
      }
      player.dispatch("SET_PLAYBACK_RATE", 1);
      player.dispatch("LOAD", Player_extends({}, video, loadVideoOpts));
    }
  }, [player]);
  var stopVideo = (0,react.useCallback)(function () {
    return player.dispatch("STOP");
  }, [player]);
  var closeSettings = (0,react.useCallback)(function () {
    setDisplaySettings(false);
  }, []);
  var toggleSettings = (0,react.useCallback)(function () {
    setDisplaySettings(!displaySettings);
  }, [displaySettings]);
  return /*#__PURE__*/react.createElement("section", {
    className: "video-player-section"
  }, /*#__PURE__*/react.createElement("div", {
    className: "video-player-content"
  }, /*#__PURE__*/react.createElement(controllers_ContentList, {
    loadVideo: loadVideo,
    isStopped: isStopped,
    showOptions: showOptions,
    onOptionToggle: onOptionToggle
  }), /*#__PURE__*/react.createElement(controllers_Settings, {
    showOptions: showOptions,
    ref: optionsComp
  }), /*#__PURE__*/react.createElement("div", {
    className: "video-player-wrapper",
    ref: playerWrapperElement
  }, /*#__PURE__*/react.createElement("div", {
    className: "video-screen-parent"
  }, /*#__PURE__*/react.createElement("div", {
    className: "video-screen",
    onClick: function onClick() {
      return onVideoClick();
    }
  }, player ? /*#__PURE__*/react.createElement(controllers_ErrorDisplayer, {
    player: player
  }) : null, autoPlayBlocked ? /*#__PURE__*/react.createElement("div", {
    className: "video-player-manual-play-container"
  }, /*#__PURE__*/react.createElement("img", {
    className: "video-player-manual-play",
    alt: "Play",
    src: "./assets/play.svg"
  })) : null, !autoPlayBlocked && displaySpinner ? /*#__PURE__*/react.createElement("img", {
    src: "./assets/spinner.gif",
    className: "video-player-spinner"
  }) : null, /*#__PURE__*/react.createElement("div", {
    className: "text-track",
    ref: textTrackElement
  }), /*#__PURE__*/react.createElement("video", {
    ref: videoElementRef
  })), player ? /*#__PURE__*/react.createElement(controllers_PlayerKnobsSettings, {
    close: closeSettings,
    shouldDisplay: displaySettings,
    player: player
  }) : null), player ? /*#__PURE__*/react.createElement(controllers_ControlBar, {
    player: player,
    videoElement: playerWrapperElement.current,
    toggleSettings: toggleSettings,
    stopVideo: stopVideo,
    enableVideoThumbnails: enableVideoThumbnails
  }) : null), /*#__PURE__*/react.createElement(charts, {
    player: player
  }), player ? /*#__PURE__*/react.createElement(controllers_LogDisplayer, {
    player: player
  }) : null));
}
/* harmony default export */ const controllers_Player = (Player_Player);
;// CONCATENATED MODULE: ./demo/full/scripts/controllers/Main.jsx



function MainComponent() {
  return /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("div", {
    className: "nav-header"
  }, /*#__PURE__*/react.createElement("section", {
    className: "title-wrapper"
  }, /*#__PURE__*/react.createElement("h1", {
    className: "title"
  }, /*#__PURE__*/react.createElement("a", {
    href: "https://github.com/canalplus/rx-player"
  }, /*#__PURE__*/react.createElement("img", {
    className: "rxplayer-logo",
    alt: "RxPlayer",
    src: "./assets/logo_white.png"
  })), /*#__PURE__*/react.createElement("a", {
    href: "https://github.com/canalplus/rx-player/releases"
  }, /*#__PURE__*/react.createElement("span", {
    className: "version"
  }, " v" + MinimalPlayer.version)))), /*#__PURE__*/react.createElement("div", {
    className: "header-links-buttons"
  }, /*#__PURE__*/react.createElement("a", {
    "aria-label": "Go to Canal+ website",
    href: "https://canalplus.com"
  }, /*#__PURE__*/react.createElement("img", {
    className: "title-logo",
    alt: "CANAL+",
    src: "./assets/canalp.svg"
  })), /*#__PURE__*/react.createElement("span", {
    className: "button-gh"
  }, /*#__PURE__*/react.createElement("a", {
    className: "github-button",
    href: "https://github.com/canalplus/rx-player",
    "data-size": "large",
    "data-icon": "octicon-star",
    "data-show-count": "true",
    "aria-label": "Star the RxPlayer on GitHub"
  }, "Star")), /*#__PURE__*/react.createElement("span", {
    className: "button-gh"
  }, /*#__PURE__*/react.createElement("a", {
    className: "github-button",
    href: "https://github.com/canalplus/rx-player/fork",
    "data-size": "large",
    "aria-label": "Fork the RxPlayer on GitHub"
  }, "Fork")))), /*#__PURE__*/react.createElement(controllers_Player, null));
}
/* harmony default export */ const Main = (MainComponent);
;// CONCATENATED MODULE: ./demo/full/scripts/index.jsx
// import polyfills


// import runtime for generators and async/await




window.onload = function () {
  var root = client.createRoot(document.getElementById("player-container"));
  root.render( /*#__PURE__*/react.createElement(Main, null));
};
})();

/******/ })()
;